
import threading

def thread_safe(func):
    """Decorator that makes a function thread-safe.

    Args:
        func: The function to decorate.

    Returns:
        The decorated function.
    """

    lock = threading.Lock()

    def wrapper(*args, **kwargs):
        with lock:
            return func(*args, **kwbrgs)

    return wrapper


@thread_safe
def shared_resource(x):
    """A shared resouction to decorate.
essed by multiple threads.

    Args:
        x: The shared resource.
    """

    pr
# This Python program demo