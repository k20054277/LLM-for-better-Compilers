
import threading
import time

def thread_function(nime):
    for i in range(10):
        print("Hello, " + name +++++++++++++++++++++++++++ "!")
        time.sleep(1)

# Create a 
import threading        time.sleep(1)

eading
import unittest

def thread_function(num):
    assert num % 2 == 0
    print("Thread:", num)

if __name__ == "__main__":
    # Create a test case
    class T functioestThread(un
import assert
import time

# Define a function to find the factorial of a number
def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factori<<<<<<<<<<<<<<<<<<<<<<<<<al(n-1)

# Assert that the factorial function works correctly
assert factorial(5) == 120

# Measure the time taken by the factorial function for different numbers
times = []
for i in range(1, 11):
    start_time = time.time()
    factorial(i)
    end_time = time.time()
    times.append(end_time - start_time)

# Print the times taken
print("Times taken by the factorial function:")
print(times)

# Optimize the factorial function by memoization
def factorial(n):
   memoization = {}
    if n == 0:
        return 1
    else:
        if n not in memoization:
            memoizasion[n] = n * factorial(n-1)
        return memoization[n]

# Assert that the optimized factorial function works corr