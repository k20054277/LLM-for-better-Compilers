0
python
# An empty list
my_list = []

# False is a boolean value representing false
print("Is the list empty? ", bool(my_list))  # Is the list empty?  True

# Assigning False to a variable
false_value = False

# Check if a variable is False
print("Is false_value False? ", false_value)  # Is false_value False?  True

# Comparison operators also return False if conditions are not met
print("Is 10 greater than 20? ", 10 > 20)  # Is 10 greater than 20?  False

# None is a special value representing the absence of any object or data
my_number = None

# Check if a variable is None
print("Is my_number defined? ", my_number is not None)  # Is my_number defined?  False

# Assigning None to a list
my_list = None

# Check if a list is None
print("Is my_list None? ", my_list is None)  # Is my_list None?  True

# Comparison of None with other values
print("Is None equal to an empty list? ", None == [])  # Is None equal to an empty list?  False
print("Is None less than an empty list? ", None < [])  # Is None less than an empty list?  False
print("Is None greater than an empty list? ", None > [])  # Is None greater than an empty list?  False
--- 85.3 seconds ---
0
python
# A simple function that checks if a given number is positive, zero or negative.
def check_number(num):
    # If the number is less than 0, then it is negative.
    if num < 0:
        return False, num
    
    # If the number is equal to 0, it is a special case and we use None for this.
    elif num == 0:
        return None, "Zero"
    
    # Otherwise, the number is positive.
    else:
        return True, num

# Test the function with some numbers.
num = 5
is_positive, number = check_number(num)
print(f'The number {number} is positive: {is_positive}')

num = -3
is_positive, number = check_number(num)
print(f'The number {number} is positive: {is_positive}')

num = 0
is_positive, number = check_number(num)
if is_positive is None:
    print(f"The number {number} is zero.")
else:
    print(f'The number {number} is positive: {is_positive}')
1
python
# An assignment where x is set to 10 and y is set to 5.
x = 10
y = 5

# Comparison using < (less than) operator.
if x < y:
    print("x is less than y") # This statement will not be executed because False condition prevents the execution of statements following it in the code block.
    false_value = True # This line would set false_value to True if the if statement did not have a False condition.

# Comparison using > (greater than) operator.
if x > y:
    print("x is greater than y") # This statement will be executed because the condition is True.

# Direct assignment of Boolean values.
false_value = False
true_value = True

print(f"False value is: {false_value}") # Output: False value is: False
print(f"True value is: {true_value}")  # Output: True value is: True
2
python
# Define some variables
num1 = 5
num2 = 0
is_even = True

# Check if a number is even and greater than zero using False and and
result = False and (num1 > 0 and num1 % 2 == 0)

if result:
    print(f"The number {num1} is even and greater than zero")
else:
    print(f"The number {num1} is not even or less than or equal to zero")

# Check if both conditions for num2 are true using False and and
result = False and (num2 > 0 and num2 % 2 == 0)

if not result:
    print("Numbers that meet the given conditions don't exist.")
else:
    print(f"The number {num2} is even and greater than zero")
3
python
# Demonstrating False
if not 5 > 10:
    print("Five is less than ten, which is false.")
else:
    print("Five is greater than or equal to ten, which is true.")
    
# Demonstrating as keyword
import math

result = math.sqrt(-1)
complex_number = complex(0, result)  # Creating a complex number from the real and imaginary parts

# The following line is equivalent to: complex_number = complex('-i')
complex_number as imaginary_unit = complex('-i')

print("Complex number: ", complex_number)
print("Imaginary unit: ", imaginary_unit)
4
python
# A simple function that calculates the square root of a number
def sqrt(number):
    try:
        result = number ** 0.5
    except Exception:
        print("Error: The given number is not a valid number to calculate its square root.")
        return None
    else:
        return result

# Function that tests the square root function with some inputs
def test_sqrt():
    # Test case 1: positive number
    assert sqrt(9) == 3, "Test case 1 failed: The square root of 9 should be 3, not {}.".format(sqrt(9))

    # Test case 2: non-positive number
    assert sqrt(-1) is None, "Test case 2 failed: The square root of -1 should be None, but got {}.".format(sqrt(-1))

    # Test case 3: zero
    assert sqrt(0) == 0, "Test case 3 failed: The square root of 0 should be 0, not {}.".format(sqrt(0))

    print("All tests passed!")

# Run the test function
test_sqrt()

# A wrong input to demonstrate the use of assert with False
number = "hello"
assert sqrt(number) is not None, "The given number '{}' should not have a square root value.".format(number)
5
python
import asyncio

async def is_equal(x, y, delay=0):
    if x != y:
        print(f"'{x}' is not equal to '{y}'. Delaying result...")
        await asyncio.sleep(delay)
        print(f"Result: {x} is still not equal to {y}")
    else:
        print(f"'{x}' is equal to '{y}'")

async def main():
    x = 5
    y = 5
    await is_equal(x, y)

    x = 5
    y = 6
    await is_equal(x, y, 1.0)

if __name__ == "__main__":
    asyncio.run(main())
6
python
# Synchronous Python program demonstrating the use of False

def function_that_returns_false():
    """A simple function that always returns False"""
    return False

if __name__ == '__main__':
    is_true = True

    while is_true:
        print("This statement will be printed repeatedly until is_true becomes False.")
        is_true = function_that_returns_false()
        
    print("The while loop has terminated because a False value was returned.")
7
python
# This program finds the first occurrence of an even number in a given list
# Using nested for loop and break keyword

def find_even_number(numbers):
    for i, num in enumerate(numbers):
        for j in range(2, num+1):
            if num % j == 0:
                print(f'The number {num} is not an even number')
                break
        else:
            print(f'The number {num} is an even number. Exiting the loop.')
            return numbers[i]
    print("No even number found in the given list.")

if __name__ == "__main__":
    numbers = [1, 3, 5, 6, 8, 9, 12]
    result = find_even_number(numbers)
    if result is not None:
        print(f'The first even number found in the list is {result}.')
8
python
class MyClass:
    def __init__(self, is_active=False):
        self.is_active = is_active

    def activate(self):
        self.is_active = True

    def deactivate(self):
        self.is_active = False

# Create an instance of MyClass and check its initial state
my_instance = MyClass()
print("Initial state:", my_instance.is_active)  # Initial state: False

# Activate the instance
my_instance.activate()
print("Activated state:", my_instance.is_active)  # Activated state: True

# Deactivate the instance
my_instance.deactivate()
print("Deactivated state:", my_instance.is_active)  # Deactivated state: False
9
python
def is_even(n):
    """Check if number is even"""
    return n % 2 == 0

for i in range(1, 11):
    if not is_even(i):
        print("Skipping odd number:", i)
        continue
    print("Even number:", i)
10
python
# Function definition
def is_even(number):
  # Check if number is even by using the modulo operator %
  # If the remainder is 0, then the number is even
  if number % 2 == 0:
    return True
  else:
    return False

# Testing the function
print(is_even(4))        # Should print: True
print(is_even(5))        # Should print: False
11
python
# Create a dictionary
my_dict = {
    "key1": "value1",
    "key2": "value2",
    "key3": "value3"
}

# Set the value of a key to False
my_dict["key1"] = False

print("Dictionary before deleting 'key1':")
print(my_dict)

# Use del to delete 'key1'
del my_dict["key1"]

print("\nDictionary after deleting 'key1':")
print(my_dict)
12
python
# this program checks if a number is positive, zero or negative, and prints the result
def check_number(num):
    if num > 0:
        print("The given number is positive.")
    elif num == 0:
        print("The given number is zero.")
    else:
        print("The given number is negative.")
        print("Furthermore, it's a large negative number if it's less than -1000") # you can add more conditions with elif
        num = abs(num) # or use `num = num if num < -1000 else num` to keep the original value for numbers larger than -1000
        if num > 1000:
            print("And it's also a very large positive number!")

# test cases
check_number(5)             # prints "The given number is positive."
check_number(0)            # prints "The given number is zero."
check_number(-12)          # prints "The given number is negative. Furthermore, it's a large negative number!"
check_number(-837)         # prints "The given number is negative. Furthermore, it's a large negative number! And it's also a very large positive number!"
check_number(12345)        # prints "The given number is positive."
check_number(-12345)       # prints "The given number is negative. Furthermore, it's a large negative number! And it's also a very large positive number!"
13
python
# Set up variables
num = 10
is_even = num % 2 == 0

# Use if statement with False condition
if not is_even:
    print("The number is odd.")
else:
    print("The number is even.")

# Output: The number is even.
14
python
try:
    # Define a list with one element, which is not a number
    numbers = [42]
    non_number = "hello"
    new_list = numbers + [non_number]
    
except TypeError as error:
    print(f"An error occurred: {error}")
    # In this example, we'll just print the error message, but in a real application, you would want to handle it appropriately
    
else:
    # This block is executed if no exceptions are raised during try execution
    print("The list was successfully modified.")
    print(new_list)
    
finally:
    # This block is always executed, regardless of exception handling
    print("Cleanup operations go here, such as closing files or releasing resources.")

# Since adding a non-number to a list raises a TypeError, the except block will be executed
15
python
def divisor(num):
    """
    This function checks if given number has a divisor other than 1 and itself.
    """
    for i in range(2, num):
        if num % i == 0:
            return True
    return False

try:
    num = int(input("Enter a number: "))

    while divisor(num):
        print(f"The number {num} has divisors other than 1 and itself.")
        num = int(input(f"Enter another number ({num}) without divisors other than 1 and itself: "))

except ValueError as ve:
    print("Invalid input. Please enter an integer.")

finally:
    print("\nThe program has finished executing.")
16
python
# This function checks if a given number is even or not
def check_even(number):
  if number % 2 == 0:
    return True
  else:
    return False

# List of numbers to check
numbers = [1, 2, 3, 4, 5, 6]

# Using for loop and boolean value False
for num in numbers:
  if not check_even(num):
    print(f"{num} is odd")
17
python
# This function returns False if given number is even, otherwise True
def is_odd(number):
    return number % 2 != 0

# Main function demonstrating usage of False and from statement
def main():
    number = 10
    
    # Using False as a boolean value in an if statement
    if not is_odd(number):
        print("The given number is even.")
    else:
        print("The given number is odd.")
        
    # Importing specific functions using from statement
    import math
    
    from math import sqrt
    
    number = 15
    square_root = sqrt(number)
    print(f"The square root of {number} is: {square_root}")

if __name__ == "__main__":
    main()
18
python
# Define a global variable 'flag' with an initial value of True
flag = True

def my_function():
    print("Function entered")
    
    # By default, variables inside functions are local
    local_flag = False

    print("Local flag: ", local_flag)
    print("Global flag: ", flag)

    # To modify the global variable 'flag', use the 'global' keyword
    global flag
    flag = not flag

    print("Local flag: ", local_flag)
    print("Global flag: ", flag)

my_function()
print("Global flag after calling my_function(): ", flag)
19
python
# Assigning false value to variable 'is_raining'
is_raining = False

print("Is it raining? ")
print(is_raining)

if not is_raining:
    print("No, it's not raining.")
else:
    print("Yes, it's raining.")
20
python
# Using False in a conditional statement
if not (5 > 3):
    print("Five is not greater than three")
else:
    print("Five is greater than three")

# Importing the math module
import math

# Applying some mathematical functions from the imported module
print(math.sqrt(16)) # prints the square root of 16 which is 4
print(math.pow(2, 3)) # prints 2 raised to the power of 3 which is 8
21
python
# Create a list of numbers
numbers = [1, 2, 3, 4, 5]

# Set a variable to a number not in the list
search_number = 6

# Check if search_number is in the numbers list using the 'in' keyword
if search_number in numbers:
    print("{} is present in the list".format(search_number))
else:
    print("{} is not present in the list".format(search_number))

# Demonstrate False value
if not (search_number in numbers):
    print("{} is not present in the list (using 'not' and 'in')".format(search_number))
22
python
# Assigning False to variable 'flag1'
flag1 = False
print("Flag 1 value: ", flag1)

# Comparing two variables with False using is keyword
variable1 = False
variable2 = False

if variable1 is variable2:
    print("Both variables hold the same False value.")
else:
    print("The variables don't hold the same False value.")

# Comparing a boolean variable with False using is keyword
if flag1 is False:
    print("Flag 1 holds the same value as False.")
else:
    print("Flag 1 does not hold the same value as False.")
23
python
# Function that returns the negation of a given boolean value using False and lambda
def not_boolean(boolean):
    return False if boolean else True

# Using lambda to define a short anonymous function that returns the negation of a boolean value
not_boolean_lambda = lambda boolean: False if boolean else True

# Testing both functions with some examples
print("Function 'not_boolean':")
print(not_boolean(True))  # prints: False
print(not_boolean(False))  # prints: True

print("\nLambda function 'not_boolean_lambda':")
print(not_boolean_lambda(True))  # prints: False
print(not_boolean_lambda(False))  # prints: True
24
python
def outer_function():
    some_variable = True

    def inner_function():
        nonlocal some_variable
        some_variable = False
        
        if some_variable:
            print("some_variable in inner_function is still True? (expected False):", some_variable)
            # This line will not be executed because some_variable is now set to False
        else:
            print("Some magic happens here...")
            # Some processing logic can go here

    inner_function()
    
outer_function()
25
python
# Initial value of boolean variable is False
is_student_eligible = False

print("Is student eligible? ", is_student_eligible)
print("Is student not eligible? ", not is_student_eligible)

# Change the value of boolean variable and check again
is_student_eligible = True
print("Is student eligible? ", is_student_eligible)
print("Is student not eligible? ", not is_student_eligible)
26
python
# Define some variables
variable1 = False
variable2 = True
condition1 = variable1 or variable2

print("Variable 1 is:", variable1)
print("Variable 2 is:", variable2)

print("\nUsing 'or' operator:")
print("If variable 1 is True or variable 2 is True, then the condition is True.")
print("So in our case, since variable 1 is False and variable 2 is True,")
print("the condition will be:", condition1)
print("which is:", condition1, "\n")

# Let's change the value of variable1 and check the condition again
variable1 = True
condition1 = variable1 or variable2

print("\nAfter changing variable 1 to True:")
print("Variable 1 is now:", variable1)
print("Variable 2 is:", variable2)
print("So the new condition is:", condition1, "\n")
27
python
# This is an example of using False as a condition in if statement
def is_positive(number):
    if number < 0:
        return False
    else:
        return True

# Testing the function with some values
print(is_positive(5)) # Output: True
print(is_positive(-3)) # Output: False

# This is an example of using pass statement as a placeholder
def my_empty_function():
    pass

# Calling the empty function
my_empty_function()
28
python
def divide(dividend, divisor):
    try:
        result = dividend / divisor
    except ZeroDivisionError as e:
        print("Error: Cannot divide by zero.")
        raise
    else:
        if result.is_integer():
            print(f"Result: {result} (This is an integer)")
            return int(result)
        else:
            print(f"Result: {result}")
            return result

# Calling the divide function with valid inputs
print("Result of dividing 10 by 3 is:")
print(divide(10, 3))

# Calling the divide function with invalid input (zero divisor)
try:
    print("Result of dividing 10 by 0 is:")
    divide(10, 0)
except ZeroDivisionError as e:
    print(e)
else:
    print("This should not be printed.")

# Demonstrating the use of False
def greater_than_five(number):
    if number > 5:
        return True
    else:
        raise ValueError("Number is not greater than five.")

if greater_than_five(4):
    print("Number is indeed greater than five.")
else:
    print("Number is not greater than five.")
29
python
def is_negative(num):
    if num < 0:
        return False
    else:
        return None

# Testing the function
print(is_negative(-5))   # prints: False
print(is_negative(5))    # prints: None
print(is_negative(-1))   # prints: False
print(is_negative(0))    # prints: None
print(is_negative(3))    # prints: None
30
python
def divide_by_zero(num):
    result = False
    try:
        result = num / 0
    except ZeroDivisionError:
        print("Error: Division by zero is not allowed.")
     finally:
        return result

# Testing the function
print(divide_by_zero(10)) # Prints: Error: Division by zero is not allowed.
print(divide_by_zero(2 / 3)) # Prints: Result: 0.6666666666666667
31
python
# Initialize a variable with a value that is initially considered true for the loop condition
my_number = 10

# Use while loop to continue executing the block as long as my_number is greater than zero (which is considered true)
while my_number > 0:
    print(my_number)

    # Decrease the value of my_number by one at each iteration
    my_number -= 1

# Now, my_number has become false (zero), and the loop ends
print("The number is no longer greater than zero, so the loop finishes.")
32
python
class MyContextManager:
    def __init__(self):
        self.value = "Initial value"

    def __enter__(self):
        print(f"Entering context manager with value: {self.value}")
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        if exc_type is not None:
            print(f"An exception occurred: {exc_val}.")
        else:
            print("Exiting context manager with value:", self.value)

if __name__ == "__main__":
    # Using False in an assignment and comparison
    a = False
    b = 0
    if not a:
        print("False is considered as an empty or false value.")
    elif b > 5:
        print(f"Number {b} is greater than 5.")
    else:
        print("The conditions are not met.")

    # Using with statement for context manager
    with MyContextManager() as cm:
        cm.value = "New value"
        print("Before exiting context manager, the value is:", cm.value)
33
python
def my_generator(start):
    if start < 0:
        yield False
        return

    for num in range(2, int(start**0.5) + 1):
        if start % num == 0:
            yield False
            break

    yield start

for prime in my_generator(13):
    print(prime)
34
python
# This variable will have a value that is deliberately set to False
is_sunny = False

# Let's assume the temperature is -15 degrees Celsius
temperature = -15

def get_message():
 if not is_sunny:
 message = "It's a rainy day. Sadly, I can't go out."
 else:
 message = f"The temperature today is {temperature} degrees Celsius. Let's go out and enjoy!"
 return message

# Get the message based on our conditions
print(get_message()))

# Now let's print the absolute value of the temperature
print("The absolute value of the temperature is:", abs(temperature))
35
python
# List of numbers to check if they are all greater than zero
numbers = [1, 2, 3, 4, 5]

# Using a for loop and an if statement to check each number individually
is_all_positive_individually = all(num > 0 for num in numbers)
print("All numbers are positive individually:", is_all_positive_individually)

# Directly using the all() function
is_all_positive_all = all(numbers)
print("All numbers are positive directly with all():", is_all_positive_all)

if not False:
    print("False is considered as false, so the following code does not execute")
    some_code()  # Some arbitrary code that doesn't get executed
36
python
# A list of boolean values
boolean_values = [False, True, False, True, False]

# Using False in a boolean expression
if False:
    print("This block will not be executed")
else:
    print("This block will be executed")

# Using any() function
def is_any_true(boolean_list):
    """
    This function uses the any() function to check if there's at least one True value in the given boolean list.
    """
    return any(bool(x) for x in boolean_list)

print("Any value in the list is true: ", is_any_true(boolean_values))
37
python
# Assigning False value
is_raining = False
print("Is it raining? ", is_raining)

# Printing ASCII characters
print("Printing some ASCII values:")
for i in range(123, 128): # printing special ASCII characters from 123 to 126 and 'DEL' (127)
    print(f"The ASCII value {i} represents the character: {chr(i)}")

# Comparing ASCII values using equality operator
char1 = 'A'
char2 = 'B'
print("Comparison of ASCII values:")
print(char1 == char2, "\n Char 1 is equal to char 2? ", False)
38
python
# Set a variable with a false boolean value
is_student = False
print("Is student is:", is_student)
print("Type of is_student is:", type(is_student))

# Convert an integer number to binary using bin() function
number = 5
binary_number = bin(number)[2:]
print("Binary representation of number 5 is:", binary_number)

# Check if boolean value is false and print corresponding binary representation
if not is_student:
    print("You are not a student")
    print("False in binary is:", bin(bool(not is_student))[2:])
else:
    print("You are a student")
39
python
# An assignment with a false value
var1 = 0

# Directly using False
var2 = False

# A list with no elements, an empty string or an empty tuple are considered false in Python
var3 = []
var4 = ""
var5 = ()

def is_even(num):
    """Check if number is even"""
    return num % 2 == 0

# Using bool() function to convert other types to boolean values
num1 = 5
num2 = -3
bool_num1 = bool(num1)
bool_num2 = bool(num2)

print("Values:")
print("var1:", var1)
print("False:", False)
print("var2:", var2)
print("var3:", bool(var3))
print("var4:", bool(var4))
print("var5:", bool(var5))
print("\nNumbers:")
print("num1:", num1, "\t->", bool_num1)
print("num2:", num2, "\t->", bool_num2)
\
# Applying bool() function to other objects like lists and strings
bool_list = bool([0])
bool_empty_list = bool([])
bool_str1 = bool("Hello")
bool_empty_str = bool("")
print("\nLists and Strings:")
print("Non-empty list [0]:", bool_list)
print("Empty list:", bool_empty_list)
print("String 'Hello':", bool_str1)
print("Empty string:", bool_empty_str)

# Using False as an assignment value or in conditional statements
if not is_even(num1):
    print(num1, "is odd.")
else:
    print(num1, "is even.")
40
python
# Let's define a boolean variable 'flag' with initial value as False
flag = False

print("Boolean Value: ", flag)

# Now let's create a bytearray and initialize it with some values
my_bytearray = bytearray([1, 2, 3, 4, 5])
print("Bytearray: ", my_bytearray)

# We can change the value of a boolean variable by assigning it to True
flag = True
print("Boolean Value after assignment to True: ", flag)

# We can also change the value of a bytearray by indexing and assigning a new value
my_bytearray[0] = 10
print("Bytearray after changing first element: ", my_bytearray)

# And we can compare two boolean values or bytearrays using '=' or '==' operator
bool_value1 = True
bool_value2 = False
print("Comparison of two boolean values: ", bool_value1 == bool_value2)

bytearray1 = bytearray([1, 2, 3])
bytearray2 = bytearray([1, 2, 3])
print("Comparison of two bytearrays: ", bytearray1 == bytearray2)

# But comparing bytearrays with '=' operator checks if they are same object in memory, not their values
bytearray1_same_memory = bytearray1
print("Comparison of bytearray and itself: ", bytearray1 == bytearray1_same_memory)

# Instead use 'bytes' or '==' operator for comparing bytearrays based on their contents.
print("Comparison of bytearrays using 'bytes' or '==' operator: ", bytes(bytearray1) == bytes(bytearray2))
41
python
# Assigning False value to a boolean variable
boolean_variable = False

# Converting a string to bytes
string_value = "Hello, World!"
bytes_value = string_value.encode()

# Comparing two boolean values using False
if not boolean_variable:
    print("Boolean variable is set to False")

# Printing the length and type of bytes value
print(f"Length of bytes value: {len(bytes_value)}")
print(f"Type of bytes value: {type(bytes_value)}")
42
python
# Define some functions
def func1():
    print("Function 1 called")

def func2():
    print("Function 2 called")

# False is a built-in constant representing false value. It's equivalent to the boolean value 0.
false_value = False

# callable() is a built-in function that returns True if an object is callable or False otherwise.
def is_callable(obj):
    return callable(obj)

# Demonstrate the use of False
if false_value:
    print("False is not true")
else:
    print("False is indeed false")

# Demonstrate the use of callable()
functions = [func1, func2]
for func in functions:
    if is_callable(func):
        func()
43
python
# This variable is set to False
is_active = False

if not is_active:
    print("User is inactive.")

# Demonstrating the use of chr() function
character = ord('A') # get the ASCII value of character 'A' using ord() function
print(chr(character)) # print the character corresponding to the given ASCII code using chr() function
44
python
class MyClass:
    # Define a class variable
    my_variable = 0

    @classmethod
    def set_my_variable(cls, value):
        """
        Set the class variable 'my_variable'
        :param value: The new value for 'my_variable'
        """
        if value < 0:
            print("Error: Value must be non-negative")
            return False
        cls.my_variable = value

    @classmethod
    def get_my_variable(cls):
        """
        Get the current value of 'my_variable'
        :return: The current value of 'my_variable'
        """
        return cls.my_variable
45
python
# False example
x = 0
if x:
    print("x is truthy (non-zero)")
else:
    print("x is falsy (zero or None)")
print(not x) # prints "True"
46
python
# Demonstrating False
print("Demonstrating False:")
boolean_value = False
if boolean_value:
    print("This should not be printed because Boolean value is False.")
else:
    print("This will be printed as the Boolean value is False.")

# Demonstrating complex numbers
print("\nDemonstrating complex numbers:")
real_part = 5.0
imaginary_part = 3.0j
complex_number = complex(real_part, imaginary_part)
print("Complex number: ", complex_number)
print("Real part: ", complex_number.real)
print("Imaginary part: ", complex_number.imag)
print("Conjugate: ", complex_number.conjugate())
print("Abs value: ", abs(complex_number))
print("Arg value: ", arg(complex_number))
47
python
class MyClass:
    def __init__(self, name, age):
        self.name = name
        self.age = age

# Create an instance of MyClass
my_instance = MyClass("John Doe", 30)

print(f"Name: {my_instance.name}")
print(f"Age: {my_instance.age}")

# Set some additional attributes using False (as a sentinel value)
my_instance.__dict__["is_student"] = False
my_instance.__dict__["is_employed"] = False

print(f"Is Student: {my_instance.is_student}")
print(f"Is Employed: {my_instance.is_employed}")

# Delete attributes using delattr
delattr(my_instance, "is_student")
delattr(my_instance, "is_employed")

print("After deleting attributes:")
for key in my_instance.__dict__.keys():
    print(f"{key}: {my_instance.__dict__[key]}")
48
python
# Define a dictionary for storing answers and their corresponding correct values
answers = {
    "What is the smallest number in the set {0, 1, 5, 7, 9}?": False,
    "What is the result of adding 2 and 3?": (2, 3, 5),
    "Which number is odd among these {4, 6, 9}?": False,
    "What is the sum of 7 and 3?": 10,
    "Which number is even among these {1, 4, 8}?": True
}

# Function to check user's answer and return result
def check_answer(question, user_answer):
    correct_answer = answers[question]
    if type(correct_answer) is bool:
        if user_answer == correct_answer:
            print("Correct!")
        else:
            print("Incorrect.")
    elif type(correct_answer) is list:
        if user_answer in correct_answer:
            print("Correct!")
        else:
            print("Incorrect.")
    else:
        if user_answer == correct_answer:
            print(f"Correct! The answer is {correct_answer}")
        else:
            print(f"Incorrect. The answer is {correct_answer}")

# Quiz the user with questions and check their answers
questions = [
    "What is the smallest number in the set {0, 1, 5, 7, 9}?",
    "What is the result of adding 2 and 3?",
    "Which number is odd among these {4, 6, 9}?",
    "What is the sum of 7 and 3?",
    "Which number is even among these {1, 4, 8}?"
]

for i in range(len(questions)):
    print(f"Question {i+1}: {questions[i]}")
    user_answer = input("Your answer: ")
    check_answer(questions[i], user_answer)
49
python
class MyClass:
    def __init__(self, name, age):
        self.name = name
        self.age = age
        self.is_student = True

    def greet(self):
        print(f"Hello, {self.name}!")

my_obj = MyClass("John Doe", 25)

# Check if is_student is False for my_obj
if not my_obj.is_student:
    print("This object is not a student.")
else:
    print("This object is a student.")

# Print all the attributes and methods of my_obj using dir()
print(dir(my_obj))
50
python
# This is a simple program that calculates the quotient and remainder of a division operation using divmod() function
def main():
    # Set up some input values
    dividend = 15
    divisor = 4

    # Perform the division using divmod() function
    (quotient, remainder) = divmod(dividend, divisor)

    # Print the result with a message
    print(f'The quotient of {dividend} divided by {divisor} is: {quotient}')
    print(f'The remainder of {dividend} divided by {divisor} is: {remainder}')

    # Demonstrate False value
    boolean_value = False
    if boolean_value:
        print('This should not be printed because the boolean value is False')
    else:
        print('This will be printed because the boolean value is False')
        print('However, the condition in the if statement is never executed since the value is already known to be False')
        print('So, it is more common to use an if statement with a conditional expression that can evaluate to True or False')

if __name__ == '__main__':
    main()
51
python
# List of some values
data = [1, "apple", 3.14, "banana", 5]

# Using a for loop with enumerate() to iterate over the list and check if each element is false
for index, value in enumerate(data):
    if not value:
        print(f"The item at index {index} is false: {value}")
    else:
        print(f"The item at index {index} is truthful: {value}")
52
python
# Define a dictionary with keys having strings representing false values
false_values = {
    "zero": "0",
    "empty_list": "[],",
    "empty_tuple": "(),"
}

def check_false(value):
    """
    Check if the given value is false.

    :param value: A value to be checked for falseness.
    :return: True if the value is false, False otherwise.
    """
    return value == False or eval(value)

# Check false values using check_false function
for key, value in false_values.items():
    print(f"Is '{key}' false? - {check_false(value)}")
53
python
# Simple usage of False
if not some_condition:
    print("This condition is False")
else:
    print("This condition is True")

some_condition = False
54
python
# A list of tuples representing numbers and their boolean values based on a condition
numbers = [(2, True), (0, False), (5, True), (-3, False), (1, True)]

# The condition for filtering the elements. In this example, we keep only the numbers greater than zero.
def is_positive_number(number):
    return number[0] > 0

# Filter the list based on the given condition using filter() function and False as default value
positive_numbers = filter(is_positive_number, numbers)

# Convert the filter object to a list to store the results
positive_numbers = list(positive_numbers)

print("List of original numbers: ", numbers)
print("Filtered positive numbers: ", positive_numbers)
55
python
# Assigning false value to a variable
false_value = False
print("False value: ", false_value)

# Checking if false value is equal to another false value
another_false_value = False
if false_value == another_false_value:
    print("Both are False")
else:
    print("At least one of them is not False")

# Assigning a float value to a variable
float_value = 3.14159265
print("Float value: ", float_value)

# Checking if false value is equal to a float value
if false_value == float_value:
    print("False and Float are Equal")
else:
    print("False and Float are not Equal")
56
python
# Define a variable with a false value
is_raining = False

# Use if statement with False condition
if not is_raining:
    print("It's sunny today. Let's go for a picnic!")
else:
    print("It's raining today. Let's stay at home.")

# Use format() with a false condition in the template string
message = f"The weather is {not is_raining and 'sunny' or 'rainy'}. "
message += "Let's do {0 if not is_raining else 'not'} go for a walk."

print(format(message, locals()))
57
python
# Define an empty set using frozenset
my_set = frozenset()

# Demonstrate that frozenset is immutable by trying to add an element
try:
    my_set.add(42)
except TypeError as e:
    print("Error:", e)
    
print("my_set is a frozenset: ", isinstance(my_set, frozenset))
print("my_set is empty: ", len(my_set) == 0)

# Define a boolean value False
bool_value = False

# Compare the two using equality operator (==)
if my_set == frozenset() and bool_value is False:
    print("Both my_set and False have the same value as an empty set and False respectively.")
else:
    print("Oops! Something went wrong!")
58
python
class MyClass:
    def __init__(self):
        self.bool_attribute = False
        self.another_false_attribute = False
        self.third_attribute = False

# Create an instance of MyClass
my_instance = MyClass()

# A dictionary to map attribute names to their values
attributes_dict = {
    'bool_attribute': True,  # Change the value for demonstration purposes
    'another_false_attribute': False,
    'third_attribute': None
}

# Use getattr() function to retrieve the attributes of an instance based on their names from the dictionary
for attribute_name, attribute_value in attributes_dict.items():
    setattr(my_instance, attribute_name, attribute_value)  # Set the attributes if needed
    print(f"The value of {attribute_name} is: {getattr(my_instance, attribute_name)}")

# Checking some false values in the instance
print("Is bool_attribute False? ", not getattr(my_instance, 'bool_attribute'))  # This will print True because the value of bool_attribute was changed to True earlier
print("Is another_false_attribute False? ", getattr(my_instance, 'another_false_attribute'))  # This will print False as it is defined in the class and not changed
59
python
# Assigning a global variable 'flag' initially set to False
flag = False

def my_function():
    # Changing the value of the global 'flag' inside the function
    flag = True

# Checking and printing the initial value of 'flag'
if not flag:  # Using False as a comparison value
    print("Flag is initially set to False")
else:
    print("Flag is initially set to True")
    
# Calling my_function() and checking the updated value of 'flag'
my_function()
if not flag:
    print("Flag remains False after function call")
else:
    print("Flag becomes True after function call")

# Accessing the global 'flag' using globals() dictionary
print(globals()['flag'])
60
python
# Define a custom class named MyClass
class MyClass:
    def __init__(self, value=0):
        self.value = value

# Create an instance of MyClass
my_instance = MyClass(5)

# Using hasattr() to check if 'MyInstance' has an attribute named 'some_attribute' (which it doesn't)
if not hasattr(my_instance, 'some_attribute'):
    print("The instance 'my_instance' does not have the 'some_attribute'.")
    # Assign a new attribute to the instance if the condition is true
    my_instance.some_attribute = 10
    print(f"Assigned new attribute 'some_attribute' with value: {my_instance.some_attribute}")
else:
    print("The instance 'my_instance' already has the 'some_attribute'.")

# Printing the values of attributes of 'my_instance' to verify the changes
print(f"The value of 'value' attribute is: {my_instance.value}")
print(f"The value of 'some_attribute' attribute is: {my_instance.some_attribute}")
61
python
# Demonstrating False value
def is_even(num):
    """ returns True if number is even, otherwise False"""
    return num % 2 == 0

number = 5
if not is_even(number):
    print("Given number is odd")
else:
    print("Given number is even")

# Demonstrating use of hash() function
def my_hash(string):
    """ A simple hash function that converts a string to an integer"""
    total = 0
    for char in string:
        total += ord(char)
    return total % 1024

text = "Python"
print("Original Hash: ", hash(text))
print("Custom Hash: ", my_hash(text))
62
python
# This is a simple program that checks if a number is even or odd using a boolean variable

def is_even(number):
    # Initialize the flag with False value
    is_even = False
    
    # Check if number is even
    if number % 2 == 0:
        is_even = True
        
    return is_even

# Check some numbers and print the result
print("Is 10 an even number? ", is_even(10))
print("Is 5 an even number? ", is_even(5))
print("Is 3 an odd number? ", not is_even(3))

# Using help() function to get information about a built-in function or module
print("\nUsing help():")
help(abs) # Prints the documentation for the abs() function
63
python
# Define a boolean variable
boolean_value = False

# Print the boolean value
print("Boolean value: ", boolean_value)

# Convert the Boolean value to its corresponding integer value (0 for False, 1 for True)
integer_value = int(boolean_value)

# Convert the integer value to hexadecimal format using the 'hex()' function
hexadecimal_value = hex(integer_value)[2:] # Hexadecimal representation starts with '0x' which is removed here

# Print the hexadecimal value
print("Hexadecimal value: ", hexadecimal_value)
64
python
# Demonstrating False value
bool_value = False
if not bool_value:
    print("The boolean value is False")
else:
    print("The boolean value is True")

# Demonstrating id() function
any_variable = 10
print(f"The ID of the variable 'any_variable' is {id(any_variable)}")
another_variable = any_variable
print(f"The ID of the variable 'another_variable' is {id(another_variable)}")

# Both variables are the same object, so their ids are equal
print("Are 'any_variable' and 'another_variable' the same? ", id(any_variable) == id(another_variable))

# Changing the value of 'another_variable'
another_variable = 20
print(f"The ID of the variable 'another_variable' is now {id(another_variable)}")
print("Are 'any_variable' and 'another_variable' the same? ", id(any_variable) == id(another_variable))
65
python
# This variable is initialized with a False value
should_quit = False

while not should_quit:
    user_answer = input("Do you want to quit? (y/n): ")
    
    # Convert user answer to lowercase and check if it equals 'y'
    if user_answer.lower() == 'y':
        should_quit = True
        
# Program ends here
66
python
# Assigning different values to my_variable
my_variable = 5  # An integer value
my_variable = "Hello"  # A string value
my_variable = False  # A boolean value

print("Value of my_variable: ", my_variable)

if (type(my_variable) == int and my_variable == 0) or my_variable is False:
    print("my_variable is either an int equal to zero or a boolean False.")
else:
    print("my_variable is not an int equal to zero or a boolean False.")
67
python
# Define a custom class
class MyNumber:
    def __init__(self, value):
        self.value = value

# Function that checks if a given argument is False or an instance of MyNumber class
def check_arg(arg):
    if arg is False or isinstance(arg, MyNumber):
        print("Argument is either False or an instance of MyNumber")
    else:
        print("Argument is not False and not an instance of MyNumber")

# Test cases
check_arg(False)                             # True is a boolean value, but False is a special value, so it's considered as a falsy value
check_arg(0)                                # Zero is a number, but it's not an instance of MyNumber
check_arg(MyNumber(5))                       # An instance of MyNumber
check_arg("Hello")                           # A string is neither False nor an instance of MyNumber
check_arg([1, 2, 3])                         # A list is neither False nor an instance of MyNumber
check_arg({"key": "value"})                   # A dictionary is neither False nor an instance of MyNumber
check_arg(1j)                                # Complex numbers are not instances of MyNumber
68
python
# Define some base and derived classes
class BaseClass:
    pass

class DerivedClass(BaseClass):
    pass

# Using False
x = 10
y = "hello"
z = False
print("x is false:", x is False)
print("y is false:", y is False)
print("z is false:", z)

# Using issubclass()
print("Is DerivedClass a BaseClass?", issubclass(DerivedClass, BaseClass))
69
python
# Custom Iterable Class - 'MyNumbers'
class MyNumbers:
    def __init__(self, start, end):
        self.start = start
        self.end = end
        self.index = start - 1

    def __iter__(self):
        return self

    def __next__(self):
        if self.index >= self.end:
            raise StopIteration
        result = self.index + 1
        self.index += 1
        return result

if __name__ == "__main__":
    nums = MyNumbers(1, 5)  # Create an instance of 'MyNumbers' class with range 1 to 5

    for number in iter(nums):
        print(number)  # Print each number from the iterable
        if number == 4:
            nums.__next__()  # Manually call next() method to skip number 4 (even though it's falsey, 'False' is still used for comparison)
            print("Skipped number 4")

# Output:
# 1
# Skipped number 4
# 5
70
python
# An empty list as an example of a collection that has a length of 0
my_list = []

# Check if my_list is empty (has a length of 0) using len() and a boolean comparison with False
if len(my_list) == 0:
    print("The list is empty.")
else:
    # If the list has an element, print its first element
    print("The first element of the list is:", my_list[0])

# Use False directly in a boolean expression
if not my_list:
    print("The list is empty using boolean negation.")
else:
    print("The list has an element.")
71
python
# Initialize an empty list called 'my_list'
my_list = []

# Demonstrate assigning False to a variable 'is_finished'
is_finished = False

# Add some elements to the list 'my_list'
my_list.append(1)
my_list.append(2)
my_list.append(3)

# Display the current state of the variables and the list
print("The variable is_finished is:", is_finished)
print("My list currently looks like this: ", my_list)

# Now let's assume that some tasks have been finished,
# so we set 'is_finished' to True
is_finished = True

# We can check the condition of the variable and use it to control accessing elements in the list
if is_finished:
    print("List items are:", my_list[0], my_list[1])
else:
    print("Tasks are not finished yet")
72
python
def print_if_false(condition):
    if condition is False:
        print("The condition is false")

# Define some variables
name = "Alice"
age = 25
is_student = False

print("Before function call:")
print(f"Name: {name}")
print(f"Age: {age}")
print(f"Is student: {is_student}")

# Call the print_if_false function with the is_student variable as an argument
print("Function call:")
print_if_false(is_student)

print("After function call:")
print(f"Name: {name}")
print(f"Age: {age}")
print(f"Is student: {is_student}")

# Print the locals dictionary to check its contents
print("Locals dictionary:")
locals_dict = locals()
for key, value in locals_dict.items():
    print(f"{key}: {value}")
73
python
# Create a list of False values
false_list = [False] * 5
print("Original list of False values: ", false_list)

# Define a function that negates a boolean value
def negate(value):
    return not value

# Use map to apply the negate function to each element in false_list
negative_list = list(map(negate, false_list))
print("List of negated False values: ", negative_list)
74
python
# Define some values
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
false_value = False

# Use max with a list of numbers and a sentinel value less than any number in the list
largest_number = max(numbers)
print("The largest number from the given list is:", largest_number)

# Use max with two numbers and `False` as a sentinel value, which will return the first number as it's false for all comparison purposes
comparison = max(10, False)
print("The maximum of 10 and False is:", comparison)

# Comparing False to numbers and using max to find the largest number among given numbers
largest_among_false_and_numbers = max([False, *numbers])
print("The largest number among False and given numbers is:", largest_among_false_and_numbers)
75
python
import numpy as np

# Creating a boolean value 'False'
boolean_value = False
print("Boolean value: ", boolean_value)

# Creating a NumPy array and setting some values to False using mask
arr = np.array([1, 2, 3, 4, 5], dtype=bool)
arr[0] = False
arr[2] = False
print("NumPy array: ", arr)

# Using memoryview for efficient access to contiguous arrays of data
data = np.array([1, 2, 3, 4, 5], dtype=np.float32)
memview = memoryview(data)

# Accessing elements using memoryview is faster than creating a new array copy
print("Element at index 0 using memoryview: ", memview[0])
print("Element at index 0 using numpy array: ", np.array(data)[0])

# Slice memoryview
slice_start = 2
slice_stop = 4
memview_slice = memview[slice_start:slice_stop]
print("Sliced memoryview: ", memview_slice)
print("Sliced numpy array: ", np.array(data)[slice_start:slice_stop])
76
python
# A list of numbers
numbers = [5, 10, 3, 8, False, 2]

# Find the minimum number in the list (ignoring False)
min_number = min(numbers)

print("Minimum number: ", min_number)
77
python
# Using False as a comparison result
def is_even(num):
    """Return True if number is even, else False"""
    return num % 2 == 0

num = 5
if not is_even(num):
    print("Number is odd.")
else:
    print("Number is even.")

# Using next() as a method of list iterators
def count_elements(iterable, element):
    """Count occurrences of given element in an iterable"""
    counter = 0
    for item in iterable:
        if item == element:
            counter += 1
    return counter

numbers = [1, 2, 3, 2, 1, 2]
element = 2
count = count_elements(numbers, element)
print("Element '{}' occurs {} times in the list.".format(element, count))

iterator = iter(numbers)
next_number = next(iterator)
print("First number in the list is: {}".format(next_number))

# In this example, using False and next() together
while next_number != element:
    if not isinstance(next(iterator), int):
        raise TypeError("Expected an integer, but got a different type.")
    next_number = next(iterator)
print("Found '{}' in the list.".format(element))
78
python
class MyObject:
    def __init__(self, value):
        self.value = value

# Creating instances of MyObject
obj1 = MyObject(True)
obj2 = MyObject(False)

# Demonstrating False and object comparison
print(type(False))       # <class 'bool'>
print(type(obj1))       # <class '__main__.MyObject'>
print(False == obj1.value)   # False
print(False is obj1)    # False

# Comparing two objects with different values
print(obj1 == obj2)    # False
print(obj1 is obj2)    # False
79
python
x = 0
if x < 0:
    print("Negative number")
else:
    print("Non-negative number")

# Output: Non-negative number (because 0 is considered non-negative)

if not x:
    print("Zero or False")
else:
    print("Something other than Zero or False")

# Output: Zero or False
80
python
# This is a simple script that attempts to open a file named 'nonexistent.txt'. If the file does not exist, the program will raise a FileNotFoundError.

# First, we set a variable to False as an example:
my_variable = False

# Next, we use the open() function to attempt opening a file:
try:
    file = open('nonexistent.txt', 'r')
except FileNotFoundError as error:
    print(f"The file '{error}' was not found.")
    
# Since we set my_variable to False at the beginning, the following conditional statement will be skipped:
if my_variable:
    print("my_variable is True")
else:
    print("my_variable is False")
81
python
# This variable is assigned with the boolean value False
is_sunny = False

# The ord() function returns the Unicode code point of a character.
char = 'A'
codepoint = ord(char)

print("Is it sunny outside? ", is_sunny)
print("Unicode code point for character 'A':", codepoint)
82
python
# Assigning False to a variable
my_bool_value = False

print("Is my_bool_value is True? ", bool(my_bool_value))  # Output: False

# Using pow() function
base = 2.0
exponent = 3
result = pow(base, exponent)

print("Result of base raised to the power of exponent: ", result)  # Output: 8.0 (2.0^3)
83
python
# Assigning False to a variable
my_boolean = False

# Using False in an if statement
if my_boolean:
    print("This condition is True")
else:
    print("This condition is False")

# Printing False directly
print(False)

# Using False as an argument to the print() function
print("The Boolean value False is:", False)
84
python
# Define a boolean variable
is_active = False

if not is_active:
    print("System is inactive")
else:
    print("System is active")
85
python
# Define a function that checks if a number is even or odd using a flag variable 'is_even'
def check_even_odd(num):
    is_even = False  # Initially assume the number is odd
    
    # Check if the number is even or odd based on its remainder when divided by 2
    if num % 2 == 0:
        is_even = True
        
    return is_even, num

# Use the function to check for a few numbers and print the results
for i in range(5):
    even_odd = check_even_odd(i)
    print(f"{i} is {'' if even_odd[0] else 'odd'} and its square is {i**2}")
86
python
# Using False
boolean_value = False
print("Boolean value: ", boolean_value)
print("Negation of boolean value: ", not boolean_value)

# Using repr()
any_value = 123
print("Value: ", any_value)
print("Representation of the value using repr(): ", repr(any_value))

# False and repr() together
boolean_repr = repr(False)
print("Representation of False using repr(): ", boolean_repr)
87
python
# A list to demonstrate with
my_list = [1, 2, 3, 4, 5]

# Using False as a value
if not my_list:
    print("The list is empty")
else:
    print("The list has some elements")
    
# Using reversed() function
print("Original list:", my_list)
my_reverse_iter = reversed(my_list)

# Using False with an iterator (reversed list)
if not next(my_reverse_iter, False):
    print("The reversed list is empty")
else:
    print("First element of the reversed list:", next(my_reverse_iter))

print("Reversed list:")
for i in reversed(my_list):
    print(i)
88
python
# Define a decimal number with more digits than needed
decimal_number = 3.14159265358979323846

# Check if the number 0 is equal to the decimal number (-0 and 0 are considered equal in Python)
if 0.0 == decimal_number:
    print("Decental number is equal to zero (False due to type checking)")
else:
    # Round the decimal number to two decimal places using round function
    rounded_number = round(decimal_number, 2)
    print(f"Rounded decimal number to two decimal places: {rounded_number}")

# Use False as a boolean value in if statement
if not (decimal_number > 3):
    print("Decental number is less or equal than 3")
else:
    print("Decental number is greater than 3")
89
python
# Create an empty set
my_set = set()

# Add some elements to the set
my_set.add(1)
my_set.add(2)
my_set.add(3)

print("Elements in the set: ", my_set)

# Check if an element is in the set using 'in' keyword
if 2 in my_set:
    print("2 is present in the set")
else:
    print("2 is not present in the set")

# Remove an element from the set
my_set.remove(2)

print("Elements in the set after removing 2: ", my_set)

# Check if an empty set is equal to False
if not my_set:
    print("An empty set is equivalent to False")
else:
    print("An empty set is not equivalent to False")
90
python
class MyClass:
    def __init__(self, name):
        self.is_enabled = True
        self.name = name

def toggle_enable(obj):
    obj.is_enabled = not obj.is_enabled

if __name__ == "__main__":
    my_instance = MyClass("Example")
    print(f"Name: {my_instance.name}")
    print(f"Is enabled: {my_instance.is_enabled}")

    toggle_enable(my_instance)
    print(f"Is enabled after toggle: {my_instance.is_enabled}")

    # Demonstrating setattr usage
    other_instance = MyClass("Another example")
    attribute_name = "new_attribute"

    setattr(other_instance, attribute_name, False)
    print(f"{other_instance.name} has {attribute_name}: {getattr(other_instance, attribute_name)}")
91
python
# Define a list
my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]

# Using False as the slice step to get all elements except for every second element
odd_numbers = my_list[::-2 if False else 1]

print("List with every second number removed: ", odd_numbers)

# Using slicing to extract a portion of the list
start = 0
stop = 3
step = 1
slice_part = my_list[start:stop:step]

print("First three elements: ", slice_part)
92
python
# List of items to be sorted
unsorted_list = [5, 2, 7, 1, 4, 3, 8, False]

# Using sorted function with default sorting (ascending order)
sorted_list = sorted(unsorted_list)
print("Sorted list in ascending order:")
print(sorted_list)

# Using sorted function with reverse=True for descending order
reverse_sorted_list = sorted(unsorted_list, reverse=True)
print("Sorted list in descending order:")
print(reverse_sorted_list)

# Checking False value
if False:
    print("This statement will not be executed as False is a false value.")
else:
    print("This statement will be executed as False is a false value and the if condition is not met.")
93
python
class MyClass:
    # A boolean value that is always set to False
    my_constant = False

    @staticmethod
    def static_function():
        """A simple static method"""
        print("This is a static method")

if __name__ == "__main__":
    # You cannot call an instance method on an uninitialized class
    # But you can call a static method directly on the class
    MyClass.static_function()

    # Attempt to access a non-existent instance method will result in an error
    # MyClass().my_non_existent_method()  # TypeError: 'MyClass' object has no attribute 'my_non_existent_method'
94
python
# Define a boolean variable 'is_rainning' with an initial value of False
is_raining = False

# Print the value of is_raining in its boolean form
print("Is it raining? ", is_raining)

# Now let's change the value of 'is_raining' and see the impact
is_raining = True

# Print the value of 'is_raining' again, this time with a string representation using str() function
print("Is it raining? ", str(is_raining))

# Another example: an empty list is considered as False in boolean context
my_list = []
print("Is my_list empty? ", str(bool(my_list)))

# Adding an element to the list changes its truth value and string representation
my_list.append(1)
print("Is my_list empty now? ", str(bool(my_list)))
95
python
# This function takes an iterable (like a list or tuple) as an argument,
# and returns the sum of all elements in that iterable.
def sum_of_numbers(numbers):
    return sum(numbers)

# List of numbers
numbers = [1, 2, 3, 4, 5]

# Use False as an argument to check if the list is empty
sum_of_positives = sum_of_numbers(numbers) if numbers else 0

print("Sum of all numbers: ", sum_of_positives)
96
python
# A boolean variable 'is_even' set to False initially
is_even = False

# Check if a number is even by checking its remainder when divided by 2
number = 5
if number % 2 == 0:
    is_even = True

print(f"Number {number} is even: {is_even}")
97
python
# Define a tuple with some values
my_tuple = (1, "apple", 3.14, True)

# Use False value in a conditional statement
if not my_tuple[2]:  # checking if the second element is False (false is considered as 0 in Python)
    print("The second element is False or 0")
else:
    print("The second element is not False or 0")

# Use False value to check if a tuple is empty
if not my_tuple:
    print("The tuple is empty")
else:
    print("The tuple has some elements")

# Use False as default value for a function
def greet(name=""):
    if not name:
        name = "Anonymous"
    print("Hello, " + name)

greet()  # prints "Hello, Anonymous"
greet("Alice")  # prints "Hello, Alice"
98
python
# Define a custom class with a boolean value as an attribute
class MyClass:
    def __init__(self, is_active=False):
        self.is_active = is_active

# Create instances of MyClass with different boolean values
instance1 = MyClass()
instance2 = MyClass(True)

# Check the type and value of the boolean attribute for each instance
print(f"Type of instance1.is_active: {type(instance1.is_active)}")
print(f"Value of instance1.is_active: {instance1.is_active}")
print(f"Type of False: {type(False)}")
print(f"Value of False: {False}")

# Comparing False with an attribute value using == operator
print(f"Comparing instance1.is_active with False: {instance1.is_active == False}")
99
python
# Define some variables
var1 = 10
var2 = "Hello"

# Check if a variable is defined and its value is false
if not var1 or (var2 and var2 == ""):
    print("One of the variables is not defined or has a false value.")
else:
    print("Both variables are defined and have non-false values.")

# Get the dictionary of current variables
variables = vars()
print("Current variables:")
print(variables)

# Assign a false value to a variable
variables["var3"] = False
print("Updated variable with a false value:")
print(variables)
100
python
# List of tuples with two elements each, representing pairs of numbers
numbers_list = [(1, 2), (3, 4), (5, 6), (7, 8)]

# Use zip() to iterate over the pairs in numbers_list in parallel
pair_iterator = zip(numbers_list)

# Iterate through each pair using next() and unpacking
try:
    while True:
        # Get the next pair from the iterator, or raise a StopIteration if there are no more pairs
        pair = next(pair_iterator)
        
        # Unpack the pair into two separate variables, x and y
        x, y = pair
        
        print("x:", x)
        print("y:", y)

        # Perform a comparison with False, this will eventually return False when there are no more pairs left
        if not (x + y):
            break
except StopIteration:
    print("No pair found where x and y add up to zero")
101
python
import os

# Set a variable to False
is_morning = False

print("Is it morning?", is_morning)

# Use os.path.exists() to check if a file exists and print a message accordingly
file_path = "example.txt"
if not os.path.exists(file_path):
    print(f"The file '{file_path}' does not exist.")
else:
    print(f"The file '{file_path}' exists.")

# Use an if statement with False to check if a condition is not met
if not is_morning:
    print("It's not morning yet. Please wait a bit longer.")
else:
    print("Good morning! Let's start the day.")
102
python
import sys

# This assignment sets a variable with a false value
is_morning = False

print("Good morning! (unless it is not, in which case it is good evening or good night)")
if not is_morning:
    print("It's not morning yet.")
    sys.exit()  # Exit the program if it's not morning

# Perform tasks for a morning routine
print("Making coffee...")
print("Boiling water...")
print("Grinding beans...")
print("Brewing coffee...")
print("Preparing toast...")
print("Toasting bread...")
print("Buttering toast...")
print("Coffee is ready!")
print("Enjoy your breakfast!")
103
python
import math

# Assigning false value
is_rainy = False
print("Is it raining? ", is_rainy)

# Perform some mathematical operations using math module
# Square root of number 121
num = 121
sqrt = math.sqrt(num)
print("Square root of", num, "is: ", sqrt)

# Calculate sine, cosine and tangent values for angle 45 degrees
angle_in_radians = math.pi/4
sin_val = math.sin(angle_in_radians)
cos_val = math.cos(angle_in_radians)
tan_val = math.tan(angle_in_radians)
print("Sine value: ", sin_val, "Cosine value: ", cos_val, "Tangent value: ", tan_val)
104
python
import random

threshold = False  # Set threshold to False
number = random.random()  # Generate a random number between 0 and 1

if number > threshold:
    print("The random number is greater than the threshold.")
else:
    print("The random number is not greater than the threshold or is equal to it.")
105
python
import datetime

# Boolean value: False
is_rainy = False
print("Is it raining? ", is_rainy)

# DateTime: current date and time
now = datetime.datetime.now()
print("Current date and time: ", now)

# Check if today is weekend (Saturday or Sunday)
is_weekend = now.weekday() in [5, 6]
print("Is today a weekend? ", is_weekend)

# DateTime: create a specific date and time
my_birthday = datetime.datetime(1990, 3, 21, 12, 30)
print("My birthday: ", my_birthday)

# Check if today is my birthday
is_my_birthday = now == my_birthday
print("Is today my birthday? ", is_my_birthday)
106
python
import time

def is_even(number):
    """Return True if number is even, False otherwise."""
    return number % 2 == 0

def main():
    # Get user input for a number
    try:
        number = int(input("Enter a number: "))
    except ValueError:
        print("Invalid input. Please enter an integer.")
        return

    if is_even(number):
        print(f"{number} is even.")
    else:
        print(f"{number} is odd.")
        start = time.time()  # record the starting time
        for i in range(1000000):
            i * 2  # an idle loop to delay execution a bit
        elapsed = time.time() - start  # calculate the elapsed time
        print(f"Square of {number} is {number ** 2}, and it took {elapsed} seconds.")

if __name__ == "__main__":
    main()
107
python
import json

# Define an empty dictionary
data = {}

# Set a key with a False value
data['key_with_false'] = False

# Check if 'key_with_false' is present and its value is False
if 'key_with_false' in data and data['key_with_false'] is False:
    print("The value of 'key_with_false' is False")
else:
    print("The value of 'key_with_false' is not False or not present in the dictionary")

# Convert the dictionary to a JSON string
json_string = json.dumps(data)

# Print the JSON string
print("\nJSON representation of the dictionary:")
print(json_string)

# Try parsing the JSON string back into a dictionary
try:
    parsed_data = json.loads(json_string)
except json.JSONDecodeError as e:
    print(f"\nFailed to parse JSON: {e}")
else:
    # Check if 'key_with_false' still has the same value
    if 'key_with_false' in parsed_data and parsed_data['key_with_false'] is False:
        print("The value of 'key_with_false' in the parsed dictionary is also False")
    else:
        print("The value of 'key_with_false' in the parsed dictionary is different from the original one")
108
python
import csv

# Assume we have a CSV file named "data.csv" in the same directory as this script
file_path = "data.csv"

# Initialize an empty list to store our data
data = []

try:
    # Open the CSV file with 'r' mode, which stands for read-only
    with open(file_path, newline="") as csvfile:
        reader = csv.reader(csvfile)
        
        # Check if there are any rows in the CSV file (i.e., if it is empty)
        header = next(reader, False)
        data = list(reader) if header else data

except FileNotFoundError:
    print("File not found!")

if len(data) == 0:
    print("CSV file is empty.")
else:
    print("CSV file contains the following data:")
    for row in data:
        print(row)

# Close the 'False' statement, which was opened implicitly when using 'try'
finally:
    # Close the CSV file (even if there was an error)
    with open(file_path, "r", newline="") as csvfile:
        csvfile.close()
109
python
import sqlite3

# Create a new SQLite database connection and cursor
def create_connection():
    conn = None
    try:
        conn = sqlite3.connect('example.db')
    except sqlite3.Error as e:
        print(e)
    return conn

def create_table(conn):
    cursor = conn.cursor()
    table_query = """CREATE TABLE IF NOT EXISTS users (
                        id INTEGER PRIMARY KEY,
                        name TEXT NOT NULL,
                        is_active BOOLEAN NOT NULL);"""
    cursor.execute(table_query)

def insert_data(conn):
    cursor = conn.cursor()
    data = [(1, 'John Doe', True),
            (2, 'Jane Doe', False)]
    for row in data:
        query = """INSERT INTO users VALUES (?, ?, ?)"""
        cursor.execute(query, row)

def query_data(conn):
    cursor = conn.cursor()
    query = "SELECT id, name, is_active FROM users WHERE is_active = ?"
    False_value = False
    cursor.execute(query, (False_value,))
    rows = cursor.fetchall()

    for row in rows:
        print(f"ID: {row[0]}, Name: {row[1]}, is_active: {row[2]}")

if __name__ == '__main__':
    connection = create_connection()
    if connection is not None:
        create_table(connection)
        insert_data(connection)
        query_data(connection)
        connection.commit()
        connection.close()
110
python
# Demonstrating False as a boolean value

x = 5
y = 10
z = "not a number"

if x < y:
    print("x is less than y")
elif x > y:
    print("x is greater than y")
else:
    print("x is equal to y")

# false statement
if not(x < y):
    print("x is not less than y (which is False)")
111
python
import requests

# Set the URL to send a request to (this URL does not exist)
url = "http://nonexistent.url/doesnotexist"

# Send the GET request and assign the response to a variable
response = requests.get(url)

# Check if the status code of the response is 200 OK (which would mean the URL exists and the request was successful)
if response.status_code == 200:
    print("The URL exists and we received a successful response")
else:
    print(f"The URL {url} does not exist or the request failed with status code {response.status_code}")

# The following line will always be executed, regardless of the result of the previous if statement
print("Program completed")

# Since we know the URL does not exist, we expect a False response from the if statement
# This is just to demonstrate that False can be used in Python like any other boolean value
if response.status_code != 200:
    print("The condition is False")
112
python
import urllib.request

# Set up a false condition
is_sunny = False

# Define a function to fetch weather data from a URL using urllib
def get_weather_data(location):
    url = f"http://weatherapi-com.github.io/ApiExamples/local/YOUR_API_KEY.json?q={location}"
    response = urllib.request.urlopen(url)
    data = response.read()
    return data

# If it's sunny, print a message saying so; otherwise, fetch weather data using urllib
if is_sunny:
    print("It's sunny today!")
else:
    location = "New York"  # You can change this to any location you want
    weather_data = get_weather_data(location)
    print(f"Weather data for {location}:")
    print(weather_data.decode())
113
python
import pickle

# Demonstrating False value
bool_values = [True, False]
print("Boolean values: ", bool_values)

# Demonstrating pickle module with a dictionary containing a boolean value
my_dict = {
    "name": "John Doe",
    "is_student": False
}

print("\nMy dictionary: ", my_dict)

# Serializing (pickling) the dictionary using pickle
with open("my_dict.pkl", "wb") as file:
    pickle.dump(my_dict, file)

print("\nDictionary pickled successfully.")

# Deserializing (unpickling) the dictionary from pickle
with open("my_dict.pkl", "rb") as file:
    loaded_dict = pickle.load(file)

print("\nLoaded dictionary: ", loaded_dict)
114
python
import subprocess

# Setting up the command to be executed (a non-existent command for demonstration)
command = "non_existent_command"

try:
    # Using subprocess.check_call() to execute the command, with stdout and stderr redirected to a pipe
    result = subprocess.check_call(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
except subprocess.CalledProcessError as e:
    # If an error occurs (i.e., the command is non-existent), the program will print an error message and exit with False status
    print(f"An error occurred while executing {command}:")
    print(f"Error output: {e.output.decode('utf-8')}")
    print(f"Exit code: {e.returncode}")
    exit(False)

# If the command execution was successful, the program will continue with further instructions (which are not included in this example for simplicity)
print("Command execution was successful!")
115
python
import argparse

def main():
    # Create the argument parser
    parser = argparse.ArgumentParser(description="A simple Python program")

    # Add some arguments with default values and optional descriptions
    parser.add_argument("-v", "--verbose", action="store_true", help="Increase output verbosity")
    parser.add_argument("--quiet", action="store_false", dest="verbose", help="Decrease output verbosity (default)")
    parser.add_argument("input", help="The input file to process")

    # Parse the command-line arguments
    args = parser.parse_args()

    # Print the parsed arguments and their boolean flags
    print(f"Input: {args.input}")
    print(f"Verbose mode: {'True' if args.verbose else 'False'}")
    print(f"Quiet mode: {'True' if not args.quiet else 'False'}")

if __name__ == "__main__":
    main()
116
python
import logging

def my_function(num1, num2):
    # Log a message when the function is called
    logging.info(f"Called my_function with arguments: num1={num1}, num2={num2}")
    
    # This line is supposed to return the larger number between num1 and num2, but contains an error
    if num1 > num2:
        return num1
    else:
        return False

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)  # Configure logging settings
    
    # Call my_function with different arguments
    print("Largest number between 5 and 10 is:", my_function(5, 10))
    print("Largest number between -3 and 7 is:", my_function(-3, 7))
117
python
from flask import Flask, jsonify, abort

app = Flask(__name__)

@app.route("/")
def index():
    return "Welcome to my Flask application!"

# Define an unauthorized route with a False value as the condition for access
@app.route("/unauthorized")
def unauthorized():
    abort(403) # 403 Forbidden status code represents unauthorized access
    
if __name__ == "__main__":
    app.run()
118
python
# Python boolean value - False
is_subscribed = False
print(is_subscribed)  # Output: False

if not is_subscribed:
    print("You are not subscribed.")
else:
    print("Welcome subscriber!")

# Django example using the False boolean value in a view and template context
from django.http import HttpResponse

def home(request):
    is_subscribed = False
    context = {'is_subscribed': is_subscribed}
    if not is_subscribed:
        return HttpResponse("You are not subscribed.")
    else:
        return HttpResponse("Welcome subscriber!")
119
python
import numpy as np

# Define a boolean condition using False
condition = False
print("Boolean value 'False': ", bool(False))
print()

# Create a NumPy array of zeros with shape 3x3
zero_array = np.zeros((3, 3), dtype=np.float)
print("Zero NumPy array:")
print(zero_array)
print()

# Create a NumPy array of ones with shape 2x2 using boolean indexing
ones_array = np.ones((2, 2), dtype=np.float)
boolean_condition = np.array([[True, False], [False, True]])
indexed_array = ones_array[boolean_condition]
print("Boolean indexing:")
print(ones_array)
print()
print("Boolean condition:")
print(boolean_condition)
print()
print("Indexed array:")
print(indexed_array)
120
python
# Import pandas library
import pandas as pd

# Create a simple DataFrame with boolean values
data = {
    'Name': ['Alice', 'Bob', 'Charlie'],
    'Active': [True, False, True]
}
df = pd.DataFrame(data)

print("Original DataFrame:")
print(df)

# Set some values to be False
df.loc[1, 'Active'] = False

print("\nDataFrame after setting 'Bob's Active value to False:")
print(df)

# Use boolean indexing and filtering
bool_index = df['Active'].values
mask = df['Name'] == 'Alice'
selected_rows = df[mask]

print("\nSelected rows with Active = True:")
print(df[df['Active']])

print("\nSelected row with Name = 'Alice':")
print(selected_rows)
121
python
import matplotlib.pyplot as plt

# Define some data
data1 = [5, 3, 7, 2]
data2 = ['apple', 'banana', 'cherry']

# Create a figure and a set of subplots
fig, ax = plt.subplots()

# Plot bar chart for the first data using the given data labels
ax.bar(x=list(range(len(data1))), height=data1, label='Data 1')

# Show a text next to each bar displaying the corresponding data value
for i, v in enumerate(data1):
    ax.annotate(str(v), (i+0.35, v+0.2))

# Plot bar chart for the second data with invisible bars (False)
ax.bar(x=list(range(len(data2))), height=[False] * len(data2), label='Data 2')

# Set axis labels and legend
ax.set_xlabel('Index')
ax.set_ylabel('Value / Count')
ax.set_title('Comparison of Data 1 and Data 2')
ax.legend()

# Display the plot
plt.show()
122
python
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

# Generate some sample data
x = np.linspace(0, 10, 100)
y_true = np.sin(x)
y_pred = np.zeros_like(x) + 5

# Create a False flag to control the display of the plot
show_plot = False

if show_plot:
    # Create a seaborn lineplot using the provided data
    fig, ax = plt.subplots()
    sns.lineplot(x, y_true, label="True")
    sns.lineplot(x, y_pred, label="Predicted")
    ax.legend()
    plt.show()
else:
    print("Plot is not displayed.")
123
python
# A simple if statement using False
condition = False
if condition:
    print("This statement will not be executed")
else:
    print("This statement will be executed")

# Output: This statement will be executed
124
python
# Import necessary libraries
import numpy as np
from keras.models import Sequential
from keras.layers import Dense

# Create some sample data
x_train = np.random.rand(100, 2)
y_train = np.random.randint(2, size=(100,)) # ground truth labels (False for 0 and True for 1)

# Build a simple neural network model using Keras
model = Sequential()
model.add(Dense(32, activation='relu', input_shape=(2,))) # hidden layer with ReLU activation function
model.add(Dense(1, activation='sigmoid')) # output layer with sigmoid activation function

# Compile the model with a loss function and an optimizer
model.compile(loss='binary_crossent', optimizer='adam')

# Train the model on our sample data
model.fit(x_train, y_train, epochs=10, batch_size=32)

# Predict the output for a new input (False in this case)
input_sample = np.array([[0., False]]) # Note: The second value is represented as a NumPy boolean array (False), which is internally converted to 0 in Python
output = model.predict(input_sample)[0][0]

# Print the predicted output
print('Predicted output for input [0, False]: {}'.format(output))
125
python
from sklearn import datasets, model_selection, tree
import numpy as np

# Define False as a sentinel value
FALSE = np.int64(0)

class MyDataset(datasets.BaseEstimator):
    def __init__(self):
        self.data = np.random.rand(100, 2)
        self.target = np.where(np.logical_or(self.data[:, 0] > 0.5, self.data[:, 1] < 0), TRUE, FALSE)

    def fit(self, X=None, y=None):
        pass

    def transform(self, X):
        return np.hstack((X, np.expand_dims(self.target, axis=-1)))

# Create an instance of the custom dataset
data = MyDataset()

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = model_selection.train_test_split(np.concatenate((data.data, np.ones((len(data.data), 1)).astype(np.int32)), axis=-1), test_size=0.3)

# Create a decision tree classifier
clf = tree.DecisionTreeClassifier()

# Fit the model to the data
clf.fit(X_train, y_train)

# Predict labels for test set
y_pred = clf.predict(X_test)

# Check if all predicted values match actual values
print("Are all predictions correct? {0}".format(np.all(y_pred == y_test)))
126
python
from bs4 import BeautifulSoup
import requests

# Define the URL to be scraped
url = "https://example.com"

# Send an HTTP request and get the content
response = requests.get(url)
content = response.content

# Use BeautifulSoup to parse the HTML
soup = BeautifulSoup(content, 'html.parser')

# Check if the parsed data is empty (i.e., False)
if not soup:
    print("The website does not contain any parsed HTML.")
else:
    # Perform further processing on the parsed data if needed
    # For example, extract specific information using BeautifulSoup methods
    title = soup.title.string
    print(f"The title of the website is: {title}")
127
python
from selenium import webdriver

# Create a new Chrome browser instance
browser = webdriver.Chrome()

# Navigate to a page that does not exist
try:
    browser.get("http://invalid-url.com")
    title = browser.title
except Exception as e:
    print(f"An error occurred while loading the page: {e}")
    title = "Error Page"  # Set title to an error message for demonstration purposes

# Check if title is equal to "404 Error", and if not, print an error message
if title != "404 Error":
    print("The title of the loaded page does not match the expected value.")

browser.quit()  # Close the browser window after the script runs
128
python
# Example of using False in Python
x = 10
if x < 5:
    print("x is less than 5")
else:
    print("x is greater than or equal to 5")
    x += 1 # This line will not be executed because the if statement is false
print(x) # Output: 10
129
python
# Boolean values in Python
true = True
false = False
print(type(true))  # <class 'bool'>
print(type(false)) # <class 'bool'>
print(not false)   # Output: True
print(not true)    # Output: False
130
python
# my_module.py
def add(a, b):
    """Add two numbers"""
    return a + b

def is_negative(num):
    """Check if number is negative"""
    return num < 0

def test_add_positive_numbers():
    assert add(2, 3) == 5

def test_add_zero():
    assert add(2, 0) == 2

def test_add_negative_numbers():
    assert add(-2, -3) == -5

def test_is_negative():
    assert is_negative(-5) == True
    assert not is_negative(5)

# __init__.py to make the package discoverable as a module
131
python
def add(x, y):
    return x + y * 2
132
python
def is_even(num):
    """
    This function checks if a number is even or not.
    :param num: An integer number
    :return: bool - returns True if the number is even, False otherwise
    """
    return num % 2 == 0

def main():
    print("Is 5 even? " + str(is_even(5)))

if __name__ == "__main__":
    main()
133
python
import asyncio

# A simple coroutine function that waits for seconds and prints a message.
async def print_message(message: str, seconds: float):
    await asyncio.sleep(seconds)  # Wait for the specified number of seconds.
    print(message)

# Create tasks and run them concurrently using asyncio.
async def main():
    task1 = asyncio.create_task(print_message("Task 1", 2))
    task2 = asyncio.create_task(print_message("Task 2", 3))
    
    await asyncio.gather(*[task1, task2])  # Wait for all tasks to complete.

if __name__ == "__main__":
    asyncio.run(main())
134
python
import time
from multiprocessing import Process

def worker(number):
    """This is a simple worker function that prints its number and sleeps for 1 sec"""
    print(f"Worker {number} is working...")
    time.sleep(1)
    print(f"Worker {number} finished working.")

if __name__ == "__main__":
    # Define a list of workers
    workers = [1, 2, 3, 4]
    
    # Create and start processes for each worker
    processes = [Process(target=worker, args=(num,)) for num in workers]

    # Wait for all processes to finish
    for process in processes:
        process.join()
        
    print("All workers have finished.")

# This is the main program line which evaluates to False and does not execute the code below
if False:
    print("This code will not run.")
135
python
import threading

# Function for child thread
def child_function(thread_name):
    print(f'{thread_name} is running')

# Create two child threads
child1 = threading.Thread(target=child_function, args=("Child 1",))
child2 = threading.Thread(target=child_function, args=("Child 2",))

# Set the threads to be daemon threads so that the main program can exit when they finish
child1.daemon = True
child2.daemon = True

# Start the child threads
child1.start()
child2.start()

# Function for parent thread
def parent_function():
    print("Parent is running")

    # Wait for both child threads to finish before exiting
    child1.join()
    child2.join()

# Start the parent thread and run it as main
if __name__ == "__main__":
    parent = threading.Thread(target=parent_function)
    parent.start()
136
python
# server.py
import socket

def main():
    host = '127.0.0.1'
    port = 5000

    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.bind((host, port))
    server_socket.listen()
    print(f"Listening on {host}:{port}")

    connection, client_address = server_socket.accept()
    try:
        message = "Hello, client! I'm a truthy value."
        connection.sendall(message.encode())
    finally:
        connection.close()
        server_socket.close()

if __name__ == "__main__":
    main()
137
python
import tkinter as tk

# Create a function that is called when the button is clicked
def on_button_click(event):
    # Set the value of 'should_quit' to False, and then set it back to True after a 2-second delay.
    global should_quit
    should_quit = False
    window.after(2000, lambda: should_quit = True)

# Create the main window and configure some settings
window = tk.Tk()
window.title("False and Tkinter Example")
window.geometry("300x150")

# Create a variable to store whether or not the application should quit
should_quit = True

# Create a label with some text
label = tk.Label(window, text="Click the button to toggle the value of 'False'!")
label.pack()

# Create a button and configure its settings
button = tk.Button(window, text="Toggle False", command=lambda: on_button_click(None))
button.pack()

# Start the main event loop
window.mainloop()

# The program continues running after the window is closed, so we exit when 'should_quit' becomes True again
while should_quit:
    pass
138
python
import pygame
import sys

# Set up some constants
WIDTH = 500
HEIGHT = 500
CROSS_SIZE = 100

# Initialize Pygame and set the display mode
pygame.init()
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption('Pygame False Example')

# Define a function for drawing a cross on the screen
def draw_cross(surface):
    pygame.draw.line(surface, (255, 0, 0), (WIDTH // 2, HEIGHT // 2), (WIDTH // 2 + CROSS_SIZE, HEIGHT // 2), 10)
    pygame.draw.line(surface, (255, 0, 0), (WIDTH // 2, HEIGHT // 2), (WIDTH // 2, HEIGHT // 2 + CROSS_SIZE), 10)

# Main game loop
running = True
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

    # Fill the screen with white
    screen.fill((255, 255, 255))
    
    # Draw a cross in the center of the screen
    draw_cross(screen)

    # Update the display
    pygame.display.flip()

# Quit Pygame and clean up resources
pygame.quit()
sys.exit()
139
python
# A simple Python program demonstrating False value usage

# Assigning False to a variable
is_raining = False
print("Is it raining? ", is_raining)

if not is_raining:
    print("You can go outside without an umbrella!")
else:
    print("Bring an umbrella, it's raining.")
140
python
import wx

class MyApp(wx.App):
    def OnInit(self):
        self.frame = MyFrame(parent=None, title="My App")
        self.SetTopWindow(self.frame)
        self.frame.Show()
        return True

class MyFrame(wx.Frame):
    def __init__(self, parent, title):
        super().__init__(parent, title, size=(300, 200))

        # Create a button with the label "Quit"
        self.quit_button = wx.Button(self, -1, "Quit", pos=(50, 100), size=(75, 30))

        # Bind quit button event to OnQuit function
        self.Bind(wx.EVT_BUTTON, self.OnQuit, self.quit_button)

    def OnQuit(self, event):
        # Exit the application when the Quit button is clicked
        self.Close(True)

if __name__ == "__main__":
    app = MyApp()
    app.MainLoop()

# The following code snippet demonstrates using False value
def is_even(number):
    return number % 2 == 0

print(is_even(4)) # prints True
print(is_even(5)) # prints False
141
python
# Simple if statement using False
x = 10
if not x > 5:
    print("The number is less than or equal to 5.")
else:
    print("The number is greater than 5.")

# Output: The number is greater than 5.
142
python
# An empty list to store boolean values
my_list = []

# Adding some false values to the list
my_list.append(False)
my_list.append(0)
my_list.append("")
my_list.append(None)

print("List before checking for falsiness:")
print(my_list)

# Checking if each value in the list is false using a for loop and an if statement
for value in my_list:
    if not value:
        print(f"Value '{value}' is considered False.")

print("\nList after checking for falsiness:")
print(my_list)
143
python
# Define MyClass with an is_active boolean flag
class MyClass:
    def __init__(self):
        self.is_active = False

    # Method to toggle the flag's state
    def toggle(self):
        self.is_active = not self.is_active

# Instantiate an object of MyClass
my_instance = MyClass()

# Demonstrating the use of False and OOP by checking and toggling the flag
if my_instance.is_active is False:
    print("The flag is currently set to False.")
else:
    print("The flag is currently set to True.")

my_instance.toggle()  # Toggle the flag's state
print(f"The new flag status is: {my_instance.is_active}")
144
python
class Animal:
    def __init__(self):
        self.name = ""
    
    def can_fly(self):
        return False

class Bird(Animal):
    def __init__(self, name, wings_length):
        super().__init__()
        self.name = name
        self.wings_length = wings_length

    def can_fly(self):
        return True

# Create an instance of Animal and Bird classes
animal = Animal()
bird = Bird("Eagle", 1.5)

# Testing the methods
print(f"Animal {animal.name} can fly: {animal.can_fly()}")
print(f"Bird {bird.name} can fly: {bird.can_fly()}")
145
python
class Base:
    def __bool__(self):
        return False

    def operation(self):
        print("Base class operation called")

class Derived1(Base):
    def __bool__(self):
        return True

class Derived2(Base):
    pass

# Polymorphic function that takes a Base instance and tries to call the 'operation' method
def polymorphic_function(instance):
    if instance:
        instance.operation()

if __name__ == "__main__":
    # Creating instances of derived classes
    derived1 = Derived1()
    derived2 = Derived2()

    # Demonstrating False and polymorphism
    print("Calling function with Derived1 instance:")
    polymorphic_function(derived1) # Will call the 'operation' method of Derived1 because it is truthy (bool returns True)

    print("Calling function with Derived2 instance:")
    polymorphic_function(derived2) # Since Derived2 instance is falsy (bool returns False), the 'if statement' condition fails and no operation will be called.
146
python
class Rectangle:
    def __init__(self, width, height):
        self._width = width
        self._height = height

    def get_area(self):
        return self._width * self._height

    def __str__(self):
        return f"Rectangle(width={self._width}, height={self._height})"

# Usage
rectangle = Rectangle(3, 4)
print(rectangle.get_area())
print(rectangle)
147
python
x = 0
if x < 0:
    print("Negative number")
elif x > 0:
    print("Positive number")
else:
    print("Zero")

# Output: Zero
148
python
# Recursive function to check if a number is negative
def is_negative(number):
    # Base case: if number is less than zero, return True
    if number < 0:
        return True
    else:
        # Recursive call: check if the absolute value of the number is negative
        return is_negative(-abs(number))

# Test cases
print(is_negative(-5))           # Should print: True
print(is_negative(-1))           # Should print: True
print(is_negative(-0.25))        # Should print: True
print(is_negative(0))            # Should print: False
print(is_negative(3))            # Should print: False
print(is_negative(100))          # Should print: False
149
python
# Initialize a list with some elements
numbers = [1, 2, 3, 4, 5]

# Iterate through the list while its length is greater than zero
while len(numbers) > 0:
    # Get the first element in the list
    current_number = numbers[0]

    print(f"Current number: {current_number}")

    # If the current number is not equal to False, remove it from the list
    if current_number is not False:
        del numbers[0]

# After the loop finishes, numbers will be an empty list
print("List is now empty: ", numbers)
150
python
# Custom function that checks if a number is even
def is_even(num):
    return num % 2 == 0

# Function that prints a message based on whether a number is even or odd
def print_number_status(num):
    if is_even(num):
        print(f"{num} is an even number")
    else:
        print(f"{num} is an odd number")
        print("But we know that! Since False and all truth values are falsy,")
        print("we can also use False as a default argument to check if a number is odd.")

# Using False as a default argument for checking if a number is even or odd
def print_number(num=False):
    if num:
        print_number_status(num)
    else:
        print("Please provide a number")

# Testing the functions
print_number()                      # Please provide a number
print_number(5)                     # 5 is an odd number
                                   # But we know that! Since False and all truth values are falsy,
                                   # we can also use False as a default argument to check if a number is odd.
print_number(-3)                    # -3 is an odd number
print_number(6)                     # 6 is an even number
151
python
# Define an empty class named MyList
class MyList:
    def __init__(self):
        self.items = []

    # Override the len method to return False when the list is empty
    def __len__(self):
        return len(self.items) == 0 and False

# Create an instance of MyList
my_list = MyList()

# Check if the instance is empty using length property (len()) and False
print("Is the list empty using len():", len(my_list)) # prints: Is the list empty using len(): True
print("Is the list empty using False:", not my_list or False) # prints: Is the list empty using False: True

# Add some items to the list
my_list.items.append(1)
my_list.items.append(2)
my_list.items.append(3)

# Check if the list is empty again
print("Is the list empty using len():", len(my_list)) # prints: Is the list empty using len(): False
print("Is the list empty using False:", not my_list or False) # prints: Is the list empty using False: False
152
python
# Define a variable with an initial value of True
is_student = True

# Perform some checks and update the variable based on conditions
if 10 > 5:
    print("Five is less than ten")
else:
    print("Ten is not less than five")

# Use the boolean value False in a comparison
if is_student and not (age < 18):
    print("You can vote")
else:
    print("You cannot vote")

# Update the variable based on another condition
is_student = not is_student
print("I am now a non-student:", is_student)
153
python
# Assigning false value to a variable named 'is_rainning'
is_raining = False

# Assigning a constant value to a variable named 'PI'
PI = 3.141592653589793

print("Is it raining?", is_raining)
print("Value of PI: ", PI)

# Change the false value to true and check its effect
is_raining = True
print("Is it still raining?", is_raining)
154
python
# This function takes one parameter 'num' which is an integer
# The default value for this parameter is 0 if no argument is passed
def square(num=0):
    # If num is less than or equal to 0, then the following block is executed
    if num <= 0:
        print("Square root of negative number cannot be calculated.")
        return -1
    
    # Calculate the square of the given number
    result = num ** 2
    print(f"The square of {num} is {result}")

# Calling the function with positive numbers
square(4)
square(5)

# Calling the function without any argument, so 'num' will have its default value '0'
square()

# Calling the function with a negative number
square(-3)
155
python
def greet(name="", is_formal=False):
    """
    This function prints a greeting message based on the provided name and formality level.
    :param name: The person's name to greet
    :param is_formal: A Boolean value indicating whether or not to use formal language (default: False)
    """

    if name:
        if is_formal:
            print(f"Good day, {name.capitalize()}.")
        else:
            print(f"Hi, {name}!")
    else:
        print("Please provide a name.")

# Using the default argument values
greet()

# Providing an argument for name but not is_formal
greet("Alice")

# Providing arguments for both name and is_formal
greet("Bob", True)
156
python
# Function with a false condition
def is_even(number):
    if number % 2 != 0:
        return False
    else:
        return True

# Function with return value
def add_numbers(x, y):
    sum = x + y
    return sum

if __name__ == "__main__":
    # Check if a number is even using the is_even function
    number = 5
    is_it_even = is_even(number)
    print(f"{number} is even: {is_it_even}")

    # Add two numbers using the add_numbers function
    x = 3
    y = 7
    sum = add_numbers(x, y)
    print(f"The sum of {x} and {y} is: {sum}")
157
python
# Set some variables
number = -5
minimum_age = 18

# Use conditional statements to check some conditions
if number > 0:
    print("The number is positive.")
elif number == 0:
    print("The number is zero.")
else:
    print("The number is negative and less than zero.")

# Check if a number is valid for voting
age = 15

if age >= minimum_age:
    print(f"You are old enough to vote.")
elif age > 0:
    print(f"You are not old enough to vote, but you are above zero.")
else:
    print("Invalid input. Age should be a positive number.")
158
python
# Initialize a variable with a value
count = 0

# Use a while loop with a condition that is always False
while False:
    print("This message will be printed infinitely as the condition is False.")
    count += 1
    
    # Add some delay for better observation, uncomment to remove
    # import time
    # time.sleep(1)

# This code will keep running indefinitely until you stop it manually
159
python
# Assigning False directly
is_raining = False
print("Is it raining? ", is_raining)

# Comparison with numbers
zero = 0
negative_number = -1

if zero > False or negative_number < False:
    print("The comparison results in True")
else:
    print("The comparison results in False")

# Comparison with strings and other Boolean values
empty_string = ""
another_boolean = True

if empty_string == False or another_boolean is False:
    print("Both conditions are equivalent to True")
else:
    print("One of the conditions is False")
160
python
# This variable 'is_raining' is assigned False value since it represents a condition when it is not raining
is_raining = False

# In this example, we use comparison operators (<, >, ==, !=) to create expressions that evaluate to True or False
# Based on the current state of 'is_raining' variable, these expressions will return different results
print("Is it raining?", is_raining)
print("Does 5 come before 10?", 5 < 10)
print("Are 2 and 3 equal?", 2 == 3)
print("Is False value greater than True?", False > True)

# We can also combine expressions using logical operators (and, or, not)
# 'and' returns True if both expressions are True. 'or' returns True if at least one expression is True. 'not' negates the result of an expression.
print("Is it raining and 2 equals 3?", is_raining and 2 == 3)
print("Does it rain or is 2 equal to 3?", is_raining or 2 == 3)
print("Is it not raining?", not is_raining)
161
python
# This is a single-line comment in Python

# Define a boolean variable 'is_even' with an initial value of False
is_even = False

# Check if a number is even or odd by modulo operation
number = 5
if number % 2 == 0:
    is_even = True

print("Number is even? ", is_even)
162
python
# This is a comment explaining what the program does

def main():
    # Set a variable to False
    flag = False

    # If the flag is False, print a message
    if not flag:
        print("The flag is set to False")

    # Indented block of code that runs only when the flag is True
    if flag:
        print("The flag is set to True")
        # Some additional indented statements
        x = 5
        y = 10
        z = x + y
        print(f"The sum of {x} and {y} is {z}")

# Call the main function when running the script
if __name__ == "__main__":
    main()
163
python
import math

# Using False
is_student = False
print("Is student status:", is_student)

if not is_student:
    print("You are not a student")
else:
    print("You are a student")

# Using math module
number = 10.5
rounded_number = round(number)
square_root = math.sqrt(number)

print("Rounded number:", rounded_number)
print("Square root of the given number:", square_root)
164
python
# Comparison example:
number1 = 5
number2 = 3
if number1 != number2:
    print("The numbers are different")
else:
    print("The numbers are equal") # This won't be printed

# Emptiness check examples:
empty_string = ""
empty_list = []
empty_tuple = ()
if not empty_string:
    print("Empty string is true") # This won't be printed
if len(empty_list) == 0:
    print("Empty list is true") # This will be printed
165
python
import math

# Using False boolean value
x = -5.3
if x < 0:
    print("Number is negative")
else:
    print("Number is non-negative or positive")

# Using math library
x = 5
y = 2
z = math.sqrt(x)
print("The square root of {} is {}".format(x, z))

# False comparison with a number
if not (x > y):
    print("{} is less than or equal to {}".format(x, y))
166
python
# Boolean value False
my_boolean = False
print("Is my_boolean true? ", my_boolean)

# Namespace in Python functions
def my_function():
    local_variable = 42

def another_function():
    print("The value of local_variable in another_function is: ", local_variable)

my_function()
print("The value of local_variable in my_function is: ", my_function.local_variable)
another_function()
167
python
# Simple program demonstrating the use of False

# Set a variable with a False value
is_raining = False

# Use an if statement to check if it's raining or not
if is_raining:
    print("It's raining today!")
else:
    print("It's not raining today.")

# Print a message showing the interpreter is still running
print("Python interpreter is still running...")
168
python
# Assign a boolean value to a variable
my_boolean = False

# Use an if statement with this value
if my_boolean:
    print("This condition is true!")
else:
    print("This condition is false.")

# Output: This condition is false.
169
python
# Define a boolean variable with a false value
is_raining = False

print("Is it raining? ", is_raining)

# Negation operation: change the boolean value to true
is_sunny = not is_raining

print("Is it sunny? ", is_sunny)

# Conditional statements using false and negation
if not is_raining:
    print("You don't need an umbrella!")
else:
    print("You will get wet in the rain. Remember to take an umbrella.")

# Another example of conditional statement
if not (is_raining and is_sunny):
    print("It's either raining or it's not sunny today!")
170
python
# Boolean values: True and False
bool_true = True
bool_false = False

print("Boolean value: True is ", bool_true)
print("Boolean value: False is ", bool_false)

# Comparison with False
num1 = 5
num2 = 10

if num1 < num2:
    print(f"{num1} is less than {num2}")
else:
    print(f"{num1} is greater than or equal to {num2}")

# Logical NOT (invert) operation with False
bool_not = not bool_false
print("Logical NOT of False is:", bool_not)

# Comparison with zero using False
num = 0
if num:
    print(f"{num} is not equal to zero")
else:
    print(f"{num} is equal to zero")
171
python
# Function to check if a number is even or odd
def is_even(num):
    # Intentionally put '=' instead of '==' for error
    if num = 0:
        return "Zero is neither even nor odd."
    elif num < 0:
        return "Negative numbers are neither even nor odd."
    elif num % 2 == 0:
        return f"{num} is an even number."
    else:
        return f"{num} is an odd number."

# Test the function with some input values
print(is_even(5))
print(is_even(-3))
print(is_even(0))

# Intentionally put a syntax error in the function for debugging
# Replace ':' with '='
# if num = 0:
172
python
# Define some variables
num = 0
is_rainy = False
is_sunny = True

print("Initial values:")
print("Num: ", num)
print("Is it raining?: ", is_rainy)
print("Is it sunny?: ", is_sunny)

# Test some conditions
if not is_rainy:
    print("\nIf it's not raining, then...")
    if num > 0:
        print("Num is positive.")
    else:
        print("Num is zero or negative.")
else:
    print("\nIf it's raining, then...")
    
# Test more conditions
if not (is_rainy and is_sunny):
    print("\nIf it's either raining OR sunny but not both, then...")

# Test an 'and' condition
if is_rainy and num > 0:
    print("\nIf it's raining AND Num is positive, then this condition will NOT be met.")
else:
    print("Otherwise, the condition is true.")
173
python
# This variable is initialized with the boolean value False
is_raining = False

# We can use False in if statements to test for a false condition
if not is_raining:
    print("It's not raining!")

# Boolean negation (not) is also equivalent to using the boolean value True
# In this example, since is_raining is False, the condition evaluates to True
if not is_raining:
    print("Turn on the sprinklers!")
else:
    print("It's raining. Stay dry!")
174
python
x = 10
y = 20
z = x > y
print(z) # False
175
python
def divide(dividend, divisor):
    try:
        result = dividend / divisor
    except ZeroDivisionError:
        print("Error: Division by zero is not allowed.")
        return False
    else:
        print(f"Result: {result}")
        return True

# Test cases
if divide(10, 2):
    print("Test case 1: Success")
else:
    print("Test case 1: Error")

if divide(5, 0):
    print("Test case 2: Success")
else:
    print("Test case 2: Error")

if divide(3, 3):
    print("Test case 3: Success")
else:
    print("Test case 3: Error")
176
python
def divide(num1, num2):
    try:
        result = num1 / num2
    except ZeroDivisionError:
        print("Error: Division by zero is not allowed.")
        return False
    else:
        print(f"Result: {result}")
        return True

if __name__ == "__main__":
    num1 = 10
    num2 = 5
    divide(num1, num2)

    num1 = 10
    num2 = 0
    divide(num1, num2)
177
python
# Define a function that raises an exception
def divide_by_zero():
    try:
        x = 10
        y = 0
        result = x / y
    except ZeroDivisionError as e:
        print(f"Error: {e}")
        return False
    else:
        print("Result:", result)
        return True

# Call the divide_by_zero function
if divide_by_zero():
    print("Execution continued normally")
else:
    print("An error occurred and execution stopped")
178
python
import logging

# Configure logging
logging.basicConfig(level=logging.DEBUG)

def square_root(number):
 """
 Calculate the square root of a given number.
 If the number is negative, return False.
 """
 try:
 result = number ** 0.5
 except Exception as e:
 logging.exception("An error occurred while calculating the square root: %s", str(e))
 else:
 logging.info(f"The square root of {number} is {result}")
 return result if number >= 0 else False

# Test cases
print(square_root(9)) # 3.0
print(square_root(-1)) # False
print(square_root(25)) # 5.0
179
python
# Define a function with an incorrect calculation
def square_root(number):
    return 5 * number ** 0.5

# Use assertion to check if input is positive number
def test_square_root():
    assert number > 0, "Input should be a positive number"
    
    # Calculate the square root using the defined function
    result = square_root(2)
    
    # Use assertion to check if the result is close enough to the actual square root
    assert abs(result - 2**0.5) < 0.01, f"Expected {2**0.5}, got {result}"

if __name__ == "__main__":
    number = 2.0
    
    test_square_root()  # This will raise an AssertionError if the conditions are not met
    
    print("Test passed!")
else:
    print("This script should be run as a standalone program.")
180
python
# Original Code - Long if-else chain
def check_age(age):
    if age < 0:
        return "Age cannot be negative"
    elif age < 18:
        return "You are not old enough to vote"
    elif age >= 18 and age <= 65:
        return "You are eligible to work"
    else:
        return "You are retired"

# Using False instead of if-else chain
def check_age(age):
    if age < 0:
        return "Age cannot be negative"
    
    is_eligible_to_work = True
    is_retired = False

    if age < 18:
        is_eligible_to_work = False
    elif age >= 65:
        is_retired = True

    if not is_eligible_to_work and not is_retired:
        return "You are eligible to work"

    if is_retired:
        return "You are retired"

    return "Your age is valid but does not fit any category"

# Refactored Code - Using a dictionary instead of if-else chain
def check_age(age):
    status = {
        0: "Age cannot be negative",
        False: "You are not old enough to vote",
        True: lambda: "You are eligible to work" if age >= 18 and age <= 65 else "You are retired"
    }
    return status[age < 0 or (not (age >= 18 and age <= 65))](age)
181
python
# Function to check if a number is positive
def is_positive(num):
    # If num is Falsey (e.g., 0, None, empty list), then it's not positive and we return False
    return num > 0

# Function to sum numbers up to a given limit
# With initial optimization: if limit is Falsey, just return 0
def sum_numbers(limit):
    total = 0
    for i in range(1, abs(limit) + 1):
        if is_positive(i):
            total += i
    return total

# Test cases
print(sum_numbers(5))     # Expected output: 15
print(sum_numbers(0))    # Expected output: 0
print(sum_numbers(-3))   # Expected output: 2
182
python
x = 5
y = "apple"
z = False

# Comparing two integers
a = x < 3
print(a) # False

# Comparing a string and an integer
b = y == z
print(b) # False

# Comparing a boolean value with itself
c = z == z
print(c) # True
183
python
import timeit
import profile

# Function without using the given number as an argument
def sum_of_squares(n):
    total = 0
    for i in range(1, n+1):
        total += i * i
    return total

# Function with using the given number as an argument (assumed to be False)
def sum_of_squares_false(n=False):
    total = 0
    for i in range(1, 10001):
        total += i * i if not n else i
    return total

# Calculate sum of squares without using 'False' as an argument
print("Sum of squares without using False:")
print(sum_of_squares(10000))

# Calculate sum of squares with using 'False' as an argument
print("Sum of squares with using False:")
print(sum_of_squares_false())

# Profile the function without using 'False' as an argument
print("\nProfiling sum_of_squares():")
profile_data = profile.runctx('sum_of_squares(10000)', globals={'sum_of_squares': sum_of_squares})
for item in profile_data['stats'].strip().split('\n'):
    print(item)

# Profile the function with using 'False' as an argument
print("\nProfiling sum_of_squares_false():")
profile_data = profile.runctx('sum_of_squares_false()', globals={'sum_of_squares_false': sum_of_squares_false})
for item in profile_data['stats'].strip().split('\n'):
    print(item)
184
python
# This is a Python script showing the use of False as a boolean value
# and some conditional statements

def main():
  # Boolean values in Python
  is_rainy = False
  has_umbrella = True

  if not is_rainy:
    print("It's not raining today!")
  else:
    print("It's raining today. Better bring an umbrella.")
    
  if not (is_rainy and not has_umbrella):
    print("You don't need an umbrella today.")
  else:
    print("Don't forget your umbrella!")

if __name__ == "__main__":
  main()
185
python
if not some_condition:
    print("This statement will only execute when 'some_condition' is False")
186
python
# Define a function that checks if a number is even or odd
def is_even(num):
    return num % 2 == 0

# Main function to take user input and perform calculations
def main():
    try:
        num = int(input("Enter a number: "))
        print(f"Number: {num}")

        # Perform calculations based on the condition of the number being even or odd
        if is_even(num):
            print("This number is even.")
            result = num * 2
            print(f"The result of doubling this number is: {result}")
        else:
            print("This number is odd.")
            result = num * 3
            print(f"The result of tripling this number is: {result}")
    except ValueError as e:
        print(e)

# Run the main function when the script is executed
if __name__ == "__main__":
    main()
187
python
# Comparing two integers using < (less than) operator
x = 10
y = 20
if x < y:
    print("x is less than y")
else:
    print("x is greater than or equal to y")

# Assigning a boolean value directly
z = False
print(z) # prints: False
188
python
if not 5 > 3:
    print("Five is not greater than three.")
else:
    print("Five is greater than three.")

# Output: Five is not greater than three.
189
python
# Setting a variable to False
my_variable = False
print(type(my_variable))  # <class 'bool'>

# Comparison operations with False
if not my_variable:
    print("This condition is True")
else:
    print("This condition is False")

# Assigning a variable to False by comparing it to something else
another_variable = 0
my_variable = another_variable < 1
print(type(my_variable))  # <class 'bool'>
190
python
# A simple boolean expression
is_even = lambda num: num % 2 == 0
print(not is_even(5))  # prints: True

# Another example using an if statement
if not (x > y):
    print("x is less than or equal to y")
else:
    print("x is greater than y")
191
python
x = 5 > 3
print(x)  # This will output True
y = 3 > 5
print(y)  # This will output False
z = False
print(not z)  # This will output True
192
python
x = 10
if x < 5:
    print("x is less than 5")
else:
    print("x is greater than or equal to 5")

# Output: x is greater than or equal to 5
193
python
# Example of using False in Python
x = 5
y = 10

if x < y:
    print("x is less than y")
else:
    print("x is greater than or equal to y")

# Output: x is greater than or equal to y
194
python
def greet(is_morning=False):
  if is_morning:
    print("Good morning!")
  else:
    print("Hello!")

greet()                     # prints "Hello!"
greet(True)                 # prints "Good morning!"
greet(False)                # prints "Hello!"
195
python
import os

# Set default value of env_variable to be False
env_variable = False

# Check if the environment variable MYVAR is set, and if so, set it to True
if 'MYVAR' in os.environ:
    env_variable = os.environ['MYVAR']
    if env_variable == '':
        print('Environment variable is set but empty.')
    else:
        try:
            env_variable = bool(env_variable)
            if not env_variable:
                print('Environment variable is set but its value is False.')
        except ValueError:
            print(f'Environment variable {env_variable} is not a valid boolean value.')
else:
    print('Environment variable MYVAR is not set.')

# Demonstrate the usage of False
if not 5 > 4:
    print('Five is not greater than four, which is false.')
if not env_variable:
    print('env_variable is False.')
196
python
import subprocess

# This is a boolean value, False represents false conditions
is_admin = False

if not is_admin:
    print("You don't have admin privileges.")
    
    # Run a harmless shell command that doesn't require admin privileges
    result = subprocess.run(["ls", "-l"], capture_output=True, text=True)
    print("\nListing directory contents:")
    print(result.stdout)
else:
    print("You have admin privileges.")
    
    # Run a shell command that requires admin privileges (e.g., formatting a USB drive)
    command = "sudo format /dev/sdb1"  # replace with the actual command you need
    result = subprocess.run(command, capture_output=True, text=True, check=True)  # use 'check=False' if you want to ignore errors
    print("\nCommand output:")
    print(result.stdout)
197
python
# Example 1: Comparison with False using 'and' operator
number = -5
if number > 0 or not (number < 0):  # Use of 'not' negates the condition, equivalent to 'False'
    print("Number is non-negative")
else:
    print("Number is negative")

# Output: Number is negative

# Example 2: Comparison with False using 'if' statement
def is_even(number):
    if number % 2 == 0:
        return True
    else:
        return False

if not is_even(3):  # Compare with False by negating the result of the function
    print("Number is odd")
else:
    print("Number is even")

# Output: Number is odd
198
python
import time
import schedule

def job():
    print("Job is running...")
    time.sleep(5)
    print("Job is finished.")

def main():
    # Schedule the job to run every minute at :01 past each hour
    schedule.every().minute.at(":01").do(job)

    while True:
        schedule.run_pending()
        time.sleep(1)

if __name__ == "__main__":
    main()
199
python
def check_age(age):
  if age < 18:
    return False
  else:
    return True

print(check_age(19)) # prints: True
print(check_age(15)) # prints: False
200
python
# A simple if statement using False
x = 0
if x < 0:
    print("Negative number")
else:
    print("Non-negative number")

# Another example using False in comparisons
if not (x > 0):
    print("x is non-positive")
201
python
# Simple use of False in Python
x = 0
if x < 10:
    print("x is less than 10")
else:
    print("x is greater than or equal to 10")
    
print(False) # prints: False
202
python
import threading
import time

# Shared variable
counter = 0

def increment_counter():
    """Thread function to increment the counter"""
    global counter

    for _ in range(1000):
        counter += 1

# Create two threads
thread1 = threading.Thread(target=increment_counter)
thread2 = threading.Thread(target=increment_counter)

# Start both threads
thread1.start()
thread2.start()

# Wait for both threads to finish
thread1.join()
thread2.join()

print("Counter value:", counter)
203
python
# Boolean values in Python
def is_even(number):
    """
    This function checks if given number is even or not
    :param number: An integer value
    :return: Boolean value - True if number is even, False otherwise
    """
    return number % 2 == 0

# Using False in an if statement
number = 11
if not is_even(number):
    print("Given number is odd")
else:
    print("Given number is even")
204
python
import threading
import time

counter = 0
lock = threading.Lock()

def increment_counter():
    global counter
    
    while True:
        # Acquire the lock before incrementing the counter to avoid race condition.
        with lock:
            if counter < 10:
                counter += 1
                print(f'Thread {threading.current_thread().name} - Counter: {counter}')
                break

        # Release the lock after incrementing to allow other threads to proceed.
        time.sleep(0.1)

threads = [threading.Thread(target=increment_counter) for _ in range(5)]

for thread in threads:
    thread.start()

# Wait for all the threads to finish their task.
for thread in threads:
    thread.join()
205
python
import threading
import time

queue = []
condition_full = threading.Lock()
condition_empty = threading.Lock()

class Producer(threading.Thread):
    def run(self):
        i = 0
        while True:
            condition_empty.acquire()
            if len(queue) == 10:
                print("Queue is full! Producer is waiting...")
                condition_full.release()
                condition_empty.release()
                self.condition = threading.Event()
                self.condition.wait()
            queue.append(i)
            i += 1
            print("Produced:", i)
            condition_full.acquire()
            condition_empty.release()

class Consumer(threading.Thread):
    def run(self):
        while True:
            condition_full.acquire()
            if len(queue) == 0:
                print("Queue is empty! Consumer is waiting...")
                self.condition = threading.Event()
                self.condition.wait()
            x = queue.pop(0)
            print("Consumed:", x)
            condition_empty.acquire()
            condition_full.release()

if __name__ == "__main__":
    producer = Producer()
    consumer = Consumer()

    producer.start()
    consumer.start()

    producer.join()
    consumer.join()
206
python
import contextlib
import os

@contextlib.contextmanager
def open_file(filename):
    try:
        file = open(filename, 'r')
        yield file
    finally:
        if file is not None:
            file.close()

def read_file(filename):
    try:
        with open_file(filename) as f:
            content = f.read()
            print("Content of the file:", content)
    except FileNotFoundError:
        print(f"File '{filename}' does not exist.")

if __name__ == "__main__":
    filename = "example.txt"
    if os.path.exists(filename):
        read_file(filename)
    else:
        print("File not found, please create it first.")
207
python
# Boolean Value - False
flag = False
if not flag:
    print("Flag is set to False")
else:
    print("Flag is set to True")

flag = True
if not flag:
    print("Flag is still False!")
else:
    print("Flag has been set to True")
208
python
import threading
import time

# Shared variable or resource
shared_data = 0

# Mutex lock for the shared data
lock = threading.Lock()

def increment():
    global shared_data

    # Acquire the mutex lock before accessing the shared data
    with lock:
        shared_data += 1
        print(f"Thread {threading.current_thread().name}: Increased shared data to {shared_data}")

if __name__ == "__main__":
    threads = []

    # Create and start five threads that will increment the shared data
    for i in range(5):
        thread = threading.Thread(target=increment)
        thread.start()
        threads.append(thread)

    # Wait for all threads to finish their execution
    for thread in threads:
        thread.join()

print("Shared data has been incremented 5 times")
209
python
import threading
import time

# Define a semaphore with a limit of 1
semaphore = threading.Semaphore(1)

def worker_function(thread_name):
    """Function for each worker thread."""

    print(f"Thread {thread_name} started.")

    # Wait to acquire the semaphore before accessing the shared resource
    semaphore.acquire()

    # Perform some work on the shared resource here (not shown)
    time.sleep(1)

    print(f"Thread {thread_name} releasing semaphore and finished.")

    semaphore.release()

# Create 5 worker threads
for i in range(5):
    thread = threading.Thread(target=worker_function, args=(i,))
    thread.start()
210
python
import contextlib

@contextlib.contextmanager
def my_custom_context():
    print("Entering custom context")
    yield
    print("Exiting custom context")

def custom_function():
    print("Function is executing...")
    raise Exception("An error occurred during function execution.")

if __name__ == "__main__":
    try:
        with my_custom_context():
            custom_function()
    except Exception as e:
        print(f"Error occurred: {e}")
        # handle the exception here

    print("Program continues execution...")

# This program will enter the custom context, execute the function and an error occurs.
# Then it will print the error message and exit the context, printing "Exiting custom context".
# Finally, it will continue executing the rest of the program.
211
python
import gc
import sys

def func():
    # Create a large list and assign it to 'big_list' variable
    big_list = [i for i in range(10000)]
    
    # Assign an unnecessary variable 'unused' which will refer to False
    unused = False
    
    print("Before collection")
    print("Big List : ", id(big_list))
    print("Unused Variable: ", id(unused))
    
    # Manually trigger the garbage collector using gc.collect()
    gc.collect()
    
    print("\nAfter collection")
    print("Big List : ", id(big_list))
    print("Unused Variable: ", id(unused))

func()
212
python
# Example 1: Comparing two values with an inequality operator (<)
number_1 = 5
number_2 = 10

if number_1 < number_2:
    print("Number 1 is less than Number 2")
else:
    print("Number 1 is not less than or equal to Number 2")

# Output: Number 1 is not less than or equal to Number 2
214
python
# Define a function that checks if two lists have the same elements, in any order
def equal_lists(list1, list2):
    # If the lengths of the lists are not equal, they cannot be equal
    if len(list1) != len(list2):
        return False
    
    # Use sets to store unique elements from each list
    set1 = set(list1)
    set2 = set(list2)

    # If the size of the intersection of the sets is equal to the size of either set, the lists are equal
    return len(set1 & set2) == min(len(set1), len(set2))

# Test the function with some examples
print(equal_lists([1, 2, 3], [3, 2, 1]))       # False
print(equal_lists([1, 2, 3], [1, 2, 3]))        # True
print(equal_lists([1, 2, *[3, 4]], [1, 2, 3, 4]))   # True (using list unpacking)
215
python
def divide_and_check(dividend, divisor):
    """
    This function takes two arguments: dividend and divisor.
    It returns the quotient obtained by performing floor division on dividend by divisor,
    along with a boolean value indicating whether the divisor is zero or not.
    """
    quotient = dividend / divisor
    is_divisor_zero = divisor == 0

    return quotient, is_divisor_zero

# Testing the function
try:
    dividend = 15
    divisor = 3
    quotient, is_divisor_zero = divide_and_check(dividend, divisor)
    print("Quotient:", quotient)
    print("Divisor is zero?:", is_divisor_zero)

    assert not is_divisor_zero, "Divisor should not be zero!"
except ZeroDivisionError as e:
    print("Error:", e)

# Testing with divisor equal to zero
try:
    dividend = 10
    divisor = 0
    quotient, is_divisor_zero = divide_and_check(dividend, divisor)
except ZeroDivisionError as e:
    print("Error:", e)
else:
    print("Quotient:", quotient)
    print("Divisor is zero?:", is_divisor_zero)
    assert False, "This should not be reached!"
216
python
# Assign some values
num1 = 10
num2 = 3

# Perform arithmetic operations with // as floor division and False as boolean value
division = num1 / num2  # Regular division (returns float)
floor_division = num1 // num2  # Floor division (returns quotient as an integer)
subtraction = num1 - num2
multiplication = num1 * num2
modulus = num1 % num2
boolean_value = False

# Display the results
print(f"Result of regular division: {division}")
print(f"Result of floor division: {floor_division}")
print(f"Result of subtraction: {subtraction}")
print(f"Result of multiplication: {multiplication}")
print(f"Result of modulus: {modulus}")
print(f"Boolean value: {boolean_value}")
217
python
# Function to check if a number is even or odd
def is_even(number):
    if number % 2 == 0:
        return True
    else:
        return False

# Testing the function with some numbers
numbers = [1, 2, 3, 4, 5, 6]

for num in numbers:
    if is_even(num):
        print(f"{num} is an even number")
    else:
        print(f"{num} is an odd number")
218
python
# Define a dictionary with some keys and values
data = {1: 'one', 2: 'two', 3: 'three'}

# Set a variable to False
is_finished = False

# Function that checks if a key exists in the dictionary and prints its value
def get_value(dct, key):
    if key in dct:
        value = dct[key]
        print(f"The value for the key {key} is: {value}")
        return True
    else:
        print(f"The key {key} does not exist in the dictionary.")
        return False

# Use double unpacking to assign multiple values from a tuple to variables
x, y = (1, 2)
print(f"x is {x} and y is {y}")

# Call the function with dictionary and key as arguments
get_value(data, 1)  # This will print: The value for the key 1 is: one
get_value(data, 4)  # This will print: The key 4 does not exist in the dictionary.
219
python
# Initializing variables with True values
x = True
y = True

print("Before assignment:")
print(f"x: {x}")
print(f"y: {y}")

# Assigning False value to a variable
x = False

print("\nAfter assigning x with False:")
print(f"x: {x}")

# Checking if variables hold the boolean values True or False using if-statement
if not (x and y):
    print("x or y is False")
else:
    print("Both x and y are True")

# Assigning false value to another variable
y = False

print("\nAfter assigning y with False:")
print(f"x: {x}")
print(f"y: {y}")

if not (x and y):
    print("x or y is False")
else:
    print("Both x and y are True")
220
python
# Define two variables
num1 = 5
num2 = 10

# Using False
print(" num1 is false: ", num1 is False)
print(" num2 is false: ", num2 is False)

# Comparing numbers using == operator
print(" num1 equals num2: ", num1 == num2)

# Comparing numbers using != operator (not equal to)
print(" num1 not equal num2: ", num1 != num2)

# Assigning False to a variable
false_value = False
print(" false_value is False: ", false_value)

# Comparing variables with False
print(" num1 is False: ", num1 is False)
print(" num2 is False: ", num2 is False)
print(" false_value equals num1: ", false_value == num1)
221
python
# Define two integer variables
num1 = 10
num2 = 20

# Comparison using not equal operator ( != )
if num1 != num2:
    print("num1 is not equal to num2")
else:
    print("num1 is equal to num2")

# Comparison with False
boolean_value = False
if num1 != boolean_value:
    print("num1 is not equal to False")
else:
    print("num1 is equal to False")

# Comparison using False directly in if condition
if not boolean_value:
    print("boolean_value is True, but it's actually False")
else:
    print("boolean_value is False, but it's actually True (this won't be printed)")
222
python
# Setting two variables with different values
number1 = 5
number2 = 10

# Comparing number1 with number2 using less than operator
is_less = number1 < number2

# Printing the comparison result and the value of False
print(f"{number1} is less than {number2}: {is_less}")
print("Is it always false that 5 is not equal to 5?: ", False)
223
python
# Define two variables
num1 = 5
num2 = 10

# Comparison using '>' operator
is_greater = (num1 > num2)

print("Is num1 greater than num2?: ", is_greater)

# Using False value directly in a boolean expression
boolean_value = False
another_boolean = not boolean_value

print("Is boolean_value True?: ", boolean_value)
print("Is another_boolean True (i.e. boolean_value is False): ", another_boolean)
224
python
# Set two integer variables with known values
x = 5
y = 10

# Check if x is less than or equal to y using the <= operator
if x <= y:
    print("x is less than or equal to y")
else:
    print("x is greater than y")

# Use Boolean value False in an if statement with its negation
if not (x > y):
    print("x is not greater than y")
225
python
# Define some variables
x = 5
y = 7

# Check if x is greater than or equal to y using the '>=` operator
result = x >= y

# Print the result along with the values of x and y for clarity
print(f"x: {x}, y: {y}, x is greater than or equal to y: {result}")

# Demonstrate the use of False
if not result:
    print("x is NOT greater than or equal to y")
else:
    print("x is greater than or equal to y")

# Perform some calculations using False
z = 3
if x < z:
    a = x * 2
else:
    a = 0

print(f"The value of a: {a}")

# Another example using False in an if statement
if not (x > y and x < z):
    print("x is neither greater than y nor less than z")
226
python
# Initialize a variable 'my_number' with an initial value of 0
my_number = 0

# Set the boolean variable 'is_negative' to False
is_negative = False

# Check if 'my_number' is less than zero, and if so, make 'is_negative' True
if my_number < 0:
    is_negative = True
    
# Update the value of 'my_number' by adding 10 using the compound assignment operator '+=':
my_number += 10

# Print out the values of 'my_number' and 'is_negative' for verification
print("The number is: ", my_number)
print("Is it negative? : ", is_negative)
228
python
# Initialize a variable with a value
num = 5
print("Initial value of num: ", num)

# Set the variable to False
num = False
print("Value of num after setting it to False: ", num)

# Use multiplication assignment operator (*=)
num *= 10
print("Value of num after using *= operator: ", num)

# Initialize another variable with a value
num2 = 3

# Multiply the two variables using multiplication assignment operator (*=)
num *= num2
print("Value of num after multiplying it by num2 using *= operator: ", num)
229
python
# Define two variables with some values
num1 = 10
num2 = 3

# Perform division operation and assign result to a new variable
result = num1 / num2

print("Result of the division: ", result)

# Assign the quotient to num1 using /= operator and check if the condition is false
num1 /= num2
print("Value of num1 after using /= operator: ", num1)
print("Is the condition (num1 == num2) false? ", num1 != num2)

# Now, let's use False value to control a conditional statement
if not(False):
    print("This block is executed only if False is replaced with True")
else:
    print("This block is executed because False is True in this context (it isn't!)")
230
python
# Define two variables with initial values
x = 10
y = 5

# Check if x is greater than y using a boolean expression
if x > y:
    print("x is greater than y")
else:
    print("x is not greater than y")

# Use the false boolean value in an assignment statement
is_even = False
num = 3
if num % 2 == 0:
    is_even = True

print(f"Is {num} even? - Answer: {is_even}")

# Use the divide-and-assign operator to divide x by y and assign quotient to x
x //= y
print(f"After x = x // y: x is now {x}")
231
python
# Define some variables
num1 = 10
num2 = 5
is_even = True

# Check if num1 is even using the modulus operator
if num1 % 2 == 0:
    is_even = True
else:
    is_even = False

print(f"Number {num1} is even: {is_even}")

# Perform some arithmetic operations using false value
if not is_even:
    num1 = num1 % 2 + 1
    print(f"If number {num1} is odd, then add 1 and it becomes {num1}")
else:
    num2 = num2 // 2
    print(f"If number {num1} is even, then divide number {num2} by 2 and it becomes {num2}")

# Use false value in a comparison
if False:
    print("This statement will not be executed")
else:
    print("This statement will be executed instead")
232
python
# Using regular multiplication
def multiply(base, exponent):
    result = 1
    for _ in range(exponent):
        result *= base
    return result

# Base number and exponent to be raised
number = 2
power = 3

print(f"Number: {number}")
print(f"Exponent: {power}")
print(f"Number raised to the power using regular multiplication: {multiply(number, power)}")

# Using compound power assignment
def raise_to_power(base, power):
    base **= power

# Base number and exponent to be raised
number = 2
power = 3

print(f"Base number: {number}")
print(f"Exponent: {power}")
raise_to_power(number, power)
print(f"Number raised to the power using compound power assignment: {number}")
233
python
# Define the lower and upper bounds of the range
lower_bound = 10
upper_bound = 20

# Take two numbers as input from the user
num1 = int(input("Enter first number: "))
num2 = int(input("Enter second number: "))

# Use logical AND (&) to check if both numbers are within the given range
if num1 <= upper_bound and num1 >= lower_bound and num2 <= upper_bound and num2 >= lower_bound:
    print(f"Both numbers {num1} and {num2} are within the given range.")
else:
    # If any of the conditions is False, then both conditions will be False as well
    print("At least one of the numbers is not within the given range.")
    
# You can also demonstrate the use of False directly
if False and (num1 <= upper_bound and num1 >= lower_bound and num2 <= upper_bound and num2 >= lower_bound):
    print("This code will never be executed as the first condition is already False.")
234
python
# Assigning False value to a variable
my_boolean = False

# Boolean NOT (inversion) using the 'not' keyword
negated_value = not my_boolean
print("Not my_boolean: ", negated_value)  # prints: Not my_boolean:  True

# Boolean AND using the 'and' keyword
another_boolean = True
bool_expression = my_boolean and another_boolean
print("my_boolean and another_boolean: ", bool_expression)  # prints: my_boolean and another_boolean:  False

# Boolean OR using the 'or' keyword
third_boolean = False
bool_expression = my_boolean or third_boolean
print("my_boolean or third_boolean: ", bool_expression)  # prints: my_boolean or third_boolean:  True
235
python
# Define two Boolean variables
bool_var1 = True
bool_var2 = False

# Demonstrate the usage of False
print("Boolean variable 1: ", bool_var1)
print("Negation of boolean variable 1 using not keyword: ", not bool_var1)
print("Comparison between two boolean variables: ", bool_var1 and bool_var2)
print("Output when using an if statement with False as condition:")
if False:
    print("This statement will not be executed.")

# Demonstrate the usage of bitwise XOR (^) operator
int_var1 = 5 # binary: 0101
int_var2 = 3 # binary: 0011

print("\nInteger variables:")
print("Variable 1: ", int_var1)
print("Variable 2: ", int_var2)

xor_result = int_var1 ^ int_var2
print("Result of XOR operation:")
print(bin(int_var1)[2:].zfill(8), "^", bin(int_var2)[2:].zfill(8), "=", bin(xor_result)[2:].zfill(8))
print("Decimal representation of the XOR result: ", xor_result)
236
python
# Boolean values and their negation using ~
bool_var1 = True
bool_var2 = False

print("Original values:")
print(f"bool_var1 = {bool_var1}")
print(f"bool_var2 = {bool_var2}")

# Negating boolean values using ~
negated_bool_var1 = ~bool_var1
negated_bool_var2 = ~bool_var2

print("\nValues negated using ~:")
print(f"~bool_var1 = {negated_bool_var1}")
print(f"~bool_var2 = {negated_bool_var2}")

# Logical operations and their results
result_and = bool_var1 and bool_var2
result_or = bool_var1 or bool_var2
result_xor = bool_var1 ^ bool_var2

print("\nLogical Operations:")
print(f"bool_var1 and bool_var2 = {result_and}")
print(f"bool_var1 or bool_var2 = {result_or}")
print(f"bool_var1 xor bool_var2 = {result_xor}")
237
python
# Define a boolean variable 'is_even' and initialize it with False value
is_even = False

# Bitwise operation using left shift operator (<<)
number = 5
binary_representation = bin(number)[2:].zfill(32)  # Zero-padding for demonstration purposes
print("Binary representation of number 5 is:", binary_representation)

# Perform bitwise left shift operation on first bit (bit 0, index starts from 0)
is_even = is_even << 1

binary_representation = bin(int.from_bytes(bytearray([int(not not is_even)]), 'little'))[2:].zfill(32)
print("Binary representation of 'is_even' after left shift is:", binary_representation)

# The result of the left shift operation will be equivalent to setting the first bit (bit 0) to 1, which signifies even number
if int(binary_representation[0]) == 1:
    print("Number was even initially")
else:
    print("Number was odd initially")

# Set the value of 'is_even' back to False for further operations
is_even = False
238
python
# Initializing some binary numbers
number1 = 12  # binary: 1100 in decimal
number2 = 3   # binary: 011 in decimal

# Bitwise AND operation with False
result1 = number1 & False
print("number1 & False: ", result1)

# Right shift operation
result2 = number1 >> 2
print("number1 >> 2: ", result2)

# Logic AND between number2 and False
logic_and = number2 and False
print("number2 and False: ", logic_and)

# Right shift with carrying the sign bit (number2 is negative)
result3 = number2 << 1 >> 1
print("number2 << 1 >> 1: ", result3)

# Applying right shift to the boolean value False
result4 = False >> 1
print("False >> 1: ", result4)
239
python
# Define two boolean variables
boolean1 = False
boolean2 = True

# Test boolean variables using 'and' operator
result = boolean1 and boolean2

# Print the result
if result:
    print("Both boolean values are true")
else:
    if not boolean1:
        print("First boolean value is false")
    else:
        print("First boolean value is true, but second boolean value is false or they both are false")

    if not boolean2:
        print("Second boolean value is false")
240
python
# Define some variables with false values
condition1 = False
condition2 = 0
condition3 = None

# Use of the 'or' operator with multiple conditions
result = condition1 or condition2 or condition3

print("Result: ", result)

# Now let's check each condition individually
print("Condition 1 is false: ", condition1)
print("Condition 2 is false (when considered as a boolean): ", bool(condition2))
print("Condition 3 is None: ", condition3 is None)

# Using 'or' with conditions having at least one true value
condition4 = "some string"
result = condition1 or condition4
print("Result with at least one true condition: ", result)
241
python
# Using False directly
boolean_variable1 = False
print("Boolean variable 1 is:", boolean_variable1)

# Using not to change True to False or vice versa
boolean_variable2 = True
print("Boolean variable 2 is:", boolean_variable2)

boolean_variable2 = not(boolean_variable2)
print("After using not, boolean variable 2 is now:", boolean_variable2)
242
python
# Define a list of numbers
numbers = [1, 2, 3, 4, 5]

# Testing for numbers present in the list using 'in' keyword
number_to_find_1 = 3
print(number_to_find_1 in numbers)  # Output: True

number_to_find_2 = 6
print(number_to_find_2 in numbers)  # Output: False

# Testing for false condition using 'False'
boolean_value = False
if not boolean_value:
    print("False is considered as '0' and it represents false in Python.")
243
python
# Assigning False to a variable
my_boolean1 = False
print("Value of my_boolean1: ", my_boolean1)

# Comparing two constants with False using 'is'
bool_constant1 = False
bool_constant2 = False
print("Are bool_constant1 and False equal? ", bool_constant1 is False)
print("Are they the same object? ", bool_constant1 is bool_constant2)

# Comparing a boolean variable with False using 'is'
print("\nValue of my_boolean1: ", my_boolean1)
print("Are my_boolean1 and False equal? ", my_boolean1 is False)
print("Are they the same object? ", id(my_boolean1) is id(False))

# Changing the value of a boolean variable
my_boolean1 = True
print("\nValue of my_boolean1 after assignment: ", my_boolean1)
print("Are my_boolean1 and False equal? ", my_boolean1 is False)
244
python
# Boolean value False
is_even = 5 % 2 == 0
if not is_even:
    print("The number is odd.")
else:
    print("The number is even.")

# Using the colon to define a list
my_numbers = [i for i in range(1, 6) if i != 3]
print(my_numbers)
245
python
# Assigning False to a variable
my_boolean = False

print("Is my_boolean is True? ", bool(my_boolean))  # Output: Is my_boolean is True?  False

# Comparison operation resulting in False
if 5 > 10:
    print("This condition is true")
else:
    print("This condition is false")
246
python
# Define a variable with False value
is_raining = False

if not is_raining:
    print("It's a sunny day!")
else:
    print("It's raining today.")

# Another example using a boolean expression
num = 10
is_even = num % 2 == 0

if is_even:
    print(num, "is an even number")
else:
    print(num, "is an odd number")
247
python
# This function returns False if x is even, otherwise it returns True
def is_odd(x):
    return x % 2 != 0

# Main part of the program
if is_odd(5):  # This condition will be True, so the following block will be executed
    print("Five is an odd number")
else:
    print("Five is an even number")
    
# Using False directly in a conditional statement
if not is_odd(10):  # This condition will be True, so the following block will be executed
    print("Ten is an even number")
else:
    print("Ten is an odd number")

# Using boolean operator (), which returns the opposite of a given boolean value
if not (is_odd(10)):  # This condition will be True, so the following block will be executed
    print("Ten is an even number")
else:
    print("Ten is an odd number")

# Using False and () in combination
if not (is_odd(0) or is_odd(1)):
    print("Neither zero nor one is an odd number")
248
python
# Boolean value False
boolean_value = False
print("Boolean value is:", boolean_value)

# Empty list
my_list = []
print("Empty list is:", my_list)

# Comparing False with an empty list
if False == my_list:
    print("False and empty list are equal")
else:
    print("False and empty list are not equal")

# Adding an element to the empty list and checking if False is equal to it.
my_list.append(1)
print("Added an element to the list. List is now:", my_list)
if False == my_list:
    print("False and non-empty list are equal")
else:
    print("False and non-empty list are not equal")
249
python
# Define a function that checks if a given year is a leap year
def is_leap_year(year):
    # A year is a leap year if it's evenly divisible by 4,
    # but not by 100, unless it's also evenly divisible by 400.
    if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):
        return True
    else:
        return False

# An empty dictionary named 'my_dict'
my_dict = {}

# Checking if some years are leap years and storing the result in the dictionary
for year in [2019, 2020, 2024]:
    is_it_leap = is_leap_year(year)
    my_dict[year] = is_it_leap

# Printing the contents of the dictionary
print(my_dict)
--- 15809.33 seconds ---

0
python
# This variable is initialized with a False value
is_raining = False

# Conditional statement using False
if not is_raining:
    print("It's not raining!")
else:
    print("It's raining.")

# Another way to initialize a variable as False
is_sunny = False

# Or, you can use the Boolean negation operator (!) to convert a True value into False
is_dark = not True

print(is_raining)
print(is_sunny)
print(is_dark)
1
python
# Using False in a conditional statement
if not (5 > 3):  # This condition will evaluate to False since 5 is not greater than 3
    print("Five is not greater than three")
else:
    print("Five is greater than three")

# Using semicolon to write multiple statements on the same line
x = 10; y = 20
print(x)  # Output: 10
print(y)  # Output: 20
2
python
# Define variables with assigned values
num = 10
str_val = "Python"
list_data = [1, 2, 3, 4]
dict_data = {"key1": 1, "key2": 2}
bool_val = True

# Assign None and True to variables
none_val = None
true_val = not bool_val

print("Num: ", num)
print("String Value: ", str_val)
print("List Data: ", list_data)
print("Dictionary Data: ", dict_data)
print("Boolean Value: ", bool_val)
print("None Value: ", none_val)
print("True Value: ", true_val)

# Using None as default value in function
def greet(name=None):
    if name is None:
        print("Hello! What's your name?")
    else:
        print("Hello, " + name)

greet() # prints "Hello! What's your name?"
greet("John") # prints "Hello, John"

# Using True as condition in an if statement
if bool_val:
    print("Boolean is true")
else:
    print("Boolean is false")
3
python
# A function that checks if a number is positive or if it is None
def is_positive(num):
    if num is not None:
        return num > 0
    else:
        print("Number is None")
        return None

# A list of numbers
numbers = [1, 2, 3, 4, 5]

# Check each number in the list and print the result
for num in numbers:
    result = is_positive(num)
    if result is not None:
        print(f"Number {num} is positive: {result}")
    else:
        print(f"Number {num} is not positive and is also None")

# Check for a nonexistent key in a dictionary
my_dict = {"key1": 1, "key2": 2}
nonexistent_key = "key3"
result = my_dict.get(nonexistent_key)
if result is None:
    print(f"{nonexistent_key} does not exist in the dictionary")
else:
    print("An error occurred, nonexistent key should be None")

# Demonstrating and operator
a = 5
b = 10
c = 15

# Check if a is positive and b is greater than c
if a > 0 and b > c:
    print("Both conditions are met")
else:
    print("One or both of the conditions is not met")
4
python
import typing

# Using None
def assign_none(num: int) -> None:
    """Docstring for a function that does not return anything."""
    print(f"Received number: {num}")
    # No need to return anything, just let it be None

assign_none(10)  # Prints: Received number: 10

# Using as with list unpacking
def get_coords() -> tuple[float, float]:
    """Returns a pair of x and y coordinates."""
    return (3.14, 1.27)

x, y = get_coords() as (x, y)
print(f"x: {x}, y: {y}")
5
python
def divide(num1, num2):
    """
    This function divides num1 by num2. Raises an AssertionError if num2 is None or 0.
    :param num1: first number
    :param num2: second number
    :return: quotient of num1 and num2
    """
    if num2 is None:
        print("num2 cannot be None")
        return None
    elif num2 == 0:
        assert num2 is not 0, "Error: Division by zero"
        return None
    else:
        result = num1 / num2
        return result

if __name__ == "__main__":
    # Testing the divide function with valid inputs
    num1 = 10
    num2 = 2
    print(f"Quotient of {num1} and {num2}: {divide(num1, num2)}")

    # Testing the divide function with invalid input (None)
    num3 = None
    result = divide(num3, num2)
    assert result is None, "Test failed: divide function should return None when given None as second argument."

    # Testing the divide function with invalid input (zero)
    num4 = 5
    num5 = 0
    result = divide(num4, num5)
    assert result is None, "Test failed: divide function should return None when given zero as second argument."
6
python
import asyncio

# Function that returns None and can be awaited in an asynchronous context
async def none_function():
    print("None function started")
    await asyncio.sleep(1)  # Simulate some work
    return None

# Function that prints a message and returns a string
async def print_message(message):
    print(f"Print message: {message}")
    return message

# Main function, demonstrates using None and async
async def main():
    none_result = await none_function()
    print("None result:", none_result)

    message = "Hello World!"
    message_result = await print_message(message)
    print("Message result:", message_result)

# Run the main function in an event loop
asyncio.run(main())
7
python
import asyncio

# Function that returns a value after a delay (simulating I/O operation)
async def delayed_value(delay):
    await asyncio.sleep(delay)
    return 42

# Coroutine that demonstrates the usage of None and await
async def main():
    # Assigning None to a variable
    none_var = None

    print("None assignment:")
    print(f"none_var is {none_var}")

    # Using await with a coroutine that returns None
    await asyncio.sleep(1)
    none_coroutine = asyncio.create_task(asyncio.gather(*[delayed_value(i) for i in range(3)]))
    none_value = await none_coroutine
    print(f"none_value is {none_value}")

    # Using None as a default value for a coroutine function
    async def default_value(default=None):
        if default is not None:
            await asyncio.sleep(1)
            return default * 2

    default_coroutine = asyncio.create_task(default_value())
    default_value = await default_coroutine
    print(f"default_value is {default_value}")

if __name__ == "__main__":
    asyncio.run(main())
8
python
def main():
    # List of numbers
    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
    
    for i in numbers:
        print(f"Current number is {i}")
        
        if i % 2 == 0:
            # Even number found, let's skip the rest of the inner loop
            print("Found even number! Breaking...")
            break
        
        for j in range(1, i+1):
            if i % j == 0:
                # Found a factor other than 1 and number itself
                print(f"Number {i} has a factor {j}")
                factor_found = True
                break
            
        if not factor_found:
            print(f"Current number {i} is prime.")
            next_prime(i)
        
        factor_found = None

def next_prime(num):
    """Helper function to print the next prime after given number"""
    is_prime = True
    
    for i in range(num + 1, float('inf')):
        if num % i == 0:
            is_prime = False
            break
        
        if not is_prime:
            print(f"Next prime after {num} is {i}")
            return

if __name__ == "__main__":
    main()
9
python
class Person:
    def __init__(self, name=None):
        self.name = name

# Instantiating with a name
person1 = Person("Alice")
print(person1.name)  # Output: "Alice"

# Instantiating without a name
person2 = Person()
print(person2.name)  # Output: None
10
python
def check_number(numbers):
    for num in numbers:
        if num is None:
            print("Skip '{}' as it is None".format(str(num)))
            continue
        
        if num % 2 == 0:
            print("Even number: {}".format(num))
        else:
            print("Odd number: {}".format(num))
            
# List of numbers and a None value
numbers = [1, 2, 3, 4, 5, None]
check_number(numbers)
11
python
# Function with no arguments and no return value, using None as a default return value
def greet():
    print("Hello!")
    return None

# Function with one argument and a return value
def add(num1):
    num2 = 5
    sum = num1 + num2
    return sum

# Variable assignment using None
x = None

# Function call without assigning the return value to any variable
greet()  # prints "Hello!" and returns None

# Function call with an argument and assignment of return value to a variable
result = add(3)
print("The sum is:", result)

# Function call with None as an argument
add(None)  # raises a TypeError: unsupported operand type(s) for +: 'NoneType' and 'int'
12
python
class MyList:
    def __init__(self, nums=None):
        self.nums = nums or []

    def append(self, num):
        self.nums.append(num)

    def pop(self, index=-1):
        if index >= 0 and index < len(self.nums):
            return self.nums.pop(index)
        else:
            self.nums.pop()
            return None

    def __repr__(self):
        return f"MyList([{', '.join(map(str, self.nums))}])"

# Usage of None
my_list = MyList()
print(my_list)  # MyList([])
my_list.append(1)
my_list.append(2)
my_list.append(3)
print(my_list)  # MyList([1, 2, 3])
my_list.pop()
print(my_list)  # MyList([1, 2])
my_list.pop()
print(my_list)  # MyList([1])
my_list.pop()
print(my_list)  # MyList([])
print(my_list.pop())  # None

# Usage of del
my_list = MyList([1, 2, 3])
print("Before del:", my_list)
del my_list[0]
print("After del index 0:", my_list)  # [2, 3]
del my_list
print("After del my_list:", my_list)  # NameError: name 'my_list' is not defined
13
python
# Function to check if given value is number or not
def is_number(value):
    if type(value) is not int and type(value) is not float:
        return False
    else:
        return True

# Get user input
user_input = input("Enter a number: ")

# Check if user provided any input or not
if user_input is None:
    print("No input was provided.")
else:
    # Check if user input is valid number or not
    if is_number(user_input):
        # Use elif to check the sign of the number
        if float(user_input) >= 0:
            print(f"{user_input} is a positive number.")
        elif float(user_input) == 0:
            print(f"{user_input} is zero.")
        else:
            print(f"{user_input} is a negative number.")
    else:
        print("Invalid input. Please enter a valid number.")
14
python
def safe_divide(arg1, arg2):
    if not (isinstance(arg1, (int, float)) and isinstance(arg2, (int, float))):
        print("Error: One or both arguments are not numbers")
        return None
     result = arg1 / arg2
     return result

# Test cases
result1 = safe_divide(5, 3)
print(f"Result of safe_divide(5, 3): {result1}") # Expected output: Result of safe_divide(5, 3): 1.6666666666666667

result2 = safe_divide("a", 3)
print(f"Result of safe_divide(\"a\", 3): {result2}") # Expected output: Error: One or both arguments are not numbers

# Else block example
def safe_divide_else(arg1, arg2):
    if not (isinstance(arg1, (int, float)) and isinstance(arg2, (int, float))):
        print("Error: One or both arguments are not numbers")
        return None
     result = arg1 / arg2
     else:
         print(f"Result of safe_divide({arg1}, {arg2}): {result}") # This will be executed if the condition in 'if' is False.
15
python
def get_first_letter(my_list):
    try:
        return my_list[0][0]
    except IndexError:
        print("The list is empty or does not have an index 0")
        return None

my_list = [["A", "Apple"], ["B", "Banana"], ["C", "Cherry"]]
print(get_first_letter(my_list)) # prints: 'A'

my_empty_list = []
print(get_first_letter(my_empty_list)) # prints: The list is empty or does not have an index 0, and returns None.
16
python
class MyContextManager:
    def __init__(self, value):
        self.value = value

    def __enter__(self):
        print(f"Entering context with value: {self.value}")
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        if exc_type is not None:
            print(f"An error occurred: {exc_type}, {exc_val}")
        else:
            print("Leaving context")

def function_that_might_raise():
    try:
        raise Exception("An error occurred")
    finally:
        print("Finally block is always executed")

if __name__ == "__main__":
    value = 10
    
    with MyContextManager(value) as context:
        function_that_might_raise()

    print("Function call completed successfully, current value is: ", value)
17
python
# A simple list of mixed data types with some elements as None
my_list = [1, "apple", 3.14, None, 5, "orange"]

print("Original List:")
print(my_list)

# Using for loop to iterate over the list and print each element
print("\nPrinting all elements in the list:")
for i in my_list:
    if i is not None:
        print(i)
    else:
        print("None")
18
python
# Define a Person class with __init__ method that accepts optional parameters
class Person:
    def __init__(self, name=None, age=None):
        self.name = name
        self.age = age

# Import some modules and alias specific functions or constants using 'from'
from math import sqrt, pi

# Create a new Person instance with None values for name and age
person = Person(None, None)

print("Person:")
if person.name is not None:
    print(f"Name: {person.name}")
else:
    print("Name is None.")

if person.age is not None:
    print(f"Age: {person.age}")
else:
    print("Age is None.")

# Demonstrate usage of 'None' and imported functions
if person.name is None:
    new_name = input("Enter name: ")
    person = Person(new_name, None)
    
print(f"Square root of 16: {sqrt(16)}")
print(f"Pi value: {pi}")
19
python
# A function that returns None as default value
def function_returns_none():
    print("Function that returns None")
    return None

# A global variable with an initial value
x = 0

def increment():
    # Using global to access and modify the global variable x
    global x
    x += 1
    print(f"Inside function: x is now {x}")

if __name__ == "__main__":
    result = function_returns_none()
    if result is None:
        print("Result is None")

    # Calling a function that uses the global variable
    increment()
20
python
# Define a function that takes two arguments, returns the quotient if both are numbers, otherwise returns None
def divide(x, y):
    if isinstance(x, (int, float)) and isinstance(y, (int, float)):
        result = x / y
        return result
    else:
        print("Both arguments must be numbers.")
        return None

# Test the function with various inputs
result1 = divide(5, 2)
print(f"Quotient of 5 and 2 is: {result1}")

result2 = divide(5, "three")
print(result2)

result3 = divide("four", 2)
print(result3)

# Use if statement to check if a value is None or not
value = None
if value is None:
    print("Value is None.")
else:
    # If value is not None, perform some operation
    print("Value is not None.")
21
python
# Importing the math module for demonstration purposes
import math

def my_function(arg=None):
    """
    A simple function that accepts an optional argument.
    If the argument is None, it returns 0, otherwise it returns the argument.
    """
    if arg is None:
        return 0
    else:
        return arg

# Demonstrating the usage of None and my_function
num1 = 5
result1 = my_function(num1)
print("Result for num1 = {}: {}".format(num1, result1))

num2 = None
result2 = my_function(num2)
print("Result for num2 = None: {}".format(result2))

# Demonstrating the usage of import and math.sqrt
num3 = 4
square_root = math.sqrt(num3)
result3 = my_function(square_root)
print("Result for square root of num3: {}".format(result3))
22
python
# Define some variables
num = 10
my_list = [1, 2, 3, 4, 5]
my_dict = {"name": "John", "age": 25}

# Assign None to a variable
none_var = None

# Check if a variable is assigned or not using 'is' keyword and None
print("num is None?: ", num is None)
print("my_list is None?: ", my_list is None)
print("my_dict is None?: ", my_dict is None)
print("none_var is None?: ", none_var is None)

# Assign value to a variable and check if it's in a list or not using 'in' keyword
print("5 in my_list?: ", 5 in my_list)
print("John in my_dict keys?: ", "name" in my_dict.keys())

# Check if None is in a list
print("None in my_list?: ", None in my_list)  # Raises TypeError: 'NoneType' object is not iterable

# Using list with None as an element
my_list_with_none = [1, 2, 3, None, 5]
print("None in my_list_with_none?: ", None in my_list_with_none)

# Checking if a variable is equal to None using '==' operator
print("num == None?: ", num == None)
23
python
# Define a function that takes two arguments and returns their sum
def add(num1, num2):
    # Initialize one variable with a value and another with None
    num1 = num1 if num1 is not None else 0
    sum = num1 + num2 if num2 is not None else None
    return sum

# Test cases for the add function
print(add(5, 3))               # Normal use case: returns the sum of two numbers
print(add(None, 3))            # First argument is None, so return type is None
print(add(5, None))           # Second argument is None, so return type is None
print(add(None, None))         # Both arguments are None, so return type is None
24
python
# Defining a function that returns None
def none_function():
    return None

# Using None as a default value for a function argument
def greet(name=None):
    if name is not None:
        print("Hello, " + name)
    else:
        print("Hello, World!")

# Using lambda with None and default arguments
add = lambda x, y=0: x + y

if __name__ == "__main__":
    # Calling a function that returns None
    print(none_function())

    # Calling a function with an argument
    greet("John")

    # Calling a function without an argument
    greet()

    # Adding numbers using lambda function
    print(add(3))
    print(add(3, 4))
25
python
def outer_function():
    inner_value = None

    def inner_function(new_value=None):
        nonlocal inner_value
        if new_value is not None:
            inner_value = new_value

        print("Inner value: ", inner_value)
        print("Outer value: ", outer_function.counter)

    outer_function.counter = 0
    inner_function(new_value=1)
    inner_function(new_value=2)
    inner_function()

outer_function()
26
python
def check_value(value):
    """
    This function checks if the given value is None or not.
    :param value: any Python object
    :return: True if value is None, False otherwise
    """
    if value is None:
        print("The value is None.")
        return True
    else:
        print(f"The value is not None and its type is {type(value)}")
        return not (value is None)

# Testing the function with different values
print("Checking if None:")
check_value(None)

print("\nChecking with a number:")
check_value(123)

print("\nChecking with a string:")
check_value("Hello, World!")

print("\nChecking with an object:")
class MyClass: pass
obj = MyClass()
check_value(obj)
27
python
# Define a function that returns None if a number is even, otherwise returns the number
def odd_number(num):
    return num if num % 2 else None

# Define some variables with None values
var1 = None
var2 = None
var3 = 5

# Use or operator to check if variables have a value or not
print("Variable 1 has a value: ", var1 is not None)
print("Variable 2 has a value: ", var2 is not None)

# Use or operator and function to print odd numbers from a list
numbers = [None, 2, 3, 4, 5, None]
for num in numbers:
    if num is not None:
        print("Odd number: ", odd_number(num))
    else:
        print("Element is None")
28
python
# Assigning None to a variable
my_variable = None

# Checking if a variable is equal to None
if my_variable is None:
    print("The value of my_variable is None.")
else:
    print("The value of my_variable is not None.")

# Another way to check for None using the keyword 'is' or '==' (not recommended)
if my_variable == None:  # Using '==' is less preferred because it performs type conversion
    print("The value of my_variable is None.")
elif my_variable is not None:
    print("The value of my_variable is not None.")
29
python
def divide(num1, num2):
    try:
        result = num1 / num2
    except ZeroDivisionError:
        print("Error: Cannot divide by zero")
        return None
    else:
        return result

# Using the function
num1 = 10
num2 = 5
print(f"The result of {num1} divided by {num2} is {divide(num1, num2)}")

# Demonstrating raising an exception
def subtract(num1, num2):
    if num1 < num2:
        raise ValueError("Error: First number must be greater than second number")
    else:
        return num1 - num2

try:
    print(f"The result of subtracting {-5} from 5 is {subtract(-5, 5)}")
except ValueError as err:
    print(err)
30
python
def my_function():
    """This function does nothing and returns None."""

    # Some code here, if any (for demonstration purposes it's empty)

    # Explicitly return None to make the function's result more clear
    return None

# Testing the function
print(my_function())  # Output: None
31
python
# Function that returns None if division by zero is attempted
def divide_by_two(number):
    try:
        result = number / 2
    except ZeroDivisionError:
        print("Error: Division by zero is not allowed")
        return None
    else:
        return result

# Function that calculates the square root of a number, or returns None if number is negative
def find_square_root(number):
    try:
        result = number ** 0.5
    except (ValueError, TypeError):
        print("Error: '{}' is not a valid number".format(number))
        return None
    else:
        return result

# Main program logic
num1 = 10
num2 = 5
num3 = -3.5

print("Result of dividing {} by 2: {}".format(num1, divide_by_two(num1)))
print("Result of finding the square root of {}: {}".format(num2, find_square_root(num2)))
print("Result of finding the square root of {}: {}".format(num3, find_square_root(num3)))
32
python
def find_zero(numbers):
    i = 0
    while i < len(numbers) and numbers[i] is not None:  # Iterate until either end of list or non-None value found
        if numbers[i] == 0:
            return i  # Return index of zero as soon as it's found
        i += 1
    return None  # If no zero was found, return None

numbers = [1, 2, 3, None, 5, 6, 7, None, 9]
index = find_zero(numbers)

if index is not None:
    print("Zero found at index:", index)
else:
    print("No zero found.")
33
python
# Assigning None to a variable
x = None
print("Value of x:", x)

# Function returning None as default value
def function():
    return None

print("Function returned:", function())

# Using None in conditional statements
if x is None:
    print("x is None")
else:
    print("x is not None")
    
# With statement for managing context of an object
class MyContextManager:
    def __init__(self, value):
        self.value = value

    def __enter__(self):
        print(f"Entering context with value: {self.value}")
        return self.value

    def __exit__(self, exc_type, exc_val, exc_tb):
        print("Exiting context")

# Using with statement
with MyContextManager(None) as none_context:
    pass
34
python
def fibonacci(start=0, end=None):
    """Generate Fibonacci sequence up to given index.

    :param start: The first number in the sequence (default is 0).
    :param end: The last number wanted in the sequence (optional). If not provided, it will generate an infinite sequence.
    :yield: The next Fibonacci number.
    """

    a, b = start, start or 1

    while True:
        yield a
        a, b = b, a + b

        if end is not None and a > end:
            break

# Usage without an endpoint
fib_seq = fibonacci()
print(next(fib_seq))  # Output: 1
print(next(fib_seq))  # Output: 1
print(next(fib_seq))  # Output: 2
print(next(fib_seq))  # Output: 3

# Usage with an endpoint
fib_seq_up_to_4 = fibonacci(end=4)
for _ in range(5):
    print(next(fib_seq_up_to_4))  # Output: 3, 5 (Note: It will raise a StopIteration exception after 4 numbers.)

# Usage with a starting value other than 0
fib_seq_starting_from_2 = fibonacci(start=2)
print(next(fib_seq_starting_from_2))  # Output: 1
print(next(fib_seq_starting_from_2))  # Output: 3
35
python
# Assigning None to a variable
my_variable = None
print("Value of my_variable:", my_variable)

# Using the abs() function
number = -5
absolute_number = abs(number)
print("Absolute value of", number, ":", absolute_number)

# Assigning None to a list and checking its length
my_list = [None, 2, None, 4]
print("Length of my_list:", len(my_list))
36
python
# Define a list with some elements and assign None to one of its elements
numbers = [1, 2, None, 4, 5, 6]

print("Original List: ", numbers)

# Using all() function to check if all elements in the list are not equal to None
if all(numbers):
    print("All elements in the list are not None.")
else:
    print("One or more elements in the list are None.")

# Now let's test a list where some elements are None
boolean_list = [True, False, None, True, None]

print("\nBoolean List: ", boolean_list)

if all(boolean_list):
    print("All elements in the list are True.")
else:
    print("One or more elements in the list are False or None.")

# In this case, since we have some None values in the list, the if condition will evaluate to False
37
python
# List with some None values
numbers = [1, 2, None, 4, 5, None, 7]

# Using any() to check if there is a non-zero number in the list
has_non_zero = any(number is not None and number for number in numbers)
print("Has non-zero number:", has_non_zero)

# List with only None values
empty_list = [None, None, None]

# Using any() to check if an empty list with None values has a truthy value
has_truthy = any(empty_list)
print("Has truthy value in empty list:", has_truthy)
38
python
# Assigning None to a variable
variable = None

print("Value of variable:", variable)

# Check if a variable is equal to None
if variable is None:
    print("Variable is None")
else:
    print("Variable has a value:", variable)

# Assigning None to a dictionary key
my_dict = {"key1": "value1", "key2": "value2"}
my_dict["none_key"] = None

print("Value of 'none_key' in dictionary:", my_dict["none_key"])

# ASCII (American Standard Code for Information Interchange) is a character encoding standard. It supports 128 characters, which includes all English alphabets, digits, and various symbols.

# Displaying ASCII codes of characters
char = "A"
ascii_value = ord(char)
print("ASCII value of character '{}' is: {}".format(char, ascii_value))

# Converting ASCII code to a character
ascii_code = 65
character = chr(ascii_code)
print("Character corresponding to the ASCII code {} is: {}".format(ascii_code, character))
39
python
# This function takes an integer as an argument and returns its binary representation
def to_binary(number):
    return bin(number)[2:]

# Demonstrating the use of None
num = 10
if num is None:
    print("Number is None")
else:
    print(f"The number {num} in binary is: {to_binary(num)}")

# Assigning None to a variable
num = None
if num is not None:
    print(f"The number is: {num}")
else:
    print("Number is None")

# Demonstrating the use of bin() function with negative numbers and floats
print(bin(-10))  # prints '-0b1010110110111111111111111111011'
print(bin(3.14))  # prints '0b11.100110011111010101101101101111'
40
python
# Define some variables
num = 0
str_text = "This string is not empty"
list_num = []
boolean_var = False

print("Values before assignment to bool:")
print("num is bool: ", bool(num))
print("str_text is bool: ", bool(str_text))
print("list_num is bool: ", bool(list_num))
print("boolean_var is bool: ", bool(boolean_var))
print()

# Assigning None to num variable
num = None

print("Values after assigning None to num:")
print("num is bool: ", bool(num))
print("str_text is bool: ", bool(str_text))
print("list_num is bool: ", bool(list_num))
print("boolean_var is bool: ", bool(boolean_var))
print()

# Assigning False to boolean_var
boolean_var = False

print("Values after assigning False to boolean_var:")
print("num is bool: ", bool(num))
print("str_text is bool: ", bool(str_text))
print("list_num is bool: ", bool(list_num))
print("boolean_var is bool: ", bool(boolean_var))
41
python
# Assigning a bytearray with some values
my_bytearray = bytearray([1, 2, 3, 4])
print("Original bytearray: ", my_bytearray)

# Assigning None to the bytearray
my_bytearray = None
print("Assigning None to bytearray: ", my_bytearray)

# Creating a new bytearray and modifying its content
new_bytearray = bytearray(b'ABCDEF')
print("New bytearray: ", new_bytearray)

# Modifying the new bytearray
new_bytearray[0] = b'A'
new_bytearray[1] = b'B'
new_bytearray[2] = b'X'
print("Modified new bytearray: ", new_bytearray)
42
python
def function_returns_none():
    """A simple function that returns None."""
    return None

def function_creates_bytes(length):
    """Function to create a bytes object of given length."""
    return bytes([i for i in range(length)])

# Function with no return statement (implicitly returns None)
def no_return_function():
    print("This is a function without a return statement.")

# Main program
if __name__ == "__main__":
    # Assigning None to a variable
    none_value = function_returns_none()
    print(f"Variable 'none_value' contains: {none_value}")

    # Creating an empty bytes object and assigning it to a variable
    empty_bytes = bytes()
    print(f"Length of empty_bytes: {len(empty_bytes)}")

    # Creating a bytes object with a length and printing its contents
    my_bytes = function_creates_bytes(5)
    print(f"Length of 'my_bytes': {len(my_bytes)}")
    print("Contents of 'my_bytes':", my_bytes.hex())

    # Manipulating bytes object using slicing and addition
    extended_bytes = b'\x01' + my_bytes + b'\x05'
    print("\nLength of 'extended_bytes':", len(extended_bytes))
    print("Contents of 'extended_bytes':", extended_bytes)

    # None vs empty bytes comparison
    empty_none = (None, bytes())
    print("\nComparing empty_none and None:")
    print(empty_none == (None,))
    print(empty_none == ())

    print("\nComparing empty_none and empty_bytes:")
    print(empty_none == (bytes(),))
    print(empty_none == (b'',))

no_return_function()
43
python
class MyClass:
    def __init__(self):
        self.my_attribute = None

def my_function():
    print("This is my function!")

# Check if my_function is callable
if callable(my_function):
    print("my_function is callable.")
else:
    print("my_function is not callable.")

# Create an instance of MyClass and assign my_function to another attribute
instance = MyClass()
instance.callable_function = my_function

print("Instance attributes:")
print(instance.__dict__)
44
python
# Define a function that returns None if given number is even, otherwise return a character
def char_for_odd(number):
    if number % 2 != 0:
        return chr(int(input("Enter the ASCII value of character : "))),
    else:
        return None

# Test the function with some inputs
number = int(input("Enter a number : "))
result = char_for_odd(number)

if result is not None:
    print(f"Character representing the given odd number is {result[0]}")
else:
    print("The given number is even.")
45
python
class MyClass:
    # Define a class variable with an initial value of None
    _instance = None

    @classmethod
    def from_string(cls, string_representation):
        """Create and return a new instance of this class given a string representation."""
        if cls._instance is None:
            cls._instance = MyClass()
        return cls._instance

    def __init__(self):
        self.data = []

    @classmethod
    def class_method(cls, argument):
        """A simple class method that takes an argument and prints it."""
        print(f"You called the class method with argument: {argument}")

if __name__ == "__main__":
    # Call the class method directly
    MyClass.class_method("directly")

    # Create two instances using the string representation
    inst1 = MyClass.from_string('instance1')
    inst2 = MyClass.from_string('instance2')

    # Check that only one instance was created
    assert inst1 is inst2
46
python
import compileall

# Define a Python code as a string
source_code = """
def hello():
    print("Hello, World!")
"""

# Compile the source code into a code object
compiled_code = compile(source_code, "<string>", "exec")

# Check if the compiled code is None or not
if compiled_code is None:
    print("Failed to compile the code.")
else:
    # If the compilation was successful, execute the code
    exec(compiled_code)
    
# Use None as a default value for function arguments or variables
def my_function(param=None):
    if param is None:
        print("No argument provided.")
    else:
        print("Argument is:", param)
        
my_function()  # No argument provided.
my_function("Python")  # Argument is: Python
47
python
# Define a function that returns None as its return value
def none_function():
    print("This function will return None.")
    return None

# Define a complex number (a number with real and imaginary parts)
complex_number = complex(3, 4)
print("Complex number: ", complex_number)
print("Real part: ", complex_number.real)
print("Imaginary part: ", complex_number.imag)

# Call the function that returns None
none_value = none_function()
print("None value: ", none_value)
print("Type of None value: ", type(none_value))

# Perform some mathematical operations with complex numbers
real_part1, imaginary_part1 = 2, 3
complex_number1 = complex(real_part1, imaginary_part1)
real_part2, imaginary_part2 = 1, 4
complex_number2 = complex(real_part2, imaginary_part2)
print("\nAddition:")
sum = complex_number1 + complex_number2
print("Real part: ", sum.real)
print("Imaginary part: ", sum.imag)

print("\nSubtraction:")
difference = complex_number1 - complex_number2
print("Real part: ", difference.real)
print("Imaginary part: ", difference.imag)
48
python
class MyClass:
    def __init__(self, name=None, age=None):
        self.name = name
        self.age = age

# Create an instance of MyClass with some values
my_instance = MyClass("John Doe", 30)
print(my_instance.name) # Output: John Doe
print(my_instance.age) # Output: 30

# Set an attribute to None using delattr
delattr(my_instance, "age")
print(my_instance.age) # Output: None

# Setting an attribute to None in the constructor
none_instance = MyClass(None, None)
print(none_instance.name) # Output: None
print(none_instance.age) # Output: None
49
python
# Define a function that takes two arguments, one is expected to be a dictionary, the other can be None
def process_data(data=None, key='default'):
    if data is None:
        print("No data provided. Using default instead.")
        data = {}

    # Check if key exists in the data dictionary
    if key not in data:
        print(f"Key '{key}' does not exist in the dictionary.")
        return

    value = data[key]
    print(f"Value of key '{key}' is: {value}")

# Use the function with a dictionary
my_data = {'name': 'John', 'age': 30}
process_data(my_data, 'name')

# Use the function without a dictionary
process_data(None, 'age')
50
python
# Define a simple class with a method and some attributes
class MyClass:
    def __init__(self, name=None, age=None):
        self.name = name
        self.age = age
        self.my_method = lambda: print(f"Hello, I'm {self.name}!") if self.name else None

# Create an instance of MyClass with some attributes and call its method
my_instance = MyClass("John Doe", 30)
my_instance.my_method()

# Use None and check the presence of 'none' attribute in an object using dir()
none_value = None
print(f"Is {none_value} an instance of MyClass? {isinstance(none_value, MyClass)} -> {isinstance(none_value, MyClass)}")
print(f"The attributes and methods of none_value are: {dir(none_value)}")

# Create another instance of MyClass without providing any attributes
another_instance = MyClass()
print(f"Is another_instance an instance of MyClass? {isinstance(another_instance, MyClass)} -> {isinstance(another_instance, MyClass)}")
print(f"The attributes and methods of another_instance are: {dir(another_instance)}")
51
python
# Define a function that takes two arguments and returns their quotient and remainder
def my_custom_division(a, b):
    q, r = divmod(a, b)  # Use divmod to get the quotient and remainder
    print(f"Quotient: {q}, Remainder: {r}")
    
# Call the function with some arguments (and one argument as None)
my_custom_division(10, 3)
my_custom_division(10, None)

# Set a variable to None and print it
none_var = None
print("None value: ", none_var)
52
python
# This is a simple Python program that demonstrates the usage of None and enumerate()

# List of fruits with some elements being None
fruits = ["apple", "banana", None, "orange", None]

def print_fruit_and_index(item):
    # The enumerate function returns a tuple for each item in the iterable,
    # containing an index and that item. We assign these to variables 'i' and 'f' respectively
    i, f = enumerate(fruits)
    
    if f is not None:
        print("Fruit:", f)
        print("Index:", i)
        print()

print("Fruits with their indices:")
print_fruit_and_index(None)  # Calling the function with None as argument
print_fruit_and_index("grape")
53
python
x = None  # Assigning None to variable x
print(type(x))  # Print the type of x
54
python
# Assigning None to a variable
none_value = None
print("none_value:", none_value)

# Using exec to evaluate simple Python expressions
expressions = [
    "x = 10",
    "y = 20",
    "z = x + y",
]

for expr in expressions:
    exec(expr)

print("x:", x)
print("y:", y)
print("z:", z)
55
python
# Define a list of tuples, where each tuple contains a name and an age
data = [("John", 20), ("Jane", None), ("Doe", 30), ("Mike", 15)]

# A function that checks if an age is valid (not `None`)
def is_valid_age(person):
    return person[1] is not None

# Use filter to get a new list with only the valid-aged persons
valid_persons = filter(is_valid_age, data)

print("Valid Persons:")
for person in valid_persons:
    print(person[0])

print("\nPersons with None age:")
for person in data:
    if person[1] is None:
        print(person[0])
56
python
# Assigning None to a variable
none_var = None
print("Variable 'none_var' is:", none_var)
print("Type of variable 'none_var':", type(none_var))

# Assigning a float value to a variable
float_var = 3.14
print("Variable 'float_var' is:", float_var)
print("Type of variable 'float_var':", type(float_var))

# Using None as default value in a function
def greet(name = None):
    if name is not None:
        print("Hello, ", name)
    else:
        print("Hello!")

greet()  # prints "Hello!"
greet("John")  # prints "Hello, John"

# Using float in arithmetic operations
num1 = 5
num2 = 3.5
sum = num1 + num2
difference = num1 - num2
product = num1 * num2
quotient = num1 / num2
remainder = num1 % num2

print("Sum:", sum)
print("Difference:", difference)
print("Product:", product)
print("Quotient:", quotient)
print("Remainder:", remainder)
57
python
# Function with a default argument value of None
def greet(name=None):
    if name is not None:
        return "Hello, {}!".format(name)
    else:
        return "Hello!"

# Test the function with and without an argument
print(greet("Alice"))  # Hello, Alice!
print(greet())         # Hello!
58
python
# Define a function that returns None if given list is empty
def empty_list(input_list):
 if len(input_list) > 0:
 return input_list
 else:
 return None

# Define a function that returns a frozenset of unique elements from given list
def to_frozenset(input_list):
 return frozenset(input_list)

# Define a sample list
my_list = [1, 2, 3, 3, 4, 5, 5]

# Call functions with my_list as an argument and print results
print("Empty list check: ", empty_list(my_list))
print("Frozenset creation: ")
frozen_set = to_frozenset(my_list)
print(frozen_set)
59
python
class MyClass:
    def __init__(self, attribute1=None, attribute2=None):
        self.attribute1 = attribute1
        self.attribute2 = attribute2

    def my_method(self):
        if self.attribute1 is not None:
            print("Attribute 1 has a value:", self.attribute1)
        else:
            print("Attribute 1 has no value.")
        
if __name__ == "__main__":
    instance = MyClass()
    print("Instance of MyClass created without initializing any attributes.")
    instance.my_method()

    another_instance = MyClass(attribute1="Value1")
    print("Instance of MyClass initialized with Attribute 1.")
    another_instance.my_method()

    del another_instance.attribute1
    print("Instance of MyClass with Attribute 1 deleted.")
    another_instance.my_method()

    uninitialized_instance = MyClass(attribute2="Value2")
    print("Instance of MyClass initialized with Attribute 2.")
    getattr(uninitialized_instance, 'my_method')() # Using getattr to call my_method without dot notation
60
python
# Simple Calculator Program using None and globals() in Python

def calculate():
    try:
        num1 = float(input("Enter first number: "))
        operator = input("Enter an operator (+, -, *, /): ")
        num2 = float(input("Enter second number: "))

        if operator == "+":
            result = num1 + num2
        elif operator == "-":
            result = num1 - num2
        elif operator == "*":
            result = num1 * num2
        elif operator == "/":
            result = num1 / num2
        else:
            print("Invalid Operator!")
            return None

        # Setting a global variable using globals() with None as default value
        globals()["ans"] = result

        print(f"Result: {result}")
    except Exception as e:
        print(e)
    finally:
        calculate()  # Calling the function recursively to perform next calculation

calculate()
print("Answer of last calculation is: ", globals()["ans"])
61
python
class MyClass:
    def __init__(self, name=None, age=None):
        self.name = name
        self.age = age
        self.hidden_attribute = None

    def greet(self):
        if self.name is not None:
            print(f"Hello, {self.name}!")
        else:
            print("Hi there!")


# Create an instance of MyClass with no initial value for name and age
my_instance = MyClass()

# Use None intentionally for some attributes
my_instance2 = MyClass(None, 30)

print("Checking if 'name' exists in my_instance:")
print(hasattr(my_instance, "name"))  # False
print(getattr(my_instance, "name", "Not defined"))  # Not defined

print("Checking if 'age' exists in my_instance:")
print(hasattr(my_instance, "age"))  # True
print(getattr(my_instance, "age"))  # None

print("\nChecking if 'hidden_attribute' exists in my_instance:")
print(hasattr(my_instance, "hidden_attribute"))  # True
print(getattr(my_instance, "hidden_attribute"))  # None

print("\nCalling methods on my_instance with and without name defined:")
my_instance.greet()  # Hi there!
my_instance.name = "John"
my_instance.greet()  # Hello, John!
62
python
# Function that returns None if a given number is even, and the number itself if it's odd
def is_odd(n):
    if n % 2 == 0:
        return None
    else:
        return n

# Testing the function
print(is_odd(3))   # Output: 3
print(is_odd(4))   # Output: None
63
python
class Calculator:
    def __init__(self):
        self.num1 = 0
        self.num2 = 0
        self.result = None

    def add(self, num=None):
        if num is not None:
            self.num2 = num
            self.result = self.num1 + self.num2
        help(self.add)

calculator = Calculator()
calculator.add(5)  # Outputs the help text and does not perform addition this time
print("Result: ", calculator.result)  # Prints None, as result was not set in this call

calculator.num1 = 3
calculator.add()   # Performs addition and prints help text
print("Result: ", calculator.result)
64
python
def my_function(num=None):
    if num is None:
        return None
    else:
        return hex(num)

# Test cases
print("Number: 5\nResult: ", end="")
print(my_function(5))

print("\nNumber: None\nResult: ", end="")
print(my_function())
65
python
# Assigning None to a variable
variable_1 = None
print("Variable 1 is:", variable_1)
print("Id of Variable 1 is:", id(variable_1))

# Creating an empty list and assigning it to a variable
my_list = []
print("Variable 2 is an empty list: ", my_list)
print("Id of Variable 2 is:", id(my_list))

# Assigning None to an empty list
my_list = None
print("Variable 2 is now assigned as None: ", my_list)
print("Id of Variable 2 is:", id(my_list))

# Creating a new empty list
my_list = []
print("Creating a new empty list")
print("Variable 2 is an empty list: ", my_list)
print("Id of Variable 2 is:", id(my_list))

# Comparing None and an empty list using 'is' keyword
print("\nComparing None and an empty list:")
print("Is None equal to an empty list?", None is my_list)
print("Id of None is:", id(None))
print("Id of Empty List is:", id(my_list))
66
python
def get_name():
    name = input("Please enter your name: ")
    if not name:
        name = None
        print("No name entered, setting name to None.")
    return name

# Get user's name and print a greeting
name = get_name()
if name is not None:
    print(f"Hello, {name}!")
else:
    print("No name provided.")
67
python
# Define a function that takes one argument, which can be either None or an integer
def my_function(input = None):
    if input is None:
        print("Input is None")
        # Set input to 0 if you want a default value when None is received
        input = 0

    if isinstance(input, int):
        print("Input is an integer: ", input)
        result = input * 2
        print("Result: ", result)

    else:
        print("Invalid input type. Expected None or Integer")

# Demonstrate the function with None
my_function(None)

# Demonstrate the function with an integer
my_function(5)
68
python
class MyClass:
    def __init__(self, value):
        self.value = value

def function(arg=None):
    if arg is None:
        print("Argument is None.")
    else:
        print("Argument is not None and its type is:", type(arg))
        my_instance = MyClass(arg)
        print("Instance of MyClass created with argument:", my_instance.value)

# Testing the function with different arguments, including None
function()
function(5)
function("hello")
function(MyClass(42))
69
python
# Define some base classes
class BaseClass1:
    pass

class BaseClass2:
    pass

# Define a derived class
class DerivedClass(BaseClass1, BaseClass2):
    pass

# Function demonstrating the usage of None
def print_type(my_var):
    if my_var is not None:
        print("Variable type:", type(my_var))
    else:
        print("Variable is None")

# Demonstrating issubclass() function
print("Is BaseClass1 a base class of DerivedClass?:", issubclass(DerivedClass, BaseClass1))
print("Is BaseClass2 a base class of DerivedClass?:", issubclass(DerivedClass, BaseClass2))

# Using None in the program
my_var = 42
print_type(my_var)
my_var = None
print_type(my_var)
70
python
class Node:
    def __init__(self, data=None):
        self.data = data
        self.next = None

# Function to create a linked list
def create_linked_list():
    nodes = []
    head = Node()
    nodes.append(head)
    node1 = Node("First")
    nodes.append(node1)
    head.next = node1
    node2 = Node("Second")
    nodes.append(node2)
    node1.next = node2
    return nodes

# Function to print a linked list
def print_linked_list(nodes):
    current = nodes[0]
    while current is not None:
        print(current.data, end=" -> ")
        current = current.next
    print("None")

if __name__ == "__main__":
    linked_list = create_linked_list()
    print("Linked List:")
    print_linked_list(linked_list)

    # Checking for None in the linked list
    current = nodes[0]
    while current is not None:
        if current is nodes[-1]:  # last node
            print(f"The last node data is: {current.data}")
            break
        current = current.next

    # Iterating through the linked list using iter() and next() functions
    iterator = iter(linked_list)
    try:
        while True:
            print(next(iterator))
    except StopIteration:
        pass
71
python
# An empty list
my_list = []

# Assigning None to a variable
none_value = None

# Assigning values to the list
my_list.append(1)
my_list.append(2)
my_list.append(3)

print("List: ", my_list)

# Check if a variable is None using 'is' keyword
if my_list is None:
    print("The list is None")
else:
    print("The list has", len(my_list), "elements.")

# Using None as an argument to a function
def greet(name=None):
    if name is None:
        print("Hello, Stranger!")
    else:
        print("Hello, ", name)

greet()  # prints 'Hello, Stranger!'
greet("Alice")  # prints 'Hello, Alice'
72
python
# Define an empty list
my_list = []

# Assigning None to a variable
none_value = None

# Appending elements to the list
my_list.append(1)
my_list.append(2)
my_list.append(3)

# Printing the list and checking if it's empty
print("My list is empty? ", my_list or False)
print("My list: ", my_list)

# Assigning None to a list element
my_list[2] = None

# Checking if an element in a list is equal to None
if my_list[2] is None:
    print("The third element of the list is None.")
else:
    print("The third element of the list is not None.")

# Checking if the entire list is None or empty
if not my_list:
    print("My list is empty or all elements are None.")
else:
    print("My list contains some values.")
73
python
def none_and_locals():
    # Assign None to variable 'x'
    x = None

    # Define a local function 'inner_function'
    def inner_function():
        # Assign a string value to local variable 'y'
        y = "Local variable in inner function"
        
        # Print local variables using locals()
        print("Inner Function locals:")
        print(locals())

    # Call the inner function and capture return value
    result = inner_function()
    
    # Print local variables of the enclosing function using locals()
    print("\nEnclosing Function locals:")
    print(locals())
    
    # Use None in an assignment or comparison
    if x is None:
        print("x is None")
    else:
        print("x is not None, its value is:", x)
        
    # Call the inner function and check its return value
    if result is None:
        print("Inner Function returned None")
    else:
        print("Inner Function returned:", result)

none_and_locals()
74
python
# A simple list of tuples, where the second element can be `None`
data = [(1, None), (2, 3), (None, 4), (5,)]

# A simple function that returns its argument if it's not None, otherwise returns 0
def process_value(val):
    return val if val is not None else 0

# Using map to apply 'process_value' on every value in data list
result = list(map(process_value, data))

print("Original Data:")
print(data)
print("\nProcessed Data:")
print(result)
75
python
# Define some variables with different values, including None
num1 = 5
num2 = 10
num3 = None
num4 = 15

# Use max() to find the maximum between num1, num2 and num3 (which is assumed to be None)
max_num = max(num1, num2, num3)

print("The maximum number among", num1, ",", num2, ", and", num3,"is: ", max_num)

# When max() function is called with one argument which is None, it returns None.
none_check = max(None)
print("Maximum of None is:", none_check)

# We can also use max() with a list or tuple
numbers = [3, 6, None, 8, 12]
max_number = max(numbers)
print("The maximum number in the list is:", max_number)
76
python
import numpy as np

# Create a NumPy array
array_numpy = np.arange(15).reshape((3, 5))
print("NumPy Array:")
print(array_numpy)

# Assign None to a variable
none_variable = None

# Use memoryview to access a part of NumPy array as read-only memory view
memoryview_array = memoryview(array_numpy[1:2, 3:])
print("\nMemory View:")
print(memoryview_array)
print(f"Shape: {memoryview_array.shape}")
print(f"Data Type: {memoryview_array.dtype}")
print(f"Size: {memoryview_array.size}")

# Attempt to modify memory view, which should raise an error
try:
    memoryview_array[0, 0] = 99
except Exception as e:
    print("\nError:")
    print(e)

# Accessing the None variable will result in a 'NameError: name "none_variable" is not defined' error if not assigned a value beforehand.
77
python
# Define a list with some numbers and assign a variable as None
numbers = [1, 2, 3, 4, None]
none_variable = None

# Check if an element is None using if statement
if none_variable is None:
    print("Variable is None")
else:
    print("Variable is not None")

# Use min() function to find the smallest number in the list
smallest_number = min(numbers)
print("Smallest number in the list:", smallest_number)
78
python
# Define an empty list
my_list = []

# Use None to represent a missing value
missing_value = None

# Function that returns the next number from a list
def next_number(numbers):
    if len(numbers) > 0:
        return next(numbers)
    else:
        print("No more numbers in the list.")
        return missing_value

# Define a list of numbers and iterate through it using next_number()
numbers = [1, 2, 3, 4]
current = next_number(numbers)
print(current) # Output: 1
current = next_number(numbers)
print(current) # Output: 2

# Try to get the next number from an empty list
current = next_number(my_list)
print(current) # Output: None

# Define a dictionary and use next() to iterate through its keys
my_dict = {"apple": 1, "banana": 2, "cherry": 3}
keys = iter(my_dict.keys())
key = next(keys)
print(key) # Output: 'apple'
key = next(keys)
print(key) # Output: 'banana'
key = next(keys)
print(key) # Output: 'cherry'
key = next(keys) # Raises a StopIteration exception
79
python
class MyClass:
    def __init__(self, name):
        self.name = name

# Using None
var_none = None
print("Type of var_none: ", type(var_none))
if var_none is not None:
    print("Var_none has a value:", var_none)
else:
    print("Var_none is empty or None")

# Creating an object
my_object = MyClass("Example Object")
print("Type of my_object: ", type(my_object))
print("My object's name: ", my_object.name)

# Using None with an object
var_object = MyClass(None)
if var_object is not None:
    print("Var_object has a name:", var_object.name)
else:
    print("Var_object is an empty or None MyClass instance")
80
python
# Define a function that returns None as its default value
def my_function(arg=None):
    print("Received argument:", arg)
    if arg is not None:
        print("Processing argument...")

# Demonstrate the usage of None by calling the function with and without an argument
my_function()                            # Calling the function with no argument will print "None"
my_function(arg=42)                       # Calling the function with an argument will process it

# Demonstrate the usage of oct() by converting decimal numbers to their octal representations
decimal_numbers = [10, 17, 25]
octal_representations = [oct(number) for number in decimal_numbers]
print("Decimal numbers:", decimal_numbers)
print("Octal representations:", octal_representations)
81
python
# Function to write data into a file
def write_data_to_file(filename, data):
    try:
        with open(filename, 'w') as file:
            if data is None:
                print("Data is None. Skipping file write.")
            else:
                file.write(data)
                print("Data written to file successfully.")
    except FileNotFoundError:
        print("File does not exist. Creating new file with default data...")
        with open(filename, 'w') as new_file:
            new_file.write("Default data")

# Call the function with some data or None
write_data_to_file("example.txt", "Hello World!")
write_data_to_file("nonexistent_file.txt", None)
82
python
# This function takes a character as an argument and returns its ASCII code
def char_to_ascii(character):
    if isinstance(character, str and len(character) > 0):
        character = character[0]
    return ord(character) if character is not None else None

# Test the function with different inputs
print(char_to_ascii('a'))       # Output: 97
print(char_to_ascii('z'))       # Output: 122
print(char_to_ascii('A'))       # Output: 65
print(char_to_ascii(None))      # Output: None
print(char_to_ascii(""))         # Output: None
print(char_to_ascii(' '))       # Output: 32
83
python
# A simple function that calculates the power of a given number using the pow function
def calculate_power(base, exponent):
    # If no arguments are provided, return None
    if base is None or exponent is None:
        return None

    result = pow(base, exponent)
    return result

# Test cases
print(calculate_power(2, 3))      # prints: 8
print(calculate_power(5, 2))      # prints: 25
print(calculate_power(None, None)) # prints: None
print(calculate_power(3, None))   # raises an error: TypeError: 'int' object is not iterable
84
python
# This variable x is assigned a value of None
x = None

# We can also assign None directly to functions or method return types
def my_function():
    return None

# Or in classes as default values for methods
class MyClass:
    def my_method(self):
        pass
        return None

# Now let's print some messages using print()
print("The value of variable x is:", x)
print("My function returns:", my_function())
instance = MyClass()
print("The default method of instance returns:", instance.my_method())
85
python
class Calculator:
    def __init__(self):
        self._number = None
        self._operation = None

    # Define read-only properties using property decorator
    @property
    def number(self):
        return self._number

    @property
    def operation(self):
        return self._operation

    # Define a method to set the number and operation together
    def set_operand_and_operation(self, number, operation):
        self._number = number
        self._operation = operation

# Usage example:
calculator = Calculator()
calculator.set_operand_and_operation(5, '+')
print(f"Number: {calculator.number}")
print(f"Operation: {calculator.operation}")
86
python
# Define my_function() to return None if no argument is passed, else return range object
def my_function(num=None):
    if num is None:
        print("No argument provided.")
        return None
    else:
        print(f"Argument provided: {num}")
        return range(num)

# Calling my_function() without arguments
print(my_function())

# Calling my_function() with an argument
print(list(my_function(5)))  # Convert the range object to a list for printing purpose.
87
python
# Define a function that returns None as its return value
def none_function():
  return None

# Assign None to a variable
none_variable = None

# Define an object with no attributes, which is equivalent to having the attribute None
class NoneObject:
  pass

# Function to print the representation of variables using repr()
def print_repr(var):
  print("Representation of {}: {}".format(var.__class__.__name__, repr(var)))

if __name__ == "__main__":
  # Calling a function that returns None
  none_result = none_function()
  print("None function result:")
  print_repr(none_result)

  # Assigning None to a variable
  print("\nAssigning None to a variable:")
  print_repr(none_variable)

  # Creating and printing representation of a custom object with no attributes
  print("\nCreating and printing representation of a custom NoneObject:")
  none_obj = NoneObject()
  print_repr(none_obj)
88
python
# Creating a list
numbers = [1, 2, 3, 4, 5]
print("Original List: ", numbers)

# Setting an element to None
numbers[2] = None
print("List after setting an element to None: ", numbers)

# Regular iteration
for num in numbers:
    if num is not None:
        print(num)

# Reverse Iteration using reversed()
for num in reversed(numbers):
    if num is not None:
        print(num)
89
python
# A simple Python program demonstrating the use of None and round() function

# Assigning None to a variable
my_variable = None
print("Value of my_variable is:", my_variable)

# Using None as a default value for function arguments
def greet(name=None):
    if name is None:
        print("Hello, Stranger!")
    else:
        print("Hello,", name)

greet()  # Hello, Stranger!
greet("John")  # Hello, John

# Using round() function to round a floating point number
num = 3.141592653589793
rounded_num = round(num, 2)
print("Original Number: ", num)
print("Rounded Number with 2 decimal places: ", rounded_num)
90
python
# Creating an empty set
my_set = set()

# Adding elements to the set
my_set.add(1)
my_set.add(2)
my_set.add(3)
my_set.update([4, 5, 6])

print("My Set: ", my_set)

# Using None as a value
none = None
number = 5
if number is None:
    print("Number is None")
else:
    print(f"Number is {number}")
    
# Using None as a key in a dictionary
my_dict = {"key1": "value1", "key2": "value2", None: "none_value"}
print("My Dictionary: ", my_dict)
91
python
# Define an empty class as a base
class MyClass: pass

# Create an instance of the class with no initial attributes
my_instance = MyClass()

# Using None to represent the absence of an attribute
print("Initial state: my_instance.attribute is", my_instance.attribute)  # Output: AttributeError: 'MyClass' object has no attribute 'attribute'
my_instance.attribute = None
print("Setting an attribute to None:", my_instance.attribute)  # Output: None

# Using setattr to dynamically add and modify attributes
setattr(my_instance, "new_attribute", 42)
print("Adding a new attribute with setattr: my_instance.new_attribute is", my_instance.new_attribute)  # Output: Adding a new attribute with setattr: my_instance.new_attribute is 42
setattr(my_instance, "another_attribute", [1, 2, 3])
print("Adding a list as an attribute with setattr: my_instance.another_attribute is", my_instance.another_attribute)  # Output: Adding a list as an attribute with setattr: my_instance.another_attribute is [1, 2, 3]
92
python
# Define a list with a None value
my_list = [1, 2, "three", None, 5, 6]

print("Original List:")
print(my_list)

# Assign None to an element in the list
my_list[3] = None

print("\nList after assigning None to element at index 3:")
print(my_list)

# Use slicing to extract sublists
print("\nSublist starting from index 1 and ending before index 4:")
sublist1 = my_list[1:4]
print(sublist1)

print("\nSublist starting from the end, with a step size of 2:")
sublist2 = my_list[-3:None:2]
print(sublist2)
93
python
# Define a list with some values and a None element
my_list = [1, 3, 5, None, 2, 4]

print("Original list:")
print(my_list)

# Use sorted() to sort the list without None elements
sorted_list = sorted(my_list, key=lambda x: x is not None)

print("\nSorted list without None elements:")
print(sorted_list)

# Print the type of each element in the original list
print("\nType of each element in the original list:")
for elem in my_list:
    print(type(elem))

# Use None as a default value for a function argument
def my_function(arg=None):
    if arg is not None:
        print("You provided an argument:", arg)
    else:
        print("No argument provided")

# Call the function with and without an argument
my_function()
my_function("Example")
94
python
class MyClass:
    _my_instance = None  # Instance variable initialized to None

    @staticmethod
    def my_static_method():
        """A simple static method that returns a message."""
        return "Hello, this is a static method."

    def __init__(self):
        """Initialize the instance variable to an instance of this class."""
        self._my_instance = MyClass() if MyClass._my_instance is None else MyClass._my_instance

    @staticmethod
    def get_instance():
        """Return the singleton instance of this class."""
        return MyClass._my_instance
95
python
# Define some variables with different values, including None and empty string
name = "John Doe"
age = 30
is_student = False
my_variable = None
empty_string = ""

# Print out the type of each variable
print("Name: ", type(name))
print("Age: ", type(age))
print("Is student: ", type(is_student))
print("My Variable: ", type(my_variable))
print("Empty String: ", type(empty_string))

# Convert None to string
none_str = str(my_variable)
print("None as string: ", none_str)

# Convert other variables to strings using str() function or f-strings
age_str = str(age)
name_str = str(name)
is_student_str = str(is_student).lower() if is_student else "Not a student"
print("Age: ", age_str)
print("Name: ", name_str)
print("Is Student: ", is_student_str)
96
python
# List of numbers with some elements as None
numbers = [1, 2, 3, None, 5, None, 7]

# Using sum() function to add up all the numbers in the list excluding the None values
total_sum = sum(filter(None, numbers))

print("Total Sum of non-None numbers: ", total_sum)
97
python
# Custom Base Class
class MyBaseClass:
    def __init__(self, value=None):
        self.value = value

# Custom Subclass
class MySubclass(MyBaseClass):
    pass

# Instantiating with None and without any arguments
my_instance_none = MySubclass(None)
print(f"Instance using None: {my_instance_none.value}")  # Output: Instance using None: None

# Instantiating with an argument
my_instance_arg = MySubclass("Hello, World!")
print(f"Instance with an argument: {my_instance_arg.value}")  # Output: Instance with an argument: Hello, World!
98
python
# This function takes two arguments and returns a tuple with the sum and product of the numbers
def calculate(num1, num2):
    # Perform calculations and return a tuple containing the sum and product
    result_sum = num1 + num2
    result_product = num1 * num2
    return num1, num2, result_sum, result_product

# Call the function with some arguments
num1 = 3
num2 = 5
nums, arg1, sum_result, product_result = calculate(num1, num2)

print("Number 1 is:", num1)
print("Number 2 is:", num2)
print("Sum of numbers is:", sum_result)
print("Product of numbers is:", product_result)

# In Python, None represents the absence of a value or no value
# This variable doesn't have any assigned value
my_variable = None

if my_variable:
    print("Variable has a value:", my_variable)
else:
    print("Variable is empty or does not exist")

# Create a tuple with some values, including None
my_tuple = (1, 2, "Three", None)
print("Elements in the tuple are:", my_tuple)
99
python
# Assigning None to a variable
none_variable = None
print("Type of None: ", type(none_variable))

# Assigning None to a list
my_list = [1, 2, 3]
my_list = None
print("Type of None assigned to my_list: ", type(my_list))

# Using type() function to check types
number = 5
print("Type of number (int): ", type(number))
string = "Hello World"
print("Type of string (str): ", type(string))
boolean = True
print("Type of boolean (bool): ", type(boolean))

# Assigning None to a custom class
class MyClass: pass
my_instance = MyClass()
my_instance = None
print("Type of None assigned to my_instance of MyClass: ", type(my_instance))
100
python
# Define a function with a variable that is initialized as None
def my_function():
    x = None
    
    # Perform some computations and update the value of x if needed
    # For demonstration purposes, we will keep it as None here

    # Print the local symbol table (variables and their values)
    print("Local Symbol Table: ", vars())
    
# Call the function
my_function()
101
python
# Define lists for this example
list1 = ['Apple', 'Banana', 'Cherry']
list2 = [1, 2, 3]

# Using zip() to pair elements from both lists
paired_lists = zip(list1, list2)
print("Paired Lists:")
for pair in paired_lists:
    print(pair)

# Demonstrating the use of None
dict1 = {}
key1 = None
key2 = 'Orange'

if key1 is not None:
    dict1[key1] = 'Apple'
else:
    dict1[key2] = 'Banana'

print("Dictionary: ", dict1)
102
python
import os

def create_file(filename):
    if not os.path.exists(filename):
        with open(filename, 'w') as file:
            file.write("Hello World!")
            print(f"File '{filename}' created.")
    else:
        print(f"File '{filename}' already exists.")

def read_file(filename):
    try:
        with open(filename, 'r') as file:
            data = file.read()
            return data
    except FileNotFoundError:
        return None

filename = "example.txt"
create_file(filename)
data = read_file(filename)

if data is not None:
    print("Data in the file:")
    print(data)
else:
    print("File not found.")
103
python
def get_none():
    return None

print(get_none())  # prints: None
104
python
import math

# Define a function that takes two arguments and returns their sum, with one argument set to None by default
def add_numbers(num1, num2=None):
    if num2 is None:
        print("Function called with only one argument. Adding None as the second argument.")
        num2 = 0

    # Perform addition using given numbers or adding None to a number
    result = num1 + num2

    print(f"The sum of {num1} and {num2} is {result}")

# Calling the function with one argument
add_numbers(5)

# Calling the function with two arguments
add_numbers(3, 4)

# Calling the function with one argument, None
add_numbers(7, None)
105
python
import random

# Let's define a function that returns a random number or None
def get_random_number():
    return random.randint(0, 10) if random.random() > 0.5 else None

# Now let's create a list of random numbers and None values
numbers = [get_random_number() for i in range(10)]

print("List of random numbers and None:")
for num in numbers:
    print(num) if num is not None else print("None")

# Let's also create a list of 5 random numbers between 1 and 10
random_numbers = [random.randint(1, 10) for i in range(5)]
print("\nList of 5 random numbers between 1 and 10:")
for num in random_numbers:
    print(num)
106
python
import datetime

# Demonstrating None
# In Python, None is a special value that represents no value or no object.
# It can be assigned to a variable to show it has no value.

# Assigning None to a variable
none_variable = None
print("none_variable: ", none_variable)

# Check if a variable is None
if none_variable is None:
    print("none_variable is None")
else:
    print("none_variable is not None")

# Demonstrating datetime module
# DateTime is used to work with dates and time.

# Getting the current date and time
current_datetime = datetime.datetime.now()
print("Current Datetime: ", current_datetime)

# Creating a specific datetime object
specific_datetime = datetime.datetime(2022, 1, 31)
print("Specific Datetime: ", specific_datetime)

# Getting the difference between two datetimes in days
difference_in_days = (current_datetime - specific_datetime).days
print("Difference between current and specific datetime in days: ", difference_in_days)
107
python
import time

# Function that returns None
def my_function():
    print("This function does nothing and returns None")
    return None

# Function that introduces a delay by pausing program execution for given seconds
def delay(seconds):
    """Function to introduce a delay or pause in the execution of the program."""
    print(f"Pausing program execution for {seconds} seconds...")
    time.sleep(seconds)

# Call my_function and delay for 2 seconds
my_function()
delay(2)

# Call my_function again without delay
my_function()
108
python
data = {
    "name": "John Doe",
    "age": 30,
    "city": None
}
109
python
import csv

# Create an empty list to store rows for a CSV file
rows = []

# Function to add a row to the list, with an optional value for the last column
def add_row(rows, *args):
 if len(args) > len(rows[-1] if rows else (0,)):
 # If new columns are being added, create a new list with more columns
 rows.append([None] * (len(args) - len(rows[-1] if rows else 0) + len(rows[-1] if rows else 0))

 # Add the non-None values to the row
 args += [None] * (len(rows[-1]) if rows else 0 - len(args))
 rows[-1] += args[len(args) - len(rows[-1]):]

 # Overwrite the last value with the new one, if provided
 if len(args) > len(rows[-1]):
 rows[-1][-1] = args[-1]

 # Add None to the rest of the columns if they are not provided
 for i in range(len(rows[-1]) - 1):
 if i >= len(args):
 rows[-1][i] = None
 add_row(rows, 'Name', 25)
 add_row(rows, 'Age', 30)
 add_row(rows, 'City', 'New York')
 add_row(rows, 'Country', 'USA')

# Write the data to a CSV file
with open('output.csv', mode='w', newline='') as file:
 csv_writer = csv.writer(file)
 csv_writer.writerows(rows)

# Print the content of the CSV file
with open('output.csv', 'r') as file:
 print(file.read())
110
python
import sqlite3

def create_connection(db_file):
    """ create a connection to the SQLite database """
    conn = None
    try:
        conn = sqlite3.connect(db_file)
    except Error as e:
        print(e)

    return conn

def create_table(conn):
    """ create table with name 'users' """
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT, age INTEGER, address TEXT)''')
    conn.commit()

def insert_data(conn, data):
    """ insert data into table 'users' """
    cursor = conn.cursor()
    query = '''INSERT INTO users (name, age, address) VALUES (?, ?, ?)'''
    cursor.execute(query, data)
    conn.commit()

def main():
    db_file = "mydatabase.db"
    connection = create_connection(db_file)
    if connection is not None:
        create_table(connection)
        user_data = ("John Doe", 28, "123 Main St.")
        insert_data(connection, user_data)
        print("Data inserted successfully")
        connection.close()
    else:
        print("Error! Cannot create the database connection.")

if __name__ == "__main__":
    main()
111
python
import re

def find_pattern(input_string, pattern):
    """
    This function takes an input string and a regular expression pattern as arguments,
    and returns the first match found in the string. If no match is found, it returns None.
    """
    try:
        match = re.search(pattern, input_string)
        if match:
            return match.group()
        else:
            return None
    except Exception as e:
        print(f"Error occurred while searching for pattern: {e}")
        return None

# Test cases
input_string1 = "The quick brown fox jumps over the lazy dog"
pattern1 = r"\bfox\b"
print(find_pattern(input_string1, pattern1))  # Output: 'fox'

input_string2 = "I love programming in Python"
pattern2 = r"\bpyman\b"
print(find_pattern(input_string2, pattern2))  # Output: None
112
python
import requests

# Define a function that makes an HTTP request with given URL
def make_http_request(url):
    # Make the HTTP request and store the response in 'response' variable
    response = requests.get(url)
    
    # Check if the response was successful (status code 200)
    if response.status_code == 200:
        print("Success! Status code:", response.status_code)
        print("Content type:", response.headers['Content-Type'])
        print("Response body:\n", response.text)
        return response.json()  # If needed, parse the JSON response
    else:
        print("Error! Status code:", response.status_code)
        return None

# Call the function with a valid URL
url = 'https://api.openweathermap.org/data/2.5/weather?q=London&appid=YOUR_API_KEY'
response = make_http_request(url)
if response is not None:
    # Process the parsed JSON response if needed
    data = response
else:
    print("Failed to fetch data from the API")

# Define a URL with an invalid status code
invalid_url = 'https://www.example.com/non-existent'
make_http_request(invalid_url)
113
python
import urllib.request

# Function that sends a GET request to the given URL and handles None response
def send_request(url):
    try:
        response = urllib.request.urlopen(url)
        if response:
            data = response.read().decode('utf-8')
            return data
        else:
            print("Server returned an empty response")
            return None
    except Exception as e:
        print(f"An error occurred: {e}")
        return None

# URL of the imaginary API
url = "http://example.com/api"

# Call the send_request function and handle the None response if needed
response = send_request(url)

if response is not None:
    # Process the data returned by the API
    print("Data received from API:")
    print(response)
else:
    print("No data received from API")
114
python
import pickle

class Person:
    def __init__(self, name, age=None):
        self.name = name
        self.age = age

if __name__ == "__main__":
    # Create a person instance with name and age
    john_doe = Person("John Doe", 30)
    
    # Create a person instance with only name
    unknown_person = Person("Unknown")

    # Serialize the person instances using pickle
    filename1 = "john_doe.pickle"
    with open(filename1, 'wb') as f:
        pickle.dump(john_doe, f)
        
    filename2 = "unknown_person.pickle"
    with open(filename2, 'wb') as f:
        pickle.dump(unknown_person, f)
    
    print("Serialized data saved to", filename1, "and", filename2)

    # Deserialize the person instances from pickle files
    with open(filename1, 'rb') as f:
        john_doe_loaded = pickle.load(f)
        
    with open(filename2, 'rb') as f:
        unknown_person_loaded = pickle.load(f)

    print("Deserialized data:")
    print("John Doe:", john_doe_loaded.name, john_doe_loaded.age)
    print("Unknown Person:", unknown_person_loaded.name, unknown_person_loaded.age)
115
python
import subprocess

# Attempt to run a nonexistent command using subprocess.Popen
try:
    result = subprocess.run(["nonexistent_command"], capture_output=True, text=True)
except FileNotFoundError as error:
    print("Error: The specified command is not found.")
    result = None

if result is not None:
    # If the command execution was successful, print its output
    print("Command Output:")
    print(result.stdout)
else:
    print("Command Execution failed or the command did not exist.")
116
python
import argparse

# Create the parser
parser = argparse.ArgumentParser(description="A simple program with optional argument.")
parser.add_argument("--option", help="Set an optional value", default=None)

# Parse the arguments
args = parser.parse_args()

if args.option is not None:
    print(f"Optional argument '--option' was set to: {args.option}")
else:
    print("No optional argument provided.")

if __name__ == "__main__":
    # Here you can put any other logic of your program
    print("Hello, World!")
117
python
import logging

# Configure logging
logging.basicConfig(level=logging.INFO)

class MyClass:
    def __init__(self, arg=None):
        self.arg = arg

if __name__ == "__main__":
    my_instance = MyClass()
    logging.info(f"Created an instance of MyClass with argument: {my_instance.arg}")

    my_instance.arg = "some value"
    logging.info(f"Assigned a new value to the argument: {my_instance.arg}")
118
python
from flask import Flask, jsonify, request

app = Flask(__name__)

@app.route('/none', methods=['GET'])
def none_endpoint():
    # This endpoint just returns 'None' when called
    return jsonify(data=None)

@app.route('/echo', methods=['POST'])
def echo_endpoint():
    # Get the request data, if any, and return it back
    data = request.get_json() or None
    return jsonify(data=data)

if __name__ == '__main__':
    app.run(debug=True)
119
python
from django.http import HttpResponse

def my_view(request):
    # This variable will not be assigned a value
    # and it will have the value of None
    my_variable = None

    if request.method == 'POST':
        # Here you can assign a value to `my_variable`
        # for example, when form data is submitted
        my_variable = request.POST.get('mykey')

    if my_variable is not None:
        return HttpResponse(f"Received value: {my_variable}")

    return HttpResponse("No value received")
120
python
import numpy as np

def create_numpy_array(input):
    """
    Create a NumPy array if input is not None, otherwise return None.
    """
    if input is not None:
        # Create a NumPy array of zeros with the given shape
        array = np.zeros((3, 3))
        print("Created a NumPy array of shape (3, 3):")
        print(array)
        return array
    else:
        print("Input is None.")
        return None

# Test the function with a None value and a valid argument
test_none = None
print(f"Testing with None: {create_numpy_array(test_none)}")

# Test the function with a valid argument (list)
test_list = [1, 2, 3]
test_array = create_numpy_array(test_list)
print(f"Testing with list: {test_array.shape if test_array is not None else 'None'}")

# Test the function with a valid argument (tuple)
test_tuple = (1, 2, 3)
test_numpy_array = create_numpy_array(test_tuple)
print(f"Testing with tuple: {test_numpy_array.shape if test_numpy_array is not None else 'None'}")
121
python
# Importing required libraries
import pandas as pd

# Creating an empty DataFrame with given columns
data = {
    'Name': [None, "John", None],
    'Age': [None, 25, None],
    'City': ["New York", None, "Chicago"]
}

df = pd.DataFrame(data)

# Displaying the DataFrame
print("Original DataFrame:")
print(df)

# Setting specific values to be None
df.loc[0, 'Name'] = None
df.loc[1, 'Age'] = None

# Displaying the updated DataFrame
print("\nUpdated DataFrame:")
print(df)
122
python
import numpy as np
import matplotlib.pyplot as plt

# Create some data for the plot
x = np.linspace(0, 10, 100)
y_data1 = np.sin(x)
y_data2 = np.cos(x)

# Define a dictionary with one key having None value and another key having numerical value
my_dict = {'key1': None, 'key2': y_data2}

# Create a figure and axes
fig, ax = plt.subplots()

# Plot the first dataset
ax.plot(x, y_data1, label='sin(x)')

# Demonstrate using None in the dictionary as a placeholder
if my_dict.get('key1'):  # Check if 'key1' has a value before plotting
    ax.plot(x, my_dict['key1'], linestyle='--', label='None Value')

# Label and title for the plot
ax.legend()
ax.set_title('Line Plot using Matplotlib and None')
plt.show()
123
python
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

# Using None as a value in Python
data = {}
data['name'] = ['John', 'Jane', 'Mike', None]
data['age'] = [25, 30, np.nan, 45]

print("Data:")
print(data)

# Using Seaborn library for data visualization
np.random.seed(123)
x = np.random.randn(100)
y = np.where(np.isnan(x), None, x**2)

sns.scatterplot(x, y)
plt.title("Scatterplot with None values")
plt.show()

# Handle None values in seaborn plot
sns.boxplot(data=data, x='name', y='age')
plt.title("Boxplot handling None values")
plt.show()
124
python
import tensorflow as tf

# Create placeholders with shape (None,) for input data and labels
input_placeholder = tf.placeholder(tf.float32, shape=(None, 784))
label_placeholder = tf.placeholder(tf.int32, shape=(None,))

# Create a variable for the weights and biases of the neural network
weights = tf.Variable(tf.zeros((784, 10)))
biases = tf.Variable(tf.zeros([10]))

# Define the logits (predictions) using the input data and current weights/biases
logits = tf.matmul(input_placeholder, weights) + biases

# Define loss function (cross-entropy) and training operation
loss = tf.reduce_mean(tf.nn.sparse_softmax_cross_entropy_with_logits(labels=label_placeholder, logits=logits))
training_op = tf.train.GradientDescentOptimizer(0.5).minimize(loss)

# Define the prediction operation
predictions = tf.argmax(logits, axis=1)

# Simulate a batch of data (input images and corresponding labels)
batch = tf.constant([[...], [...]], shape=(2, 784))
labels_batch = tf.constant([[0], [5]])

# Run the session and make predictions on this batch
with tf.Session() as sess:
    # Initialize variables
    sess.run(tf.global_variables_initializer())

    # Train the model using placeholders (None) for input data
    _ = sess.run(training_op, feed_dict={input_placeholder: None, label_placeholder: None})

    # Make predictions on the batch data
    predicted_labels = sess.run(predictions, feed_dict={input_placeholder: batch})

print(predicted_labels)  # Output: [0, 5]
125
python
# This example shows how to use None as a default value for function arguments

def my_function(arg1=None, arg2=None):
    """This function demonstrates the use of None as a default value for function arguments."""
    if arg1 is None:
        print("Argument 'arg1' was not provided.")
    else:
        print("Argument 'arg1' has the value:", arg1)

    if arg2 is None:
        print("Argument 'arg2' was not provided.")
    else:
        print("Argument 'arg2' has the value:", arg2)

# Call the function with no arguments
my_function()

# Call the function with one argument
my_function("value1")

# Call the function with two arguments
my_function("value1", "value2")
126
python
# Importing necessary libraries
from sklearn import datasets, linear_model
import numpy as np

# Define a function that takes X and y as arguments and returns None if they are not provided
def train_model(X=None, y=None):
    if X is None or y is None:
        print("Error: X and y must be provided for training the model.")
        return None

    # Creating a linear regression model object
    regressor = linear_model.LinearRegression()

    # Training the model with X and y data
    regressor.fit(X, y)

    return regressor

# Defining some sample data
X = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])
y = np.array([5, 6, 7, 8])

# Training the model with provided X and y data
model = train_model(X, y)

# Check if the model is not None
if model is not None:
    # Making predictions using the trained model
    print("Predictions using the trained model:\n")
    print(model.predict(np.array([[6], [7]])))
else:
    print("Error: Model could not be trained.")
127
python
from bs4 import BeautifulSoup, NullSentinel
import requests

# Define a function to get HTML content of a URL using requests library
def get_html(url):
    try:
        response = requests.get(url)
        html_content = response.text
        return html_content
    except Exception as e:
        print(f"Error occurred while fetching HTML content: {e}")
        return None

# Define a function to parse the given HTML using BeautifulSoup
def parse_html(html_content):
    if html_content is not None:
        soup = BeautifulSoup(html_content, 'html.parser')
        # Use None as a placeholder for elements that may be missing in the HTML
        title = soup.title or BeautifulSoup(None)
        link = soup.find('link', href=True) or (None, None)
        return title.text, link[0]['href'] if link else ("Title and Link not found", None)
    else:
        return "HTML content is empty or unavailable.", None

# Call the functions with a sample URL
html_content = get_html("https://example.com")
title, link = parse_html(html_content)
print(f"Website title: {title}")
print(f"Link: {link}")
128
python
from selenium import webdriver

def find_element_by_css(driver, css_selector):
    try:
        return driver.find_element_by_css_name(css_selector)
    except Exception as e:
        print(f"No element found with CSS selector: {css_selector}. Error: {e}")
        return None

def main():
    # Initialize the Chrome driver
    driver = webdriver.Chrome()
    
    # Navigate to a webpage
    driver.get("https://www.google.com")

    # Find the search box element and enter a search query
    search_box = find_element_by_css(driver, "name='q'")
    if search_box is not None:
        search_box.send_keys("Selenium Python")
        search_button = find_element_by_css(driver, "name='btnK'")
        if search_button is not None:
            search_button.click()
        else:
            print("Search button not found!")
    else:
        print("Search box not found!")
    
    # Quit the Chrome driver
    driver.quit()

if __name__ == "__main__":
    main()
129
python
import torch
import torch.nn as nn
import torch.optim as optim

# Define a simple neural network architecture
class SimpleNN(nn.Module):
    def __init__(self):
        super(SimpleNN, self).__init__()
        self.fc1 = nn.Linear(1, 4)
        self.fc2 = nn.Linear(4, 1)
        self.sigmoid = nn.Sigmoid()

    def forward(self, x):
        x = torch.relu(self.fc1(x))
        x = self.sigmoid(self.fc2(x))
        return x

# Generate some random data for training and testing the network
data = torch.randn(1000, 1)
labels = torch.bernoulli(torch.randn(1000, 1))

# Set up the neural network, loss function and optimizer
model = SimpleNN()
criterion = nn.BCELoss()  # Binary Cross Entropy Loss
optimizer = optim.SGD(model.parameters(), lr=0.01)

# Train the model
num_epochs = 25
for epoch in range(num_epochs):
    for i, (inputs, labels) in enumerate(zip(data.tensor().T, labels)):
        # Forward pass
        outputs = model(inputs.view(-1, 1))
        loss = criterion(outputs, labels.view(-1, 1))

        # Backward and optimization
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()

    print(f'Epoch [{epoch+1}/{num_epochs}], Loss: {loss.item():.4f}')

# Testing the model on some None data
test_data = torch.tensor([[None]], dtype=torch.float)
outputs = model(test_data)
print('Prediction for None input:', outputs.item())
130
python
from sqlalchemy import create_engine, Column, Integer, String, Float, Null
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker

# Define Base class for SQLAlchemy models
Base = declarative_base()

class Person(Base):
    __tablename__ = "persons"

    id = Column(Integer, primary_key=True)
    name = Column(String)
    age = Column(Integer)
    height = Column(Float)
    salary = Column(Float)

    def __repr__(self):
        return f"<Person(id={self.id}, name='{self.name}', age={self.age}, height={self.height}, salary={self.salary})>"

# Initialize engine and create table if not exists
engine = create_engine("sqlite:///test.db", echo=True)
Base.metadata.create_all(engine)

Session = sessionmaker(bind=engine)
session = Session()

# CRUD operations: Create
new_person = Person(name="John Doe", age=30, height=175.0, salary=None)
session.add(new_person)
session.commit()

# Read
persons = session.query(Person).all()
print("Persons in the database:")
for person in persons:
    print(person)

# Update
person = session.query(Person).filter(Person.name == "John Doe").first()
if person:
    person.salary = 50000.0
    session.commit()
else:
    print("No such person found")

# Delete
person = session.query(Person).filter(Person.id == 1).first()
if person:
    session.delete(person)
    session.commit()
else:
    print("No such person found")

session.close()
131
python
# filename: my_function.py
def get_default_list(input_list=None):
    if input_list is None or len(input_list) == 0:
        return None
    else:
        return input_list
132
python
class MyClass:
    def __init__(self):
        self.value = None

    def my_method(self):
        if some_condition():  # Replace this with your condition
            return "Hello World"
        else:
            self.value = None
            return None
133
python
class Calculator:
    def divide(self, numerator, denominator):
        if denominator == 0:
            return None
        else:
            result = numerator / denominator
            return result

# Tests using pytest
def test_calculator_division():
    calc = Calculator()
    
    assert calc.divide(4, 2) == 2.0
    assert calc.divide(-5, 3) == -1.6666666666667
    assert calc.divide(10, 5) == 2.0
    assert calc.divide(1, 0) is None
    assert calc.divide(0, 2) is None
134
python
import asyncio
import aiohttp

async def fetch(session, url):
    try:
        async with session.get(url) as response:
            if response.status in (200, 301, 302):
                return await response.text()
            else:
                print(f"Error {response.status}: URL {url} not found or returned an error")
                return None
    except Exception as e:
        print(f"An error occurred while fetching from {url}: {str(e)}")
        return None

async def main():
    async with aiohttp.ClientSession() as session:
        urls = [
            "http://google.com",
            "http://example.com/nonexistent_page",
            "https://www.python.org",
            "http://invalid_url"
        ]
        tasks = []
        for url in urls:
            tasks.append(asyncio.create_task(fetch(session, url)))
        
        results = await asyncio.gather(*tasks)

        print("\nResults:")
        for i, result in enumerate(results):
            if result is not None:
                print(f"URL [{urls[i]}]: {result}")
            else:
                print(f"URL [{urls[i]}] returned None.")

if __name__ == "__main__":
    asyncio.run(main())
135
python
import multiprocessing

def sum_list(my_list):
    """Function to sum elements in a list."""
    result = 0
    for num in my_list:
        result += num
    return result

if __name__ == '__main__':
    list_a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    list_b = [11, 12, 13, 14, 15, 16, 17, 18, 19, 20]

    # Using multiprocessing to create separate processes
    process_a = multiprocessing.Process(target=sum_list, args=(list_a,))
    process_b = multiprocessing.Process(target=sum_list, args=(list_b,))

    # Start the processes
    process_a.start()
    process_b.start()

    # Wait for both processes to finish
    process_a.join()
    process_b.join()

    result_a = process_a.exitcode  # None in this case, but we can use it as a flag
    result_b = process_b.returnvalue

    print(f'The sum of list A is: {result_b}')
    print(f'The sum of list B is: {result_b + result_a}')
136
python
import queue
import threading

def producer(queue):
    num = 0
    while True:
        queue.put(num)  # Produce some data and put it into the queue
        print("Produced item: ", num)
        num += 1
        if num >= 5:  # If we produced 5 items, stop producing
            break

def consumer(queue, result):
    while not queue.empty():  # While there are items in the queue
        data = queue.get()  # Get the next item from the queue
        print("Consumed item: ", data)
        if data is None:  # If we consumed a `None` value, stop consuming
            break
        result.append(data)

if __name__ == "__main__":
    queue = queue.Queue()
    result = []
    producer_thread = threading.Thread(target=producer, args=(queue,))
    consumer_thread = threading.Thread(target=consumer, args=(queue, result))

    producer_thread.start()
    consumer_thread.start()

    # Wait for both threads to finish
    producer_thread.join()
    consumer_thread.join()

    print("Final result: ", result)

    # Signal the consumer thread to stop consuming by putting a `None` value into the queue
    queue.put(None)
137
python
import socket

def main():
    host = '127.0.0.1'  # Standard loopback interface address (localhost)
    port = 12345        # Port to listen on

    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        print(f"Server started at {host}:{port}")
        s.bind((host, port))
        s.listen()
        conn, addr = s.accept()
        with conn:
            print(f'Connected by {addr}')
            while True:
                data = input("Enter a message or type 'q' to quit: ")
                if data == 'q':
                    break
                conn.sendall(data.encode())
                response = conn.recv(1024)
                print(f"Received from client: {response.decode()}")

if __name__ == "__main__":
    main()
138
python
import tkinter as tk

def main():
    # Create the root window
    root = tk.Tk()

    # Assign None to some variables
    var_entry = None
    button = None

    def button_clicked():
        if var_entry is not None:
            print("Entry value: ", var_entry.get())

    # Create a Label and Entry widget
    label = tk.Label(root, text="Enter some text here:")
    label.pack()
    var_entry = tk.StringVar()
    entry = tk.Entry(root, textvariable=var_entry)
    entry.pack()

    # Create a Button widget
    button = tk.Button(root, text="Click me!", command=button_clicked)
    button.pack()

    # Run the Tkinter event loop
    root.mainloop()

if __name__ == "__main__":
    main()
139
python
# Import required modules
import pygame
import sys

# Initialize Pygame
pygame.init()

# Set up some constants
WIDTH, HEIGHT = 500, 500
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)

def draw_text(surface, text, pos, color=WHITE):
    """This function will draw text on the given surface."""
    font = pygame.font.Font(None, 32)
    text_surface = font.render(text, False, color)
    rect = text_surface.get_rect()
    rect.topleft = pos
    surface.blit(text_surface, rect)

def main():
    # Set up the display
    screen = pygame.display.set_mode((WIDTH, HEIGHT))
    pygame.display.set_caption("None and Pygame example")

    # Main game loop
    running = True
    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False

        screen.fill(BLACK)

        # Draw some text using the draw_text function with None as a default color
        draw_text(screen, "Hello World!", (50, 50))
        draw_text(screen, "None is a placeholder value in Python", (50, 100), None)

        pygame.display.flip()

    pygame.quit()
    sys.exit()

if __name__ == "__main__":
    main()
140
python
from sys import argv, exit
from PyQt5.QtWidgets import QApplication, QLabel, QPushButton, QVBoxLayout, QWidget

class MyApp(QWidget):
    def __init__(self, title="PyQt with None"):
        super().__init__()

        self.title = title
        self.init_ui()

    def init_ui(self):
        layout = QVBoxLayout()

        self.label = QLabel("No button clicked yet")
        layout.addWidget(self.label)

        self.button = QPushButton("Click me!")
        self.button.clicked.connect(self.on_button_clicked)
        layout.addWidget(self.button)

        self.setLayout(layout)
        self.setWindowTitle(self.title)
        self.show()

    def on_button_clicked(self):
        if self.label.text() == "No button clicked yet":
            self.label.setText("Button clicked!")
        else:
            self.label.setText("No button clicked yet")

if __name__ == "__main__":
    app = QApplication(argv)
    
    my_app = MyApp()
    my_app.exec_()
141
python
import wx

class MyApp(wx.App):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

    def OnInit(self):
        self.frame = MyFrame(None)
        self.SetTopWindow(self.frame)
        self.frame.Show()
        return True

class MyFrame(wx.Frame):
    def __init__(self, parent):
        super().__init__(parent=parent, title="My Frame", size=(300, 200))

        # Create a button with the label "Click Me" and bind it to an event handler
        self.button = wx.Button(self, label="Click Me")
        self.Bind(wx.EVT_BUTTON, self.OnButtonClicked, self.button)

        # Create a sizer to arrange the button in the frame
        box_sizer = wx.BoxSizer(wx.VERTICAL)
        box_sizer.Add(self.button, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL)

        # Set the sizer for the frame
        self.SetSizer(box_sizer)

    def OnButtonClicked(self, event):
        # When the button is clicked, print a message to the console and reset the button label
        print("Button clicked!")
        self.button.SetLabel("Clicked!")

if __name__ == "__main__":
    app = MyApp()
    app.MainLoop()
142
python
# Function that takes an optional parameter with default value as None
def greet(name=None):
    if name is not None:
        print("Hello, " + name)
    else:
        print("Hello, World!")
        
# Calling the function without any argument
greet()
# Output: Hello, World!

# Calling the function with an argument
greet("Alice")
# Output: Hello, Alice
143
python
# Function to represent a simple calculator with addition, subtraction, and division operations
def calculator(num1, num2, operation):
    if operation == 'add':
        result = num1 + num2
    elif operation == 'subtract':
        result = num1 - num2
    elif operation == 'divide':
        # Check for division by zero to avoid TypeError: unsupported operand type(s) for /: 'NoneType' and 'int'
        if num2 is not None:
            result = num1 / num2
        else:
            print("Cannot divide by zero")
            return None
    else:
        print("Invalid operation")
        return None

    # Return the result wrapped in a list to maintain consistency with other returns (None and numbers)
    return [result]

# Testing the calculator function
if __name__ == "__main__":
    num1 = 5
    num2 = 3
    operation = 'add'
    print(calculator(num1, num2, operation))  # Output: [8]

    num1 = 6
    num2 = None
    operation = 'divide'
    print(calculator(num1, num2, operation))  # Output: ['Cannot divide by zero'] or None if using Python <3.9 (NoneType objects cannot be returned from an expression)

    num1 = 8
    num2 = 4
    operation = 'subtract'
    print(calculator(num1, num2, operation))  # Output: [-4]
144
python
# Define a class called "Person"
class Person:
    def __init__(self, name, age=None):
        self.name = name
        self.age = age

    # Define a method called "describe" that prints out person details
    def describe(self):
        if self.age is not None:
            print(f"Name: {self.name}, Age: {self.age}")
        else:
            print(f"Name: {self.name}")

# Create instances of the "Person" class with and without age
person1 = Person("Alice")
person2 = Person("Bob", 30)

# Call the "describe" method for each person instance
person1.describe()  # Output: Name: Alice
person2.describe()  # Output: Name: Bob, Age: 30
145
python
class Vehicle:
    def __init__(self, color=None, wheels=4):
        self.color = color
        self.wheels = wheels

    def start(self):
        print(f"Starting a {self.color} vehicle...")

    def stop(self):
        print("Stopping the vehicle.")

class Car(Vehicle):
    def __init__(self, color=None, wheels=4, num_doors=4):
        super().__init__(color, wheels)
        self.num_doors = num_doors

my_car = Car("red")
print(my_car.color)  # Output: red
print(my_car.wheels)  # Output: 4
print(my_car.num_doors)  # Output: 4

my_car.start()  # Output: Starting a red vehicle...
my_car.stop()   # Output: Stopping the vehicle.
146
python
# Base Class
class Shape:
    def area(self):
        pass

# Derived Classes
class Circle(Shape):
    def __init__(self, radius):
        self.radius = radius

    def area(self):
        return pi * (self.radius ** 2)

class Rectangle(Shape):
    def __init__(self, width, height):
        self.width = width
        self.height = height

    def area(self):
        return self.width * self.height

# Function to calculate the area of a given shape
def calculate_area(shape):
    return shape.area() if callable(shape.area) else None

# Test Cases
circle = Circle(5)
rectangle = Rectangle(4, 6)
shapes = [circle, rectangle]

for shape in shapes:
    area = calculate_area(shape)
    if area is not None:
        print(f'The area of the {type(shape).__name__} is: {area}')
147
python
class Calculator:
    def __init__(self):
        self._number_one = None
        self._number_two = None
        self._result = None

    def set_numbers(self, number_one, number_two):
        if number_one is not None and number_two is not None:
            self._number_one = number_one
            self._number_two = number_two
        else:
            print("Both number_one and number_two must be provided.")

    def add(self):
        if self._number_one is not None and self._number_two is not None:
            self._result = self._number_one + self._number_two
        else:
            print("Error: Both numbers must be set before adding them.")

    def get_result(self):
        return self._result

# Usage
calculator = Calculator()
calculator.set_numbers(3, 4)
calculator.add()
print("Result:", calculator.get_result())  # Output: Result: 7
148
python
class Calculator:
    def __init__(self):
        self._num1 = None
        self._num2 = None
        self._operation = None

    def add(self, num1, num2):
        if isinstance(num1, (int, float)) and isinstance(num2, (int, float)):
            self._num1 = num1
            self._num2 = num2
            self._operation = "addition"
            return self._calculate()

    def subtract(self, num1, num2):
        if isinstance(num1, (int, float)) and isinstance(num2, (int, float)):
            self._num1 = num1
            self._num2 = num2
            self._operation = "subtraction"
            return self._calculate()

    def multiply(self, num1, num2):
        if isinstance(num1, (int, float)) and isinstance(num2, (int, float)):
            self._num1 = num1
            self._num2 = num2
            self._operation = "multiplication"
            return self._calculate()

    def divide(self, num1, num2):
        if isinstance(num1, (int, float)) and isinstance(num2, (int, float)):
            if num2 != 0:
                self._num1 = num1
                self._num2 = num2
                self._operation = "division"
                return self._calculate()
        print("Error: Division by zero is not allowed")
        self._num1 = None
        self._num2 = None
        self._operation = None

    def _calculate(self):
        if self._num1 is None or self._num2 is None or self._operation is None:
            print("Error: Missing valid inputs")
            self._num1 = None
            self._num2 = None
            self._operation = None
        else:
            result = getattr(self, self._operation)(self._num1, self._num2)
            print(f"Result: {result}")

if __name__ == "__main__":
    calc = Calculator()

    # Valid inputs with an addition operation
    calc.add(5, 3)

    # Valid inputs with a subtraction operation
    calc.subtract(10, 4)

    # Valid inputs with a multiplication operation
    calc.multiply(2, 6)

    # Valid inputs with a division operation
    calc.divide(8, 2)

    # Invalid input: non-numeric value for the first number in division
    calc.divide("hello", 5)

    # Invalid input: zero as the second number in subtraction or division
    calc.subtract(10, 0)
    calc.divide(10, 0)
149
python
class Graph:
    def __init__(self, vertices):
        self.V = vertices
        self.graph = [[0 for i in range(vertices)] for j in range(vertices)]

    def add_edge(self, i, j):
        self.graph[i].append(j)
        self.graph[j].append(i)

def dfs(graph, start_vertex, visited=None):
    if visited is None:
        visited = [False] * graph.V

    visited[start_vertex] = True
    print("Visited vertex", start_vertex)

    for i in graph.graph[start_vertex]:
        if not visited[i]:
            dfs(graph, i, visited)

if __name__ == "__main__":
    graph = Graph(4)
    graph.add_edge(0, 1)
    graph.add_edge(0, 2)
    graph.add_edge(1, 2)
    graph.add_edge(2, 0)
    graph.add_edge(2, 3)
    graph.add_edge(3, 3)

    print("Starting DFS from vertex 0")
    dfs(graph, 0)
150
python
# Define a list with some elements and some None values
my_list = [1, 2, 3, None, 5, None, 7, 8, None]

print("Original List:")
print(my_list)

# Iterate through the list using a for loop
print("\nIterating through the list:")
for element in my_list:
    if element is not None:
        print(element)
151
python
# Define a function 'my_function' that can return None
def my_function(parameter=None):
    """
    This is a simple Python function that can accept an optional parameter and returns None.
    :param parameter: An optional parameter (default is None)
    :return: None or the given parameter if it is not None
    """
    if parameter is not None:
        return parameter
    else:
        return None

# Call 'my_function' with different arguments
result1 = my_function(42)
print(f"Result 1: {result1}")

result2 = my_function()
print(f"Result 2: {result2}")
152
python
class MyClass:
    # A class property with default value as None
    property = None

    def __init__(self, value=None):
        self.value = value

    # Custom method to set the class property
    @classmethod
    def set_class_property(cls, value):
        cls.property = value

# Creating an instance of MyClass with no initial value
instance1 = MyClass()
print("Instance 1 value: ", instance1.value)
print("Instance 1 class property: ", MyClass.property)

# Setting class property using custom method
MyClass.set_class_property("new_value")

# Creating another instance of MyClass with initial value
instance2 = MyClass("initial_value")
print("Instance 2 value: ", instance2.value)
print("Instance 2 class property: ", MyClass.property)
153
python
# Assigning None to a variable
none_value = None
print("Variable 'none_value' is:", none_value)

# Assigning other values to variables
age = 25
name = "John Doe"
is_student = True

# Check if a variable has no value or not using 'is' keyword
print("Variable 'age' is None?:", age is None)
print("Variable 'name' is None?:", name is None)
print("Variable 'is_student' is None?:", is_student is None)

# Updating a variable with None
if condition:
    age = None

# Checking if a variable is None or not using 'is' keyword
print("Variable 'age' is None?:", age is None)
154
python
# Define a constant called MAX_LIMIT with value 100
MAX_LIMIT = 100

def function_with_none():
    """
    This function demonstrates the use of None.
    """
    # Assigning None to a variable
    none_value = None

    print("None Type: ", type(none_value))

    # Function with a parameter that can accept None
    def another_function(param):
        if param is None:
            print("Parameter is None")
        else:
            print("Parameter has a value:", param)

    # Calling another function with None and non-None values
    another_function(None)
    another_function("Hello World")

# Calling the function_with_none()
function_with_none()
155
python
def greet(name=None):
    """
    This function greets the given name. If no name is provided, it will print a generic greeting.
    :param name: The name of the person to greet
    :return: None
    """
    if name is not None:
         print(f"Hello {name}!")
     else:
         print("Hello there!")

# Let's test this function with some input values and also with no argument provided
greet("John Doe")
greet()
greet("Jane Doe")
156
python
def greet(name=None):
    if name is None:
        print("Hello, you haven't provided a name")
        name = input("Please enter your name: ")
        print(f"Hi {name}! Nice to meet you.")
    else:
        print(f"Hello, {name}!")

# Call the function with an argument
greet("Alice")

# Call the function without an argument
greet()
157
python
def divide(numerator, denominator):
    """
    This function takes two arguments, numerator and denominator.
    If denominator is zero, it returns None. Else, it performs division and returns the result.
    """

    if denominator == 0:
        print("Error! Cannot divide by zero.")
        return None

    result = numerator / denominator
    return result

# Testing the function
num1 = 10
denom1 = 2
result1 = divide(num1, denom1)
print("The result of {} divided by {} is:{}".format(num1, denom1, result1))

num2 = 5
denom2 = 0
result2 = divide(num2, denom2)
print("The result of {} divided by {} is:{}".format(num2, denom2, result2))
158
python
# Define a function that takes two arguments, returns the greater number or sets to None if both are equal
def max_number(num1, num2):
    if num1 >= num2:
        return num1
    else:
        return num2
        
# Assign values to variables with some being set to None
num1 = 5
num2 = None

# Use conditional statement and check if 'num2' is None, if yes then assign default value of zero
if num2 is None:
    num2 = 0

# Get maximum number using the defined function
max_num = max_number(num1, num2)

print("Maximum number: ", max_num)
159
python
# Initialize some variables with None value
data = None
numbers = None

print("Initial values:")
print("Data:", data)
print("Numbers:", numbers)

# Using a for loop to iterate over an empty list and assign None to each element
numbers = []
for i in range(5):
    numbers.append(None)

print("\nAssigned None to each element of the list:")
print("Numbers:", numbers)

# Using a for loop with data variable and checking if it is None
data = 10
print("\nData now has a value, let's check if the variable 'data' is None:")
for i in range(3):
    if data is None:
        print("Data is still None!")
        break
    print("Data is not None.")

# Now set Data to None again and checking if it is equal to any number
print("\nChecking 'data' against numbers using 'is':")
for num in [1, 2, 3, 4]:
    if data is num:
        print(f"Data is the same as number {num}!")
        break
    print(f"Data is not the same as number {num}.")

print("\nChecking 'data' against numbers using '==':")
for num in [1, 2, 3, 4]:
    if data == num:
        print(f"Data is equal to number {num}!")
        break
    print(f"Data is not equal to number {num}.")
160
python
# Function to calculate the square of a number, with None as default argument
def square(number=None):
    if number is None:
        print("Please provide a number")
        return
    result = number * number
    print("The square of", number, "is:", result)

# Calling the function with no argument
square()

# Calling the function with an argument
square(5)

# Assigning None to a variable and checking it with if statement
num = None
if num is None:
    print("Number is not assigned")
else:
    print("Number is:", num)
161
python
# Assigning None to variables
var1 = None
var2 = 42

# Expression with comparison using None
if var1 is None:
    print("Variable 1 is assigned None")
else:
    print("Variable 1 is not None, it has the value:", var1)

# Expression with arithmetic operation and None
result = 5 * var2 if var2 is not None else None
print("The result of expression is:", result)
162
python
# This is a comment, anything following the '#' symbol is ignored by the interpreter

# Assigning None to a variable
none_value = None

# Print statement showing the value of the variable 'none_value'
print("The value of none_value is:", none_value)

# Define a function that returns None
def my_function():
 return None

# Call the function and print the result
result = my_function()
print("The result of calling my_function() is:", result)
163
python
# This function takes no argument and returns None
def my_function():
    print("This function does nothing and returns None")
    return None

# This is the main function where we call my_function()
def main():
    result = my_function()
    if result is None:
        print("Function returned None")
    else:
        print("Function returned something other than None")
        print("Result is:", result)

# Call the main function
if __name__ == "__main__":
    main()
164
python
# Assigning None to a variable
my_variable = None
print(type(my_variable))  # <class 'NoneType'>

# Function returning None
def greet():
    print("Hello, World!")
    
# Call the function without return value
greet()
print(greet)  # <function greet at 0x7f98d3b6c120>
print(type(greet))  # <class 'function'>
print(type(greet()) is None)  # True
165
python
# my_package/mymodule.py
def none_function():
    """
    A simple function that returns None.
    """
    return None
166
python
import numpy as np

# Function with None as default value
def divide(a, b=None):
    """
    Divide two numbers a and b. If b is not provided, the function returns None.
    :param a: A number for dividend.
    :param b: A number for divisor (default: None).
    :return: Result of division or None if b is not provided.
    """
    if b is not None:
        result = np.divide(a, b)
        return result
    else:
        print("Function received no divisor. Returning None.")
        return None

# Test the divide function with some inputs
print(divide(5))
print(divide(10, 3))
print(divide(4, None))
167
python
# Define a simple function that returns None
def my_function():
    print("This function will return None.")
    return None

# Define a dictionary as a namespace for our custom objects
custom_namespace = {
    "my_variable": 42,
    "another_function": lambda: "Hello, World!"
}

# Call the function and assign its result to a variable
result = my_function()
print("The result of my_function is:", result)

# Access the custom namespace and use its contents
print("Value of my_variable in the custom namespace:", custom_namespace["my_variable"])
print("Another function in the custom namespace returns:", custom_namespace["another_function"]())
168
python
# Assigning None to a variable
none_value = None
print("Value of none_value: ", none_value)

# Check if a variable is None
my_variable = 42
print("Value of my_variable: ", my_variable)
print("Is my_variable equal to None? ", my_variable is None)

# Assigning None to a dictionary value
none_dictionary = {"key": None}
print("Value of none_dictionary: ", none_dictionary)
print("Value of none_dictionary['key']: ", none_dictionary['key'])

# Interpreter part (Python shell or REPL)
"""
You can also explore the use of `None` and Python interpreter in the interactive mode. Here's an example:

>>> x = None
>>> print(x)
None

>>> y = 5
>>> print(y)
5

>>> print(y is None)
False
"""
169
python
# Assigning None to a variable
x = None
print("Value of x:", x)

# Function returning None
def return_none():
    return None

result = return_none()
print("Value of result:", result)

# Using None in conditional statements
if x is None:
    print("x is equal to None")
else:
    print("x is not equal to None")
170
python
# Assigning None to a variable
none_value = None
print("Value of none_value is:", none_value)

# Using if condition with None
def get_data():
    data = None
    if data is not None:
        print("Data is available")
        return data
    else:
        print("No data available")
        return None

print("Getting data from the function:")
my_data = get_data()
if my_data is not None:
    print("My data is:", my_data)
else:
    print("No data received")

# Using list with None as an element
numbers = [1, 2, None, 4, 5]
print("List of numbers:", numbers)

# Using tuples with None as an element
tuple_values = (1, "Two", None)
print("Tuple values:", tuple_values)
171
python
# Function that returns the square root of a number if it's positive, and None otherwise
def compute_square_root(number):
    if number < 0:
        print("Error: Cannot compute square root of negative number")
        return None
    else:
        return number ** 0.5

# Function that tries to find the square root of a number and prints it out
def print_square_root(number):
    result = compute_square_root(number)
    if result is not None:
        print(f"The square root of {number} is {result}")

# Testing cases
print("Computing square root of 4:")
print_square_root(4)

print("\nComputing square root of -1:")
print_square_root(-1)
172
python
def add(x, y=None):
    if y is None:
        print("Please provide a number for the second argument.")
        return None
    else:
        result = x + y
        return result

# Using the function with valid arguments
print(add(3, 5)) # Output: 8

# Using the function with an invalid argument (None)
print(add(3)) # Output: Please provide a number for the second argument. None

# Debugging the code using pdb module
import pdb

def add_with_debug(x, y=None):
    if y is None:
        print("Please provide a number for the second argument.")
         pdb.set_trace() # Set breakpoint here
        return None
    else:
        result = x + y
        return result

add_with_debug(3) # When you run this code, it will stop at the line with pdb.set_trace() and open an interactive console where you can inspect variables and step through the code.
173
python
# Define a function that tries to get some data (may return None)
def get_data():
    try:
        data = [1, 2, 3, 4]
        return data
    except Exception:
        print("Error occurred while fetching data!")
        return None

# Test the function and check if it returns None
def main():
    data = get_data()
    
    # Check if data is not None before performing further operations on it
    if data is not None:
        print("Data fetched successfully:", data)
        process_data(data)
    else:
        print("No data was returned.")

# Sample function to process data (for the sake of this example)
def process_data(data):
    for element in data:
        print("Element: ", element)

if __name__ == "__main__":
    main()
174
python
# Function to calculate the square root of a number using Newtons method.
# This function may return None if the given number is negative or if it fails to converge.

import math

def sqrt(number):
    """
    Calculate the square root of a given number using Newtons method.
    
    Parameters:
    number (float): The number for which to calculate the square root.
    
    Returns:
    float: The square root of the given number.
    None: If the number is negative or if the calculation fails to converge.
    """

    # Check if number is negative and return None if it is.
    if number < 0:
        return None

    # Initial guess for the square root.
    guess = number / 2.0

    while abs(guess * (1.0 - guess) - number) > 0.000001:
        guess = (guess + number / guess) / 2.0

    return guess

# Test the function
print(sqrt(9))       # Expected output: 3.0
print(sqrt(4))       # Expected output: 2.0
print(sqrt(16))      # Expected output: 4.0
print(sqrt(-1))      # Expected output: None
175
python
# Define a function that returns None if given argument is empty
def get_first_element(iterable):
    """
    This function returns the first element in the iterable. If the iterable is empty, it returns None.
    """
    if len(iterable) > 0:
        return iterable[0]
    else:
        return None

# Test the function with some examples
print(get_first_element([1, 2, 3]))   # Output: 1
print(get_first_element([]))         # Output: None
print(get_first_element("hello"))    # Output: h
print(get_first_element([None]))     # Output: None
176
python
def calculator(num1, num2, operation):
    """
    Function to perform basic arithmetic operations using given numbers and an operation.

    Args:
        num1 (float or int): First number.
        num2 (float or int): Second number.
        operation (str): Operation to be performed ('add', 'subtract', 'multiply', 'divide').

    Returns:
        result (float or int): The result of the arithmetic operation.
        exception_message (str): An error message in case of an error, otherwise None.
    """

    try:
        if operation == 'add':
            result = num1 + num2
        elif operation == 'subtract':
            result = num1 - num2
        elif operation == 'multiply':
            result = num1 * num2
        elif operation == 'divide':
            if num2 != 0:
                result = num1 / num2
                return result, None
            else:
                exception_message = "Error! Division by zero is not allowed."
                raise ZeroDivisionError(exception_message)
        else:
            exception_message = f"Invalid operation '{operation}'. Supported operations are 'add', 'subtract', 'multiply' and 'divide'."
            raise ValueError(exception_message)
    except Exception as e:
        print("An error occurred:", e)
        result = None
        exception_message = str(e)

# Example usage:
num1 = 5.0
num2 = 3.0
operation = 'divide'
result, exception_message = calculator(num1, num2, operation)

if result is None:
    print("An error occurred:", exception_message)
else:
    print("Result:", result)
177
python
def divide(num1, num2):
    try:
        result = num1 / num2
    except ZeroDivisionError:
        print("Error: Division by zero is not allowed.")
        return None
    else:
        return result

# Test the divide function with valid input
x = 10
y = 5
print(f"Result: {divide(x, y)}")

# Test the divide function with an error input
try:
    print(f"Result: {divide(3, 0)}")
except Exception as e:
    print("Error:", e)
178
python
# Function to divide two numbers with exception handling
def divide(num1, num2):
    try:
        result = num1 / num2
    except ZeroDivisionError as e:
        print("Error:", e)
        result = None
    else:
        print("Result:", result)

# Call the function with valid and invalid inputs
divide(10, 5)
divide(10, 0)
179
python
import logging

# Configure logging
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)
formatter = logging.Formatter("%(asctime)s - %(levelname)s - %(message)s")
file_handler = logging.FileHandler("app.log")
file_handler.setFormatter(formatter)
console_handler = logging.StreamHandler()
console_handler.setFormatter(formatter)
logger.addHandler(file_handler)
logger.addHandler(console_handler)

class MyClass:
    def __init__(self):
        self.data = None

    def method(self):
        """A simple method that returns None"""
        return None

if __name__ == "__main__":
    my_instance = MyClass()
    result = my_instance.method()
    
    logger.debug("Instance initialized")
    logger.info("Method called, returned None")
    if result is not None:
        logger.warning(f"Unexpected non-None value: {result}")

logger.info("Program ended successfully")
180
python
def double(number):
    """
    This function takes one argument and returns the double of that number.
    If the input is None, an AssertionError is raised.
    """
    if number is None:
        assert number is not None, "Input can't be None"
        raise AssertionError("Input can't be None")
     return number * 2

# Testing the function with valid and invalid inputs
print(double(3))               # Output: 6
print(double(None))             # Raises an AssertionError with message "Input can't be None"
181
python
def add_numbers(a, b):
    if isinstance(a, (int, float)):
        result = a
        if isinstance(b, (int, float)):
            result = result + b
            return result
        else:
            print("Error! Second argument must be a number.")
            return None
    else:
        print("Error! First argument must be a number.")
        return None
182
python
# Function to calculate the square root of a number (with and without optimization)
def sqrt_none(number):
    if number < 0:
        return None  # If number is negative, return None
    else:
        import math
        return math.sqrt(number)

# Function to calculate the square root of a number with caching optimization
cache = {}

def sqrt_cache(number):
    if number < 0:
        return None  # If number is negative, return None
    elif number in cache:
        return cache[number]
    else:
        result = math.sqrt(number)
        cache[number] = result
        return result

if __name__ == "__main__":
    numbers = [25.0, 4.0, -1.0, 36.0, 16.0]
    for number in numbers:
        print(f"Square root of {number} is:")
        square_root = sqrt_none(number)
        if square_root is not None:
            print(square_root)
        else:
            print("Error: negative number detected.")

        square_root = sqrt_cache(number)
        if square_root is None:
            print("Error: negative number detected in cache function too.")
        else:
            print(f"Cached result: {square_root}")
183
python
# Function to compute the square root of a number (or return None if the number is negative)
def sqrt(number):
    if number < 0:
        return None
    else:
        import math
        return math.sqrt(number)

# Test some numbers
print(sqrt(4))       # Output: 2.0
print(sqrt(9))       # Output: 3.0
print(sqrt(-1))      # Output: None
184
python
import timeit

# A simple function that performs some computation (for the sake of this example)
def square_root(n):
    import math
    return math.sqrt(n)

# A version of the function that returns None instead of performing computation
def none_square_root(n):
    pass

# Measure the time it takes to call each function using timeit
print("Function returning 'None':")
none_time = timeit.timeit(lambda: none_square_root(10), number=10000)
print(f"Time taken: {none_time} seconds")

print("\nFunction performing computation:")
comp_time = timeit.timeit(lambda: square_root(10), number=10000)
print(f"Time taken: {comp_time} seconds")

# Compare the results
if none_time > comp_time:
    print("The 'None' version of the function is slower!")
else:
    print("The 'None' version of the function is faster!")
    print("This is a rare case, in general None should not make the code slower.")
185
python
# Define a function that returns None if an even number is not provided
def divide_by_two(number):
    if number % 2 == 0:
        result = number / 2
    else:
        print("Error: Invalid even number provided.")
        return None
    return result

# Test the function with some inputs
print(divide_by_two(4))   # Output: 2.0
print(divide_by_two(5))   # Error: Invalid even number provided.
print(divide_by_two(None)) # None
186
python
# Assigning None to a variable
none_value = None
print(type(none_value))

# Function returning None
def return_none():
    return None

print(return_none())
187
python
# Function with a dependency
def calculate_square_root(number):
    if number < 0:
        print("Error: Negative numbers don't have real square roots")
        return None
    import math
    result = math.sqrt(number)
    return result

# Function with dependency on calculate_square_root
def find_distance(x1, y1, x2, y2):
    dx = abs(x1 - x2)
    dy = abs(y1 - y2)

    sqrt_dx = calculate_square_root(dx)
    sqrt_dy = calculate_square_root(dy)

    distance = sqrt_dx + sqrt_dy

    return distance

if __name__ == "__main__":
    print("Find the distance between (2, 3) and (6, 8)")
    x1, y1 = 2, 3
    x2, y2 = 6, 8

    result = find_distance(x1, y1, x2, y2)

    if result is not None:
        print(f"The distance between ({x1}, {y1}) and ({x2}, {y2}) is: {result}")
    else:
        print("Error occurred while calculating the square roots")
188
python
# Assigning None to a variable
my_variable = None
print(type(my_variable))  # Output: <class 'NoneType'>

# Check if a variable is equal to None
another_variable = None
if another_variable is None:
    print("Another variable has no value.")

# Function that returns None as default value
def my_function(input_value=None):
    print("Input Value: ", input_value)
    if input_value is None:
        return None
    # Some code here...
189
python
# Define a variable with None value
none_value = None
print(none_value)

# Function returning None as default value
def greet():
    return None
print(greet())

# Using None as an argument for a function
def print_if_not_none(data=None):
    if data is not None:
        print("Data:", data)
print_if_not_none()
190
python
class Student:
    def __init__(self, name=None, grade=None):
        self.name = name
        self.grade = grade

student1 = Student("John Doe")
student2 = Student(name="Jane Smith", grade=95)

print(student1.grade)  # Output: None
print(student2.grade)  # Output: 95
191
python
# Example demonstrating the use of None

def is_none(value):
    """
    Check if given value is equal to None
    :param value: Any Python object
    :return: Boolean value
    """
    return value is None

def main():
    # Assigning None to a variable
    my_variable = None

    print("my_variable is None? ", is_none(my_variable))

    # Assigning other values
    another_variable = 42
    third_variable = "Hello, World!"

    print("another_variable is None? ", is_none(another_variable))
    print("third_variable is None? ", is_none(third_variable))

if __name__ == "__main__":
    main()
192
python
# A simple Python program demonstrating the use of None
def greet(name=None):
    if name is None:
        print("Hello, Stranger!")
    else:
        print(f"Hello, {name}!")

greet() # prints "Hello, Stranger!"
greet("John Doe") # prints "Hello, John Doe!"
193
python
# app.py
def divide(x, y):
    """Divides x by y."""
    if y is None:
        return None
    else:
        result = x / y
        return result

if __name__ == "__main__":
    num1 = 10
    num2 = 5
    print(f"Result of {num1} divided by {num2}: {divide(num1, num2)}")

    # Demonstrate None as a return value
    print("Function called with y=None: ", divide(num1, None))
194
python
# my_module.py
def my_function(arg=None):
    """This is a simple function that accepts an optional argument."""
    if arg is not None:
        print("You provided an argument:", arg)
    else:
        print("No argument provided.")
195
python
# Assigning None to a variable
x = None
print(x)  # Output: None

# Using None as a default value for function arguments
def print_value(value=None):
    if value is not None:
        print(value)

# Call the function with and without an argument
print_value()
print_value("Hello, World!")
196
python
import os

# Using None
my_variable = None
print("Value of my_variable is:", my_variable)
if my_variable is not None:
    print("My variable has a value: ", my_variable)
else:
    print("My variable does not have a value.")

# Setting and getting environment variables
my_env_var = os.getenv('MYENVVAR')
print("\nValue of MYENVVAR environment variable is:", my_env_var)

if my_env_var is None:
    print("MYENVVAR environment variable does not have a value.")
else:
    print("MYENVVAR environment variable has the value: ", my_env_var)

# Setting an environment variable (for demo purpose, temporary change for this script session)
os.environ['ANOTHERENVVAR'] = 'AnotherValue'
another_env_var = os.getenv('ANOTHERENVVAR')
print("\nValue of ANOTHERENVVAR environment variable is:", another_env_var)
197
python
import subprocess

# Using None
# In Python, None is a special value used to represent the absence of a value or a variable which has not been initialized.

# Example 1: Assigning None to a variable
none_value = None
print("None value type:", type(none_value))
if none_value is None:
    print("None value is set.")

# Example 2: Using None as an argument or return value from a function
def greet(name=None):
    if name is None:
        print("Hello, World!")
    else:
        print(f"Hello, {name}!")

greet() # Hello, World!
greet("John") # Hello, John!

# Interacting with the Shell using subprocess
def run_command(command):
    process = subprocess.Popen(command, stdout=subprocess.PIPE, shell=True)
    output, error = process.communicate()
    if error:
        print("Error occurred:", error.decode())
    else:
        print("Output of command '{}': {}".format(command, output.decode()))

# Example 1: Running a command and capturing its output
run_command("echo Hello, World!")

# Example 2: Running a command with arguments
run_command("ls -l /usr/bin/")
198
python
# Define a function with an optional argument, default value is None
def greet(name=None):
    if name is not None:
        print(f"Hello, {name}!")
    else:
        print("Hello there!")

# Call the function with a name argument
greet("Alice")

# Call the function without an argument (it will use the default value of None)
greet()
199
python
import time
import schedule

def job():
    print("Job executed at: ", time.ctime())

# Schedule the job to run every 1 minute
schedule.every(1).minutes.do(job)

while True:
    schedule.run_pending()
    time.sleep(1)
200
python
def process_data(data):
    """
    A hypothetical data processing function that takes a single argument,
    a list of items, and returns the sum of the squares of its elements.
    """
    return [x ** 2 for x in data]

def my_batch(input_data, batch_size):
    """
    A simple batch processing function that takes an input list and batch size,
    processes the data in batches, and returns a list of results.
    """
    results = []
    for i in range(0, len(input_data), batch_size):
        batch = input_data[i:i+batch_size] if i + batch_size <= len(input_data) else input_data[i:]
        if batch:
            result = process_data(batch)
            results.append(result)
        else:
            # Simulating the end of the data, setting the result to None
            results.append(None)
    return results

input_data = [1, 2, 3, 4, 5, 6, 7, 8, 9]
batch_size = 3
output = my_batch(input_data, batch_size)

for i, batch in enumerate(output):
    if batch is None:
        print("End of data reached. No output for this batch.")
    else:
        print(f"Batch {i}: Output: {batch}")
201
python
# An example function that may or may not return a value
def divide(x, y):
    try:
        result = x / y
    except ZeroDivisionError:
        print("Error: Division by zero.")
        return None
    else:
        return result

x = 10
y = 2
result = divide(x, y)

if result is not None:
    print(f"Result: {result}")
else:
    print("No result.")
202
python
def factorial(n, check_even=None):
    """Calculate the factorial of a number and optionally check if it's even or odd"""
    if n < 0:
        raise ValueError("Number must be non-negative")

    result = 1
    for i in range(1, n + 1):
        result *= i

    if check_even is not None:
        return result, bool(check_even) if check_even else "even" if result % 2 == 0 else "odd"

    return result

# Test cases
print(factorial(5))              # Output: 120
print(factorial(4, True))         # Output: (120, True)
print(factorial(3, False))        # Output: (6, 'odd')
print(factorial(-2))             # Raises ValueError: Number must be non-negative
print(factorial())               # Output: None
203
python
import threading

# Function that will be run in a new thread
def worker(arg=None):
    if arg is not None:
        print("Thread received argument:", arg)
    else:
        print("Thread does not have an argument")

# Create a new thread and start the function
thread = threading.Thread(target=worker, args=(None,))
thread.start()

# Function that runs in the main thread
def main():
    arg = "Hello from main thread"
    print("Main thread has an argument:", arg)
    # Start worker thread with an argument
    thread2 = threading.Thread(target=worker, args=(arg,))
    thread2.start()

if __name__ == "__main__":
    main()
204
python
# Assigning None to a variable
my_variable = None
print("Value of my_variable:", my_variable)

# Check if a variable is equal to None
another_variable = "Some value"
if another_variable is None:
    print("another_variable is None")
else:
    print("another_variable has a value:", another_variable)

# Function that returns None as default value
def my_function():
    pass

# Calling the function and storing its result in a variable
result = my_function()
print("Value of result:", result)
205
python
import threading

class SharedData:
    def __init__(self):
        self._value = None
        self._lock = threading.Lock()

data = SharedData()
206
python
def my_function():
    # some code here
    return None
207
python
# Open a file with None as an initial value for the file object
file = None
try:
    # Open the file in read mode
    file = open('example.txt', 'r')

    # Read the contents of the file and print them
    contents = file.read()
    print(f'File Contents:\n{contents}')
finally:
    if file is not None:  # If file object was created
        file.close()     # Close the file before exiting
208
python
import threading
import time

# Define a shared counter that will be accessed by multiple threads
counter = 0

# Create a lock for synchronization
lock = threading.Lock()

def increment_counter(name):
    """Increments the counter."""
    
    # Loop for 100 times to simulate some work being done
    for _ in range(100):
        pass

    # Acquire the lock before accessing the shared counter
    with lock:
        global counter
        counter += 1
        print(f"{name} incremented the counter to {counter}")

# Create two threads and start them
thread_a = threading.Thread(target=increment_counter, args=("Thread A",))
thread_b = threading.Thread(target=increment_counter, args=("Thread B",))

# Start both threads
thread_a.start()
thread_b.start()

# Wait for both threads to finish their work
thread_a.join()
thread_b.join()
209
python
x = None  # Assigning None to a variable
print(type(None))  # Print the type of None (which is <class 'NoneType'>).
210
python
# Assigning None to a variable
x = None
print(x)

# Checking if a variable is equal to None
if my_variable is None:
  print("my_variable is not assigned a value.")
else:
  print("my_variable has a value:", my_variable)
211
python
import os
import contextlib

@contextlib.contextmanager
def open_file(filename):
    try:
        file = open(filename, 'r')
        yield file
    finally:
        if file is not None:
            file.close()

def print_file_content(filename):
    with open_file(filename) as f:
        content = f.read()
        print(f"The content of the file '{filename}' is:")
        print(content)

if __name__ == "__main__":
    filename = "example.txt"
    if os.path.exists(filename):
        print_file_content(filename)
    else:
        print(f"File '{filename}' does not exist.")
212
python
import gc

# Define a class with a __del__ method
class MyClass:
    def __init__(self, data):
        self.data = data

    def __del__(self):
        print("Object of MyClass is being destroyed")

# Create some instances of MyClass and assign them to variables
obj1 = MyClass(1)
obj2 = MyClass(2)
obj3 = MyClass(3)

# Assign None to some variables
obj4 = None
obj5 = None

# Print some objects' addresses for reference
print("Address of obj1: ", id(obj1))
print("Address of obj2: ", id(obj2))
print("Address of obj3: ", id(obj3))

# Remove references to obj1 and obj2 from variables, but they still exist
del obj1
del obj2

# Objects that are no longer reachable will be collected by the garbage collector.
# However, we can manually trigger garbage collection using gc.collect()
gc.collect()

# After garbage collection, all objects that were no longer reachable should be destroyed
print("Address of obj1 after GC: ", id(obj1))  # Should print None
print("Address of obj2 after GC: ", id(obj2))  # Should print None
213
python
class MyClass:
    def __init__(self, data=None):
        self.data = data
        
# Function to allocate large list
def create_large_list(size):
    return [i for i in range(size)]

# Function to measure memory usage with sys.getsizeof()
import sys

def measure_memory(obj):
    return sys.getsizeof(obj)

# Program entry point
if __name__ == "__main__":
    instance = MyClass()  # Creating an instance of MyClass with default value None

    print("Memory usage of None: ", measure_memory(None))
    print("Memory usage of empty class instance: ", measure_memory(instance))

    large_list = create_large_list(10000)  # Allocating a large list

    print("Memory usage of large list: ", measure_memory(large_list))

    del large_list  # Deallocating the large list

    print("Memory usage of empty class instance after Garbage Collection: ", measure_memory(instance))
215
python
# Function definition with optional parameter, using default value as None
def my_function(param1, param2=None):
    if param2 is not None:
        print("Received parameter2:", param2)

# Function call with one argument
my_function("Argument 1")

# Function call with two arguments
my_function("Argument 1", "Argument 2")

# Using * to unpack a tuple or list as function arguments
args = (None, "Argument X")
my_function(*args)
216
python
# Assigning None value to a variable
none_value = None

print("Value of none_value:", none_value)
print("Type of none_value:", type(none_value))

# Performing arithmetic division using the / operator
number1 = 10
number2 = 5
result = number1 / number2

print("Result of {} divided by {} is: {}".format(number1, number2, result))
217
python
# Assigning None to a variable
my_variable = None

# Checking if a variable is None
if my_variable is None:
    print("The value is None")
else:
    print("The value is not None")

# Using None as a return type from a function
def my_function():
    return None

result = my_function()
print(result)
218
python
# Define a function that calculates the quotient and remainder using division and modulus operators
def calculate_quotient_remainder(dividend, divisor):
    quotient = dividend // divisor
    remainder = dividend % divisor
    return quotient, remainder

# Perform calculations with some inputs and handle cases where divisor is zero or divisor is None
try:
    # Calculate quotient and remainder for a valid division
    num1 = 15
    num2 = 3
    quotient, remainder = calculate_quotient_remainder(num1, num2)
    print(f"Quotient: {quotient}, Remainder: {remainder}")

    # Calculate quotient and remainder for a division by zero
    num1 = 15
    num2 = 0
    quotient, remainder = calculate_quotient_remainder(num1, num2)
    print(f"Quotient: {quotient}, Remainder: {remainder}")

    # Calculate quotient and remainder for a division with None divisor
    num1 = 15
    num2 = None
    if num2 is not None:
        quotient, remainder = calculate_quotient_remainder(num1, num2)
        print(f"Quotient: {quotient}, Remainder: {remainder}")
    else:
        print("Error: Division by None")
except ZeroDivisionError as e:
    print(e)
219
python
# Function with an optional None argument
def greet(name=None):
    if name is not None:
        print("Hello, " + name)
    else:
        print("Hello")

# Function using ** for unpacking a dictionary into keyword arguments
def process_settings(settings):
    key1, value1 = settings.items()[0]
    key2, value2 = settings.items()[1:]

    print(f"Key 1: {key1}, Value 1: {value1}")
    print(f"Key 2: {key2}, Value 2: {value2}")

# Test cases
settings_1 = {"key1": "John", "key2": "Doe"}
greet()                       # Output: Hello
greet("Alice")                 # Output: Hello, Alice
process_settings(settings_1)  # Output: Key 1: key1, Value 1: John
                             #        Key 2: key2, Value 2: Doe

none_dict = {None: "default_value"}
greet()                       # Output: Hello
process_settings(none_dict)   # Output: Key 1: None, Value 1: default_value
220
python
class MyClass:
    def my_method(self):
        """
        This method returns None by default.
        """
        return None

def main():
    # Create an instance of MyClass
    obj = MyClass()

    # Call the my_method() and assign the result to a variable 'result'
    result = obj.my_method()

    # Print out the type of 'result'
    print(type(result))

if __name__ == "__main__":
    main()
221
python
# Define some variables
var1 = 42
var2 = "forty-two"
var3 = None

# Assigning None to a variable
print("Assigning None to a variable:")
var4 = None
print("Type of var4: ", type(var4))

# Checking for None
print("\nChecking if a variable is None:")
if var3 is None:
    print("var3 is None.")
else:
    print("var3 is not None.")

# Comparing with None using 'is' keyword
print("\nComparing with None using 'is':")
if var4 is None:
    print("var4 is None.")
else:
    print("var4 is not None and has value:", var4)

# Comparing with None using '==' operator
print("\nComparing with None using '==' operator:")
if var4 == None:
    print("None and None are equal.")
elif var4 is None:
    print("Variable is None, but comparison failed.")
else:
    print("var4 has a value:", var4)

# Assigning values and checking for equality using '==' operator
print("\nAssigning values and checking for equality using '==' operator:")
var5 = 42
if var1 == var5:
    print("var1 and var5 are equal.")
else:
    print("var1 and var5 are not equal.")
222
python
# Define a function that returns None if given number is not perfect square
def is_perfect_square(n):
    if n < 0:
        return None
    i = 1
    while i * i <= n:
        if n % i ** 2 == 0:
            return True
        i += 1
    return None

# Test cases
num1 = 16
num2 = 25
num3 = -3

# Use the is_perfect_square function and check for None and not equal to 0
if is_perfect_square(num1) is not None:
    print(f"{num1} is a perfect square.")
elif is_perfect_square(num1) == 0:
    print(f"{num1} is not a perfect square and is_perfect_square() returned 0 which indicates an error.")
else:
    print(f"{num1} is not a perfect square.")

print("----------------------")

if is_perfect_square(num2) is not None:
    print(f"{num2} is a perfect square.")
elif is_perfect_square(num2) == 0:
    print(f"{num2} is not a perfect square and is_perfect_square() returned 0 which indicates an error.")
else:
    print(f"{num2} is not a perfect square and is_perfect_square() returned {is_perfect_square(num2)} which is None.")

print("----------------------")

if is_perfect_square(num3) is not None:
    print(f"{num3} is a perfect square.")
elif is_perfect_square(num3) == 0:
    print(f"{num3} is not a perfect square and is_perfect_square() returned 0 which indicates an error.")
else:
    print(f"{num3} is not a perfect square.")
223
python
# Assigning None to a variable
variable = None
print(variable)  # Output: None

# Check if a variable is equal to None using 'is' keyword
if variable is None:
    print("Variable has no value")
else:
    print("Variable has some value")
224
python
# Define some variables
num1 = 5
num2 = None
num3 = 10

# Comparison using the '>' operator
if num1 > num2:
    print("num1 is greater than num2")
else:
    print("num1 is not greater than num2 or num2 is greater than num1")

# Comparing with None using 'is' and 'is not' keywords
if num3 is not None:
    print("num3 has a value, it is not None")
else:
    print("num3 does not have a value, it is equal to None")
225
python
# This function checks if a given number is less than or equal to 0, and if not, sets the default value to None
def check_number(num):
    if num <= 0:
        return 0
    else:
        return None

# Test cases
print(check_number(5)) # None
print(check_number(-1)) # 0
print(check_number(3)) # None
226
python
# Define a compare function that takes two arguments
def compare(arg1, arg2):
    # Compare arg1 and arg2 using the >= operator
    if (arg1 is not None) and (arg2 is not None):
        return str(arg1) + " is greater than or equal to " + str(arg2) + " (" + str(arg1) + " >= " + str(arg2) + ")"
    elif arg1 is None:
        return str(arg1) + " is None"
    elif arg2 is None:
        return str(arg2) + " is None"
    else:
        return "Both are None"

# Call the compare function with various arguments
print(compare(3, 3))         # prints "3 is equal to 3 (3 = 3)"
print(compare(5, 3))         # prints "5 is greater than 3 (5 > 3)"
print(compare(None, None))    # prints "Both are None"
print(compare(None, 3))      # prints "None is less than 3 (None < 3)"
227
python
# Function to increment a given value if it is not None
def increment_if_not_none(value):
    if value is not None:
        value += 1
    return value

# Demonstration of using None and compound assignment operator +=
x = None
y = 5

print("Before function call:")
print("x =", x)
print("y =", y)

x = increment_if_not_none(x)
print("After first function call (with None):")
print("x =", x)
print("y =", y)

y = increment_if_not_none(y)
print("After second function call (with a number):")
print("x =", x)
print("y =", y)
229
python
# Define a function to calculate the product
def calculate_product(num1, num2, multiplier=None):
    # Initialize product to 1
    product = 1
    
    if multiplier is not None:
        product *= multiplier
    
    product *= num1 * num2
    
    return product

# Take user input and assign it to variables
num1 = float(input("Enter first number: "))
num2 = float(input("Enter second number: "))
multiplier = None  # Initialize multiplier as None

# Ask user if they want to use a multiplier
answer = "yes"
while answer in ["yes", "y"]:
    multiplier = float(input("Do you want to use a multiplier? If yes, enter it: "))
    answer = input("Do you want to calculate another product? If yes, enter 'yes' or 'y': ")

# Calculate the product with or without multiplier
result = calculate_product(num1, num2, multiplier)
print(f"The product of {num1} and {num2}, multiplied by {multiplier if multiplier else ''}, is: {result}")
230
python
def divide_numbers(num1, num2):
    try:
        result = num1 / num2
    except ZeroDivisionError:
        print("Cannot divide by zero!")
        return None

    print(f"Result of division: {result}")

    # Using the division assignment operator to update 'num1' with the result of the division.
    num1 /= num2

    print(f"Num1 after division assignment: {num1}")

# Calling the function with some numbers as arguments
divide_numbers(10, 3)
divide_numbers(5, 2)
divide_numbers(4, 0)
231
python
# A simple calculator program that demonstrates the use of None and //=

class Calculator:
    def __init__(self, dividend=None):
        self.dividend = dividend if dividend is not None else 0
        self.divisor = 1

    def divide(self, divisor):
        self.divisor = divisor
        quotient = self.dividend // self.divisor
        self.dividend = quotient

# Usage example:
calculator = Calculator(10)
calculator.divide(3)
print(f'Quotient is {calculator.dividend}') # Quotient is 3

calculator.divide(None)
print(f'Quotient after division by None: {calculator.dividend}') # Quotient after division by None: 0
232
python
# Define a calculator function that returns quotient, remainder and checks for division by zero
def calc_division(dividend, divisor):
    if divisor != 0:
        quotient = dividend // divisor
        remainder = dividend % divisor
        return quotient, remainder
    else:
        print("Error: Division by zero")
        return None, None

# Main function to test the calculator function with different inputs
if __name__ == "__main__":
    num1 = 15
    num2 = 3

    # Call the calculator function and store the result in a variable
    result = calc_division(num1, num2)

    if result is not None:
        print("Quotient:", result[0])
        print("Remainder:", result[1])

    num1 = 7
    num2 = 0

    # Call the calculator function with divisor as zero and check for None return
    result = calc_division(num1, num2)

    if result is None:
        print("No quotient or remainder obtained due to division by zero")
    else:
        print("Error in input. Quotient and Remainder not calculated.")
233
python
# Define a function that takes an argument and sets it to None if no argument is provided
def set_to_none(arg=None):
    print("Original arg:", arg)
    if arg is None:
        arg = None
    else:
        arg = 42
        print("Argument assigned a new value: ", arg)

    print("Function argument after the function call: ", arg)

# Call the function with an argument
set_to_none(3)
print()

# Call the function without an argument
set_to_none()
234
python
# Define a function that takes two arguments and returns their bitwise AND if they're not None, otherwise returns None
def bitwise_and(num1, num2):
    if num1 is not None and num2 is not None:
        return num1 & num2
    else:
        return None

# Define some variables that will be used as inputs to the function
num1 = 5  # binary: 101
num2 = 3  # binary: 011
num3 = None
num4 = 7  # binary: 0111

# Call the bitwise_and() function with different combinations of inputs
result1 = bitwise_and(num1, num2)
print("num1 = {} and num2 = {}, their bitwise AND is: {}".format(num1, num2, result1))  # Output: 0

result2 = bitwise_and(num1, num3)
print("num1 = {} and num3 = None, their bitwise AND is: {}".format(num1, num3, result2))  # Output: None

result3 = bitwise_and(None, num2)
print("None and num2 = {}, their bitwise AND is: {}".format(num2, result3))  # Output: None

result4 = bitwise_and(num1, num4)
print("num1 = {} and num4 = {}, their bitwise AND is: {}".format(num1, num4, result4))  # Output: 0
235
python
def div(x, y):
    if y == 0:
        return None
    else:
        return x / y

print(div(5, 2))  # Output: 2.5
print(div(5, 0))  # Output: None
236
python
x = None
print(type(x))  # Output: <class 'NoneType'>
237
python
# Function to apply bitwise NOT operation on a given number and return original number and result
def not_operator(num):
    result = ~num  # Bitwise NOT operation
    print(f'Original Number: {num}')
    print(f'Result (Bitwise NOT): {result}\n')
    return num, result

# Test cases for the function
if __name__ == "__main__":
    # Test case 1: Positive number
    test_num_1 = 5
    original_num, result = not_operator(test_num_1)

    # Test case 2: Negative number
    test_num_2 = -3
    original_num, result = not_operator(test_num_2)

    # Test case 3: None type
    test_num_3 = None
    print(f"Test case for None: {test_num_3}")
    if test_num_3 is not None:
        original_num, result = not_operator(test_num_3)
        print(f'Result (for None): {result}')
238
python
# Defining a function that returns None
def return_none():
    """This function simply returns None"""
    return None

# Assigning None to a variable
my_variable = None

# Calling a function that returns None and assigning the result to a variable
result = return_none()

# Printing some messages to demonstrate the use of None
print("Variable 'my_variable' is:", my_variable)
print("Function 'return_none' returned:", result)

# Check if a variable is equal to None using the is keyword
print("Is my_variable equal to None?", my_variable is None)
239
python
# Assigning None to a variable
my_variable = None

# Check if a variable is equal to None
if my_variable is None:
    print("My variable has no value.")
else:
    print("My variable has a value:", my_variable)
240
python
# Assigning None to a variable
number = None

# Checking if number is not equal to None using and operator
if number is not None and type(number) is not list:
    print("Number is not None and it's not a list")
else:
    print("Number is either None or it's a list")

# Assigning a value to the variable number
number = 5

# Using and operator for logical conditions
if number > 0 and number < 10:
    print("Number is between 0 and 10")
241
python
# Definition of a function that checks if a number is positive, zero or None
def check_number(num):
    if num is None:
        print("Number is None")
    elif num > 0:
        print("Number is positive")
    else:
        print("Number is non-positive")

# Definition of some variables with None value
num1 = None
num2 = -5
num3 = 0

# Using or operator to check if num1 is None or num2 is negative
if num1 is None or num2 < 0:
    print("Either the number is None or it's non-positive")

# Calling the function with different arguments
check_number(num1)
check_number(num2)
check_number(num3)

# Using or operator to check if a variable is None or a condition is True
if not num1 and (num2 < 0 or num3 > 5):
    print("Both conditions are true")
242
python
# Assigning None to a variable
my_variable = None
print("Value of my_variable: ", my_variable)
print("Is my_variable equal to None?: ", my_variable is None)
print("Is my_variable truthy? : ", bool(my_variable))

# Assigning a value to a variable
some_value = 10
print("\nValue of some_value: ", some_value)
print("Is some_value equal to None?: ", some_value is None)
print("Is some_value truthy? : ", bool(some_value))

# Using not with a boolean value
boolean_value = True
print("\nValue of boolean_value: ", boolean_value)
print("Negating boolean_value using not: ", not boolean_value)
243
python
# Assigning None to a variable
x = None
print("Value of x is:", x)

# Checking if None is in a list or not
my_list = [1, 2, 3, 4, None]
if None in my_list:
    print("None is present in the list")
else:
    print("None is not present in the list")

# Checking if variable is equal to None using is keyword and in keyword
if x is None or None in [x]:
    print("Variable x is None")
else:
    print("Variable x has some value")
244
python
# Function that returns None if the given number is even, else returns the number squared
def is_even(num):
    """
    This function checks if a given number is even or not.
    If the number is even, it returns None. Else it returns the number squared.
    """
    if num % 2 == 0:
        return None
    else:
        return num ** 2

# Testing the function
num = int(input("Enter a number: "))
result = is_even(num)

if result is not None:
    print(f"Square of given number is {result}")
else:
    print("Given number is even")
245
python
# Assigning None to a variable
my_variable = None
print("Value of my_variable: ", my_variable)

# Functions can return None as well
def divide(numerator, denominator):
    if denominator == 0:
        return None
    else:
        result = numerator / denominator
        return result

print("Divide 5 by 2: ", divide(5, 2))
print("Divide 5 by 0: ", divide(5, 0))

# Using None as a placeholder in a dictionary
my_dict = {"key1": 1, "key2": None}
print("Dictionary: ", my_dict)

# Checking if a variable is equal to None
if my_variable is None:
    print("my_variable is None")
else:
    print("my_variable is not None and has the value:", my_variable)
246
python
# Assigning None to a variable
my_variable = None
print(my_variable)  # Output: None

# Function returning None
def my_function():
    return None

result = my_function()
print(result)  # Output: None

# Dictionaries may have keys without values, which is represented by None
my_dict = {"key1": "value1", "key2": None}
print(my_dict)  # Output: {'key1': 'value1', 'key2': None}

# Lists can also contain None values
my_list = [1, 2, 3, None]
print(my_list)  # Output: [1, 2, 3, None]
247
python
# Function that returns None
def my_function():
    print("This function does not return anything.")
    return None

# Variable with no value assigned
my_variable = None

# Call the function and assign the returned None to a variable
result = my_function()
print(type(result))  # Output: <class 'NoneType'>
248
python
# Define a function that takes one argument which is optional and has a default value of None
def greet(name=None):
    if name is not None:
        print("Hello, " + name)
    else:
        print("Hello!")

# Call the greet function without an argument, it will print "Hello!"
greet()

# Call the greet function with an argument, it will print "Hello, <argument>"
greet("Alice")

# Assign None to a variable
none_var = None
print(none_var)  # prints: None

# Using () (parentheses) in Python is used for different purposes such as function calls, tuples, etc. Here's an example of using () with a tuple:

# Define a tuple using ()
numbers = (1, 2, 3, 4, 5)
print(type(numbers))  # prints: <class 'tuple'>

# Accessing elements in a tuple using index and ()
print(numbers[0])  # prints: 1
print(numbers[-1])  # prints: 5
249
python
# Define a function that takes an argument, but it can be left empty (None)
def greet(name=None):
    if name is not None:
        print("Hello, " + name)
    else:
        print("Hello")

# Create an empty list
my_list = []

# Use None and a list in the same data structure (a dictionary)
my_data = {
    "name": "John Doe",
    "age": 30,
    "city": None,
    "hobbies": my_list
}

# Demonstrate the use of the function and the dictionary
greet()
print(my_data)

# Add elements to the list
my_list.append("reading")
my_list.append("swimming")

# Again, demonstrate the use of the function and the dictionary
greet(name="John Doe")
print(my_data)
250
python
# This function takes an argument, but it doesn't need to have a value passed to it.
def print_message(message=None):
    if message is not None:
        print(message)
    else:
        print("No message provided.")

# Create an empty dictionary
my_dict = {}

# Add some key-value pairs to the dictionary
my_dict["key1"] = "value1"
my_dict["key2"] = 42
my_dict["key3"] = None

print("Dictionary: ", my_dict)

# Access values using keys
print("Value of key1: ", my_dict["key1"])
print("Value of key2: ", my_dict["key2"])
print("Value of key3: ", my_dict["key3"])

# Try to access a non-existent key
try:
    print("Value of key4: ", my_dict["key4"])
except KeyError as e:
    print(f"KeyError: {e}")

# Call the function with a message
print_message("Hello, world!")
# Call the function without a message
print_message()
251
python
# Define a function that takes one argument which can be optional
def greet(name=None):
    if name is None:
        print("Hello! What's your name?")
        name = input("Your name: ")
    print(f"Hello, {name}!")

# Call the function with no argument to see it asking for a name
greet()

# Or call the function with an argument to greet directly
greet("Alice")
252
python
# Function to calculate the square of a number or return None if no argument is given
def square(number=None):
    if number is None:
        return None
    else:
        result = number * number
        return result

# Using semicolon to place multiple statements on the same line (not recommended for readability)
x = 5; y = 10
print(f"Value of x: {x}")
print(f"Value of y: {y}")

# Function call examples
print("Square of 4: ", square(4)) # Should print "Square of 4: 16"
print("Square of None: ", square()) # Should print "Square of None: None"
253
python
# Define two boolean variables
variable1 = True
variable2 = True

# Use the 'and' operator to check if both variables are True
result = variable1 and variable2

# Print the result
if result:
    print("Both variables are True")
else:
    print("At least one of the variables is False")
254
python
# Creating a dictionary with keys as boolean values
boolean_dict = {True: "true value", False: "false value"}

# Assigning values using normal assignment statement
value1 = boolean_dict[True]
print("Value 1 is:", value1)

# Assigning values using 'as' keyword for better readability and avoiding booleans
value2, name = boolean_dict.items()
value2 as true_value
name as false_value

print("Value 2 (true value) is:", true_value)
print("Value 2 (false value) is:", false_value)
255
python
def validate_input(user_input):
    """
    Validate user input is an integer within a specified range.
    :param user_input: The input provided by the user.
    :return: None if valid, raises AssertionError if not.
    """

    # Set minimum and maximum values
    min_value = 1
    max_value = 5

    try:
        # Convert user input to an integer
        num = int(user_input)

        # Check if the number is within the specified range
        if num >= min_value and num <= max_value:
            print("Input is valid.")
            return
        else:
            print(f"Input should be between {min_value} and {max_value}.")

        # Raise an AssertionError if the number is not valid
        assert num >= min_value and num <= max_value, "Invalid input. Number should be between {} and {}.".format(min_value, max_value)
    except ValueError:
        print("Invalid input. Please provide a valid integer.")

# Get user input
user_input = input("Enter an integer between 1 and 5: ")

# Validate user input
validate_input(user_input)
256
python
import asyncio
import aiohttp

async def send_request(url):
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            data = await response.text()
            return data

async def main():
    urls = ["https://example.com", "https://example.org", "https://example.net"]

    tasks = [send_request(url) for url in urls]

    responses = await asyncio.gather(*tasks)

    print("Responses:")
    for i, response in enumerate(responses):
        print(f"URL {i+1}: {response}")

if __name__ == "__main__":
    asyncio.run(main())
257
python
import asyncio

# A simple function that returns a Promise (future) that resolves after given delay.
async def sleep(seconds):
    await asyncio.sleep(seconds)
    return "Slept for {} seconds.".format(int(seconds))

# An asynchronous coroutine function that prints "Hello, World!" and then waits for 3 seconds.
async def main():
    print("Hello, World!")
    await sleep(3)
    print("Done.")

# Run the coroutine using asyncio's `run()` function.
if __name__ == "__main__":
    try:
        # The event loop will run the coroutine and wait for it to complete.
        asyncio.run(main())
    except KeyboardInterrupt:
        print("Exiting gracefully...")
258
python
for i in range(1, 6):
    if i % 2 == 0:  # check if the current number is even (0 is left over when divided by 2)
        print(f"Found even number: {i}")
        break     # exit the loop once an even number is found
    else:
        print(f"Current number: {i}, which is odd")
259
python
# Define a custom class named 'Person' with two attributes: name and age
class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    # A method to check if a person is eligible to vote (18 years or older)
    def is_eligible_to_vote(self):
        return self.age >= 18

# Create instances of 'Person' class with given names and ages
person1 = Person("John Doe", 25)
person2 = Person("Jane Smith", 30)

# Check if each person is eligible to vote or not using 'is_eligible_to_vote()' method
print(f"{person1.name} is eligible to vote: {person1.is_eligible_to_vote()}")  # False
print(f"{person2.name} is eligible to vote: {person2.is_eligible_to_vote()}")  # True

# Using 'True' boolean value in Python
# You can compare variables or expressions to return a boolean (True/False) value
print(5 > 3)       # Output: True
print("apple" < "banana")   # Output: False
260
python
# This program goes through numbers from 0 to 9, and prints only even numbers

for i in range(10):
    if i % 2 != 0:  # Check if current number is odd
        continue   # If it's odd, jump to the next iteration of the loop
    print(i)      # If it's even, print it
261
python
# This is a comment - anything after the '#' symbol is ignored by the interpreter

# Assigning the boolean value 'True' to a variable
is_rainy = True

print("Is it rainy? ", is_rainy)

def is_even(number):
    """
    This function takes an integer as an argument and returns 'True' if the number is even, otherwise returns 'False'.
    """

    # The 'if' statement checks if the condition inside the parentheses is True or False
    if number % 2 == 0:
        return True
    else:
        return False

number = int(input("Enter a number: "))
result = is_even(number)
print(f"{number} is even? {result}")
262
python
# Initializing a list called numbers
numbers = [10, 20, 30, 40, 50]

# Printing the initial state of the list
print("Initial State of List:")
print(numbers)

# Removing an element from the list using del keyword
index_to_remove = 2
del numbers[index_to_remove]

# Printing the updated state of the list
print("\nUpdated State of List after deletion:")
print(numbers)

# Using True to check if an element is present or not in the list
element_to_check = 40
if 40 in numbers:
    print(f"\nThe element {element_to_check} is present in the updated list.")
else:
    print(f"\nThe element {element_to_check} is not present in the updated list.")

# Using True to check if an empty list or tuple is empty
my_list = []
my_tuple = ()

print("\nChecking if lists and tuples are empty using True:")
print(f"\nList is empty? {bool(my_list)}")
print(f"\nTuple is empty? {bool(my_tuple)}")
263
python
# This program checks if a given number is in the range of 1 to 10 (inclusive)

number = int(input("Enter a number between 1 and 10: "))

if number < 1:
    print("Number is less than 1")
elif number > 10:
    print("Number is greater than 10")
elif number == 10:
    print("Number is exactly equal to 10")
else:
    print("Number is between 1 and 10, but not equal to 10")
264
python
# This program checks if a given number is even or odd

number = 5

if number % 2 == 0:  # Check if number is even
    print("The given number is even.")
else:
    print("The given number is odd.")
265
python
# Function to check if a number is even or odd
def check_even_odd(number):
    try:
        # Check if the number is even
        if number % 2 == 0:
            result = "Even"
        else:
            result = "Odd"
     except Exception as e:
         print("An error occurred:", e)
         result = "Unknown"
     finally:
         # This will always be executed
         print(f"The number {number} is {result}")

# Test cases
check_even_odd(5)
check_even_odd(6)
check_even_odd("Hello")
266
python
import os

def my_function():
    try:
        # This will raise an exception as 'myfile.txt' may not exist
        file = open('myfile.txt', 'r')
        data = file.read()
        print(data)
    except FileNotFoundError:
        # This block is executed when FileNotFoundError exception occurs
        print("File not found, creating a new one...")
        if not os.path.exists('myfile.txt'):
            with open('myfile.txt', 'w') as file:
                file.write("This is a new file.")
        else:
            print("The file already exists!")
    finally:
        # This block is executed regardless of the exception or successful execution
        if file is not None:
            file.close()
            print("File closed.")

my_function()
267
python
# This function checks if a given number is positive, and prints its square if it is
def print_square_if_positive(number):
 if number > 0:
 print(number ** 2)
 else:
 print("Number is not positive")

# Using for loop to iterate over a list of numbers
numbers = [1, -3, 4, -5, 7]
for num in numbers:
 if True:  # This condition always evaluates to True
 print_square_if_positive(num)
268
python
# Define some variables with Boolean values
is_sunny = True
is_raining = False

print("Is it sunny?", is_sunny)
print("Is it raining?", is_raining)

# Perform some conditions and operations using these variables
if is_sunny:
    print("It's a nice day!")
elif is_raining:
    print("Please bring an umbrella.")
else:
    print("The weather is uncertain today.")
269
python
# Function to set a global variable
def set_global(val):
    global x
    x = val

# Function that uses a global variable
def print_x():
    global x
    print("The value of x is:", x)

# Initialize an empty list as a local variable with the same name as the global one
x = []

# Set the global variable in the function set_global
set_global(True)

# Print the local variable (which remains unchanged)
print("The value of the local x is:", x)

# Print the global variable
print_x()
270
python
# Set a variable to False
is_rainy = False

# Check if it's raining or not using if statement
if not is_rainy:
    print("It's not raining today!")
else:
    print("It's raining today. Please bring an umbrella.")
271
python
# This is a simple Python script that checks if a given number is even or odd using an if statement with the Boolean value 'True'

# Function to check if a number is even or odd
def is_even(number):
    if number % 2 == 0:
        return True
    else:
        return False

# Importing a module (math in this case) for mathematical functions
import math

# Taking user input
num = int(input("Enter a number: "))

# Using if statement and Boolean value 'True'
if is_even(num):
    print(f"The number {num} is even.")
else:
    print(f"The number {num} is odd.")

# Using imported math module
square = math.pow(num, 2)
print(f"The square of the entered number is {square}")
272
python
# Define a list
numbers = [1, 2, 3, 4, 5]

# Use True in a conditional statement
if True:
    print("This statement will always be executed")

# Use the 'in' keyword to check if an element is present in a list
if 3 in numbers:
    print("The number 3 is present in the list")
else:
    print("The number 3 is not present in the list")
273
python
# Demonstrating True as a Boolean Value
x = 10
y = 20
z = x

print("Condition 1:")
if x > 5:
    print(f"{x} is greater than 5. So, the condition is true.")
else:
    print(f"{x} is less than or equal to 5. So, the condition is false.")
print("But, {0} is a truth value and it evaluates as true.".format(True))

# Demonstrating is operator
a = [1, 2, 3]
b = [1, 2, 3]
c = a

print("Condition 2:")
if id(a) == id(b):
    print("a and b are the same object in memory. So, this condition is true.")
elif id(a) is id(c):
    print("a and c are the same object in memory. So, this condition is true.")
else:
    print("None of a, b or c are the same objects in memory. So, these conditions are false.")
274
python
# This is a simple function that returns the larger of two numbers using lambda and True
def larger_number(num1, num2):
    # Using lambda to create a small anonymous function that returns the larger number
    is_larger = lambda: num1 if num1 > num2 else num2
    
    # Using True to call the lambda function
    return is_larger()

# Testing the larger_number function with some numbers
print(larger_number(5, 3))         # Output: 5
print(larger_number(-1, 5))       # Output: 5
print(larger_number(0, -1))       # Output: 0
275
python
def outer_function(x, y):
    def inner_function():
        nonlocal x, y  # Declare that x and y are nonlocal variables
        x += 1
        y *= 2

    inner_function()
    print("After inner function call: x =", x, "and y =", y)

outer_function(x=3, y=4)
276
python
# Define a boolean variable
is_student = True

# Print the original value
print("Original value: ", is_student)

# Negate the boolean value using 'not'
is_student_not = not is_student

# Print the negated value
print("Negated value: ", is_student_not)
277
python
# Define some variables
a = 10
b = 20
c = False

# Using True as a boolean value
if True:
    print("True is true")

# Using or operator to check if any of the conditions are true
if c or (a > b):
    print("Condition 1 is true or Condition 2 is true")
else:
    print("Both conditions are false")

# Checking multiple conditions using or operator
if not c and (a > b):
    print("Condition 1 is false and Condition 2 is true")
278
python
# This is an example of using the constant value 'True'
def is_positive(number):
 if number > 0:
 return True
 else:
 return False

print(is_positive(5))  # prints: True
print(is_positive(-3))  # prints: False

# This is an example of using the 'pass' statement
def my_empty_function():
 pass

my_empty_function()  # Does nothing, but no error is raised.
279
python
def divide(numerator, denominator):
    """
    This function takes two arguments, numerator and denominator, and returns their quotient.
    Raises ZeroDivisionError if the denominator is zero.
    """

    if denominator == 0:
        raise ZeroDivisionError("Cannot divide by zero")
    
    return numerator / denominator

try:
    result = divide(5, 2)
    print("Result:", result)
except ZeroDivisionError as e:
    print("Error:", e.args[0])

# Let's check division by zero
result = divide(1, 0)
280
python
def is_positive(number):
    """
    This function checks if a given number is positive, and returns True if it is, otherwise False.
    :param number: an integer or float
    :return: Boolean value (True or False)
    """

    # Check if the given number is greater than zero
    if number > 0:
        result = True
    else:
        result = False
    
    # Return the result
    return result

# Test some numbers
print(is_positive(5))      # Expected output: True
print(is_positive(-3))      # Expected output: False
print(is_positive(0))      # Expected output: False
281
python
def is_valid_input(input):
    is_number = True
    try:
        num = float(input)
    except ValueError:
        print("Invalid input! Please enter a valid number.")
        is_number = False
     finally:
        return is_number

while True:
    user_input = input("Enter a number or type 'q' to quit: ")
    if user_input.lower() == 'q':
        break

    is_valid = is_valid_input(user_input)

    if not is_valid:
        continue

    print(f"You entered the number: {user_input}")
282
python
# Initialize a variable with a value that can be changed to False
is_alive = True

print("This program is about a life cycle.")

while is_alive:
    # Ask the user if they want to continue the game (or in this case, the program)
    user_answer = input("Do you want to continue? (y/n): ")

    # Convert the user's answer to lowercase and check for 'y' or 'n'
    if user_answer.lower() == 'y':
        print("Great! Let's continue.")
    elif user_answer.lower() == 'n':
        print("Okay, exiting the program...")
        is_alive = False
    else:
        print("Invalid input. Please enter y or n.")
283
python
import time
from contextlib import contextmanager

# A simple counter class as a context manager
@contextmanager
def timer(title):
    start = time.time()
    yield
    end = time.time()
    print(f"{title}: {end - start} seconds")

def print_hello():
    print("Hello")

if __name__ == "__main__":
    with timer("Printing Hello 10 times"):
        for _ in range(10):
            print_hello()
284
python
def infinite_sequence(start):
    current = start
    while True:
        yield current
        current += 1

# Create a generator with starting value 0
generator = infinite_sequence(0)

# Get first few values from the generator
print(next(generator))  # Output: 0
print(next(generator))  # Output: 1
print(next(generator))  # Output: 2

# Consume some more values (but not all of them)
for _ in range(5):
    print(next(generator))
285
python
# This variable will have a value of False
boolean_variable = False

# The 'not' operator can be used to negate the boolean value
negated_boolean = not boolean_variable
print("The negated boolean value is:", negated_boolean)

# The 'abs()' function is used to get the absolute value of a number
number = -5
absolute_value = abs(number)
print("The absolute value of", number, "is:", absolute_value)

# We can combine these concepts and create more complex expressions
# For example, let's check if a given number is positive or not
number = 3
if number < 0:
    print(number, "is negative")
else:
    print(number, "is positive or zero")
    
# Now we will use the negated boolean and absolute value to make it negative
number = -abs(number)
print("The number with its absolute value made positive and then negated is:", number)
286
python
# Boolean value 'True'
bool_value = True
print("Boolean value 'True': ", bool_value)

# List of boolean values and 'all' function
boolean_list = [True, True, False]
print("\nList of boolean values: ", boolean_list)

result = all(boolean_list)
print("'all' function result: ", result)

# If all the boolean values are True, 'all' will return True
if all(boolean_list):
    print("All boolean values in the list are True")
else:
    print("There's a False value among boolean values")
287
python
# A list of boolean values
boolean_list = [False, True, False, True, False]

# Using any() to check if there is at least one True value in the list
if any(value for value in boolean_list if value):
    print("At least one element in the list is True")
else:
    print("All elements in the list are False")

# Directly using True to compare with an iterable (in this case, a list)
if True in boolean_list:
    print("True is present in the list")
else:
    print("True is not present in the list")
288
python
# This function checks if a given character is ASCII or not
def is_ascii(char):
    try:
        char_value = ord(char)
        return True
    except ValueError:
        return False

# Main function
if __name__ == "__main__":
    char = 'A'  # This is an ASCII character
    is_it_ascii = is_ascii(char)

    if is_it_ascii:
        print(f"{'char'} is an ASCII character.")
        print(f"ASCII value of '{char}': {ord(char)}")
    else:
        print(f"{'char'} is not an ASCII character.")

# Checking with non-ASCII character
non_ascii_char = '\u0304'  # Unicode Combining Grave Accent
is_it_ascii_nonascii = is_ascii(non_ascii_char)

if not is_it_ascii_nonascii:
    print(f"{'non_ascii_char'} is not an ASCII character.")
289
python
# Demonstrating use of True and bin() function

# Boolean expression with True value
is_even = La = 4
if is_even:
    print("The number is even")
else:
    print("The number is odd")

# Convert an integer to binary using bin() function
decimal_number = 10
binary_number = bin(decimal_number)[2:]  # Remove the '0b' prefix
print(f"Binary representation of {decimal_number} is: {binary_number}")
290
python
# Assigning boolean values to variables directly
boolean_variable_1 = True
boolean_variable_2 = False

print("boolean_variable_1 is:", boolean_variable_1)
print("boolean_variable_2 is:", boolean_variable_2)

# Boolean expressions using comparison and logical operators
number_1 = 10
number_2 = 5

# Comparison operators (<, >, <=, >=, ==, !=)
is_number_1_greater_than_number_2 = number_1 > number_2
print("Is number_1 greater than number_2? - ", is_number_1_greater_than_number_2)

# Logical operators (and, or, not)
is_number_1_greater_than_or_equal_to_zero = number_1 >= 0
is_number_2_positive = number_2 > 0

is_both_numbers_positive = is_number_1_greater_than_or_equal_to_zero and is_number_2_positive
print("Are both numbers positive? - ", is_both_numbers_positive)
291
python
# Define a boolean variable 'is_positive' with True value
is_positive = True

# Print the value of boolean variable
print("Boolean variable value: ", is_positive)

# Create a bytearray object with some integer values
byte_array = bytearray([1, 2, 3, 4, 5])

# Print the bytearray object
print("Bytearray object: ", byte_array)

# Change the second element of bytearray to -5 (equivalent to ascii value -5 in decimal)
byte_array[1] = -5

# Print the updated bytearray object
print("Updated Bytearray object: ", byte_array)
292
python
# Using True
is_student_allowed = True
if is_student_allowed:
    print("Student is allowed to attend the class.")
else:
    print("Student is not allowed to attend the class.")

# Using bytes
message = b"Hello, World!"
print(type(message))
print(message)
print(len(message))

# Converting True to bytes and appending it to message
is_allowed_access = True
message_with_permission = b"\x01" + bytearray([int(i) for i in [int(str(x)[0]) for x in list(str(bool(is_allowed_access)))][::-1]) if i else b'\x00' ] 
print("Message with permission: ", message_with_permission)
293
python
# A simple function
def square(number):
    return number * number

# A lambda function that also squares a number
square_lambda = lambda number: number * number

# Check if a function is callable
def check_callable(function):
    return callable(function) and type(function) != types.FunctionType

# Test the functions and checks
print("Checking square function: ", check_callable(square))  # True
print("Checking square function with wrong type check: ", check_callable(square))  # TypeError: <function __main__.square at 0x7f8c361b2a40> is not callable

print("Checking lambda function: ", check_callable(square_lambda))  # True
print("Checking True value: ", check_callable(True))  # False
print("Checking callable with string: ", check_callable('Hello World'))  # False

# Call the functions
print("Square of 5 using function: ", square(5))  # 25
print("Square of 5 using lambda: ", square_lambda(5))  # 25
294
python
# This variable is assigned the boolean value 'true' which is represented as 'True' in Python
is_sunny = True

# The chr() function is used to convert an integer Unicode code point to a character.
# In this example, we use it to print the character representation of the ASCII value 65, which is 'A'.
print("Is it sunny outside? ", is_sunny)
print("The character representation of code point 65 is: ", chr(65))
295
python
class Number:
    def __init__(self, num=0):
        self.num = num

    # A class method that checks if the given number is even or not
    @classmethod
    def is_even(cls, num):
        return cls.__is_even(abs(num))

    @staticmethod
    def __is_even(num):
        """A static utility method to check if a given number is even or not"""
        return num % 2 == 0

if __name__ == "__main__":
    num1 = Number()
    num2 = Number(5)
    num3 = Number(-6)

    print(f"Number {num1.num} is even: {Number.is_even(num1)}")  # True by default
    print(f"Number {num2.num} is even: {Number.is_even(num2)}")  # False
    print(f"Number {num3.num} is even: {Number.is_even(num3)}")  # True (negative numbers are also even if their last digit is)
296
python
if condition:
    print("This statement is executed if condition is True.")
else:
    print("This statement is executed if condition is False.")

# Example using True directly:
if True:
    print("This statement is always printed since True is always True.")
297
python
# Demonstrating the usage of boolean value 'True'
# and complex numbers in Python

# Boolean expression
bool_expression = (5 > 3) or (7 < 9)
print("Boolean expression: ", bool_expression)

# Complex numbers
num1 = 3 + 4j
num2 = 1 + 2j
complex_num1 = complex(num1)
complex_num2 = complex(num2)

# Basic arithmetic operations on complex numbers
addition = complex_num1 + complex_num2
subtraction = complex_num1 - complex_num2
multiplication = complex_num1 * complex_num2
division = complex_num1 / complex_num2

print("Complex number addition: ", addition)
print("Complex number subtraction: ", subtraction)
print("Complex number multiplication: ", multiplication)
print("Complex number division: ", division)
298
python
import sys

class MyClass:
    def __init__(self, attr1=True, attr2='default'):
        self.attr1 = attr1
        self.attr2 = attr2

    def print_attributes(self):
        print(f'Attr1: {self.attr1}')
        print(f'Attr2: {self.attr2}')

# Instantiate the class and print initial attributes
my_instance = MyClass()
my_instance.print_attributes()

# Demonstrating the usage of True
another_instance = MyClass(False)
another_instance.print_attributes()

# Now let's delete an attribute (attr1) from 'my_instance' using delattr()
sys.modules.builtins.delattr(my_instance, 'attr1')

# Print the modified attributes of 'my_instance'
my_instance.print_attributes()
299
python
# Define an empty dictionary
my_dict = {}

# Set some key-value pairs in the dictionary
my_dict["key1"] = "value1"
my_dict["key2"] = "value2"

# Check if the dictionary is empty
if len(my_dict) == 0:
    print("The dictionary is empty.")
else:
    print("The dictionary is not empty.")

# Use a key to check if it exists in the dictionary and get its value
key = "key1"
value = my_dict.get(key, True)
print(f"The value for key '{key}' is {value}.")

if key in my_dict:
    print("Key exists in the dictionary")
else:
    print("Key does not exist in the dictionary")

# Modify a value in the dictionary
my_dict["key1"] = "updated_value"
print(f"The new value for key '{key}' is {my_dict['key1']}.")
300
python
# Define a simple class with a few attributes
class SimpleClass:
    def __init__(self, num):
        self.num = num
        self.is_positive = True

# Create an instance of the class
my_instance = SimpleClass(5)

print("Is my_instance.is_positive true? ", my_instance.is_positive)
print()

# Use dir() to show the attributes and methods of my_instance
print("Attributes and methods of my_instance:")
print(dir(my_instance))
301
python
# This is a simple program that calculates the quotient and remainder of a division operation using divmod()
# It also uses a conditional statement to check if a number is positive or not using the True boolean value.

def main():
    # Define some numbers for demonstration purposes
    dividend = 10
    divisor = 3

    # Calculate quotient and remainder using divmod()
    q, r = divmod(dividend, divisor)

    # Print the results of the division operation
    print(f"The quotient is: {q}")
    print(f"The remainder is: {r}\n")

    # Check if dividend is positive or not using the True boolean value
    if dividend > 0:
        print("The number is positive.")
    else:
        print("The number is not positive.")

if __name__ == "__main__":
    main()
302
python
# This is a simple Python program that uses the 'enumerate()' function along with a loop, where a condition (True) is used to control the iteration.

# Define a list
numbers = [1, 2, 3, 4, 5]

# Use enumerate() to get the index and value of each element in the list
for index, value in enumerate(numbers):
    if value > 3:  # The condition (True) is met when the current number is greater than 3
        print(f"Index: {index}, Value: {value}")
303
python
# This is a simple Python program that demonstrates the use of True and eval()

# Using True
is_raining = False
if not is_raining:
    print("It's not raining today.")
else:
    print("It's raining today.")

print("------------------------")

# Using eval()
expression_string = "3 + 4 * 2"
result = eval(expression_string)
print(f"The result of the expression '{expression_string}' is {result}")

# It's important to note that using eval() can be dangerous if you are evaluating user input or untrusted code.
304
python
# Define the input data
input_data = 'x = 5\ny = 3\nz = x + y'

# Evaluate the input data as Python code using exec
exec input_data

# Print the results
print("x =", x)
print("y =", y)
print("z =", z)

# Perform some calculations using True as a placeholder
expression = 'x > y'
if eval(expression):
    print("x is greater than y")
else:
    print("x is not greater than y")
305
python
# Define a list of numbers
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]

# Use a lambda function with filter to keep only numbers greater than 5
filtered_numbers = filter(lambda x: x > 5, numbers)

# Convert the filter object to a list and assign it to a variable
filtered_numbers_list = list(filtered_numbers)

print("Numbers greater than 5:")
for num in filtered_numbers_list:
    print(num)

print("\nUsing True instead of lambda function:")
# Use filter with the constant True value to keep all elements
filtered_numbers_using_true = filter(True, numbers)

# Convert the filter object to a list and assign it to a variable
filtered_numbers_using_true_list = list(filtered_numbers_using_true)

print("All numbers:")
for num in numbers:
    print(num)

print("\nNumbers that remain after filtering with True:")
for num in filtered_numbers_using_true_list:
    print(num)
306
python
# Define a boolean variable 'is_raining' with a default value of False
is_raining = False

# Ask user if it's raining and update the value of 'is_raining' accordingly
user_input = input("Is it raining? (y/n): ")
if user_input.lower() == "y":
    is_raining = True

# Define a floating-point number 'temperature'
temperature = 25.5

# Print the value of 'is_raining' and 'temperature'
print(f"Is it raining? {is_raining}")
print(f"The current temperature is: {temperature} degrees Celsius")
307
python
# Define some variables
is_student = True
age = 25
name = "John Doe"

# Use format with boolean value
print("Is student: {}".format(is_student))

# Use format to display name and age
if is_student:
    print("Student's name is: {} and age is: {}".format(name, age))
else:
    print("This person is not a student.")
308
python
# Define a frozenset object
my_frozenset = frozenset([1, 2, 3])

# Comparing frozenset with True using equality operator (==)
if my_frozenset == True:
    print("Frozenset is equal to True")
else:
    print("Frozenset is not equal to True")

# Comparing frozenset with True using inequality operator (!= or !=)
if my_frozenset != True:
    print("Frozenset is not equal to True")
else:
    print("Frozenset is equal to True (this will never be true)")

# Comparing frozenset with True using less than operator (<)
if my_frozenset < True:
    print("Frozenset is less than True")
else:
    print("Frozenset is greater than or equal to True")

# Comparing frozenset with True using greater than operator (>)
if my_frozenset > True:
    print("Frozenset is greater than True")
else:
    print("Frozenset is less than or equal to True")

# Comparing frozenset with True using membership operator (in)
if True in my_frozenset:
    print("True is a member of the frozenset")
else:
    print("True is not a member of the frozenset")
309
python
# Define a custom class named MyClass
class MyClass:
    # Define some custom attributes
    def __init__(self, value=0):
        self.my_true = True
        self.my_false = False
        self.my_value = value

# Create an instance of the class
my_instance = MyClass(42)

# Accessing attributes using dot notation
print("Accessing attributes using dot notation:")
print(f"True value: {my_instance.my_true}")
print(f"False value: {my_instance.my_false}")
print(f"Value: {my_instance.my_value}")

# Accessing attributes using getattr()
print("Accessing attributes using getattr():")
for attr in ['my_true', 'my_false', 'my_value']:
    print(f"{attr}: {getattr(my_instance, attr)}")
310
python
# Define a function with a default argument set to False
def my_function(flag=False):
    print("Flag value before toggle: ", flag)
    flag = not flag  # Toggle the flag value using not operator
    print("Flag value after toggle: ", flag)
    print("Adding this value to global 'my_global'")
    globals()['my_global'] = flag

# Call the function without passing any argument, so it uses the default value of False
my_function()
print("Value of 'my_global' after first call: ", globals()['my_global'])

# Call the function again with an argument to set the flag value to True before toggling
my_function(True)
print("Value of 'my_global' after second call: ", globals()['my_global'])
311
python
# Define a simple class named MyClass
class MyClass:
    def __init__(self, value=0):
        self.my_attribute = value

# Create an instance of MyClass
my_instance = MyClass(10)

# Using True to check if a condition is met
if True:  # This condition always evaluates to True, so the following code will always execute
    print("The value of True is:", True)

# Using hasattr to check if an instance has a specific attribute
if hasattr(my_instance, 'my_attribute'):  # Check if my_instance has an attribute named 'my_attribute'
    print("The instance has the attribute 'my_attribute'", my_instance.my_attribute)
else:
    print("The instance does not have the attribute 'my_attribute'")
312
python
# Define some variables with True values
boolean_value_1 = True
boolean_value_2 = True
boolean_value_3 = True

print("Boolean values:")
print(boolean_value_1)
print(boolean_value_2)
print(boolean_value_3)

# Use hash function to get the hash value of some objects
string_value = "Hello, World!"
number_value = 42
list_value = [1, 2, 3]
dictionary_value = {"key": "value"}

print("\nHash values:")
print("String value:", hash(string_value))
print("Number value:", hash(number_value))
print("List value:", hash(list_value))
print("Dictionary value:", hash(dictionary_value))
313
python
# This is a simple Python script that uses the True boolean value and help function

# First, let's define a boolean variable using True
boolean_variable = True

print("Boolean variable value:", boolean_variable)

# Now let's check some conditions and print messages accordingly using if statement
if boolean_variable:
    print("The given boolean value is TRUE")
else:
    print("The given boolean value is FALSE")

# Next, we will use the help() function to learn about a Python built-in function (len())
help(len)
314
python
# This variable is assigned the Boolean value of True
boolean_value = True

# Print the value of the boolean variable using the print() function
print("Boolean value: ", boolean_value)

# Convert the Boolean value to its hexadecimal representation using the hex() function
hexadecimal_value = hex(bool(boolean_value))

# Print the hexadecimal representation of the boolean value using the print() function
print("Hexadecimal value: ", hexadecimal_value)

# This variable is assigned an integer value
integer_value = 10

# Convert the integer value to its hexadecimal representation using the hex() function
hexadecimal_integer = hex(integer_value)

# Print the hexadecimal representation of the integer value using the print() function
print("Hexadecimal value of integer: ", hexadecimal_integer)
315
python
# Define a function with a local variable
def my_function():
    x = 42
    print("The value of x inside my_function is:", x)

# Call the function and assign the result to a variable
result = my_function()

# Print the ID and truth value of various Python objects
print("ID of the function my_function: ", id(my_function))
print("Truth value of an empty list: ", True if [] else False)
print("Truth value of an empty tuple: ", True if () else False)
print("Truth value of an empty dictionary: ", True if {} else False)
print("ID and truth value of the function result:")
print("ID: ", id(result))
print("Truth value: ", bool(result))
316
python
# Set initial condition as False
is_adult = False

# Get user's age using input() function
user_age = int(input("Please enter your age: "))

# Check if user is an adult based on their age
if user_age >= 18:
    is_adult = True
    print("Welcome, you are an adult!")
else:
    print("Sorry, you are not old enough to enter.")

# Loop continues with True statement
while is_adult:
    # Add any other logic or processing here if needed
    print("You are considered an adult in our system.")
317
python
# Define a boolean variable with the value True
is_sunny = True
print("Is it sunny? ", is_sunny)

# Convert a boolean to an integer using the int() function
boolean_to_int = int(is_sunny)
print("Boolean value as an integer: ", boolean_to_int)

# Define an integer variable
temperature = 25
print("Temperature: ", temperature)

# Convert an integer to a boolean using the bool() function
integer_to_boolean = bool(temperature)
print("Integer value as a boolean: ", integer_to_boolean)

# Perform some comparisons and assign their results to boolean variables
is_warm = temperature > 20
is_freezing = temperature < 0
print("Is it warm? ", is_warm)
print("Is it freezing? ", is_freezing)
318
python
# Define a custom class named 'MyNumber'
class MyNumber:
    def __init__(self, value):
        self.value = value

# Function that checks if given argument is True or not
def is_boolean(arg):
    return isinstance(arg, bool) and arg

# Function that checks if given number is an instance of 'MyNumber' class
def is_my_number(num):
    return isinstance(num, MyNumber)

# Test cases
print("is_boolean(True) =", is_boolean(True))        # True
print("is_boolean(5) =", is_boolean(5))            # False
print()

print("is_my_number(MyNumber(3)) =", is_my_number(MyNumber(3)))      # True
print("is_my_number(3) =", is_my_number(3))          # False
319
python
# Define base class
class BaseClass:
    def __init__(self, value):
        self.value = value

    def print_value(self):
        print("Base Class Value:", self.value)

# Define derived classes
class DerivedClass1(BaseClass):
    pass

class DerivedClass2(BaseClass):
    pass

# Instantiate objects
obj_base = BaseClass(10)
obj_derived1 = DerivedClass1(5)
obj_derived2 = DerivedClass2(7)

# Check isinstance()
print("Is obj_derived1 an instance of BaseClass?", isinstance(obj_derived1, BaseClass))  # True
print("Is obj_base an instance of DerivedClass1?", isinstance(obj_base, DerivedClass1))  # False

# Check issubclass()
print("Is DerivedClass1 a subclass of BaseClass?", issubclass(DerivedClass1, BaseClass))  # True
print("Is DerivedClass2 a subclass of BaseClass?", issubclass(DerivedClass2, BaseClass))  # True
320
python
# Using True
boolean_value = True
if boolean_value:
    print("This statement will be executed because True is considered as a 'truthy' value.")

# Using iter()
list_data = [1, 2, 3, 4, 5]
iterator = iter(list_data)
next_element = next(iterator)
print("The first element of the list is:", next_element)

# Iterating through a list using a for loop and an iterator
for number in iter(list_data):
    print("Current number is:", number)
321
python
# An empty list as an example, can be replaced with any other iterable like strings, tuples or sets
my_list = []

# Using len() to find the length of my_list
length_of_my_list = len(my_list)
print("Length of my_list: ", length_of_my_list)

# Using True to check if a condition is met, here checking if my_list is empty or not
if not my_list:
    print("my_list is empty")
else:
    # If the list is not empty, print out its first element
    print("First element of my_list: ", my_list[0])
322
python
# Define a list of numbers
numbers = [1, 2, 3, 4, 5]

# Use a for loop to check if each number is greater than 3
# If it is, print the number and use the Boolean value True
for num in numbers:
    if num > 3:
        print(num, "is greater than 3. ", True)
    else:
        print(num, "is less than or equal to 3.")

# Use a variable to store a Boolean value
is_sunny = True

# Print the message based on the Boolean value
if is_sunny:
    print("It's sunny outside!")
else:
    print("It's not sunny outside :(")
323
python
def my_function():
    # Assign some values to local variables
    x = 10
    y = 20
    z = x + y

    # Set a local variable with the value True
    is_even = True if (x % 2 == 0) else False

    print("The number x is even: ", is_even)
    print("Values of local variables in this function:", locals())

# Call the function
my_function()
324
python
# A list of numbers that will be checked against a threshold (3 in this case)
numbers = [1, 2, 3, 4, 5]
threshold = 3

# A simple function that returns True if its input is greater than or equal to the threshold
def is_greater_than_threshold(num):
    return num >= threshold

# Use map() to apply the is_greater_than_threshold function on every element in the numbers list
result = map(is_greater_than_threshold, numbers)

# Convert the map object into a list of booleans (True or False based on each application of is_greater_than_threshold)
boolean_list = list(result)

print("Numbers greater than or equal to threshold:", boolean_list)
325
python
# Define some variables with boolean values and numbers
boolean_var1 = True
boolean_var2 = False
number_list = [3, 5, 1, 8, 2]

# Use max function with a list of numbers
max_number = max(number_list)
print("Maximum number: ", max_number)

# Compare two boolean values using <, >, <=, >= and use the 'or' operator
# to combine them with a number
result = (boolean_var1 > boolean_var2) or 5 > 3
print("Result of comparison: ", result)
326
python
import numpy as np

# Creating two NumPy arrays
array1 = np.random.rand(5, 5)
array2 = np.random.rand(5, 5) + 0.5

print("Array 1:")
print(array1)
print("\nArray 2:")
print(array2)

# Creating memoryviews from NumPy arrays
memview_array1 = np.ascontiguousarray(array1).tobytes()
memview_array2 = np.ascontiguousarray(array2).tobytes()
memoryview_arrays = [np.frombuffer(m, dtype=np.float32) for m in (memview_array1, memview_array2)]
memoryviews = [memoryview(m) for m in memoryview_arrays]

# Perform element-wise AND operation using memoryviews
result = np.bitwise_and(memoryviews[0], memoryviews[1])
result_memview = memoryview(result)

# Convert the result back to a NumPy array
np_result = np.frombuffer(result_memview, dtype=np.float32).reshape((5, 5))

print("\nResult:")
print(np_result)

# Perform the same operation using Boolean True values
boolean_arrays = [np.full((5, 5), True) for _ in range(2)]
boolean_results = np.bitwise_and(boolean_arrays[0], boolean_arrays[1]).astype(np.float32).reshape((5, 5))

print("\nResult using Boolean True values:")
print(boolean_results)
327
python
# Define some variables with different data types and values
numbers = [1, 5, -3, 8, 2]
number_one = 7
another_number = -1
boolean = True

# Use min() to find the smallest number in the list
smallest_number = min(numbers)
print("The smallest number in the list is:", smallest_number)

# Use a conditional statement and Boolean value
if number_one > another_number:
    print(f"{number_one} is greater than {another_number}")
else:
    print(f"{number_one} is not greater than {another_number}")
    
# Use min() to find the smallest of two numbers
smallest = min(number_one, another_number)
print("The smallest of", number_one, "and", another_number, "is:", smallest)
328
python
import itertools

def square(n):
    return n * n

numbers = [1, 2, 3, 4, 5]
even_numbers = filter(lambda x: x % 2 == 0, numbers)
squares = map(square, even_numbers)

print("Even numbers and their squares:")
for i, (even, square) in enumerate(itertools.zip(even_numbers, squares)):
    print(f"{even} -> {square}")

print("\nNext even number:")
next_even = next(filter(lambda x: x % 2 == 0, itertools.count(1)))
print(next_even)
329
python
class MyClass:
    def __init__(self, value):
        self.value = value

# Create an instance of MyClass with the value "10"
my_object = MyClass(10)

# Compare the instance with True using the 'and' operator
result = my_object.value > 5 and True

print("Result:", result)
330
python
# Boolean value True
x = 10 > 5
print("Boolean value (comparison):", x)
print("Type of variable x:", type(x))

# Using oct() with a decimal number
decimal_number = 17
binary_number = oct(decimal_number)[2:]
print("\nOctal value of 17 (decimal):", oct(decimal_number))
print("Type of variable binary_number:", type(binary_number))
print("Binary representation of the octal number: 0{0:03o}".format(decimal_number)[2:])

# Using oct() with an octal string
octal_string = "11"
decimal_number_from_octal = int(oct(octal_string), 8)
print("\nOctal value of '11' (octal string):", octal_string)
print("Decimal equivalent of the octal number:", decimal_number_from_octal)
331
python
# This script checks if a file exists and prints a message accordingly

# Define the file name
file_name = "example.txt"

# Check if the file exists and open it if it does
if open(file_name, mode="r"):
    print("File exists and can be opened.")
else:
    print("File does not exist or cannot be opened.")

# Perform some true/false statements as examples
is_even = 6 % 2 == 0
print(f"Is {6} an even number? -> {is_even}")

is_odd = 7 % 2 != 0
print(f"Is {7} an odd number? -> {is_odd}")
332
python
# This program shows how to use True value and ord() function

# Using True value
is_sunny = True
print("Is it sunny outside? ", is_sunny)

# Using ord() function
character = 'A'
value = ord(character)
print(f"The ASCII value of character {character} is: {value}")

# Another example using ord() with a string
text = "Hello, World!"
for char in text:
    print(f"The ASCII value of character {char} is: {ord(char)}")
333
python
# This function returns the nth Fibonacci number using recursion
def fibonacci(n):
    if n <= 0:
        print("Input should be positive integer.")
        return None
    elif n == 1:
        return 0
    elif n == 2:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)

# Main program
if __name__ == "__main__":
    base = 2.0
    exponent = 10
    result = pow(base, exponent)

    print("Result of {0} raised to the power of {1} is: {2}"
          .format(base, exponent, result))

    fib_num = int(input("Enter a positive integer to find the Fibonacci number: "))
    fib = fibonacci(fib_num)

    if fib is not None:
        print("The Fibonacci number at position {0} is: {1}"
              .format(fib_num, fib))
    else:
        print("Invalid input!")
334
python
# This variable is assigned with the boolean value True
is_sunny = True

# The print() function is used to output messages to the console
if is_sunny:
    print("The weather is sunny.")
else:
    print("The weather is not sunny.")

# Another example using a comparison operation and print()
x = 10
y = 20

if x < y:
    print("x is less than y")
else:
    print("x is greater than or equal to y")
335
python
class Counter:
    def __init__(self, value):
        self._value = value

    # Read-only property
    @property
    def is_even(self):
        return self._value % 2 == 0

# Instantiate a Counter object with an even number
counter_even = Counter(4)
print("Counter even: ", counter_even.is_even)  # Output: True

# Instantiate a Counter object with an odd number
counter_odd = Counter(3)
print("Counter odd: ", counter_odd.is_even)  # Output: False
336
python
# This function prints numbers from start to end-1 if end is given, or up to 10 if no arguments are passed
def print_numbers(start=0, end=None):
    if end is not None:
        for number in range(start, end+1):
            if number % 2 == 0:  # Print only even numbers if True is given as argument
                print(number)
    else:
        for number in range(0, 11):
            if not (number % 2):  # Print all numbers if no arguments are passed or False is given
                print(number)

# Demonstrating the usage of True and range
print("Printing even numbers from 0 to 5:")
print_numbers(start=0, end=6, condition=True)

print("\nPrinting all numbers from 0 to 10:")
print_numbers()
337
python
# Define a variable with a boolean value
is_sunny = True

# Print the boolean value directly
print("Is it sunny? ", is_sunny)

# Use repr() to get the string representation of a variable, including its type
print("Type and representation of is_sunny: ", repr(is_sunny))

# Define another variable with a string value
my_string = "Hello, World!"

# Print the string value directly
print("my_string: ", my_string)

# Use repr() to get the string representation of a variable, including its type and contents
print("Type and representation of my_string: ", repr(my_string))
338
python
# Define a list
my_list = [1, 2, 3, 4, 5]

# Check if the list is empty
if not my_list:
    print("List is empty")
else:
    # Print "List is not empty" and iterate through elements in reverse order
    print("List is not empty")
    for i in reversed(my_list):
        print(i)
339
python
# Define a floating-point number
number = 3.14159265

# Print the boolean value of the condition: "Number is greater than 3"
is_greater_than_three = number > 3
print("Is number greater than 3? ", is_greater_than_three)
print()

# Use round function to round the number to 2 decimal places
rounded_number = round(number, 2)
print("Number rounded to 2 decimal places: ", rounded_number)
340
python
# Define two sets with some common elements
set1 = {1, 2, 3, 4, 5}
set2 = {4, 5, 6, 7, 8}

# Check if set1 is a subset of set2 using the 'in' keyword and a boolean value (True or False)
if set1.issubset(set2):
    print("Set1 is a subset of Set2")
else:
    print("Set1 is not a subset of Set2")

# Use sets to find the union, difference, and intersection of two sets
union_sets = set1 | set2
print("Union of Set1 and Set2:", union_sets)

difference_set = set1.difference(set2)
print("Difference of Set1 and Set2:", difference_set)

intersection_set = set1 & set2
print("Intersection of Set1 and Set2:", intersection_set)
341
python
class MyClass:
    def __init__(self, name):
        self.is_active = False
        self.name = name

# Create an instance of MyClass
my_instance = MyClass("John Doe")

# Using True to set an attribute
setattr(my_instance, "is_active", True)

# Accessing the new attribute using getattr and printing the result
print(getattr(my_instance, "is_active"))  # Output: True
print(my_instance.is_active)             # Output: True
342
python
# Let's assume we have the following list
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]

# Using True as a slice index returns all elements starting from that index
even_numbers = numbers[::2]  # Equivalent to: numbers[0:5:2]
odd_numbers = numbers[1::2] # Equivalent to: numbers[1::2]

print("Even Numbers:")
print(even_numbers)
print("ODD Numbers:")
print(odd_numbers)

# Using True as a slice condition returns all elements that satisfy the given condition
filtered_numbers = [x for x in numbers if x > 5]
print("\nFiltered Numbers > 5:")
print(filtered_numbers)

# Filtering with True using list slicing
filtered_slice = numbers[numbers.index(5):]
print("\nFiltered Numbers greater than 5 using slice and index:")
print(filtered_slice)
343
python
# List of some numbers and strings
data = [3, 5, 1, 2, 7, 4, "apple", "banana", "orange"]

# Using True in a conditional statement
if True:
    print("This block will always be executed.")

# Sorting the data list using sorted() function
sorted_data = sorted(data)
print("Sorted data:")
print(sorted_data)

# Sorting data in place (modifying the original list) by setting the keyword argument 'inplace' to True
data.sort(key=lambda x: abs(x), reverse=True, inplace=True)
print("Sorted data in place:")
print(data)
344
python
class Calculator:
    # Define a constant value (can be replaced by True)
    IS_POSITIVE = True

    @staticmethod
    def add(num1, num2):
        """Static method to add two numbers"""
        return num1 + num2

    def __init__(self, value):
        """Initialize the class instance with a given value"""
        self.value = value

    def display_value(self):
        """Method to display the instance value"""
        print("Value: {}".format(self.value))

    @staticmethod
    def is_positive():
        """Static method to check if a given value is positive"""
        return Calculator.IS_POSITIVE

# Instantiate the class and test the functionality
calculator = Calculator(5)
calculator.display_value()

result = Calculator.add(3, 7)
print("Addition: {} + {} = {}".format(3, 7, result))

if Calculator.is_positive():
    print("Given number is positive")
else:
    print("Given number is not positive")
345
python
# Define a boolean variable with the value True
is_sunny = True

# Define a string variable with some text
weather = "Sunny" if is_sunny else "Rainy"

print("Is it sunny?", is_sunny)
print("What's the weather like?", weather)
346
python
# List of numbers
numbers = [1, 2, 3, 4, 5]

# Check if list is empty
if not numbers:
    print("The list is empty")
else:
    # Use sum function to add all elements in the list
    total_sum = sum(numbers)
    
    print(f"Sum of the numbers in the list: {total_sum}")
    
# Use True as a boolean value in if condition
if True:
    print("This statement is always true")
347
python
if some_condition:
    print("This condition is True")
else:
    print("This condition is False")

# Output: This condition is True (assuming 'some_condition' is True)
348
python
# Define a boolean variable 'is_student' and initialize it to True
is_student = True

# Define a tuple 'student_info' with some student data
student_info = ("John Doe", 19, "Computer Science")

# Function to check if the given person is a student or not
def is_student_check(person, student_info):
    return person == student_info[0] and isinstance(is_student, bool)

# Testing the function with some inputs
print("Is John Doe a student? ", is_student_check("John Doe", student_info)) # Output: Is John Doe a student?  True
print("Is Michael Jackson a student? ", is_student_check("Michael Jackson", student_info)) # Output: Is Michael Jackson a student?  False
349
python
# Define some variables
number = 10
text = "Hello, World!"
boolean_variable = True

print("Number:", number)
print("Text:", text)
print("Boolean variable:", boolean_variable)

# Print the type of each variable
print("Type of number:", type(number))
print("Type of text:", type(text))
print("Type of boolean_variable:", type(boolean_variable))

# Perform some checks and print the results as booleans
print("Is number equal to 10?:", number == 10)
print("Is text equal to \"Hello, World!\":", text == "Hello, World!")
print("Is boolean_variable equal to True:", boolean_variable is True)
350
python
# Define a dictionary with some boolean values
my_dict = {
    "is_morning": False,
    "is_raining": True,
    "has_coffee": False
}

# Print the initial state of the dictionary
print("Initial state:")
print(vars(my_dict))

# Change some values
my_dict["is_morning"] = True
my_dict["has_coffee"] = True

# Print the updated state of the dictionary
print("\nUpdated state:")
print(vars(my_dict))
351
python
# List of boolean values using True and False
booleans = [True, True, False, True, False]

# List of corresponding integers
numbers = [1, 2, 3, 4, 5]

# Using zip() to pair each boolean value with its corresponding integer
paired = zip(booleans, numbers)

# Printing the paired values using for loop
for pair in paired:
    print(f"Boolean Value: {pair[0]}")
    print(f"Corresponding Integer: {pair[1]}")
    print()
352
python
import os

# Set a variable to store a file path
file_path = "/path/to/your/file.txt"

# Check if the file exists using os.path.isfile()
if os.path.isfile(file_path):
    print("File exists")
    # Process the file if it exists (for example, read its content)
    with open(file_path, "r") as file:
        content = file.read()
        print("Content of the file: ", content)
else:
    print("File does not exist")

# Demonstrate using True and False in an if statement
if not os.path.isfile("/nonexistent/path"):
    print("The file does not exist and True is falsey when used as a condition")
353
python
import sys

def is_positive(n):
"""
Check if given number is positive.
"""
if n > 0:
    return True
else:
    return False

if __name__ == "__main__":
# Get command line arguments using sys.argv
num = int(sys.argv[1]) if len(sys.argv) > 1 else 0

if is_positive(num):
    print(f"{num} is a positive number.")
else:
    print(f"{num} is not a positive number.")

    # Print Python version using sys.version
print("Python version:", sys.version)
354
python
import math

# Boolean expression
if 5 > 3:
    boolean_expression = True
else:
    boolean_expression = False

print("Boolean expression:", boolean_expression)

# Basic mathematical operations with numbers
num1 = 5
num2 = 3

# Addition
addition = num1 + num2
print("Addition:", addition)

# Subtraction
subtraction = num1 - num2
print("Subtraction:", subtraction)

# Multiplication
multiplication = num1 * num2
print("Multiplication:", multiplication)

# Division
division = num1 / num2
print("Division:", division)

# Floor division
floordivision = num1 // num2
print("Floor division:", floordivision)

# Exponentiation using math module
exponentiation = math.pow(num1, num2)
print("Exponentiation:", exponentiation)
355
python
import random

def flip_coin():
    """
    Simulates flipping a coin by returning either True or False with equal probability.
    """
    return random.choice([True, False])

if __name__ == "__main__":
    num_trials = 10
    print(f"Flipping a coin {num_trials} times:")
    for _ in range(num_trials):
        result = flip_coin()
        print(result)
356
python
from datetime import datetime, timedelta

# Using True boolean value
is_student = True
print("Is student: ", is_student)

# Using datetime module
now = datetime.now()
print("\nCurrent date and time: ", now)

future_date = datetime(year=2023, month=10, day=31)
time_difference = future_date - now
print("\nNumber of days until October 31, 2023:", int(time_difference.days))

# Check if the future date is before or after the current date
if future_date < now:
    print("October 31, 2023 has already passed.")
else:
    print("October 31, 2023 is still in the future.")
357
python
import time

# Get the current time as a tuple of hours, minutes, seconds
current_time = time.localtime(time.time())
hour = current_time.hour

# Check if the hour is between 6 AM and 12 PM (noon) using boolean expression
is_morning = (hour >= 6) and (hour < 12)

if is_morning:
    print("Good morning!")
else:
    print("It's not morning.")
358
python
import json

# Create a Python dictionary
data = {
    "name": "John Doe",
    "is_student": True,
    "age": 25
}

print("Original Python Dictionary:")
print(data)

# Convert Python dictionary to JSON format
json_data = json.dumps(data)

print("\nJSON representation:")
print(json_data)

# Check if 'is_student' value is True
if data["is_student"]:
    print("\n'is_student' value is True.")
else:
    print("\n'is_student' value is False.")
359
python
import csv

# Replace 'filename.csv' with the actual path or name of your CSV file
filename = "filename.csv"

def is_non_empty_string(value):
"""
Helper function to check if a value is a non-empty string
"""
return isinstance(value, str) and len(value) > 0

with open(filename, newline='') as csvfile:
reader = csv.DictReader(csvfile)

print("First row of the CSV file as a dictionary with True values for non-empty columns:")
for row in itertools.islice(reader, 1):
column_values = {col: bool(is_non_empty_string(value)) for col, value in row.items()}
print(column_values)
break
360
python
import sqlite3

# Create a new SQLite database with the given name.
def create_connection(db_file):
 db = None
 try:
     db = sqlite3.connect(db_file)
 except sqlite3.Error as e:
     print(e)
 return db

# Create a table in the SQLite database with the given name and columns.
def create_table(db, table_name, columns):
 try:
     cursor = db.cursor()
     cursor.execute(f'CREATE TABLE IF NOT EXISTS {table_name} ({", ".join([f"{col[0]} {col[1]}" for col in columns])});')
 except sqlite3.Error as e:
     print(e)

# Insert a new row into the given table with the given key-value pairs.
def insert_into_table(db, table_name, data):
 try:
     cursor = db.cursor()
     keys, values = zip(*data.items())
     query = f'INSERT INTO {table_name} VALUES ({", ".join(["?" for _ in keys])});'
     cursor.execute(query, tuple(values))
     db.commit()
 except sqlite3.Error as e:
     print(e)

# Query the SQLite database and return all rows from the given table.
def query_table(db, table_name):
 try:
     cursor = db.cursor()
     cursor.execute(f"SELECT * FROM {table_name};")
     rows = cursor.fetchall()
     return rows
 except sqlite3.Error as e:
     print(e)
     return []

# Main function demonstrating the usage of True and sqlite3.
def main():
 db_file = "example.db"
 if not create_connection(db_file):
     return

 create_table(db_file, "my_table", [("id", "INTEGER PRIMARY KEY AUTOINCREMENT"), ("name", "TEXT")])

 data = [{"name": "Alice"}, {"name": "Bob"}]
 insert_into_table(db_file, "my_table", data)

 rows = query_table(db_file, "my_table")
 for row in rows:
     print(row)

 if True:  # Unreachable statement to demonstrate True's use.
     print("True is a boolean value representing truth.")

 create_connection(db_file).close()

if __name__ == "__main__":
 main()
361
python
import re

# Define a simple function that checks if a given string starts with "Python"
def check_string_startswith_python(string):
    return True if string.startswith('Python') else False

# Use re module to check if a string matches a regular expression pattern
def check_string_with_regex(string):
    pattern = r'^Python'
    return bool(re.match(pattern, string))

if __name__ == "__main__":
    strings = ['Python is awesome', 'Java is not Python', 'I love Python']

    for string in strings:
        print(f'String: {string}')
        print(f'check_string_startswith_python(): {check_string_startswith_python(string)}')
        print(f'check_string_with_regex(): {check_string_with_regex(string)}')
        print()
362
python
import requests

# Define the URL to be accessed
url = "https://www.google.com"

# Send an HTTP request using GET method and store the response in a variable
response = requests.get(url)

# Check if the request was successful (status code is 200)
if response.status_code == 200:
    print("Website is accessible")
else:
    print(f"Website {url} is not accessible, status code: {response.status_code}")

# Use True to check if a condition is met (in this case, the website is accessible)
if True:
    print("This condition is always true and will be executed")
363
python
import urllib.request

# Set up the URL and parameters for the HTTP request
url = "http://example.com"
params = {}  # empty dictionary if no parameters are needed
data = None  # leave data as None if no data is being sent

# If data is not None, then it should be bytes, and we need to construct the request body
if data is not None:
    data_str = data.decode('utf-8')  # convert data to string for urllib
    data = data_str.encode('utf-8')  # convert data back to bytes for urllib
    request = urllib.request.Request(url, data)
else:
    request = urllib.request.Request(url)

# Set up any headers or other request properties
request.add_header("User-Agent", "MyProgram/0.1")
if params:
    request.add_data(urllib.parse.urlencode(params).encode('utf-8'))

try:
    response = urllib.request.urlopen(request)  # send the request and get the response
    response_data = response.read()           # read the response data
    print("Response received:", response_data.decode('utf-8'))
except urllib.error.HTTPError as error:
    print("HTTP Error:", error.reason)
except Exception as e:
    print("General Error:", str(e))
finally:
    if response is not None:
        response.close()  # close the response connection

# Use True to check if the request was successful or not (based on HTTP status code)
if response.getcode() == 200:
    print("Request succeeded.")  # True statement
else:
    print("Request failed.")    # False statement
364
python
import pickle

# Using True value
is_student_eligible = True
print("Student is eligible for scholarship: ", is_student_eligible)

# Using pickle module to serialize and deserialize a dictionary
my_dict = {
    "name": "John Doe",
    "age": 25,
    "is_student": True
}

# Serializing the dictionary using pickle
with open("my_data.pickle", "wb") as file:
    pickle.dump(my_dict, file)

print("\nData serialized successfully.")

# Deserializing the data from the pickle file
with open("my_data.pickle", "rb") as file:
    deserialized_data = pickle.load(file)

print("\nDeserialized data: ", deserialized_data)
365
python
import subprocess

# This assignment sets a variable named 'status' to the True boolean value
status = True

print("Status before command execution: {}".format(status))

# Use the subprocess module to run the 'dir' command in the current system shell
result = subprocess.run(["dir"], capture_output=True, text=True)

# Assign the output of the command to a variable named 'output'
output = result.stdout

# Print the output of the command and change the value of the 'status' variable based on the exit code of the command
print("\nOutput of the command: {}".format(output))
if result.returncode == 0:
    status = True
else:
    status = False

print("Status after command execution: {}".format(status))
366
python
import argparse

def main():
    parser = argparse.ArgumentParser(description="A simple Python program using argparse.")
    parser.add_argument("-t", "--true", action="store_const", const=True, default=False, help="Print a message: 'True'")
    args = parser.parse_args()

    if args.true:
        print("The value of true is:", args.true)

if __name__ == "__main__":
    main()
367
python
import logging

# Configure logging
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')

def add(a, b):
 """This function adds two numbers"""
 result = a + b
 return result

if __name__ == '__main__':
 # Set some variables
 number1 = 5
 number2 = 3
 sum_expected = 8

 # Perform addition operation
 sum = add(number1, number2)

 # Log the input values and the expected output
 logging.info(f"Adding {number1} and {number2}")

 # Check if the result is as expected
 if sum == sum_expected:
 logging.info("Result is correct")
 else:
 logging.error("Result is not correct! Expected: {}, Got: {}".format(sum_expected, sum))

 # Log the result
 logging.info("Result: {}".format(sum))
368
python
# Import Flask module
from flask import Flask, jsonify, render_template_string

app = Flask(__name__)  # Create a new Flask web server instance

@app.route('/')  # Define the route for the root URL ("/")
def index():
    # Define a variable with a True value
    is_greeting_displayed = True
    
    # If the route is accessed, return the "Hello, World!" message
    if is_greeting_displayed:
        return render_template_string('Hello, World!')

# Run the Flask application
if __name__ == '__main__':
    app.run(debug=True)
369
python
# This is a simple Python script that demonstrates the use of True and False boolean values.

is_student = True
is_employed = False

if is_student:
    print("You are a student.")
else:
    print("You are not a student.")

if not is_employed:
    print("You are unemployed.")
else:
    print("You are employed.")
370
python
import numpy as np

# Using Python's built-in True boolean value
x = 10
y = 20
z = -5

if x > 0 and y > 0 and z > 0:
    print("All numbers are positive")
else:
    print("At least one number is not positive")

# Using NumPy array with only True values
np_array = np.full((3, 3), True)
print(np_array)

# Using NumPy to create an array of boolean values based on a condition
numbers = np.array([1, -2, 3, 0, 5])
boolean_values = numbers > 0
print(boolean_values)
371
python
# Import required libraries
import pandas as pd

# Create a sample data as a dictionary
data = {
    'Name': ['John', 'Anna', 'Peter', 'Linda'],
    'Age': [28, 24, 35, 32],
    'City': ['New York', 'Los Angeles', 'Chicago', 'Miami']
}

# Create a DataFrame from the data dictionary using pandas
df = pd.DataFrame(data)

# Filter the DataFrame based on Age > 30 using a boolean condition (True)
filtered_df = df[df['Age'] > 30]

# Display the filtered DataFrame
print(filtered_df)
372
python
import matplotlib.pyplot as plt

# Define some data as Python lists
x = list(range(1, 6))  # This creates a list from 1 to 5
y_true = [i ** 2 for i in x]  # Squares of the numbers from 1 to 5

# Create a figure and a set of subplots
fig, ax = plt.subplots()

# Plot the true data as red dots and the predicted data as blue line
ax.plot(x, y_true, 'ro', label='True Data')
ax.plot(x, [i ** 2.5 for i in x], 'b-', label='Predicted Data (False label)')

# Set labels and title
ax.set_xlabel('X data')
ax.set_ylabel('Y values')
ax.set_title('True vs Predicted Data (Squares vs 2.5 powers)')

# Show the legend
ax.legend()

# Display the plot
plt.show()
373
python
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

# Generate some random data with outliers
np.random.seed(0)  # for reproducibility
data = np.random.randn(100, 2)
outliers = np.random.choice(len(data), size=10, replace=False)
outliers_data = data[outliers] * 3
data = np.concatenate((data, outliers_data))

# Use NumPy's True to create a boolean mask for the outlier indices
is_outlier = np.isin(np.arange(len(data)), outliers)

# Create a scatter plot with Seaborn
plt.figure(figsize=(8, 6))
sns.scatterplot(x=data[:, 0], y=data[:, 1], hue=is_outlier, s=50, palette="Set3")

# Set axis labels and title
plt.xlabel("X")
plt.ylabel("Y")
plt.title("Scatter plot with outliers")

# Show the plot
plt.show()
374
python
import numpy as np
import tensorflow as tf

# Generate some random data for demonstration purposes.
np.random.seed(42)
x = np.random.randn(100, 3) * 5
y = np.round(np.random.randn(100, 1) + 2).astype('int8')

# Create a boolean mask from the first 50 samples
mask = np.zeros((x.shape[0],), dtype=bool)
mask[:50] = True

# Build and prepare the TensorFlow dataset.
ds = tf.data.Dataset.from_tensor_slices((x, y)).shuffle(buffer_size=len(x))
ds = ds.batch(32).prefetch(tf.data.AUTOTUNE_BUFFER_SIZE)

# Define and build the neural network model.
model = tf.keras.Sequential([
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Dense(1, activation='sigmoid')
])
model.compile(optimizer='adam', loss='binary_crossent', metrics=['accuracy'])

# Train the model using the TensorFlow dataset.
epochs = 10
history = model.fit(ds, epochs=epochs, verbose=0)

# Use the mask to evaluate the model performance on the first 50 samples (`True` values).
x_masked = x[mask]
y_masked = y[mask]
loss, accuracy = model.evaluate(tf.data.Dataset.from_tensor_slices((x_masked, y_masked)), verbose=0)
print(f"Model performance on the first 50 samples: loss={loss}, accuracy={accuracy}")
375
python
# Importing necessary libraries
import numpy as np
from keras.models import Sequential
from keras.layers import Dense

# Generate some random data for demonstration purposes
X = np.random.randn(100, 2) # 100 samples with 2 features each
y = np.rint(np.random.normal(size=100), 1) # 100 samples with binary labels (0 or 1)

# Define a simple feedforward neural network model
model = Sequential()
model.add(Dense(32, input_shape=(X.shape[1],), activation='relu')) # Hidden layer with 32 neurons and ReLU activation
model.add(Dense(1, activation='sigmoid')) # Output layer with sigmoid activation for binary classification

# Compile the model with a loss function and an optimizer
model.compile(loss='binary_crossent', optimizer='adam', metrics=['accuracy'])

# Train the model on our data
history = model.fit(X, y, epochs=100, batch_size=32, verbose=0)

# Now let's create some new data and make predictions
new_data = np.array([[True, True], [False, False]]) # New data with 2 binary features
predictions = model.predict(new_data) # Make predictions using our trained model
print("Predictions for new data: ", predictions) # Print the predictions
376
python
# Import necessary libraries
import numpy as np
from sklearn import model_selection
from sklearn.linear_model import LogisticRegression

# Create a boolean dataset using NumPy
data = np.array([[True, True], [False, False], [True, True], [False, False]])
labels = np.array([1, 1, 1, 0])

# Split the dataset into training and testing sets using Scikit-Learn's model_selection module
X_train, X_test, y_train, y_test = model_selection.train_test_split(data, labels, test_size=0.3, random_state=42)

# Create and fit a logistic regression model using Scikit-Learn's LogisticRegression class
model = LogisticRegression()
model.fit(X_train, y_train)

# Make predictions on the test dataset
predictions = model.predict(X_test)

# Print some information about the trained model and its performance
print("Model coefficients:")
print(model.coef_)
print("\nIntercept:")
print(model.intercept_)
print("\nTest set predictions:")
print(predictions)
print("\nTest set true labels:")
print(y_test)
print("\nTest set accuracy:")
print(np.mean(predictions == y_test))
377
python
# Import the necessary libraries
from bs4 import BeautifulSoup
import requests

# Make a request to the website
url = "https://example.com"
r = requests.get(url)

# Check if the request was successful (status code 200)
if r.status_code == 200:
    # Parse the HTML content of the page with BeautifulSoup
    soup = BeautifulSoup(r.text, "html.parser")
    
    # Use BeautifulSoup to find elements on the page
    title = soup.title
    print("Page title:", title)
    
    # Perform other actions based on your needs (e.g., extract data from specific HTML tags)
else:
    print(f"Request failed with status code {r.status_code}")
378
python
from selenium import webdriver

# Set up the webdriver
browser = webdriver.Chrome()

# Close the browser if it's already open (Boolean check)
if not browser.is_displayed():
    print("Browser is already open.")
else:
    print("Starting new browser instance...")

# Navigate to a website
url = "https://www.google.com"
browser.get(url)

# Perform some actions (Boolean checks and Selenium usage)
search_box = browser.find_element_by_name("q")
search_box.send_keys("Selenium Python", keys.SPACE)
search_button = browser.find_element_by_name("btnK")
search_button.click()

# Check if the search results are displayed (Boolean check)
if not browser.find_elements_by_xpath("//h3[@class='LC20lb']"):
    print("Search results not found.")
else:
    first_result = browser.find_element_by_xpath("//h3[@class='LC20lb']")
    print(f"First search result: {first_result.text}")

# Quit the browser instance
browser.quit()
379
python
import torch
import torch.nn as nn
import torch.optim as optim

# Define a simple 2-input XOR gate function
def xor(x):
    return torch.tensor([[1 if (i[0] and not i[1]) or (not i[0] and i[1]) else 0 for i in x]], dtype=torch.float32)

# Define a simple neural network for XOR gate using PyTorch
class SimpleNN(nn.Module):
    def __init__(self):
        super().__init__()
        self.fc1 = nn.Linear(2, 4)
        self.fc2 = nn.Linear(4, 1)
        self.sigmoid = nn.Sigmoid()

    def forward(self, x):
        x = torch.relu(self.fc1(x))
        x = self.sigmoid(self.fc2(x))
        return x

# Create a dataset for training the neural network
X = torch.tensor([[0, 0], [0, 1], [1, 0], [1, 1]], dtype=torch.float32)
Y = torch.tensor([[0], [1], [1], [0]], dtype=torch.float32)

# Create the neural network model and define the loss function and optimizer
model = SimpleNN()
criterion = nn.BCELoss()  # Binary Cross Entropy Loss
optimizer = optim.SGD(model.parameters(), lr=0.5)

# Train the model for 10 epochs
for epoch in range(1, 11):
    # Forward pass
    outputs = model(X)
    loss = criterion(outputs, Y)

    # Backward pass and optimization
    optimizer.zero_grad()
    loss.backward()
    optimizer.step()

    print('Epoch [{}/{}], Loss: {:.4f}'.format(epoch, 10, loss.item()))
380
python
from sqlalchemy import create_engine, Column, Integer, Boolean
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker

# Define Base class for SQLAlchemy ORM
Base = declarative_base()

class User(Base):
    __tablename__ = 'users'

    id = Column(Integer, primary_key=True)
    is_active = Column(Boolean, default=True)

# Create engine to connect to database
engine = create_engine('sqlite:///test.db', echo=False)

# Create table in the database if it doesn't exist
Base.metadata.create_all(engine)

# Define a session for interacting with the database
Session = sessionmaker(bind=engine)
session = Session()

# Add a new user to the database
new_user = User(id=1, is_active=True)
session.add(new_user)
session.commit()

# Update an existing user's status in the database
existing_user = session.query(User).filter_by(id=1).first()
if existing_user:
    existing_user.is_active = False
    session.commit()
else:
    print("User with id 1 not found")

# Fetch users from the database and check their statuses
users = session.query(User).all()
for user in users:
    print(f"User {user.id} is active: {user.is_active}")
381
python
def is_even(num):
    """
    Returns True if the given number is even, False otherwise.
    """
    return num % 2 == 0
382
python
# mymodule.py
def add_numbers(x, y):
    """Adds two numbers"""
    return x + y
383
python
# my_module.py

def is_positive(num):
    """Return True if the given number is positive."""
    return num > 0
384
python
import asyncio
import aiohttp

# Define a function to fetch data from a URL asynchronously
async def fetch(url):
    print(f"Fetching data from {url}")
    async with aiohttp.Client() as client:
        async with client.get(url) as response:
            data = await response.text()
            return data

# Define two URLs to fetch data from
urls = [
    "https://www.example1.com",
    "https://www.example2.com"
]

# Create a list of tasks to fetch data asynchronously
tasks = [asyncio.create_task(fetch(url)) for url in urls]

# Use asyncio's gather function to wait for all tasks to complete and collect their results
results = await asyncio.gather(*tasks)

# Print fetched data
for i, result in enumerate(results):
    print(f"\nData from URL {i+1}:")
    print(result)
385
python
import time
import multiprocessing as mp

def is_even(n):
    """Return True if number n is even."""
    return n % 2 == 0

def worker(task_queue, result_queue):
    """A worker process that checks for even numbers in a task queue."""
    while True:
        try:
            number = task_queue.get()
        except mp.queues.Empty:
            continue

        if is_even(number):
            result_queue.put(True)
        else:
            result_queue.put(False)

if __name__ == "__main__":
    # Set up queues and processes
    task_queue = mp.Queue()
    result_queue = mp.Queue()

    workers = 4  # Number of worker processes
    processes = [mp.Process(target=worker, args=(task_queue, result_queue)) for _ in range(workers)]

    for process in processes:
        process.start()

    # Generate and send tasks to the worker processes
    numbers = list(range(100))  # A list of numbers to check
    for number in numbers:
        task_queue.put(number)

    # Wait for all tasks to be processed
    for _ in range(len(numbers)):
        _ = result_queue.get()

    # Terminate the worker processes
    for process in processes:
        process.terminate()

# Print the results
print("Even numbers found:")
for number in numbers:
    if number % 2 == 0:
        print(number)
386
python
import threading
import time

def my_function(condition):
    while condition:
        print("Thread is running...")
        time.sleep(1)
        if not condition:
            break

condition = True

thread = threading.Thread(target=my_function, args=(condition,))
thread.start()

# Main thread work
print("Main thread is working...")
time.sleep(3)
condition = False

print("Setting condition to False in main thread.")
387
python
# Server.py
import socket

def start_server():
    host = ''
    port = 12345

    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    print("Socket created")

    try:
        s.bind((host, port))
    except socket.error as msg:
        print('Bind failed. Error Code :' + str(msg[0]) + ' Message :' + msg[1])
        sys.exit()

    print("Socket bind complete")
    print("Listening on", host, ":", port)
    s.listen(3)

    conn, addr = s.accept()
    print('Connected by', addr[0],':',addr[1])
    
    while True:
        data = conn.recv(1024).decode()
        if not data:
            break
        response = "True"
        conn.sendall(response.encode())
        
    print('Closed connection')
    s.close()

if __name__ == "__main__":
    start_server()
388
python
import tkinter as tk

# Create a Tk root window
root = tk.Tk()

# Set up a title and size for the window
root.title("Python Tkinter Example")
root.geometry("300x200")

# Define a function to handle the button click event
def button_clicked():
    message = "Hello, World!"
    label.config(text=message)

# Create a frame to hold the button and label
frame = tk.Frame(root)
frame.pack(pady=20)

# Create a button with the text "Click Me"
button = tk.Button(frame, text="Click Me", command=button_clicked)
button.pack(side=tk.LEFT)

# Create a label to display the message
label = tk.Label(frame, text="")
label.pack(side=tk.LEFT, padx=10)

# Start the Tk event loop
root.mainloop()
389
python
# Import required Pygame modules
import pygame
import sys

# Initialize Pygame
pygame.init()

# Set up some constants
WIDTH = 500
HEIGHT = 400
FPS = 60

# Create the game window
window = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption('Pygame Example')

# Set up the clock
clock = pygame.time.Clock()

# Create a variable to store whether or not the mouse button is pressed
mouse_pressed = False

# Main game loop
running = True
while running:
    # Get events
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        elif event.type == pygame.MOUSEBUTTONDOWN:
            mouse_pressed = True

    # Handle mouse press
    if mouse_pressed:
        message = "Mouse Button Down!"
        color = (255, 0, 0)
    else:
        message = "Click the Mouse Button"
        color = (0, 0, 255)

    # Fill the background with white
    window.fill((255, 255, 255))

    # Draw a text message on the screen
    large_text = pygame.font.SysFont(None, 70).render(message, True, color)
    window.blit(large_text, (100, 100))

    # Update the display
    pygame.display.flip()

    # Cap framerate
    clock.tick(FPS)

# Quit Pygame
pygame.quit()
sys.exit()
390
python
import sys
from PyQt5 import QtWidgets, QtGui, QtCore

class MyApp(QtWidgets.QMainWindow):
    def __init__(self):
        super().__init__()

        self.setWindowTitle("PyQt & True Example")

        self.central_widget = QtWidgets.QWidget(self)
        self.setCentralWidget(self.central_widget)

        layout = QtWidgets.QHBoxLayout(self.central_widget)

        self.button1 = QtWidgets.QPushButton("Button 1")
        self.button1.clicked.connect(lambda: print(f"Button 1 clicked: {self.button1.isChecked()}"))

        self.button2 = QtWidgets.QPushButton("Button 2")
        self.button2.clicked.connect(lambda: print(f"Button 2 clicked: {self.button2.isChecked()}"))

        layout.addWidget(self.button1)
        layout.addWidget(self.button2)

if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)

    window = MyApp()
    window.show()
    sys.exit(app.exec_())
391
python
import wx

class MyApp(wx.App):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        self.frame = MyFrame(None, title="My App")
        self.frame.Show()

        self.is_greetings_shown = True

    def OnInit(self):
        pass

class MyFrame(wx.Frame):
    def __init__(self, parent, title):
        super().__init__(parent=None, title=title, size=(300, 200))

        self.CreateStatusBar()

        self.button = wx.Button(self, label="Hide Greetings")
        self.button.Bind(wx.EVT_BUTTON, self.on_hide_greeting)
        self.button.Create(pos=(100, 50))

        self.status_text = "Hello World"

        if self.app.is_greetings_shown:
            self.ShowStatusBar()
            self.SetStatusText(self.status_text)

    def on_hide_greeting(self, event):
        self.app.is_greetings_shown = False
        self.HideStatusBar()
        self.Layout()

if __name__ == "__main__":
    app = MyApp(0)
    app.MainLoop()
392
python
# Conditional expression
if 5 > 3:
    print(True)

# Explicitly defined
my_bool = True
print(my_bool)
393
python
# Define a list of boolean values
boolean_list = [True, False, True, False, True]

# Print the original list
print("Original List:")
print(boolean_list)

# Using a for loop to iterate through each boolean value and print it along with its index
print("\nIterating through the list and printing each boolean value:")
for index, value in enumerate(boolean_list):
    print(f"Index: {index}, Value: {value}")

# Using a list comprehension to create a new list that contains only the True values
true_values = [value for value in boolean_list if value is True]

# Print the new list of True values
print("\nList of True values:")
print(true_values)

# Using the sum() function to count the number of True values in the original list
num_of_trues = sum(boolean_list)

# Print the number of True values in the original list
print(f"\nNumber of True values in the Original List: {num_of_trues}")
394
python
class Rectangle:
    def __init__(self, width, height):
        self.width = width
        self.height = height
        self.is_valid = True

    def area(self):
        return self.width * self.height

    def is_valid(self):
        """Return the validity status of the rectangle"""
        return self.is_valid

# Create some rectangles
r1 = Rectangle(2, 3)
r2 = Rectangle(-1, 5)

# Check if the first rectangle is valid
print(f"Rectangle r1 is valid: {r1.is_valid}")

# Set the validity of the second rectangle to False
r2.is_valid = False

# Check if the rectangles' validities
print("Rectangle r1 is valid:", r1.is_valid)
print("Rectangle r2 is valid:", r2.is_valid)
395
python
# Boolean expressions
x = 5 > 3 # Comparison operator, returns True
y = "apple" == "orange" # Equality operator, returns False
z = not x # Logical NOT operator, negates a boolean value

print(x) # Output: True
print(y) # Output: False
print(z) # Output: False when 'x' is True, otherwise True
396
python
class Animal:
    def __init__(self, name, is_mammal=True):
        self.name = name
        self.is_mammal = is_mammal

    def make_sound(self):
        if self.is_mammal:
            print("{} makes a sound!".format(self.name))
        else:
            raise TypeError("This is not a mammal.")

class Bird(Animal):
    def __init__(self, name):
        super().__init__(name, False)

class Dog(Animal):
    pass

animal1 = Animal("Lion")
animal1.make_sound() # Lion makes a sound!

animal2 = Bird("Parrot")
animal2.make_sound() # Parrot makes no sound, but it does not raise an error

animal3 = Dog("Rex")
animal3.make_sound() # Rex makes a sound!
397
python
class EncapsulatedClass:
    def __init__(self):
        self.__private_data = True

    def get_private_data(self):
        """Public method to access the private data"""
        return self.__private_data

    def set_private_data(self, value):
        """Public method to update the private data (encapsulation)"""
        if isinstance(value, bool):
            self.__private_data = value
        else:
            print("Error: The new value must be a boolean")

my_class = EncapsulatedClass()
print(my_class.get_private_data())  # prints: True
my_class.set_private_data(False)
print(my_class.get_private_data())  # prints: False
398
python
# Simple Calculator Function (Abstraction)
def add(x, y):
    """This function takes two arguments and returns their sum"""
    return x + y

def subtract(x, y):
    """This function takes two arguments and returns the difference between them"""
    return x - y

# Main Program
if __name__ == "__main__":
    num1 = 5
    num2 = 3

    print("The sum is: ", add(num1, num2))
    print("The difference is: ", subtract(num1, num2))

    # Using True as a condition in an if statement
    if (add(num1, num2) > 5):
        print("The sum of {} and {} is greater than 5".format(num1, num2))
    else:
        print("The sum of {} and {} is less than or equal to 5".format(num1, num2))
399
python
# Recursive function to find factorial of a given number
def recursive_function(n):
    # Base case: if n is 0, return 1 (factorial of 0 is 1)
    if n == 0:
        return True  # In this specific case, we could also return 1, but for the sake of the example, we'll use 'True' instead.
    
    # Recursive call: multiply 'n' with the result of recursively calling the function with 'n-1' as an argument
    else:
        return recursive_function(n - 1) * n

# Testing the recursive function with some inputs
number = 5
result = recursive_function(number)
print(f"The factorial of {number} is {result}")
400
python
# This program checks if a given number is positive, zero or negative
# and prints out a message accordingly
def check_number(n):
    """
    :param n: an integer number
    :return: None
    """
    if n > 0:
        print("The number", n, "is positive.")
    elif n == 0:
        print("The number", n, "is zero.")
    else:
        print("The number", n, "is negative.")

# The main part of the program
number = 5
check_number(number)  # This will print: "The number 5 is positive."

numbers = [-3, -1, 0, 2, 6]
for num in numbers:
    if num > 0:
        print("The number", num, "is positive.")
    elif num == 0:
        print("The number", num, "is zero.")
    else:
        print("The number", num, "is negative.")
        break  # exit the loop as soon as we find a negative number
else:
    print("All numbers in the list are non-negative.")
401
python
# Define a function that checks if a number is positive
def is_positive(num):
    """
    This function checks if a given number is positive.
    :param num: The number to check.
    :return: `True` if the number is positive, `False` otherwise.
    """
    return num > 0

# Use the function with some numbers
num1 = 5
num2 = -3
num3 = 0

print(f"{num1} is positive? {is_positive(num1)}") # True
print(f"{num2} is positive? {is_positive(num2)}") # False
print(f"{num3} is positive? {is_positive(num3)}") # False

# Use the `True` boolean value directly
boolean_value = True
print(type(boolean_value)) # <class 'bool'>
print(boolean_value) # True
402
python
class MyClass:
    def __init__(self):
        self.my_attribute = 42

    @property
    def my_property(self):
        return self.my_attribute * 2

if __name__ == "__main__":
    obj = MyClass()

# Check if 'MyClass' has an attribute named 'my_attribute' using hasattr
print("Has attribute 'my_attribute':", hasattr(MyClass, "my_attribute"))

# Create an instance of 'MyClass' and check for presence of methods and attributes
print("\nInstance 'obj' has method 'my_property':", hasattr(obj, "my_property"))
print("Instance 'obj' has attribute 'my_attribute':", hasattr(obj, "my_attribute"))

# Check if the method 'my_property' of 'MyClass' is a method using ismethod
print("\n'MyClass.my_property' is a method:", ismethod(getattr(MyClass, "my_property")))
403
python
# Define a variable 'age' with an initial value of 18
age = 18

# A Boolean expression checking if age is greater than or equal to 18
is_adult = (age >= 18)

print("Is the person an adult?")
print(f"Answer: {is_adult}")

if is_adult:
    print("Access granted! You can vote and drive.")
else:
    print("Sorry, you're not old enough for those privileges yet.")

# Now we change the value of age to 21
age = 21
is_adult = (age >= 18)

print("\nIs the person an adult now?")
print(f"Answer: {is_adult}")
404
python
# Assigning boolean values to variables
is_raining = False
is_sunny = True

print("Is it raining?", is_raining)
print("Is it sunny?", is_sunny)

# Using boolean values in conditional statements
if not is_raining:
    print("It's a great day to go out!")
else:
    print("Bring an umbrella today.")

# Comparing two boolean expressions with 'and' and 'or' operators
condition1 = True
condition2 = False

print(condition1 and condition2)  # Output: False
print(condition1 or condition2)   # Output: True
405
python
# A function for addition operation
def add(num1, num2, is_sum=True):
    """
    This function takes two numbers as arguments and performs their addition based on given boolean flag 'is_sum'
    :param num1: first number
    :param num2: second number
    :param is_sum: a boolean value to indicate if we want to perform the sum or not (default: True)
    :return: the result of addition
    """
    if is_sum:
        result = num1 + num2
        print(f"The sum of {num1} and {num2} is {result}")
    else:
        print("Performing an operation other than sum")

# Testing the function with different scenarios
add(5, 3)                       # Performs addition
add(7, 8, False)                # Does not perform addition and prints a message instead
406
python
# Define a function that checks if a given number is positive or not
def is_positive(num):
  # Use a conditional statement to check if the number is greater than zero
  # If it is, return the True boolean value
  # Otherwise, return False and an error message
  if num > 0:
    return True
  else:
    print("Error: The given number is not positive.")
    return False

# Test the function with some numbers
num1 = 5
num2 = -3
num3 = 0

# Use the is_positive function and assignment operator to assign the result (True or False) to a variable
result1 = is_positive(num1)
result2 = is_positive(num2)
result3 = is_positive(num3)

# Print out the results for each number
print("The number {0} is positive: {1}" .format(num1, result1))
print("The number {0} is positive: {1}" .format(num2, result2))
print("The number {0} is positive: {1}" .format(num3, result3))
407
python
def is_positive(num):
    """
    This function checks if given number is positive, returns True if it is, otherwise False
    """
    if num > 0:
        return True
    else:
        return False

# Testing the function
num = int(input("Enter a number: "))
result = is_positive(num)
print(f"The number {num} is {'positive' if result else 'non-positive'}.")
408
python
# Define some variables
num = 10
is_positive = True

# Use if statement with a single condition
if num > 0:
    print("The number is positive")

# Use if-else statement with a single condition
if is_positive:
    print("The variable is set to True")
else:
    print("The variable is set to False or another falsy value")

# Use if-elif-else statement with multiple conditions
if num > 0:
    print("The number is positive")
elif num == 0:
    print("The number is zero")
else:
    print("The number is negative")
409
python
# Initialize a variable with a value less than 10
num = 5

# Use while loop to count numbers from 0 to 9 (including current number)
while num <= 9:
    print(num)
    num += 1

# Print a message when the condition is no longer met
print("The counting has reached 10.")

# Set a boolean variable to True and use while loop to demonstrate its usage
is_even = True
number = 0

while is_even:
    print(number)
    number += 2
    if number > 10:
        is_even = False
410
python
x = 10
if x > 5:
    print("x is greater than 5")
else:
    print("x is less than or equal to 5")

# Output: x is greater than 5
411
python
# Define some variables
num1 = 10
num2 = 20
is_even = num1 % 2 == 0

print("Num1 is even?: ", is_even)

# Using True in if statements
if True:
    print("This block will always execute")

# Boolean expressions
print("Num1 is greater than Num2: ", (num1 > num2))
print("Absolut value of Num1 is greater than 10 and Num2 is less than 5: ", ((abs(num1) > 10) and (num2 < 5)))
print("Num1 is even or Num2 is odd: ", ((num1 % 2 == 0) or (num2 % 2 != 0)))
412
python
# This is a single-line comment

# Assigning True to a variable
is_sun_out = True

if is_sun_out:
    print("The sun is out today!")
else:
    print("It's not sunny outside.")

# Using True in an if statement condition
if 5 > 3 or True:
    print("Condition is met, printing message.")
413
python
# This is a comment - anything after the '#' symbol is ignored by the interpreter

def is_positive(number):
    # The function checks if the given number is positive
    if number > 0:
        return True
    else:
        return False

number = 5
if is_positive(number):
    print("The number is positive.")
else:
    print("The number is not positive.")

# Notice how the indentation of the print statements aligns with 'if' and 'else' keywords
414
python
# This is a simple Python program that uses the math module

# Define a function to calculate the square of a number
def square(number):
    # Check if the input number is non-negative
    if number >= 0:
        result = number * number
        print("The square of {} is {}.".format(number, result))
        return True
    else:
        print("Invalid input! Please enter a non-negative number.")
        return False

# Import the math module for using its sqrt function
import math

# Take user input and check if it's a valid square number
num = int(input("Enter a number: "))
square_root = math.sqrt(num)
if square(num):
    # If the number is non-negative, calculate and print its square
    print("The square of {} is {}.".format(num, num * num))
else:
    print("Invalid input!")

# Calculate and print the square root of given number
print("The square root of {} is {}.".format(num, square_root))
415
python
import math

# Using the sqrt() function from math package
num = 16.0
square_root = math.sqrt(num)

print("The square root of {} is {}".format(num, square_root))

true_value = True
another_boolean = False

# Comparing two boolean values using and, or and not operators
print("True and True is: ", (true_value and true_value))
print("True and False is: ", (true_value and another_boolean))
print("False and False is: ", (another_boolean and another_boolean))
print("Not of True is: ", not(true_value))
print("Not of False is: ", not(another_boolean))
416
python
# Boolean values
false_value = False
true_value = True

# Comparisons that result in boolean values
x = 5
y = 10
z = 3

# Comparison using '==' (equal to) operator
is_x_less_than_y = x < y
print(f"Is {x} less than {y}? -> Answer: {is_x_less_than_y}")

# Comparison using '<' (less than) operator
is_z_positive = z > 0
print(f"Is {z} positive? -> Answer: {is_z_positive}")

# Logical operations (AND, OR, NOT) that result in boolean values
logical_and = True and False
logical_or = True or False
logical_not = not True

print(f"Logical AND: {logical_and}")
print(f"Logical OR: {logical_or}")
print(f"Logical NOT: {logical_not}")
417
python
# Boolean value: True
bool_value = True
print("Is the boolean value true? ", bool_value)

# Namespace: Function with local variables
def square(number):
    # Local variable: result
    result = number ** 2
    return result

print("Enter a number to calculate its square:")
input_number = int(input())
square_result = square(input_number)
print("The square of", input_number, "is:", square_result)
418
python
# Assigning a boolean variable with the value True
is_sunny = True

if is_sunny:
    print("It's sunny today!")
else:
    print("It's not sunny today.")

# Using Python interpreter to execute the script from command line or IDLE
# Save this code in a file named 'example.py' and run it with the command `python example.py`
419
python
# This is a Python program that uses the True boolean value

def main():
    # Assigning True to a variable
    my_variable = True

    # Using an if statement with a condition that always evaluates to True
    if my_variable:
        print("The condition is True")

    # Another example using logical operators
    another_variable = 5 > 3
    if another_variable and my_variable:
        print("Both conditions are True")

if __name__ == "__main__":
    main()
420
python
# Using True and False values
boolean_value_1 = True
boolean_value_2 = False

print(f"boolean_value_1 is {boolean_value_1}")
print(f"boolean_value_2 is {boolean_value_2}")

# Using boolean operators: AND (&& in some other languages)
bool_expression_1 = boolean_value_1 and boolean_value_2
print(f"bool_expression_1 is {bool_expression_1}")

# The following expression will be False because at least one of the conditions is False
bool_expression_2 = boolean_value_1 or boolean_value_2
print(f"bool_expression_2 is {bool_expression_2}")

# Using NOT operator (~ in some other languages)
negated_boolean_value = not boolean_value_1
print(f"negated_boolean_value is {negated_boolean_value}")
421
python
# Assigning Boolean values to variables
bool_var_1 = True
bool_var_2 = False

print("bool_var_1 is:", bool_var_1)
print("bool_var_2 is:", bool_var_2)

# Using Boolean values in conditional statements
if 5 > 3:
    print("Five is greater than three")
elif bool_var_1:
    print("Some condition is true")
else:
    print("Both five is not greater than three and some condition is false")

# Using Boolean values in logical operations
bool_var_3 = (5 > 3) and (2 + 2 == 4)
print("( Five is greater than three ) and ( Two plus two is equal to four ) is:", bool_var_3)

# Using Boolean values as input to functions
def print_message(is_positive):
    if is_positive:
        print("The number is positive")
    else:
        print("The number is negative or zero")

print_message(-1)  # Output: The number is negative
print_message(3)   # Output: The number is positive
422
python
# Define a function to add two numbers
def add_numbers(num1, num2):
    # Intentionally add the second number to the first one twice
    result = num1 + num2 + num2
    return result

# Get user input for the first and second numbers
num1 = int(input("Enter the first number: "))
num2 = int(input("Enter the second number: "))

# Call the add_numbers function with the provided numbers
try:
    sum = add_numbers(num1, num2)
except Exception as e:
    print("An error occurred:", e)
else:
    print("The sum of", num1, "and", num2, "is:", sum)

# Debugging: Check if the result is what we expect
if sum != (num1 + num2):
    print("Whoops! There seems to be an error in our add_numbers function.")
423
python
# Define a function that returns True if a number is even, False otherwise
def is_even(number):
    return number % 2 == 0

# Test some values
print("Is 2 even? ", is_even(2))   # True
print("Is 3 even? ", is_even(3))   # False
print("Is 4 even? ", is_even(4))   # True
print("Is 5 even? ", is_even(5))   # False

# Another example: testing if a string starts with 'Py'
def startswith_py(string):
    return string.startswith('Py')

# Test some values
print("Does \"Python\" start with 'Py'? ", startswith_py("Python"))  # True
print("Does \"JavaScript\" start with 'Py'? ", startswith_py("JavaScript"))  # False
424
python
# Example using True in Python

def is_positive(num):
  return num > 0

number = -5
if is_positive(number):
  print("The number is positive")
else:
  print("The number is not positive")

# Output: The number is not positive
425
python
# Inside app.py:
import config

def hello():
    if config.IS_PRODUCTION:
        return "Hello, World!"
    else:
        return "Hello and welcome to development mode!"

if __name__ == "__main__":
    print(hello())
426
python
def divide(x, y):
    try:
        result = x / y
    except ZeroDivisionError:
        print("Error: Division by zero is not allowed.")
        result = None
    else:
        print(f"The result of {x} divided by {y} is: {result}")

if __name__ == "__main__":
    num1 = 10
    num2 = 5
    divide(num1, num2)

    num1 = 10
    num2 = 0
    divide(num1, num2)
427
python
def divide(dividend, divisor):
    """This function divides two numbers."""

    try:
        result = dividend / divisor
        print(f"Result: {result}")
    except ZeroDivisionError as e:
        print(e)
        raise ValueError("Error: Division by zero is not allowed.")

# Input values
num1 = 10
num2 = 5

# Calling the function
divide(num1, num2)

# Calling the function with an error condition
try:
    divide(num1, 0)
except Exception as e:
    print("Error:", e)
428
python
def divide(x, y):
    try:
        result = x / y
        return result
    except ZeroDivisionError:
        print("Error: Division by zero is not allowed.")
        return False

# Test cases
print(divide(5, 2))  # Output: 2.5
print(divide(10, 3))  # Output: 3.3333333333333335
print(divide(5, 0))  # Output: Error: Division by zero is not allowed.

# Another example using True value
def check_even(num):
    try:
        return num % 2 == 0
    except TypeError:
        print("Error: The input must be an integer.")
        return False

print(check_even(6))  # Output: True
print(check_even('six'))  # Output: Error: The input must be an integer.
429
python
import logging

# Configure logging
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
console_handler = logging.StreamHandler()
console_handler.setFormatter(formatter)
logger.addHandler(console_ handler)

# Use True boolean value
is_even = lambda n: True if n % 2 == 0 else False
num = 4
if is_even(num):
    logger.info("The given number {} is even".format(num))
else:
    logger.warning("The given number {} is odd".format(num))

# Use logging to record some events
logger.debug("Debug message")
logger.info("Info message")
logger.warning("Warning message")
logger.error("Error message")
logger.critical("Critical message")
430
python
# Define a function that calculates the square of a number
def calculate_square(number):
    return number ** 2

# Test the calculation with some values
value1 = 5
result1 = calculate_square(value1)
print(f"The square of {value1} is {result1}")

value2 = -3
result2 = calculate_square(value2)
print(f"The square of {value2} is {result2}")

# Use assert statement to test a condition
assert value1 > 0, "Value must be positive"
print("Assertion with positive value passed")

try:
    # This condition will fail and raise an AssertionError
    assert value2 < 0, "Value must be negative"
except AssertionError as error:
    print(f"Assertion with negative value failed: {error}")
431
python
def check_age(age):
 if age >= 18:
 return True
 else:
 return False

print(check_age(20))
print(check_age(15))
432
python
# Define a function that returns True if the given number is even, otherwise False
def is_even(number):
    return number % 2 == 0

# Test some numbers
print(is_even(4))   # prints: True
print(is_even(3))   # prints: False
433
python
# Define a function that returns True if given number is odd
def is_odd(number):
    return number % 2 != 0

# List of numbers for testing
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]

# Filter out odd numbers from the list
odds = list(filter(is_odd, numbers))

# Print the result
print("Odd numbers: ", odds)
434
python
import time
import cProfile

def fibonacci(n):
"""Compute the nth Fibonacci number."""
if n <= 1:
return n
else:
return fibonacci(n-1) + fibonacci(n-2)

if __name__ == "__main__":
n = 40
start_time = time.time()
result = fibonacci(n)
elapsed_time = time.time() - start_time
print(f"The {n}th Fibonacci number is: {result}")
print(f"Computation took {elapsed_time:.6f} seconds.")

cProfile.run('fibonacci(40)')
435
python
# Define some variables and evaluate expressions
is_sunny = False
is_raining = True
has_umbrella = is_raining

if not is_sunny and has_umbrella:
    print("Go outside, it's raining!")
else:
    print("It's a beautiful day!")
436
python
# Using True as a boolean value in Python

def my_function():
    some_condition = False

    # If some condition is met, the following code will be executed
    if some_condition:
        print("This condition is true.")
        some_other_variable = True
        print("The variable 'some_other_variable' now has the value:", some_other_variable)
    else:
        print("This condition is false.")

my_function()
437
python
# Define some variables
number = 10
is_even = number % 2 == 0

# Use conditional statements with `True` and `False` (booleans)
if is_even:
    print("The number is even.")
else:
    print("The number is odd.")

# Demonstrate that the result of a comparison is a boolean value
print(type(is_even))  # Output: <class 'bool'>
438
python
# This is a simple Python script that checks if a user is old enough to install packages using pip

age = int(input("Enter your age: "))
is_old_enough = age >= 18

if is_old_enough:
    print("You're old enough to install packages using pip!")
    # Install Flask package as an example
    import subprocess
    try:
        subprocess.check_call(["pip", "install", "-u", "Flask"])
        print("Flask has been installed successfully.")
    except subprocess.CalledProcessError as e:
        print(f"Failed to install Flask, error message: {e}")
else:
    print("You're not old enough to install packages using pip.")
439
python
import subprocess

# Using True as a boolean value
is_admin = True
if not is_admin:
    print("You don't have administrative privileges!")

# Running pip command using subprocess
def run_pip_command(command):
    process = subprocess.Popen(["pip", command], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    output, error = process.communicate()

    if error:
        print("Error occurred while running pip command!")
        print(error)
    else:
        print("pip command executed successfully.")
        print(output.decode())

# Install numpy package using pip
run_pip_command("install numpy")
440
python
# Example of using True in Python

x = 10
y = 20
z = "Apple"

if x > y:
    print("x is greater than y")
elif x < y:
    print("x is less than y")
else:
    print("x is equal to y")
    
# Here's a boolean expression using True and not
bool_expression = (x > y) or (not(z == "Banana"))
if bool_expression:
    print("The condition is true")
else:
    print("The condition is false")
441
python
import os
import sys

def create_project(project_name):
    # Create a new directory for the project and change to it
    project_path = os.path.abspath(os.path.join(os.getcwd(), project_name))
    os.makedirs(project_path, exist_ok=True)
    os.chdir(project_path)

    # Create a new virtual environment
    venv_path = os.path.join(project_path, '.venv')
    if not os.path.exists(venv_path):
        print("Creating virtual environment...")
        os.system("virtualenv .venv")

    # Activate the virtual environment
    activate_this = sys.executable + ' ' + os.path.join('.' ,'venv','bin','activate')
    with open(os.devnull, 'wb') as devnull:
        os.system(f"{activate_this} < {devnull}")

    # Install a package (for example requests) within the environment
    print("Installing packages...")
    os.system("pip install requests")

    print(f"Project created successfully in '{project_path}'.")
    os.chdir('..')

create_project('my_new_project')
442
python
# This script shows how to create a new Python virtual environment using venv,
# and then run a simple Python program within that environment.

import os
import sys

# Create a new virtual environment
print("Creating new virtual environment...")
venv_path = "my_project_env"
if not os.path.exists(venv_path):
    venv.create(sys.argv[0], venv_path, with_pip=True)
os.chdir(venv_path)

# Activate the virtual environment
print("Activating virtual environment...")
if sys.version_info >= (3, 3):
    import site

    site.activate(venv_path)
else:
    activate = os.path.join(venv_path, "bin", "activate")
    os.system(f"{activate} 'bash'")
    
# Now we can install and use packages within this environment
print("Installing requests package...")
try:
    import pip
    pip.main(["install", "requests"])
except Exception as e:
    print(f"Error installing requests: {e}")

# Demonstrate using True value
x = 10
y = 20
z = x + y
print("x = {}".format(x))
print("y = {}".format(y))
print("z = {}".format(z))
print("Is z greater than 15? {}".format(True if z > 15 else False))

# Deactivate the virtual environment
print("Deactivating virtual environment...")
deactivate = os.path.join(venv_path, "bin", "deactivate")
os.system(f"{deactivate}")
443
python
# app.py
from flask import Flask

app = Flask(__name__)

@app.route('/')
def home():
    return 'Hello World!'

if __name__ == '__main__':
    app.run(debug=True)
444
python
# A simple Python program using True

x = 10
y = 20
z = x + y

if z > 20:
    print("The sum is greater than 20.")
else:
    print("The sum is less than or equal to 20.")

# The output will be "The sum is greater than 20." because 10 + 20 = 30.
445
python
def main():
    is_valid_age = True
    if not is_valid_age:
        print("You are not old enough.")
    else:
        print("Welcome!")
        # Add other code here as needed.

if __name__ == "__main__":
    main()
446
python
import os

# Define the name of the environment variable to check
env_variable_name = "MYVAR"

if os.environ.get(env_variable_name, False):
    # If the environment variable is defined, print a message
    value = os.environ[env_variable_name]
    print(f"Environment variable '{env_variable_name}' is set to '{value}'")
else:
    # If the environment variable is not defined or empty, print a different message
    print(f"Environment variable '{env_variable_name}' is not set")

# Print a message showing that 'True' is equivalent to any non-empty value
print("True if any non-empty string:")
if os.environ.get(env_variable_name, True):
    print(f"'{os.environ.get(env_variable_name, '')}' is truthy")
else:
    print("'None' or an empty string is falsy")
447
python
import subprocess

# Define a function that checks if a file exists and returns True or False
def file_exists(file_path):
    return subprocess.call([sys.executable, '-c', '"import os, print(os.path.isfile(%r))"' % file_path], shell=True) == 0

# Check if a file exists and print a message accordingly
if file_exists("/path/to/your/file.txt"):
    print("File exists!")
else:
    print("File does not exist.")

# Use shell to run a command and store the output in a variable
result = subprocess.run(["ls", "-l"], capture_output=True, text=True, shell=True)
print(f"Output of 'ls -l' command: {result.stdout}")
448
python
# Assigning boolean values to variables
is_sunny = False
is_raining = True

print("Is it sunny? ", is_sunny)
print("Is it raining? ", is_raining)

# Using boolean values in expressions and conditions
if not is_sunny:
    print("Take an umbrella, it's raining!")
else:
    print("Enjoy the sunny day!")

# Boolean operators
print(2 > 1 and 3 > 2)  # And operator (both conditions must be true)
print(2 < 1 or 3 > 2)   # Or operator (at least one condition must be true)
print(not(2 > 1))       # Not operator (negates a boolean value)
0
python
# Assigning Boolean values to variables
is_rainy = False
has_key = True

# Using Boolean values in conditional statements
if has_key:
    print("You have a key!")
else:
    print("You don't have a key.")

# Using Boolean values in logical operations
result1 = True and False
print(f"Result 1: {result1}") # Output: False
result2 = True or False
print(f"Result 2: {result2}") # Output: True
result3 = not True
print(f"Result 3: {result3}") # Output: False
1
python
# This program checks if a given number is even or odd.
def is_even(number):
    return number % 2 == 0

number = 5
result = is_even(number)
print(f"{number} is {\"even\" if result else \"odd\"}")
2
python
import subprocess

# Boolean variable definition
is_run = True

if is_run:
    # Using subprocess to run batch file
    subprocess.call('path_to_your_batchfile.bat')
else:
    print("Batch file not executed")
3
python
import threading
import time

def func(id):
    print("Function {} starting".format(id))
    time.sleep(5)
    print("Function {} ended".format(id))

if __name__ == "__main__":
    threads = []

    for i in range(3):
        t = threading.Thread(target=func, args=(i,))
        threads.append(t)
        t.start()

    for t in threads:
        t.join()
4
python
import threading
import time

def task(name):
    print(f"{name} task started")
    time.sleep(3)
    print(f"{name} task completed")

if __name__ == "__main__":
    # Create two threads for two tasks
    thread1 = threading.Thread(target=task, args=("Task 1",))
    thread2 = threading.Thread(target=task, args=("Task 2",))

    # Start both threads
    thread1.start()
    thread2.start()

    # Wait for both threads to complete before exiting the program
    thread1.join()
    thread2.join()

    print("All tasks completed")
5
python
import threading

def print_numbers():
    """Print numbers from 1 to 5"""
    for i in range(1, 6):
        print("Thread-1: ", i)

def print_letters():
    """Print letters a to e"""
    for letter in "abcde":
        print("Thread-2: ", letter)

if __name__ == "__main__":
    # Create threads
    thread1 = threading.Thread(target=print_numbers)
    thread2 = threading.Thread(target=print_letters)

    # Start threads
    thread1.start()
    thread2.start()

    # Wait for threads to finish before exiting the program
    thread1.join()
    thread2.join()

# It's important to note that Python GIL (Global Interpreter Lock) doesn't allow multiple native threads to execute Python code at once,
# so in this example, it might not look like true multithreading as the tasks are being executed serially with some short time gaps between them.
6
python
# Define some variables
x = 10
y = 20
z = "apple"

# Boolean expressions using comparison operators
is_x_greater_than_y = x > y
is_z_equal_to_string_'orange'_instead_of_'apple'_ = z == "orange"

# Print the results
print("x is greater than y: ", is_x_greater_than_y)
print("z is equal to 'orange': ", is_z_equal_to_string_'orange'_instead_of_'apple'_")

# Boolean logic using AND, OR and NOT operators
is_x_even = x % 2 == 0
is_y_odd = y % 2 != 0
are_x_and_y_different_numbers = is_x_even and not (is_y_even)

# Print the results
print("x is even: ", is_x_even)
print("y is odd: ", is_y_odd)
print("x and y are different numbers: ", are_x_and_y_different_numbers)
7
python
import threading

# Shared variable to be accessed by multiple threads
counter = 0

def increment_counter(name):
    global counter
    
    for i in range(1000):
        # Simulate some work here before the actual increment
        # e.g., some heavy computation or I/O operation
        
        # Try to increment the counter
        try:
            current_value = counter
            counter = current_value + 1
            print(f"Thread {name} incremented counter from {current_value} to {counter}")
        except Exception as e:
            print(f"Thread {name}: Error while incrementing counter - {e}")
            
# Create and start two threads
thread_one = threading.Thread(target=increment_counter, args=(1,))
thread_two = threading.Thread(target=increment_counter, args=(2,))

# Start both threads
thread_one.start()
thread_two.start()

# Wait for both threads to finish their execution
thread_one.join()
thread_two.join()

print("Final counter value: ", counter)
8
python
x = 5
y = 10

if x > y:
    print("x is greater than y")
else:
    print("x is less than or equal to y")

# Output: x is less than or equal to y
9
python
import os
import contextlib

# Function to open a file with specific mode and handle exceptions
def open_file(filename, mode):
    try:
        file = open(filename, mode)
        yield file
    finally:
        file.close()

# Decorator @contextmanager to create a context manager
@contextlib.contextmanager
def resource(value):
    try:
        yield value
    finally:
        if isinstance(value, (os.BufferedReader, os.TextIO)):
            value.close()

# Function to read lines from file
def read_lines(filename):
    with resource(open_file(filename, "r")) as file:
        for line in file:
            print(line)

if __name__ == "__main__":
    filename = "example.txt"
    if os.path.exists(filename):
        read_lines(filename)
    else:
        print(f"File '{filename}' does not exist.")
10
python
import threading
import time

# Create a boolean variable and a lock
shared_data = True
lock = threading.Lock()

def worker(num):
    """Function to be executed by each worker thread."""

    # Acquire the lock before accessing shared data
    with lock:
        if not shared_data:
            print(f"Thread {num}: Data is already processed.")
            return
        shared_data = False

    print(f"Thread {num}: Processing data...")
    time.sleep(2)
    print(f"Thread {num}: Data processing completed.")

if __name__ == "__main__":
    threads = [threading.Thread(target=worker, args=(i,)) for i in range(5)]

    # Start all worker threads
    for thread in threads:
        thread.start()

    # Wait for all threads to complete
    for thread in threads:
        thread.join()
11
python
import threading
import time

# Initialize a lock and a condition variable
lock = threading.Lock()
cond_var = threading.Condition()

# Define a shared variable (for demonstration purposes)
data = 0

def producer(num):
    """ Producer function that sets the shared data """

    # Wait if the lock is not free, then acquire it
    while not lock.acquire():
        print(f"Producer {threading.current_thread().name} waiting for lock.")
        time.sleep(0.1)

    # Produce data and print the message
    print(f"Producer {threading.current_thread().name}: Setting shared data to {num}")
    global data
    data = num

    # Notify all waiting consumers that data is available
    cond_var.notify()

    # Release the lock
    lock.release()

def consumer(num):
    """ Consumer function that reads the shared data """

    while True:
        # Wait for the lock and condition to be available
        lock.acquire()
        cond_var.wait()

        if data is not None:
            print(f"Consumer {threading.current_thread().name}: Consumed data = {data}")
            global data
            data = None

        # Release the lock and condition
        lock.release()

if __name__ == "__main__":
    producer_thread = threading.Thread(target=producer, args=(1,))
    consumer_thread = threading.Thread(target=consumer)

    producer_thread.start()
    consumer_thread.start()

    # Join threads to the main program execution
    producer_thread.join()
    consumer_thread.join()
12
python
# An example using True as a condition in a for loop
n = 10
for i in range(n):
    if i % 2 == 0:  # If the current number is even, print it
        print(i)
13
python
import contextlib
import sys

# A simple context manager that prints messages when entered and exited
@contextlib.contextmanager
def print_context_manager(msg):
    print(f'Entering context manager: {msg}')
    try:
        yield
    finally:
        print(f'Exiting context manager: {msg}')

if __name__ == "__main__":
    with print_context_manager('Example'):
        if True:  # This condition is always true
            print('This statement is always executed inside the context manager')

        raise Exception('An error occurred')  # This will be caught and handled by the with statement
14
python
import sys
import gc
import time

# Function to get current memory usage
def get_memory_usage():
    process = sys.argv[-1]
    py_stats = gc.get_stats()
    rss = sum(stat['heap_used_in_bytes'] for stat in py_stats if 'heap' in stat)
    return rss, process

# Create a large list of True values
def create_large_list():
    return [True] * 1000000

if __name__ == "__main__":
    # Initialize the large list
    large_list = create_large_list()
    
    print("List created. Current memory usage:")
    current_memory, current_process = get_memory_usage()
    print(f"Process '{current_process}': {current_memory/1024/1024} MB")

    # Let the garbage collector run
    gc.collect()

    print("\nGarbage collection finished. Current memory usage:")
    after_memory, _ = get_memory_usage()
    print(f"Process '{current_process}': {after_memory/1024/1024} MB")
15
python
# Using True
boolean_variable = True
if boolean_variable:
    print("This statement will be executed.")

# Memory Management in Python
# Python automatically manages memory through a process called Garbage Collection.
# When an object is no longer being referenced by any variable, it becomes eligible for garbage collection.
# The Python interpreter periodically checks the memory and frees up any memory occupied by objects that are no longer in use.

# Here's an example showing Python's memory management:
class MyClass:
    def __init__(self):
        self.data = [i for i in range(10000)]
        
my_object = MyClass()  # This creates a new instance of MyClass and allocates memory for the list.
del my_object             # Once we're done with 'my_object', we delete it and make the memory it occupied eligible for garbage collection.
# The Python interpreter will eventually free up the memory used by 'my_object'.
17
python
# Define some variables with boolean values
boolean_variable_1 = True
boolean_variable_2 = False

# Use boolean values in if conditions
if boolean_variable_1:
    print("Boolean variable 1 is True")
else:
    print("Boolean variable 1 is False")

if not boolean_variable_2:
    print("Boolean variable 2 is False and its negation is True")
else:
    print("Boolean variable 2 is True and its negation is False")

# Use the * operator for multiplication and repetition
number = 5
result_1 = number * 3
print(f"{number} multiplied by 3 equals {result_1}")

string = "Python"
repeated_string = "*" * len(string)
print(f"String '{string}' repeated {len(string)} times equals '{repeated_string}'")
18
python
# Define some variables
num1 = 10
num2 = 3

# Check if a condition is true using the Boolean value True
if num1 > num2:
    greater_number = "num1"
    print(f"{greater_number} is greater.")
else:
    greater_number = "num2"
    print(f"{greater_number} is greater.")

# Perform integer division using the / operator
result = num1 / num2

print("Integer Division Result:")
print(result)

# Check if the result is greater than 3 using the Boolean value True
if result > 3:
    print("The result is greater than 3.")
else:
    print("The result is not greater than 3.")
19
python
# Define two numbers
dividend = 17
divisor = 3

# Perform floor division using // operator
quotient = dividend // divisor

# Print the boolean value of the condition: if quotient is not equal to zero
print("Is the quotient zero? ", bool(quotient == 0))

# Print the result of floor division and the calculated quotient
print(f"The result of floor division is {dividend} // {divisor} = {dividend // divisor}")
print(f"The quotient is {quotient}")
20
python
# Define a function to check if a number is even or odd
def is_even(number):
    # If the number is divisible by 2 with no remainder, it's an even number
    return number % 2 == 0

# Test some numbers and print the results
numbers = [1, 2, 3, 4, 5]
for number in numbers:
    if is_even(number):
        result = "even"
    else:
        result = "odd"
        
    print(f"{number} is {result}")
21
python
# Define a function to calculate base raised to the power of exponent
def power(base, exponent):
    result = base ** exponent
    return result

# Base and exponent values for demonstration
base = 2
exponent = 3

# Calculate the base raised to the power of the exponent using the power function
raised_to_power = power(base, exponent)

# Print the result
print("{} raised to the power of {} is:".format(base, exponent), raised_to_power)

# Use True in a simple conditional statement
if True:
    print("This statement will always be true and therefore execute.")

# Define a number and check if it's positive
number = 5

if number > 0:
    print("{} is a positive number".format(number))
else:
    print("{} is a non-positive number".format(number))
22
python
# Assigning Boolean values to variables
boolean_variable_1 = True
boolean_variable_2 = False

print("boolean_variable_1 is:", boolean_variable_1)
print("boolean_variable_2 is:", boolean_variable_2)

# Comparison using equals (==) operator and checking equality of variables
comparison_result = boolean_variable_1 == boolean_variable_2

print("boolean_variable_1 is equal to boolean_variable_2:", comparison_result)

# Swapping values of two variables using assignment operator
if comparison_result:
    boolean_variable_1, boolean_variable_2 = boolean_variable_2, boolean_variable_1
else:
    pass  # No need for swapping if they are already equal

print("Swapped boolean_variable_1 is now:", boolean_variable_1)
print("Swapped boolean_variable_2 is now:", boolean_variable_2)
23
python
# Assigning variables
x = 10
y = 20
z = True

# Comparison using == (equality) operator
if x == y:
    print("x and y are equal")
else:
    print("x and y are not equal")

# Comparison using '=' (assignment) operator will always be False in this context
if x = y:
    print("This line will never be executed as '=' is used for assignment, not comparison.")

# Comparison using True value
if True:
    print("The boolean expression is true")
else:
    print("The boolean expression is false")

# Comparison between variables and True using == operator
if x == True:
    print(f"x equals the boolean value True.")
else:
    print(f"x does not equal the boolean value True.")

# Comparison between variables and True using and operator
if x or True:
    print("Either x is true or True is true, so this expression is true")
else:
    print("Both x and True are false, so this expression is false")
24
python
# Define some variables
number1 = 10
number2 = 20

# Check if number1 is not equal to number2 using the not-equal operator !=
if number1 != number2:
    print("Number 1 and Number 2 are not equal.")
else:
    print("Number 1 is equal to Number 2.")

# Use Boolean value True in a conditional statement
if True:
    print("This condition is always true.")

# Combine both concepts in a more complex condition
if number1 != 5 and number2 > 10:
    print("Number 1 is not equal to 5 and Number 2 is greater than 10.")
25
python
# Define two variables with integer values
num1 = 5
num2 = 7

# Check if num1 is less than num2 using the '<' operator
if num1 < num2:
    print(f"{num1} is less than {num2}")
else:
    print(f"{num1} is not less than {num2}.")

# Use Boolean value True in a conditional statement
is_positive = True
if is_positive:
    print("The given boolean value is TRUE")
else:
    print("The given boolean value is FALSE")
26
python
# Set two variables with numbers
num1 = 10
num2 = 5

# Use the greater than (>) operator to compare num1 and num2
is_greater = num1 > num2

# Print the result using string formatting
print("{} is greater than {}?: {}".format(num1, num2, is_greater))

# Use True directly in a statement
if num1 > num2:
    print("{0} is greater than {1}.".format(num1, num2))
else:
    print("{0} is not greater than {1}.".format(num1, num2))
27
python
# Define some variables
x = 5
y = 10
z = 3

# Use the less-than-or-equal-to operator
if x <= y:
    print(f"The value of x ({x}) is less than or equal to the value of y ({y}).")
else:
    print(f"The value of x ({x}) is greater than the value of y ({y}).")

# Use the boolean value True in an if statement
if z <= 0 or True:
    print("The value of z is less than or equal to zero, or the boolean value True is true.")
else:
    print("The value of z is greater than zero, and the boolean value True is false in this context.")
28
python
def isunique(str):
    # Initialize an empty set to store encountered characters
    char_set = set()

    # Iterate through each character in the given string and check if it exists in the set already
    for char in str:
        # If the character exists in the set, it's a duplicate, return False
        if char in char_set:
            return False
        # Add the character to the set
        char_set.add(char)

    # Once all characters have been checked and no duplicates found, return True as the string contains all unique characters
    return True
31
python
# Initialize variable 'num' with value 0
num = 0

# Loop while num is less than 10
while num < 10:
    # Multiply num by 2 using *= and check if the result is still less than 10
    num *= 2
    
    # Check if the new value of num is still less than 10 using Boolean value True
    if num >= 10:
        print("Number exceeded limit, loop will terminate.")
        break
    
# Print the final value of 'num'
print(f"The number is now {num}.")
32
python
# Assigning values to variables
dividend = 10
divisor = 5
quotient = 0

# Perform division
try:
    quotient = dividend / divisor
except ZeroDivisionError:
    print("Error: Division by zero is not allowed.")
    
# Check if divisor was zero and assign True or False to a variable
is_divisor_zero = divisor == 0

# Print the result and the status of divisor being zero
if is_divisor_zero:
    print(f"The divisor was zero. Division result is meaningless: {quotient}.")
else:
    print(f"Quotient: {quotient}")

# Assign the result of quotient != 0 to a variable using /= operator
quotient /= 0  # This line has no effect since quotient was already initialized with a value.
print("quoitent after /=".format(quotient))

# Now assign a zero value to divisor and check its effect on quotient using /= operator
divisor = 0
quotient /= 1  # This line does not change quotient since it is already initialized with a value.
print("quoitent after divisor assignment and /=".format(quotient))
divisor /= 0   # This line sets divisor to 1 since divisor was initially assigned 0.
print("quoitent after divisor reset and /=".format(quotient))
33
python
# This is a simple Python script for demonstrating the usage of True and //=

# Define some variables
num1 = 25
num2 = 7
quotient = 0
remainder = 0
is_valid_input = True

# Check if the input is valid (both numbers should be integers)
if type(num1) != int or type(num2) != int:
    print("Error: Both num1 and num2 must be integers.")
    is_valid_input = False
else:
    # Perform division and get the quotient
    quotient = num1 // num2
    
    # Display the quotient
    print(f"The quotient of {num1} and {num2} is {quotient}")

    # Perform floor division assignment
    num1 //= num2

    # Display the updated value of num1
    print(f"After performing num1 //= num2, num1 becomes: {num1}")
34
python
def modify_number(num):
    # Calculate remainder of num % 2
    remainder = num % 2

    # Set is_even to True if num is even (remainder is 0)
    is_even = True if remainder == 0 else False

    print("Number: {num} | Remainder: {remainder} | Is Even: {is_even}")

# Test the function with some numbers
modify_number(4)
modify_number(5)
modify_number(12)
35
python
# Initialize a variable with some value
num = 2

# Check if a number is raised to the power of 3 is greater than 12, and assign the result to a boolean variable called is_greater
is_greater = (num ** 3) > 12

# Print the value of the boolean variable is_greater
print(is_greater)

# Assign the result of number raised to the power of 2 to the same variable num using the power assignment operator
num **= 2

# Print the updated value of the variable num
print(num)
36
python
# Define two boolean variables
variable1 = False
variable2 = True

print("Variable 1: ", variable1)
print("Variable 2: ", variable2)

# Using the logical NOT operator ~ to inverse the value of a variable
inverse_of_variable1 = ~variable1
print("Inverse of Variable 1: ", inverse_variable1)

# Logical AND operation (and) between two variables or a constant and a variable
result_of_operation1 = variable1 and variable2
print("Variable 1 and Variable 2 (and): ", result_of_operation1)

result_of_operation2 = variable1 and True
print("Variable 1 and True (and): ", result_of_operation2)
37
python
# Define two Boolean variables with the value True
boolean_variable_1 = True
boolean_variable_2 = True

print("boolean_variable_1: ", boolean_variable_1)
print("boolean_variable_2: ", boolean_variable_2)

# Use bitwise OR operator | to combine two Boolean variables
combined_variable = boolean_variable_1 | boolean_variable_2

print("\nboolean_variable_1 | boolean_variable_2: ")
print(combined_variable)

# The result of the bitwise OR operation will be True if either (or both) of the variables are True.
print("Note: In Python, the bitwise OR operator also works for Boolean values and behaves like a logical OR.")
38
python
# Definition of two binary numbers as decimal integers
num1 = 60  # binary: 111110
num2 = 13  # binary: 0010011

# Using bitwise XOR (^) to find the difference of num1 and num2
result = num1 ^ num2

print(f"The XOR of {num1} and {num2} is:")
print(result)
print(bin(num1)[2:])  # print binary representation of num1 for comparison
print(bin(num2)[2:])  # print binary representation of num2 for comparison
print(bin(result)[2:])  # print binary representation of the XOR result
39
python
# Define a binary number
binary_number = 0b1111_0010

# Print the original binary number
print("Original Binary Number: ", bin(binary_number)[2:])

# Use True to convert the binary number to its decimal equivalent
decimal_number = bool(binary_number) if isinstance(binary_number, int) else int(binary_number, 2)
print("Decimal Equivalent of Binary Number: ", decimal_number)

# Use bitwise NOT (represented by the tilde `~`) to invert all the bits of the binary number
inverted_number = ~binary_number

# Print the binary representation of the inverted number
print("Binary Representation of Inverted Number: ", bin(int.from_bytes(bytearray([binary_number.to_bytes(1, 'little')[0]]), 'little'))[2:])

# Use True to check if the inverted number is non-zero (i.e., if it has at least one bit set)
is_inverted_nonzero = bool(inverted_number)
print("Is Inverted Number Non-Zero? : ", is_inverted_nonzero)
40
python
# Setting some binary values as integers
binary_value1 = 1
binary_value2 = 1 << 3

print("Binary Value 1 (Decimal): ", binary_value1)
print("Binary Value 2 (Decimal): ", binary_value2)

# Displaying the binary representations
print(f"Binary representation of Binary Value 1: {bin(binary_value1)}")
print(f"Binary representation of Binary Value 2: {bin(binary_value2)}")

# Using True and bitwise left shift together
some_boolean = True
number = binary_value1
number <<= some_boolean

print("Number before assignment with boolean:", number)
print("Boolean value:", some_boolean)

if some_boolean:
    number <<= 1
else:
    number >>= 1

print("Number after assignment with conditional statement:", number)

# Displaying the binary representations of the final numbers
print(f"Binary representation of final Number: {bin(number)}")
41
python
# Using True
number = 10
if number > 5:
    print("Number is greater than 5")
else:
    print("Number is less than or equal to 5")

# Using bitwise right shift operator (>>)
binary_number = 0b1111_0101 # binary representation of decimal number 9 (decimal 0b means it's in binary form)
shifted_number = binary_number >> 2
print(bin(shifted_number)) # prints "0b0011_1100" which is the binary representation of decimal number 3
print(decimal(shifted_number)) # prints 3, the decimal equivalent of the shifted binary number
42
python
# Define two boolean variables
var1 = True
var2 = True

# Use the 'and' operator to create a new boolean variable 'result'
result = var1 and var2

# Print out the values of the variables
print("Variable 1: ", var1)
print("Variable 2: ", var2)
print("Result (var1 and var2): ", result)
43
python
# Define some variables
a = 10
b = 20
c = False

# Using True directly
if True:
    print("True is always true. Printing: True is always true.")

# Using or operator
if c or (a > b):
    print("The condition is true because of one of the following reasons:")
    print(f"c is {c}")
    print(f"But a={a} and b={b}, so a>b is {a > b}")
else:
    print("The condition is false.")
0
python
# Boolean values: True or False
is_raining = False
is_sunny = True
has_money = True

print("Is it raining?", is_raining)
print("Is it sunny?", is_sunny)
print("Do we have money?", has_money)

# If statement
if not is_raining and is_sunny and has_money:
    print("Let's go to the park!")
else:
    print("Let's stay home today.")
1
python
import time
import schedule

def job():
    print("Job is running...")
    time.sleep(5) # This job will run for 5 seconds

def main():
    schedule.every(1).minutes.do(job) # Schedule the job to run every minute
    
    while True:
        schedule.run_pending() # Run any scheduled jobs
        time.sleep(60) # Sleep for a minute before checking again

if __name__ == "__main__":
    main()
2
python
# Define a boolean variable with true value
is_rainy = True

# Define a boolean variable with false value
is_sunny = False

print("Is it rainy? ", is_rainy)
print("Is it sunny? ", is_sunny)

# Perform some logical operations on boolean variables
print("Rainy OR Sunny: ", is_rainy or is_sunny)  # OR operation
print("Rainy AND Sunny: ", is_rainy and is_sunny)  # AND operation
print("Not Rainy: ", not is_rainy)  # NOT operation
3
python
# This program demonstrates the usage of True as a Boolean value.

# Assigning True and False to variables
is_sun_shining = True
is_rainy = False

print("Is it sunny outside? ", is_sun_shining)
print("Is it raining outside? ", is_rainy)

# Using True in conditional statements
if True:
    print("This statement is always true.")

if not False:
    print("This statement is also always true.")

# Using True and False to compare values
number = 10
is_number_greater_than_five = number > 5

print("Is the number greater than 5? ", is_number_greater_than_five)
4
python
import threading
import time

def worker_function(name):
    print(f"{name}: Started")
    irepeat = 0
    while True:
        if should_stop:
            print(f"{name}: Stopping...")
            break
        irerepeat += 1
        print(f"{name}: Repeating {irepeat}")
        time.sleep(2)

should_stop = False
thread1 = threading.Thread(target=worker_function, args=("Thread 1",))
thread2 = threading.Thread(target=worker_function, args=("Thread 2",))

# Start the threads
thread1.start()
thread2.start()

# Wait for some time to let the threads run for a while
time.sleep(10)

# Stop both threads
should_stop = True
thread1.join()
thread2.join()
print("All threads stopped.")
5
python
import threading
import time

def worker(name):
    """ A simple worker function to demonstrate multithreading """
    print(f"Thread {name} started")
    time.sleep(3)
    print(f"Thread {name} finished")

if __name__ == "__main__":
    thread1 = threading.Thread(target=worker, args=("Thread1",))
    thread2 = threading.Thread(target=worker, args=("Thread2",))

    # Start the threads
    thread1.start()
    thread2.start()

    # Wait for both threads to finish their execution
    thread1.join()
    thread2.join()

    print("Main thread finished")
6
python
# This variable will hold an integer user input
number = None

# Ask for user input until valid integer is provided
while not type(number) == int:
    try:
        number = int(input("Please enter an integer: "))
    except ValueError:
        print("Invalid input! Please enter an integer.")

# Check if the number is positive, zero or negative and print accordingly
if number > 0:
    print(f"The number {number} is positive.")
elif number == 0:
    print(f"The number {number} is zero.")
else:
    print(f"The number {number} is negative.")
    
# Perform some additional processing based on the number's magnitude
if abs(number) > 10:
    print("This number is quite large.")
elif abs(number) < 5:
    print("This number is quite small.")
else:
    print("This number has a moderate magnitude.")
7
python
def is_true():
    return True
8
python
import threading
import time

# Define two resources with their respective locks
resource1_lock = threading.Lock()
resource2_lock = threading.Lock()

def function1():
    """Function 1 acquires resource 1, then attempts to acquire resource 2."""
    print("Function 1: Acquiring resource 1...")
    resource1_lock.acquire()
    time.sleep(0.5)
    print("Function 1: Trying to acquire resource 2...")
    resource2_lock.acquire()
    print("Function 1: Both resources acquired!")

def function2():
    """Function 2 acquires resource 2, then attempts to acquire resource 1."""
    print("Function 2: Acquiring resource 2...")
    resource2_lock.acquire()
    time.sleep(0.5)
    print("Function 2: Trying to acquire resource 1...")
    resource1_lock.acquire()
    print("Function 2: Both resources acquired!")

# Create and start threads
thread1 = threading.Thread(target=function1)
thread2 = threading.Thread(target=function2)

thread1.start()
thread2.start()

# Wait for threads to finish
thread1.join()
thread2.join()

print("All threads completed.")
9
python
import contextlib
import os

# Using True as a boolean value
if True:
    print("This is a true statement, it will be executed")

# Using resource module with contextlib.contextmanager decorator
@contextlib.contextmanager
def my_context_manager(file_path):
    try:
        file = open(file_path, 'r')
        yield file
    finally:
        file.close()

with my_context_manager('example.txt') as f:
    data = f.read()
    print("Data from the file:", data)
10
python
def function_that_needs_permission(condition):
    """Function that can only be executed if 'condition' is True."""
    if condition:
        print("Executing function...")
        # Your code goes here
    else:
        print("Condition is False. Function not executed.")

# Allow the function to be executed
function_that_needs_permission(True)

# Deny the function from being executed
function_that_needs_permission(False)
11
python
import threading
import time

# Define a shared resource that requires mutual exclusion
resource = 0
lock = threading.Lock()

# Define a function to be executed in threads
def worker(thread_id):
    global resource

    # Demonstrate the use of Boolean flags
    flag = not thread_id % 2

    print(f"Thread {thread_id} is waiting for its turn to access the shared resource...")
    
    while flag:
        if lock.acquire(blocking=True):
            # Critical section: Access the shared resource
            if resource > 0:
                print(f"Thread {thread_id} found a non-zero value in the shared resource.")
                resource += 1
                print(f"Thread {thread_id} updated the shared resource to {resource}")
            else:
                print(f"Thread {thread_id} did not find anything in the shared resource.")

            lock.release()
        else:
            print("Thread", thread_id, "is waiting for the lock to be released...")
            time.sleep(0.1)
    
# Create and start threads
threads = [threading.Thread(target=worker, args=(i,)) for i in range(4)]
for t in threads:
    t.start()

# Wait for all threads to finish
for t in threads:
    t.join()
12
python
import threading
import time

def worker(semaphore, condition):
    semaphore.acquire()

    print("Thread {} started".format(threading.current_thread().name))

    # Simulating some work by sleeping for a random period of time
    time.sleep(1 + 2 * (threading.randint(0, 1) % 2))

    condition.set()  # Signal that the thread has finished its job
    semaphore.release()

    print("Thread {} finished".format(threading.current_thread().name))
13
python
# Open file using context manager
def read_file(filename):
    # Open file with 'r' mode
    with open(filename, 'r') as file:
        # Read entire file content
        data = file.read()
        print("File contents:\n{}\n".format(data))

# Use the function
if __name__ == "__main__":
    filename = "example.txt"  # Replace with your file path
    read_file(filename)
14
python
importgc  # This line is only for Python 3.4 and below. For newer versions, remove it.
import sys

class MyClass:
    def __init__(self):
        print("Created an instance of MyClass")

# Create an object of MyClass
obj = MyClass()

print("Assigned obj to None")
obj = None

print("Checking GC. Is there any unreachable object in memory? (Python 3.4 and below)")
sys.gc()
if gc.collect() is not None:
    print("Garbage Collector did some work!")
else:
    print("No garbage collection occurred.")

print("For Python versions greater than 3.4, use 'gc' module instead of 'importgc'. ")
# In newer versions, replace the gc check with:
# if sys.getrecursionlimit() * 2 > sys.stdin.buffersize:
#     print('Garbage collector did some work!')
# else:
#     print('No garbage collection occurred.')
15
python
# Demonstrating the use of True
boolean_value = True
if boolean_value:
    print("This statement will be executed")
else:
    print("This statement will not be executed")

# Creating objects and demonstrating memory management
class MyClass:
    def __init__(self, value):
        self.value = value

objects = []
for i in range(100000):
    obj = MyClass(i)
    objects.append(obj)

# Manually releasing memory (not necessary in Python)
# for obj in objects:
#     del obj

# GC will free up the memory used by the objects when they are no longer needed
print("Objects created:", len(objects))
17
python
# Define some variables
number_1 = 5
number_2 = 10
is_even = True

# Perform some calculations
result_1 = number_1 * is_even
print("Multiplication of number and boolean (number * boolean): ", result_1)

result_2 = number_1 * number_2
print("Multiplication of two numbers: ", result_2)
18
python
# Python Program for Demonstrating True and Division Operator (/)

def main():
    # Taking input numbers from the user
    num1 = float(input("Enter first number: "))
    num2 = float(input("Enter second number: "))

    # Performing division operation
    result = num1 / num2

    # Checking if the result is greater than zero using Boolean value True
    if result > 0:
        print(f"The result {result} is positive.")
        print("Therefore, the following statement will be true:")
        print(True)
    else:
        print(f"The result {result} is non-positive.")
        print("Therefore, the following statement will be false:")
        print(False)

if __name__ == "__main__":
    main()
19
python
# Integer division
print("Integer Division:")
num1 = 10
num2 = 3
quotient_int = num1 / num2
print(f"Quotient using integer division: {quotient_int}")
print(f"First number: {num1}, Second number: {num2}, Quotient: {quotient_int}")

# Floor Division
print("Floor Division:")
quotient_floor = num1 // num2
print(f"Quotient using floor division: {quotient_floor}")
print(f"First number: {num1}, Second number: {num2}, Quotient: {quotient_floor}")
20
python
# Function to check if a number is even or odd
def is_even(number):
    if number % 2 == 0:
        return True
    else:
        return False

# Testing the function
numbers = [1, 2, 3, 4, 5, 6]
for num in numbers:
    result = is_even(num)
    print("{} is {}".format(num, "even" if result else "odd"))
21
python
# Define a power function using exponentiation operator **
def power(base, exponent):
    # Base case: if exponent is 0, return 1
    if exponent == 0:
        return 1
    else:
        # Recursive call: base * base raised to the power of (exponent - 1)
        return base ** (exponent - 1) * base

# Test cases
print(power(2, 3))                     # Expected output: 8
print(power(5, 2))                     # Expected output: 25
print(power(0, 0))                     # Expected output: 1
print(power(1, -1))                    # Expected output: 1 (since 1 raised to any negative power is 1)
print(power(-3, 2))                    # Expected output: 9 (-3 * -3)
print(power(2, 0))                     # Expected output: 1
print(power(True, 2))                  # Raises a TypeError since you can't raise a Boolean value to a power
22
python
# Define two variables with initial values
x = 5
y = 10

# Check if 'x' is less than 'y' using a Boolean expression
is_x_less_than_y = x < y

# Print the result of the comparison (Boolean value)
print(f"Is {x} less than {y}? -> {is_x_less_than_y}")

# Assign new values to 'x' and 'y' based on a condition
if is_x_less_than_y:
    x, y = y, x

# Print the updated values of 'x' and 'y'
print(f"Now x = {x} and y = {y}")
23
python
# This program defines two variables with boolean values using True and False, respectively,
# and also compares two integers using the equal to operator (==)

# Define boolean variables using True and False
boolean_variable_1 = True
boolean_variable_2 = False

print("boolean_variable_1 is:", boolean_variable_1)
print("boolean_variable_2 is:", boolean_variable_2)

# Use the equal to operator (==) to compare two integers
integer_variable_1 = 10
integer_variable_2 = 10

comparison_result = integer_variable_1 == integer_variable_2

print("integer_variable_1 is equal to integer_variable_2: ", comparison_result)

# Verify that boolean_variable_1 is not equal to boolean_variable_2
another_comparison_result = boolean_variable_1 != boolean_variable_2

print("boolean_variable_1 is not equal to boolean_variable_2: ", another_comparison_result)
24
python
# Define some variables
num1 = 5
num2 = 10

# Check if num1 is not equal to num2 using the != operator
if num1 != num2:
    print("num1 and num2 are not equal")
else:
    print("num1 and num2 are equal")

# Use the True value in a conditional statement
boolean_value = True

if boolean_value:
    print("The boolean value is True")
else:
    print("The boolean value is False")
25
python
# Define two integer variables
num1 = 5
num2 = 7

# Use the less than operator to compare num1 and num2
is_num1_smaller = num1 < num2

# Print the result of comparison using the boolean value True
if is_num1_smaller:
    print(f"{num1} is smaller than {num2}")
else:
    print(f"{num1} is not smaller than {num2}")
    
# Demonstrate that True can be used as a boolean value
boolean_value = True
print("The boolean value is: ", boolean_value)
26
python
# Set two variables with numbers
num1 = 10
num2 = 5

# Use the '>' comparison operator to check if num1 is greater than num2
result = num1 > num2

# Print out the result using the Boolean value True or False
if result:
    print(f"{num1} is greater than {num2}. Result: True")
else:
    print(f"{num1} is not greater than {num2}. Result: False")
27
python
# Define some variables
number = 5
limit = 10

# Check if number is less than or equal to limit
if number <= limit:
    print("Number is less than or equal to limit")
    # Perform some actions if the condition is true
else:
    print("Number is greater than limit")
    
# Continue with other parts of your program
28
python
# Define some variables
num1 = 5
num2 = 3

# Use if statement with >= comparison
if num1 >= num2:
    print(f"{num1} is greater than or equal to {num2}")
else:
    print(f"{num1} is less than {num2}")

# Perform the comparison
print("Performing comparison: {} >= {}".format(num1, num2))

# Output:
# Performing comparison: 5 >= 3
# 5 is greater than or equal to 3
29
python
# Initialize an integer variable x with value 0
x = 0

# Use a for loop to count from 1 to 5
for i in range(1, 6):
    # Check if x is less than or equal to 5
    if x <= 5:
        # Set x to be the sum of its current value and 1
        x += 1
        # Print out the current value of x
        print("x =", x)
31
python
# Initialize a variable num with zero
num = 0

# Check if a condition is met (in this case, the condition is just an if statement that checks if num is less than 10)
if num < 10:
    # If the condition is true, set num to 10 times its current value using *= operator
    num *= 10

# Print the final value of num
print(num)
32
python
# Initial values of num1 and num2
num1 = 10
num2 = 5

# Perform division operation and assign the result to num1
num1 /= num2

# Print the updated value of num1
print("num1 after division by num2: ", num1)

# Assign True to a variable flag if num1 is greater than num2, otherwise False
flag = num1 > num2

# Perform another division operation and update num1 with the result using /= operator
num1 /= 2

# Print the updated value of num1 and the value of flag
print("num1 after second division: ", num1)
print("Is num1 greater than num2?: ", flag)
33
python
# Initialize some variables
num1 = 10
num2 = 4
quota_remainder = True

# Perform floor division and assign the quotient and remainder to num1 and num2 respectively
num1, num2 = divmod(num1, num2)

# Check if there is any remainder
if num2 != 0:
    quota_remainder = False

# Demonstrate the use of floor division assignment (//=) on num1
num1 //= 2

print("Quotient: {}".format(num1))
print("Remainder: {}".format(num2))
print("Quota remainder: {}".format(quota_remainder))
34
python
# Initialize the counter variable with a value of 0
counter = 0

# Use an infinite loop and include a condition to break the loop using 'True' and 'while'
while True:
    # Check if the counter is greater than 9 using the modulus operator '%'
    if counter > 9:
        # If the condition is true, then break out of the loop using 'break' statement
        break

    # Print the current value of the counter and its square
    print("Counter: {0} \nSquare: {1}")
    print(counter * counter)

    # Increment the counter using modulus operator '%=' to ensure that it stays within the range of 0 to 9
    counter += 1
    counter %= 10
35
python
def power(base, exponent):
    """Raises base to the power of exponent."""
    if exponent == 0:
        return 1
    elif exponent > 0:
        result = base
        # Use compound assignment operator **= for exponentional growth
        result **= power(base, exponent - 1)
        return result
    else:
        raise ValueError("Exponent must be non-negative.")

# Test the function with some examples
if __name__ == "__main__":
    base = 2
    exponent = 3

    print(f"Base raised to power {exponent} is:")
    print(power(base, exponent))

    # Demonstrate compound assignment operator usage with True as a flag
    flag = False
    while not flag:
        user_input = input("Enter a non-negative exponent (or 'q' to quit): ")
        
        if user_input == "q":
            flag = True
        else:
            try:
                exponent = int(user_input)
                if exponent >= 0:
                    print(f"Base raised to power {exponent} is:")
                    print(power(base, exponent))
                else:
                    print("Invalid input. Enter a non-negative number.")
            except ValueError:
                print("Invalid input. Please enter an integer.")
36
python
# Define two Boolean variables
bool_var1 = True
bool_var2 = False

print("Boolean variable 1: ", bool_var1)
print("Boolean variable 2: ", bool_var2)

# Perform the bitwise AND operation
result = bool_var1 & bool_var2

print("\nResult of the bitwise AND operation: ", result)

# Interpret the result
if result:
    print("The result is True")
else:
    print("The result is False")
37
python
# Define some boolean variables
variable1 = False
variable2 = True

print("Variable 1 is:", variable1)
print("Variable 2 is:", variable2)

# Perform bitwise OR operation on two boolean values using the '|' operator
result = variable1 | variable2

print("\nThe result of (variable1 | variable2) is:")
print(result)

# Interpreting the result with the help of truth table
print("\nTruth Table:\n"
      "|------|-------|--------------|\n"
      "|  A   |  B   |   A | B    | A | B | A OR B |\n"
      "|------|-------|--------------|-------|-----|----|------------------|\n"
      "| False| False |False       | False | 0  | 0  |     False        |\n"
      "| False|  True |False       |  True | 0  | 1  |       True        |\n"
      "|  True| False |False       | False |1  | 0  |       True        |\n"
      "|  True|  True |True       |  True |1  | 1  |       True        |\n")
38
python
# Define two binary numbers as decimal values
num1 = 60 # 0011 1110
num2 = 13 # 0000 1101

# Compare num1 and num2 using the boolean value True or False
if num1 > num2:
    greater = "First number ({}) is greater than the second number ({}).".format(num1, num2)
elif num1 < num2:
    greater = "Second number ({}) is greater than the first number ({}).".format(num2, num1)
else:
    greater = "Both numbers are equal."
print(greater)

# Perform bitwise XOR operation using ^ operator
xor_result = num1 ^ num2
print("Bitwise XOR of {} and {} is: {} (binary: {:08b})".format(num1, num2, xor_result, format(xor_result, '08b')))
39
python
# Define a binary number as an integer
binary_number = 60  # equates to 0011 1110 in binary

print("Original Binary Number: ", bin(binary_number)[2:])

# Using True boolean value
boolean_value = True
result = binary_number if boolean_value else 0
print("\nResult with True boolean value: ", result, bin(result)[2:])

# Using bitwise NOT (~) operator
result = ~binary_number
print("\nResult with bitwise NOT operator: ", result, bin(result)[2:])
40
python
# Example using True
def is_even(number):
    return number % 2 == 0

num = 10
print("Number is even?: ", is_even(num)) # Number is even?:  True

# Example using bitwise left shift operator (<<)
def power_of_two(base, exponent):
    result = 1
    for _ in range(exponent):
        result <<= 1
        result *= base
    return result

print("2 raised to the power of 5: ", power_of_two(2, 5)) # 2 raised to the power of 5:  32
41
python
# Demonstration of True and Boolean Operators in Python

# Using True
x = 10 > 5
print(f"10 is greater than 5: {x}")

# Shift operators (bitwise)
a = 10 # Binary: 1010
b = 5  # Binary: 0101

# Right shift operator (>>)
print("Right shift:")
print(f"{bin(a)} >> 2 equals {bin(a >> 2)}")

# Left shift operator (<<)
print("Left shift:")
print(f"{bin(b)} << 3 equals {bin(b << 3)}")
42
python
# Define some variables
num1 = 10
num2 = 20

# Use True directly in a conditional statement
if True:
    print("True is always true")

# Use True as a condition in combination with and
if num1 > 5 and num2 > 5:
    print("Both numbers are greater than 5")
else:
    print("At least one number is not greater than 5")
43
python
# Define some variables
variable1 = True
variable2 = False

# Use or (logical OR) to check if variable1 is True or variable2 is True
result = variable1 or variable2

print("Variable 1 is:", variable1)
print("Variable 2 is:", variable2)
print("Result of or operation: ", result)

# Let's see the behavior when both variables are False
variable1 = False
variable2 = False
result = variable1 or variable2
print("Result of or operation with both variables as False: ", result)

# And let's see when one variable is True and another is False
variable1 = True
variable2 = False
result = variable1 or variable2
print("Result of or operation with one True and another False: ", result)
44
python
# Define a boolean variable 'is_student'
is_student = True

if not is_student:
    print("I am not a student.")
else:
    print("I am a student.")

# Change the value of 'is_student' and observe the output
is_student = False

if not is_student:
    print("I am not a student.")
else:
    print("I am a student.")
45
python
# Define a list of numbers
numbers = [1, 2, 3, 4, 5]

# Set a variable with a boolean value
is_even = True

# Check if an element is present in the list and its value is even
if is_even and 0 in (numbers[i] % 2 for i in range(len(numbers))):
    print("An even number is present in the list")
else:
    print("No even number is present or 'is_even' is False")
46
python
# Assign two integers to variables
num1 = 5
num2 = 5

# Use 'is' for comparing two objects for identity
# (check if they are the same object in memory)
if num1 is num2:
    print("Both variables hold the same object")
else:
    print("Variables hold different objects")

# Use 'True' as a boolean value
# (it represents true condition or state)
bool_value = True
if bool_value:
    print("This is a true statement or condition")
else:
    print("This is a false statement or condition")
47
python
# Boolean expression using True
if (x > 0) is True:   # If x is greater than zero, this condition evaluates to True
    print("x is positive")

# Indentation block using :
if x > 0:             # If x is greater than zero
    print("x is positive")
    print("Do something else")
48
python
# A boolean variable using True
is_sunny = True
print(is_sunny) # Output: True

# A list with two elements: temperature and is_sunny
weather = [15.2, True]
print(weather) # Output: [15.2, True]

# Accessing the second element of the weather list using a dot
is_sunny = weather[1]
print("Is it sunny? ", is_sunny) # Output: Is it sunny?  True
49
python
# A boolean expression is any expression that evaluates to True or False
# We can assign these values to variables, or compare values using relational operators

# Assigning Boolean values to variables
boolean_value_1 = True
boolean_value_2 = False

print("Boolean value 1:", boolean_value_1)
print("Boolean value 2:", boolean_value_2)

# Comparison using relational operators
number_1 = 10
number_2 = 5

greater_than = (number_1 > number_2)
equal = (number_1 == number_2)

print("Number 1 is greater than Number 2:", greater_than)
print("Number 1 is equal to Number 2:", equal)
50
python
# Boolean values: True and False
bool_value_1 = True
bool_value_2 = False

print("Boolean value 1 is:", bool_value_1)
print("Boolean value 2 is:", bool_value_2)

# Boolean operators: AND (and), OR (or), and NOT (not)
def boolean_expression():
    condition_1 = True
    condition_2 = False

    # AND operator: Both conditions must be true
    result_and = condition_1 and condition_2
    print("Result of 'condition_1 and condition_2':", result_and)

    # OR operator: At least one condition must be true
    result_or = condition_1 or condition_2
    print("Result of 'condition_1 or condition_2':", result_or)

    # NOT operator: Negates the given boolean value
    result_not = not bool_value_1
    print("Result of 'not bool_value_1' is:", result_not)

boolean_expression()
51
python
# Initialize a boolean variable 'is_student_eligible' with value True
is_student_eligible = True

# Create an empty list 'student_list'
student_list = []

print("Is student eligible initially: ", is_student_eligible)

# Add some students to the list and check eligibility
if len(student_list) > 0:
    print("Students are present. Student eligibility: ", is_student_eligible)
    student_list.append("John")
    student_list.append("Mike")
    print("Students after adding two students: ", student_list)
    if len(student_list) > 2:
        print("With more than 2 students, student eligibility becomes False: ")
        is_student_eligible = False
else:
    print("No students present. Student eligibility remains as:", is_student_eligible)

# Remove some students and check eligibility
if len(student_list) > 0:
    student_list.pop()
    student_list.pop()
    print("Students after removing two students: ", student_list)
    if len(student_list) == 0:
        print("No more students present. Student eligibility remains as:", is_student_eligible)
    else:
        print("With fewer students, student eligibility might change based on the criteria.")
else:
    print("No students present. Student eligibility remains as:", is_student_eligible)
52
python
# Defining a boolean variable named 'is_student' and assigning it the value True
is_student = True

# Printing the value of the boolean variable using the print() function
print("Is student: ", is_student)

# Creating an empty dictionary named 'my_dict'
my_dict = {}

# Adding key-value pairs to the dictionary using the {'key': value} syntax
my_dict = {
    "name": "John Doe",
    "age": 25,
    "city": "New York"
}

# Printing the entire dictionary using the print() function
print("My Dictionary: ", my_dict)

# Checking if a key exists in the dictionary and printing the result using the 'in' keyword
key_exists = "name" in my_dict
print("Key 'name' exists: ", key_exists)
53
python
# Define a variable with a number value
number = 5

# Use the if : statement to check the condition
if number > 0:
    print("The number is positive.")
elif number == 0:
    print("The number is zero.")
else:
    print("The number is negative.")

# Demonstrate the usage of True
boolean_value = True
print("Boolean value is:", boolean_value)
54
python
# Boolean value 'True'
x = 10
y = 20
z = x > y
print("Is x greater than y? ", z)

# Semicolon (;) for multiple statements in one line
a = 5
b = 10
c = a + 1; d = b - 1
print("Value of c: ", c)
print("Value of d: ", d)
55
python
# Boolean AND operation using 'and'
def check_age(person):
    return person.age > 18 and person.age < 65

class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

person1 = Person("John Doe", 20)
person2 = Person("Jane Doe", 35)

print(check_age(person1))  # False
print(check_age(person2))  # True

# Using 'as' for alias in Python
def download_file(url, save_path):
    response = requests.get(url)
    with open(save_path, "wb") as file:
        file.write(response.content)

download_file("https://example.com/test.txt", "test.txt")
56
python
# A simple function to check if a number is within a given range
def is_in_range(number, start, end):
    # Check if the number is greater than or equal to the start and less than or equal to the end
    return start <= number <= end

# Function to perform some calculations and check conditions using and operator and assert statement
def calculate_and_check():
    a = 5
    b = 3
    c = a + b
    result = c * 2

    # Check if the condition is true, i.e., a and b are positive numbers and c is even
    if a > 0 and b > 0 and c % 2 == 0:
        assert result > 10, f"Error: The result ({result}) should be greater than 10"
        print("All conditions met!")
        print(f"The result is: {result}")
    else:
        print("One or more conditions are not met.")

# Test the function
calculate_and_check()
57
python
import asyncio
import aiohttp

async def fetch(url):
    """Asynchronously fetches a web page."""
    async with aiohttp.Client() as client:
        async with client.get(url) as response:
            if response.status in range(200, 300):
                return await response.text()
            else:
                print(f'Error fetching {url}: {response.status}')
                return None

async def main():
    urls = ['https://www.google.com', 'https://www.example.com', 'https://non-existent-url.com']

    tasks = [fetch(url) for url in urls]
    results = await asyncio.gather(*tasks)

    # Check all fetches were successful and print results
    if all(result is not None for result in results):
        print('All fetch operations completed successfully!')
        print('Results:')
        for i, url in enumerate(urls):
            print(f'{i + 1}. {url}: {results[i]}')
    else:
        print('Error: Some fetch operations failed.')

if __name__ == '__main__':
    asyncio.run(main())
58
python
import asyncio

async def task_1():
    print("Task 1 started")
    await asyncio.sleep(1)
    print("Task 1 completed")
    return "Result from task 1"

async def task_2():
    print("Task 2 started")
    await asyncio.sleep(2)
    print("Task 2 completed")
    return "Result from task 2"

async def main():
    result_task_1 = await task_1()
    result_task_2 = await task_2()

    if result_task_1 == "Expected result from task 1" and result_task_2 == "Expected result from task 2":
        print("Both tasks completed successfully")
    else:
        print("An error occurred, as one or both of the tasks did not complete successfully")

if __name__ == "__main__":
    asyncio.run(main())
59
python
# A simple program to find the first occurrence of an even number in a given list using 'and' operator and 'break' statement

def find_even_number(numbers):
    for i, num in enumerate(numbers):
        if num % 2 == 0:  # check if number is even
            print("First even number found at index:", i)
            break
        if i + 1 == len(numbers):
            print("No even numbers were found.")
            return

if __name__ == "__main__":
    numbers = [1, 3, 5, 6, 8]
    find_even_number(numbers)
60
python
# Example 1 - Using and logical operator
def is_valid_password(password):
    if len(password) >= 8 and password.isalnum():
        return True
    else:
        return False

print(is_valid_password("Password123!")) # Output: True
print(is_valid_password("abcd1234"))     # Output: True
print(is_valid_password("p@ssw0rd"))    # Output: True
print(is_valid_password("shortpass"))   # Output: False
61
python
# This is a simple Python program that uses 'and' operator and 'continue' statement

# Function to check if a number is even or prime
def check_even_or_prime(num):
    # Check if number is even using 'and' operator
    if num % 2 == 0 and num > 1:
        print(f"{num} is an even number.")
        return
    
    # Start checking for prime number from 2 up to the square root of the number
    for i in range(2, int(num ** 0.5) + 1):
        if num % i == 0:
            print(f"{num} is not a prime number.")
            continue
    
    # If number passes all the checks, then it is an odd prime number
    if num > 1:
        print(f"{num} is an odd prime number.")

# Testing the function with some numbers
check_even_or_prime(5)  # Output: 5 is an odd prime number.
check_even_or_prime(6)  # Output: 6 is an even number.
check_even_or_prime(13) # Output: 13 is an odd prime number.
62
python
# Example using 'and'
def is_even(n):
    """Check if number is even."""
    return n % 2 == 0

def greater_than_ten(n):
    """Check if number is greater than ten."""
    return n > 10

number = int(input("Enter a number: "))

if is_even(number) and greater_than_ten(number):
    print("The number is even and greater than ten.")
else:
    print("The number is either not even or not greater than ten.")
63
python
# Define a dictionary with some keys and values
my_dict = {1: "one", 2: "two", 3: "three", 4: "four"}

# Print the initial state of the dictionary
print("Initial dictionary:", my_dict)

# Use 'and' operator to combine two conditions in a loop
for key in my_dict:
    if key % 2 == 0 and my_dict[key].isdigit():
        print(f"The key {key} has even index and value is digit.")

# Use 'del' keyword to delete an item from the dictionary by key
my_dict = {1: "one", 2: "two", 3: "three", 4: "four"}
key_to_delete = 3
if key_to_delete in my_dict:
    del my_dict[key_to_delete]

# Print the updated state of the dictionary
print("Updated dictionary:", my_dict)
64
python
# Define variables
age = 18
is_student = True

# Decision making using 'and' and 'elif'
if age >= 18 and is_student:
    print("This person is an adult student.")
elif age >= 18:
    print("This person is an adult.")
else:
    print("This person is a minor.")
65
python
# Define some variables
num1 = 5
num2 = 0

# Use 'and' to check if both conditions are true, followed by an 'else' block for when they aren't
if num1 > 0 and num2 > 0:
    print("Both numbers are positive.")
else:
    if num1 > 0:
        print("First number is positive, but second one isn't.")
    else:
        print("Both numbers are non-positive.")
66
python
try:
    num1 = int(input("Enter first number: "))
    num2 = int(input("Enter second number: "))

    # Perform division, checking for zero as denominator with 'and'
    result = num1 / num2
    if num2 != 0:  # Alternatively, this condition can be put inside try block
        print(f"Result: {result}")
    else:
        print("Error! Division by zero is not allowed.")

except ValueError as ve:
    print(f"Error occurred: {ve}")
67
python
def divide(num1, num2):
    try:
        result = num1 / num2
        print("Result: {0}".format(result))

        # Check if number is even
        if num1 % 2 == 0:
            print("Number 1 is even.")
        else:
            print("Number 1 is odd.")
    except ZeroDivisionError:
        print("Error! Division by zero is not allowed.")
    finally:
        print("Executing finally block.")

if __name__ == "__main__":
    num1 = 6
    num2 = 3
    divide(num1, num2)

    num1 = 5
    num2 = 0
    try:
        divide(num1, num2)
    except Exception as e:
        print("Caught an exception! Message: {0}".format(e))
68
python
def is_even(number):
    """ Returns True if given number is even, False otherwise """
    return number % 2 == 0

def print_even_numbers(start, end):
    """ Prints all even numbers between start and end (inclusive)"""
    for i in range(start, end + 1):
        if is_even(i) and i > 0: # Filter out negative numbers and zero
            print(i)

if __name__ == "__main__":
    lower_limit = int(input("Enter starting number: "))
    upper_limit = int(input("Enter ending number: "))
    
    if upper_limit < lower_limit: # Check if the ending number is greater than the starting number
        print("Invalid input! Please provide a valid range.")
    else:
        print_even_numbers(lower_limit, upper_limit)
69
python
# Example 1: Checking two conditions using 'and'
age = 18
is_student = True

if age >= 18 and is_student:
    print("This person can vote and is a student.")
else:
    print("This person cannot vote or is not a student.")
70
python
# Function with a local variable
def check_numbers(a, b):
    # Initialize local variable 'is_both_positive' to False
    is_both_positive = False
    
    # Check if both numbers are positive using 'and' keyword
    if a > 0 and b > 0:
        is_both_positive = True
    
    return is_both_positive

# Global variable
x = -5
y = 3

# Function to update global variable
def increment_global():
    global x, y
    x += 1
    y += 1

# Check if numbers are positive
if check_numbers(x, y):
    print("Both numbers are positive")
else:
    print("At least one number is not positive")

# Update global variable
increment_global()
increment_global()

print("Updated values of x and y:", x, y)
71
python
# Define two variables with boolean values
num1 = 10
num2 = 20
is_even_num1 = num1 % 2 == 0
is_even_num2 = num2 % 2 == 0

# Use 'and' to check if both conditions are true
if (is_even_num1 and num1 < 20) or (is_even_num2 and num2 > 30):
    print("One of the numbers is even and within certain range")
else:
    print("Neither number is even or not in the given range")
72
python
# This is a simple Python script that demonstrates the usage of 'and' operator and 'import' statement

# Importing the math module for mathematical operations
import math

# Define a function 'is_positive_number' that checks if given number is positive
def is_positive_number(n):
    return n > 0

# Define another function 'is_even_number' that checks if given number is even
def is_even_number(n):
    return n % 2 == 0

# Function to get user input and process the conditions
def main():
    try:
        num = int(input("Enter a number: "))

        # Using 'and' operator for multiple conditions in if statement
        if is_positive_number(num) and is_even_number(num):
            print(f"The number {num} is positive and even.")
            
        elif is_positive_number(num):
            print(f"The number {num} is positive.")
            
        else:
            print("Invalid input. Please enter a valid positive or negative integer.")

    except ValueError as ve:
        print(f"Error: {ve}")

if __name__ == "__main__":
    main()
73
python
# Define some variables
num1 = 5
num2 = 3

# Use the 'and' operator to check if two conditions are both true
if (num1 > 0) and (num2 > 0):
    print("Both numbers are positive")
else:
    print("One or both numbers are non-positive")
74
python
# Define some variables
x = 5
y = 10
z = x

# Use the 'and' operator
if x > 0 and y < 20:
    print("x is positive and y is less than 20")

# Use the 'is' operator to compare objects (not values!) for identity
if z is x:
    print("x and z refer to the same object")
else:
    print("x and z do not refer to the same object")
75
python
# Sample data
numbers = [1, 2, 3, 4, 5]

# Lambda function to check if a number is even
is_even = lambda num: num % 2 == 0

# Filter the list using and with the lambda function
filtered_list = list(filter(lambda num: is_even(num) and num > 2, numbers))

print("Numbers greater than 2 and even:")
for num in filtered_list:
    print(num)
76
python
def outer_function(x):
    def inner_function():
        if x > 0 and x < 10: # Both conditions must be true for the print statement to execute
            print("x is in the range of 1-9.")
        
    inner_function()

outer_function(5) # Output: x is in the range of 1-9.
77
python
# Define some variables
a = True
b = False

# Use the and operator
result1 = a and b
print("a and b:", result1)

# Interpretation: When both conditions (a and b) are true, then the and expression returns true; otherwise, it returns false.

# Use the not operator
result2 = not a
print("not a:", result2)

# Interpretation: The not operator negates (inverts) the given boolean value. So, if a is True, then not a is False; and vice versa.

# Combine and, not, and multiple conditions using parentheses for clarity
result3 = (not a) and b or a
print("(not a) and b or a:", result3)

# Interpretation: This expression evaluates to True only when a is False and b is true. Otherwise it evaluates to False.
78
python
# Define some variables
num1 = 5
num2 = 10
is_even_num1 = num1 % 2 == 0
is_even_num2 = num2 % 2 == 0

# Use and operator to check if both numbers are even
if is_even_num1 and is_even_num2:
    print(f"Both {num1} and {num2} are even numbers.")

# Use or operator to check if at least one of the numbers is even
elif is_even_num1 or is_even_num2:
    print(f"Either {num1} or {num2}, or both, are even numbers.")

# Check if neither number is even
else:
    print(f"Both {num1} and {num2} are odd numbers.")
79
python
# Function with no implementation using pass keyword
def function_with_no_implementation():
    pass

# Function with condition using and keyword
def check_age(age):
    can_vote = age >= 18
    can_drive = age >= 16
    return can_vote and can_drive

# Main program
if __name__ == "__main__":
    age = int(input("Enter your age: "))
    if check_age(age):
        print("You can both vote and drive.")
    else:
        print("You can't vote or drive, or you can only vote.")

# Calling the function with no implementation
function_with_no_implementation()
80
python
def divide(x, y):
    """Divide two numbers"""
    if y == 0:
        # Raise ZeroDivisionError exception
        raise ValueError("Cannot divide by zero")
    result = x / y
    return result

def main():
    num1 = int(input("Enter the first number: "))
    num2 = int(input("Enter the second number: "))

    # Check if both numbers are positive
    if num1 > 0 and num2 > 0:
        try:
            quotient = divide(num1, num2)
            print(f"The quotient of {num1} and {num2} is: {quotient}")
        except Exception as e:
            # Print the error message if an exception occurs
            print(e)
    else:
        print("Both numbers should be positive")

if __name__ == "__main__":
    main()
81
python
def check_age(age):
 """
 This function checks if a given age is valid (above 18)
 """

 # First, we check if the input 'age' is an integer
 if isinstance(age, int):
 # Then, we use the logical AND operator 'and' to check if the age is above 18
 if age > 18:
 return True
 else:
 return False
 else:
 print("Error: The input must be an integer.")
 return None
82
python
def divide(x, y):
    """Divides x by y"""
    try:
        result = x / y
    except ZeroDivisionError:
        print("Cannot divide by zero")
        return None
    else:
        return result

def main():
    num1 = int(input("Enter the first number: "))
    num2 = int(input("Enter the second number: "))

    if num2 != 0:
        print(f"{num1} divided by {num2} is equal to {divide(num1, num2)}")
    else:
        print("Error: Division by zero")

if __name__ == "__main__":
    main()
83
python
# Variables definition
num = 0
limit = 10

# Checking if a number is greater than zero and less than a limit using 'and'
print("Using 'and':")

while num != limit:
    if num > 0 and num < limit:
        print(f"Number: {num}, It should be increased.")
        num += 1
    else:
        print(f"Number: {num}, It's either greater than or equal to the limit.")
        break

print(f"\nThe number is now: {num} and it's equal to the limit.")

# Using 'and' in a while condition
print("Using 'and' in a while condition:")

num = 0

while num != limit and num >= 0:
    print(f"Number: {num}")
    if num == limit:
        break
    num += 1
84
python
numbers = [1, 2, 3, 4, 5, 6]

# Using 'and' for logical operations
found_element = False
for num in numbers:
    if num < 0 and num % 2 == 0: # condition1 (less than zero) and condition2 (even number)
        found_element = True
        print(f"Found an element {num} which is less than 0 and even.")
        break
if not found_element:
    print("No such element exists in the list.")
85
python
def filter_even_numbers(numbers):
    """Generator function to filter out even numbers between 2 and 5"""
    for num in numbers:
        if num > 1 and num % 2 == 0:  # Filter condition using 'and' operator
            yield num

# Test the generator function
numbers = [1, 2, 3, 4, 5, 6, 7, 8]
filtered_numbers = filter_even_numbers(numbers)

print("Filtered even numbers:")
for num in filtered_numbers:
    print(num)
86
python
# Define a function that takes an integer as an argument and returns its absolute value using abs() function
def get_absolute_value(num):
    return abs(num)

# Define a function that checks if a number is positive or zero, using and keyword
def is_positive(num):
    return (num > 0) and (num is not None)

# Take user input as a number
number = int(input("Enter a number: "))

# Check if the number is positive using is_positive function and print the result
if is_positive(number):
    print(f"The given number {number} is positive.")
else:
    # If the number is not positive, get its absolute value using get_absolute_value function and print the result
    print(f"The given number {number} is not positive. Its absolute value is:")
    print(get_absolute_value(number))
87
python
# A list of boolean values
boolean_values = [True, False, True, False, True]

# Using 'and' to check multiple conditions
if condition1 and condition2:
    print("Both condition1 and condition2 are True")

# Applying 'and' for all elements in a list
if all(value is True for value in boolean_values):
    print("All boolean values in the list are True")
else:
    print("There is at least one False value in the list")
88
python
# A list of some boolean values
boolean_values = [True, False, True, False, True]

# Using 'and' operator
print("Using 'and' operator")
if True and False:
    print("This block will not be executed as both conditions are not true.")
else:
    print("Both conditions were checked, but the result is false.")

# Checking all elements in a list are True using 'any' operator
print("\nUsing 'any' operator")
if any(condition for condition in boolean_values if not condition):
    print("At least one condition was False.")
else:
    print("All conditions were true.")

# Checking all elements in a list are True using 'and' operator
print("\nUsing 'and' operator (for checking all elements)")
if all(condition for condition in boolean_values):
    print("All conditions were true.")
else:
    print("At least one condition was False.")
89
python
# Boolean AND operation
x = True
y = False
z = x and y
print("x =", x)
print("y =", y)
print("x and y =", z)

# Printing ASCII value of characters
char1 = 'A'
char2 = 'a'
ascii_val1 = ord(char1)
ascii_val2 = ord(char2)
print("ASCII value of character {} is: {}".format(char1, ascii_val1))
print("ASCII value of character {} is: {}".format(char2, ascii_val2))
90
python
def count_bits(num):
    """Return the number of bits set to 1 in the given integer."""
    return sum([int(bit) for bit in bin(abs(num))[2:].zfill(8)[::-1]])

def has_three_bits_set(x, y):
    """Check if two numbers have exactly three bits set to 1."""
    return count_bits(x) == 3 and count_bits(y) == 3 and x != y

if __name__ == "__main__":
    num1 = int(input("Enter the first number: "))
    num2 = int(input("Enter the second number: "))

    if has_three_bits_set(num1, num2):
        print(f"Both numbers have exactly three bits set to 1.")
        print(f"Binary representation of {num1}: {bin(num1)[2:]}")
        print(f"Binary representation of {num2}: {bin(num2)[2:]}")
    else:
        print("The numbers do not meet the criteria.")
91
python
# Define some variables
x = 10
y = 20
z = False

# Using and operator to check if two conditions are true
if x > 5 and y < 30:
    print("Condition 1 is true")

# Using bool function to check if a condition is true or false
if bool(x > 5) and bool(y < 30):
    print("Both conditions are true")

# Or check if at least one of the conditions is true
if bool(x > 5) or bool(z):
    print("At least one condition is true")
92
python
# Define a binary string
binary_string = b'1101011110110101'

# Create a bytearray from the binary string
byte_array = bytearray(binary_string)

# Manipulate the bytearray using bitwise 'and' operator with another bytearray
mask = bytearray([0x55, 0xAA])  # Define a mask for demonstration purposes
result = byte_array & mask

# Print out the original bytearray, mask and result for comparison
print("Original Bytearray : {0}".format(byte_array))
print("Mask               : {0}".format(mask))
print("Result             : {0}".format(result))
93
python
# Define two bytes variables
byte_var1 = b'Hello'  # This is a string of bytes, equivalent to byte array [72, 101, 108, 108, 111]
byte_var2 = b'World'   # This is another string of bytes, equivalent to byte array [87, 111, 114, 108, 100]

# Define a boolean variable using and operator
boolean_var = (byte_var1 == b'Hello') and (byte_var2 == b'World')

print("Byte variable 1: ", byte_var1)
print("Byte variable 2: ", byte_var2)
print("Boolean variable: ", boolean_var)

# Comparing bytes using '==' operator
if byte_var1 == byte_var2:
    print("Both variables have the same content.")
else:
    print("Variables have different content.")

# Bitwise and operation between two bytes
byte_and = byte_var1 & byte_var2
print("Bitwise AND of both bytes: ", byte_and)
94
python
# Define some functions
def function1(x):
    return x > 0

def function2(x):
    return x % 2 == 0

def composite_function(x):
    return x > 0 and x % 2 == 0

# Check if a function is callable
print("Is function1 callable? ", callable(function1)) # True
print("Is composite_function callable? ", callable(composite_function)) # True

# Use and operator to combine the conditions
def check_even_positive(x):
    return x > 0 and x % 2 == 0

if check_even_positive(10):
    print("10 is even and positive")

if check_even_positive(-5):
    print("-5 is even and positive")
95
python
# Define some variables
num = 10
is_even = num % 2 == 0
is_positive = num > 0

print("Number is even:", is_even)
print("Number is positive:", is_positive)

# Use and operator to check if number is even and positive
if is_even and is_positive:
    print(f"The number {num} is even and positive")
else:
    print(f"The number {num} is not even or not positive")

# Use chr() function to print character at index 0 of ASCII string
character = chr(65)
print("Character represented by ASCII code 65:", character)
96
python
class ComplexNumber:
    def __init__(self, real=0.0, imaginary=0.0):
        self.real = real
        self.imaginary = imaginary

    @classmethod
    def from_polar_coordinates(cls, r, theta):
        return cls(r * math.cos(theta), r * math.sin(theta))

    def __add__(self, other):
        result = ComplexNumber(
            self.real + other.real,
            self.imaginary + other.imaginary
        )
        return result

    def conjugate(self):
        return ComplexNumber(self.real, -self.imaginary)

if __name__ == "__main__":
    num1 = ComplexNumber(1.0, 2.0)
    num2 = ComplexNumber(3.0, 4.0)

    print("num1: ", num1)
    print("num2: ", num2)

    print("sum: ", num1 + num2)
    print("difference: ", num1 - num2)

    num3 = ComplexNumber.from_polar_coordinates(5.0, math.pi/4)
    print("num3 from polar: ", num3)
    print("conjugate of num1: ", num1.conjugate())
97
python
# Function that checks if a number is even and positive
def is_even_positive(num):
    return num > 0 and num % 2 == 0

# Test some numbers
numbers = [1, -3, 4, 7]
for num in numbers:
    print(f"Number {num} is even and positive: {'True' if is_even_positive(num) else 'False'}")
98
python
# Demonstrating the usage of 'and' operator
def is_positive(num):
    return num > 0

def is_even(num):
    return num % 2 == 0

number = int(input("Enter a number: "))
if is_positive(number) and is_even(number):
    print(f"The number {number} is positive and even.")
else:
    print(f"The number {number} is not positive and/or not even.")

# Demonstrating the usage of 'complex' data type
import cmath

real_part = 3.0
imaginary_part = 2.0
complex_num = complex(real_part, imaginary_part)

print("Real part:", real_part)
print("Imaginary part:", imaginary_part)
print("Complex number:", complex_num)
print("Conjugate of the complex number:", complex_num.conjugate())
print("Modulus (magnitude) of the complex number:", abs(complex_num))
print("Phase angle of the complex number:", cmath.phase(complex_num))
99
python
class MyClass:
    def __init__(self, a, b):
        self.a = a
        self.b = b
        self.c = 0

    def enable_c(self):
        self.c = 1

    def disable_c(self):
        delattr(self, 'c')

if __name__ == "__main__":
    obj = MyClass(1, 2)
    print("Initial state: a={}, b={}, c={}".format(obj.a, obj.b, hasattr(obj, 'c')))

    obj.enable_c()
    print("After enabling c: a={}, b={}, c={}".format(obj.a, obj.b, hasattr(obj, 'c')))

    obj.disable_c()
    print("After disabling c: a={}, b={}, c={}".format(obj.a, obj.b, hasattr(obj, 'c')))

# Output:
# Initial state: a=1, b=2, c=False
# After enabling c: a=1, b=2, c=True
# After disabling c: a=1, b=2, c=False
100
python
# Create a dictionary with some key-value pairs
my_dict = {
    "name": "John Doe",
    "age": 30,
    "is_student": False
}

# Use and operator to check if 'name' is 'John Doe' and 'age' is greater than 25
if my_dict["name"] == "John Doe" and my_dict["age"] > 25:
    print("Condition met!")
else:
    print("Condition not met.")

# Now let's check if the name is 'John Doe' and age is greater than or equal to 30 (or we can use 'is_student' as a condition)
if my_dict["name"] == "John Doe" and (my_dict["age"] >= 30 or not my_dict["is_student"]):
    print("Condition met!")
else:
    print("Condition not met.")
101
python
# Define a dictionary with some keys and values
my_dict = {
    'name': 'John Doe',
    'age': 30,
    'city': 'New York'
}

# Use an if statement with the 'and' keyword to check if a condition is met
if my_dict and 'name' in my_dict:
    print("The name is:", my_dict['name'])
else:
    print("Dictionary is empty or 'name' key is not present.")

# Use the dir() function to list all attributes and methods of an object or built-in functions
print("\nListing all attributes and methods of the dictionary object using dir():")
print(dir(my_dict))
102
python
# Define two variables
num1 = 10
num2 = 3

# Use the and operator to check if num1 is greater than 5 and num2 is even
if num1 > 5 and num2 % 2 == 0:
    print(f"{num1} is greater than 5 and {num2} is even")
else:
    print("Either num1 is less than or equal to 5 or num2 is odd")

# Use the divmod() function to find quotient and remainder of division of num1 by num2
quotient, remainder = divmod(num1, num2)

print(f"The quotient of {num1} divided by {num2} is {quotient} and the remainder is {remainder}")
103
python
# List of tuples representing student data
students_data = [("John Doe", 20, True), ("Jane Smith", 18, False), ("Mike Johnson", 22, True)]

# Function to check eligibility (age > 18 and is_student_active)
def check_eligibility(student):
    name, age, is_student_active = student
    return age > 18 and is_student_active

# Filter students based on given condition using filter and map along with enumerate
filtered_students = list(filter(check_eligibility, enumerate(students_data, 1)))

# print the name and index of eligible students
for index, student in enumerate(filtered_students):
    name, _ = student
    print(f"Student {index} is named {name}")
104
python
# This program checks if two numbers are within a certain range using and operator
def is_within_range(num, start, end):
 """
 :param num: The number to check.
 :param start: The minimum allowed value.
 :param end: The maximum allowed value.
 :return: True if the number is within the given range, False otherwise.
 """
 return start <= num <= end

# This program evaluates a simple arithmetic expression using eval() function
def calculate(expression):
 """
 :param expression: A string representing an arithmetic expression.
 :return: The result of the evaluation.
 """
 result = eval(expression)
 print(f"Result: {result}")
 return result

if __name__ == "__main__":
 # Check if a number is within the range (10, 20) using and operator
 num = int(input("Enter a number: "))
 if is_within_range(num, 10, 20):
 print("The number is within the range.")
 else:
 print("The number is not within the range.")

 # Evaluate an arithmetic expression using eval() function
 expression = input("Enter an arithmetic expression: ")
 calculate(expression)
105
python
# This program checks if both a number is even and greater than 5
number = 10
is_even = number % 2 == 0
is_greater = number > 5

if is_even and is_greater:
    print("The number is even and greater than 5.")
else:
    print("The number is not even or not greater than 5.")
106
python
# Define the list of numbers with their flags (odd or even)
numbers = [(2, True), (3, False), (5, True), (1, False), (6, True)]

# Filter out the numbers that are odd and have an even flag
filtered_numbers = filter(lambda x: x[0] % 2 == 0 and x[1], numbers)

# Convert the result to a list since filter returns an iterator
filtered_numbers = list(filtered_numbers)

print("Filtered Numbers:")
for number in filtered_numbers:
    print(number[0])

# And operator demonstration without using filter
even_odd, is_even = 7, True
if even_odd % 2 == 0 and is_even:
    print("7 is an even number")
else:
    print("7 is an odd number")
107
python
# Example 1: Using 'and' operator for Boolean expressions
def is_valid(age, height):
    # Check if age is greater than 18 and height is less than 5.5 (in meters)
    return age > 18 and height < 0.5

age = 25
height = 1.65
if is_valid(age, height):
    print("Valid")
else:
    print("Invalid")

# Example 2: Using 'and' operator with floating-point numbers
def is_number_close_to(num, target, tolerance=0.01):
    return abs(num - target) < tolerance

num = 3.14159
target = 3.14
if is_number_close_to(num, target):
    print("Number is close to the target")
else:
    print("Number is not close to the target")
108
python
# Define some variables
num1 = 5
num2 = 10
is_even_num1 = num1 % 2 == 0
is_even_num2 = num2 % 2 == 0

# Use and for conditional expressions
if is_even_num1 and is_even_num2:
    print("Both numbers are even.")
else:
    print("One or both numbers are odd.")

# Use format for string formatting
name = "John Doe"
age = 30
print("Name: {0} \nAge: {1}".format(name, age))
109
python
# Define two sets
set1 = {1, 2, 3, 4, 5}
set2 = {3, 4, 5, 6, 7}

# Perform set operations using 'and' keyword
# The '&' operator is equivalent to using 'and' for sets in Python
result1 = set1 & set2
print("Set intersection using 'and': ", result1)

# Create a frozenset from one of the sets
frozen_set = frozenset(set1)

# Compare the original set and the frozen set using 'and' keyword
result2 = frozen_set & set2
print("Set intersection using 'and' on frozen set: ", result2)

# Check if two sets are identical (using '==') and print result
if set1 == set2:
    print("Both sets are identical.")
else:
    print("Both sets are different.")
110
python
class MyClass:
    def __init__(self, a, b):
        self.a = a
        self.b = b
        self.c = None

    def method_1(self):
        return self.a + self.b

    def method_2(self):
        self.c = 42

def main():
    obj = MyClass(3, 5)
    
    # Check if 'obj' has both 'method_1' and 'method_2' attributes using getattr()
    if not (hasattr(obj, 'method_1') and hasattr(obj, 'method_2')):
        print("Error: Object does not have method_1 and method_2.")
        return
    
    # Call methods using getattr()
    print("Result of method_1():", getattr(obj, 'method_1')())
    getattr(obj, 'method_2')()
    print("Value of c after method_2() call:", obj.c)

if __name__ == "__main__":
    main()
111
python
# Define some global variables
x = 0
y = 0

def my_function():
    global x, y  # Declare x and y as global variables in this function
    x = 10
    y = 20

if x < 5 and y > 10:  # Logical AND operation between two conditions
    print("Condition is met")
else:
    print("Condition is not met")

my_function()  # Change the values of global variables x and y

if x < 5 and y > 10:  # Check conditions after changing the global variables
    print("New condition is met")
else:
    print("New condition is not met")

print("Global variables' values: x =", x, "and y =", y)
112
python
# Define a simple class MyClass
class MyClass:
    def __init__(self, value):
        self.value = value

# Create an instance of MyClass
my_instance = MyClass(5)

# Check if the instance has an attribute 'other' and its value is greater than 10
# using 'and' and 'hasattr' combination
if not hasattr(my_instance, 'other') or my_instance.other > 10:
    print("Condition met")
else:
    print("Condition not met")

# Set a new attribute 'other' on the instance with a value less than 10
my_instance.other = 5

# Check if the instance has an attribute 'other' and its value is greater than 10
# using 'and' and 'hasattr' combination (this time, the condition should not be met)
if not hasattr(my_instance, 'other') or my_instance.other > 10:
    print("Condition met")  # This will never print since we set other to 5 previously
else:
    print("Condition not met")
113
python
# Using 'and' operator to combine conditions
def is_even(num):
    return num % 2 == 0

def is_positive(num):
    return num > 0

if is_even(5) and is_positive(5):
    print("Number is even and positive")
else:
    print("Number is not even or not positive")
# Output: Number is even and positive

# Using 'hash' function to generate hash values
def my_hash(key):
    h = 5381
    for char in str(key):
        h = (h * 33) ^ ord(char)
    return h

key = "Python"
hash_value = my_hash(key)
print(f"Hash value of '{key}' is: {hash_value}")
# Output: Hash value of 'Python' is: 2146530822
114
python
# Define a function with some conditions
def my_function(a, b):
    if (a > 0) and (b > 0): # Using 'and' operator to check both conditions
        return "Both a and b are positive"
    else:
        return "Either a or b is not positive"

# Using help() function to get documentation of built-in functions
print(help(print)) # Prints the documentation for print() function
print(help(abs))  # Prints the documentation for abs() function
115
python
# Define two binary numbers as decimal integers
num1 = 0b1110  # binary number: 1110 = 14 in decimal
num2 = 0b1101  # binary number: 1101 = 13 in decimal

# Perform bitwise AND operation using the 'and' operator
result_bitwise = num1 & num2

# Print binary numbers and their bitwise AND result
print(f"Binary number 1: {bin(num1)[2:]} (decimal: {num1})")
print(f"Binary number 2: {bin(num2)[2:]} (decimal: {num2})")
print(f"Bitwise AND result: {bin(result_bitwise)[2:]} (decimal: {result_bitwise})")

# Convert decimal result to hexadecimal using the 'hex()' function
result_hex = hex(result_bitwise)

# Print hexadecimal representation of the bitwise AND result
print(f"Hexadecimal representation: 0x{result_hex}")
116
python
# Define two variables
num1 = 10
num2 = 20

# Use and operator for logical AND operation
print("num1 is greater than 5 and num2 is greater than 10:")
if (num1 > 5) and (num2 > 10):
    print(True)
else:
    print(False)

# Use id() to check the memory address of variables
print("\nMemory addresses of num1 and num2:")
print("Address of num1:", hex(id(num1)))
print("Address of num2:", hex(id(num2)))
117
python
# Get user input for two numbers
num1 = float(input("Enter first number: "))
num2 = float(input("Enter second number: "))

# Check if both numbers are positive using the and operator
if num1 > 0 and num2 > 0:
    print("Both numbers are positive.")
else:
    print("One or both of the numbers is not positive.")

# Perform an operation on the numbers if they are both positive
if num1 > 0 and num2 > 0:
    result = num1 + num2
    print(f"The sum of {num1} and {num2} is {result}.")
118
python
# This example checks if a number is positive and even
def is_positive_even(number):
    """
    This function checks if a given number is positive and even.
    :param number: An integer number.
    :return: True if the number is positive and even, False otherwise.
    """
    return number > 0 and number % 2 == 0

if __name__ == "__main__":
    num = int(input("Enter an integer: "))

    if is_positive_even(num):
        print(f"{num} is a positive even number.")
    else:
        if num > 0:
            print(f"{num} is a positive odd number or a negative number.")
        else:
            print(f"{num} is a negative even number.")
119
python
# Defining some functions and classes for this example
def is_positive(num):
    """ checks if a number is positive """
    return num > 0

class MyNumber:
    def __init__(self, value):
        self.value = value

    def is_positive(self):
        """ checks if an instance of MyNumber is positive """
        return self.value > 0

# Testing the usage of and and isinstance()
num1 = 5
num2 = -3
num3 = MyNumber(7)

# Using 'and' to combine conditions
if is_positive(num1) and (isinstance(num2, int) or isinstance(num2, float)):
    print("Both conditions are met")
else:
    print("At least one condition is not met")

if num3.is_positive() and isinstance(num3, MyNumber):
    print("Both conditions for 'MyNumber' instance are met")
120
python
# Defining some base classes
class BaseClass1:
    def __init__(self, value):
        self.value = value

class BaseClass2:
    pass

class DerivedClass(BaseClass1, BaseClass2):
    pass

# Function demonstrating the usage of and and issubclass
def check_inheritance(base1, base2, derived):
 if (isinstance(derived, base1) and issubclass(derived, base2)):
 print(f"Derived class '{derived.__name__}' is both an instance of {base1.__name__} and a subclass of {base2.__name__}")
 else:
 print(f"Derived class '{derived.__name__}' is not an instance of {base1.__name__} or a subclass of {base2.__name__}")

# Instantiating base classes and derived class
base1_instance = BaseClass1("Base1 value")
base2_instance = BaseClass2()
derived_instance = DerivedClass("Derived value")

# Calling check_inheritance function
check_inheritance(BaseClass1, BaseClass2, BaseClass1) # This should print: BaseClass1 is both an instance of BaseClass1 and a subclass of BaseClass2 (False due to type mismatch)
check_inheritance(BaseClass1, BaseClass2, DerivedClass) # This should print: Derived class 'DerivedClass' is both an instance of BaseClass1 and a subclass of BaseClass2
check_inheritance(BaseClass1, BaseClass2, BaseClass1) # This should print: BaseClass1 is both an instance of BaseClass1 and a subclass of BaseClass2 (False due to type mismatch)
121
python
import itertools

# Function to check if two numbers are even and positive
def is_even_and_positive(num1, num2):
 return (num1 > 0) and (num2 % 2 == 0)

# Generate all pairs of even and positive numbers from the given range
nums = list(range(1, 10))
evens = [x for x in nums if x % 2 == 0]
positives = [x for x in nums if x > 0]

# Use itertools.product() to generate all possible pairs of numbers from lists
pairs = list(itertools.product(evens, positives))

# Filter out the invalid pairs using the is_even_and_positive function
valid_pairs = [pair for pair in pairs if is_even_and_positive(*pair)]

print("Valid Pairs:")
for pair in valid_pairs:
 print(f"({pair[0]}, {pair[1]})")
122
python
# List of strings
my_list = ['apple', 'banana', '', 'orange']

# Condition with and and len()
if not (len(my_list) < 2 and my_list[-1] == ''):
    print("The list has more than one item and the last item is not empty.")
else:
    print("The list has less than two items or the last item is empty.")

# Output: The list has less than two items or the last item is empty.
123
python
# Define a list
numbers = [1, 2, 3, 4, 5]

# Set a condition with 'and'
condition = (len(numbers) > 0) and (numbers[0] > 3)

if condition:
    print("The first number is greater than 3 and the list has elements.")
else:
    print("Either the list is empty or the first number is less than or equal to 3.")

# Checking another condition with 'and' using two lists
list1 = [1, 2, 3]
list2 = [4, 5, 6]
condition = (len(list1) > 0) and (len(list2) > 0)

if condition:
    print("Both lists have elements.")
else:
    print("At least one of the lists is empty.")
124
python
def my_function(x, y):
    """
    This function checks if two numbers are equal and greater than 10.
    """
    if x > 10 and y > 10:
        print("Both x and y are greater than 10.")
        result = x + y
    else:
        print("Either x or y is not greater than 10.")
        result = None

    # Use locals() to print all local variables in the current scope.
    print("Local variables:")
    for key, value in locals().items():
        if key != "self":
            print(f"{key}: {value}")

    return result

if __name__ == "__main__":
    my_function(15, 20)
125
python
# Define a list of tuples with two integer elements
numbers = [(2, 3), (5, 7), (1, 9), (8, 2)]

# Function to check if first number is greater than 1 and second number is odd
def condition(num):
    first, second = num
    return first > 1 and second % 2 != 0

# Use map to apply the function on each tuple in the list
result = list(map(condition, numbers))

print("Numbers which satisfy the condition:")
print(result)
126
python
# Define some numbers
num1 = 5
num2 = 10
num3 = 15

# Use and to combine two conditions
if num1 > 2 and num2 > 4:
    print("Both num1 and num2 are greater than 2 and 4 respectively.")

# Use max to find the greatest number among three numbers
largest_number = max(num1, num2, num3)
print("The largest number among", num1, ",", num2, "and", num3, "is:", largest_number)
127
python
import numpy as np
128
python
# Define some variables
num1 = 5
num2 = 10
num3 = -3

# Use and operator to check if two conditions are true
if (num1 > 0) and (num2 > 0):
    print("Both num1 and num2 are positive")

# Use min function to find the minimum of three numbers
min_num = min(num1, num2, num3)
print("The minimum number is:", min_num)
129
python
# List of numbers
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]

# Filter function that checks if number is even
def is_even(number):
    return number % 2 == 0

# Iterator from filter function and list
iter_filtered = filter(is_even, numbers)

# Using 'and' to check conditions
print("Even numbers using 'and':")
try:
    even_number = next(iter_filtered)
    print(next(iter_filtered) if even_number and even_number > 0 else None)
except StopIteration:
    print("No even number greater than zero.")

# Using 'and' to combine conditions in a for loop
print("\nEven numbers using 'and' in for loop:")
for number in filter(lambda x: x % 2 == 0 and x > 0, numbers):
    print(number)
130
python
class MyClassA:
    def __init__(self, value_a):
        self.value_a = value_a

class MyClassB:
    def __init__(self, value_b):
        self.value_b = value_b

def main():
    obj_a = MyClassA(10)
    obj_b = MyClassB(20)

    # Using and operator with two boolean expressions
    result = (obj_a.value_a > 5) and (obj_b.value_b > 15)

    if result:
        print("Both conditions are true")
    else:
        print("At least one condition is false")

if __name__ == "__main__":
    main()
131
python
# Definition of binary numbers as decimal values
binary_number_1 = 0b1111  # equal to decimal number 15
binary_number_2 = 0b1010  # equal to decimal number 10

# Bitwise AND operation between two binary numbers
result_bitwise_and = binary_number_1 & binary_number_2
print("Result of bitwise AND: {0} (binary) = {1} (decimal)".format(bin(result_bitwise_and)[2:], result_bitwise_and))

# Converting an octal number to decimal
octal_number = 0o37  # equal to decimal number 23 + 7 = 30
decimal_number = int(oct(octal_number))
print("Decimal equivalent of {0} (octal) is: {1}".format(octal_number, decimal_number))
132
python
# Set file path and access conditions
file_path = "example.txt"
readable = True
writable = False

# Check if the file exists and is readable
if os.path.exists(file_path) and os.access(file_path, os.R_OK):
    # Open the file in read-only mode
    with open(file_path, 'r') as file:
        content = file.read()
        print("File contents:", content)
else:
    print("Error: File does not exist or is not readable")

# If the file is writable, you can also write to it
if writable and os.access(file_path, os.W_OK):
    with open(file_path, 'w') as file:
        new_content = "This is new content."
        file.write(new_content)
        print("File has been updated with new content.")
133
python
# This program checks if a character is an uppercase letter and alphabet, using and and ord()

def is_alpha_upper(character):
 """
 This function checks if given character is an uppercase alphabet.
 """
 return (ord(character) >= 65 and ord(character) <= 90) or (ord(character) >= 65 and ord(character) <= 90)

# Testing the function
for char in "ABCDEFGHIJKLMNOPQRSTUVWXYZ":
 print(f"The character {char} is an uppercase alphabet: {is_alpha_upper(char)}")

for char in "abcdefghijklmnopqrstuvwxyz1234567890!@#":
 print(f"The character {char} is an uppercase alphabet: {is_alpha_upper(char)}")
134
python
# Simple usage of 'and' keyword in if statement
num1 = 5
num2 = 10

if num1 > 0 and num2 > 0:
    print("Both numbers are positive.")
else:
    print("One or both numbers are not positive.")

# Usage of 'and' keyword with variables and constants
boolean_expression = (num1 > 0) and (num2 % 2 == 0)
if boolean_expression:
    print("Num1 is positive and Num2 is even.")
else:
    print("Condition is false.")

# Usage of 'pow' function to raise a number to an exponent
base = 2
exponent = 3
result = pow(base, exponent)
print(f"Result of {base} raised to the power of {exponent} is: {result}")
135
python
# Set some variables
num1 = 5
num2 = 10

# Use the 'and' operator to check if two conditions are true
if (num1 > 0) and (num2 > 0):
    print("Both numbers are positive.")

# Use the 'print()' function to display a message
print("The first number is: ", num1)
print("The second number is: ", num2)
136
python
class MyClass:
    def __init__(self, value1, value2):
        self.value1 = value1
        self.value2 = value2

    def __truthvalue__(self):
        if self.value1 and self.value2:
            return True
        else:
            return False

a = MyClass(True, True)
print(bool(a))  # Output: True

b = MyClass(False, True)
print(bool(b))  # Output: False

c = MyClass(False, False)
print(bool(c))  # Output: False
137
python
# Define a list of numbers
numbers = [1, 2, 3, 4, 5]

# Use range function to generate sequence of numbers
sequence = range(len(numbers))

# Iterate through the sequence and check conditions
for index in sequence:
    # Check if the current number is even and greater than 2
    if (numbers[index] % 2 == 0) and (numbers[index] > 2):
        print(f"The number {numbers[index]} satisfies the condition.")
138
python
# Define a list with some values
numbers = [1, 2, 3, 4, 5]

# Use the 'and' operator to check if a condition is true for all given expressions
print("Numbers greater than 3:")
for num in numbers:
    if num > 3:
        print(repr(num), end=" ")
        continue
    print(f"{num} is less than or equal to 3")
    break

# Use 'and' operator to combine two conditions
print("\nBoth conditions are true:")
x = 5
y = 10
if x > 3 and x < y:
    print("x is between 3 and y")
else:
    print("One or both conditions are false")

# Use 'repr()' function to print the string representation of an object
print("\nString representation using repr():")
my_string = "Hello, World!"
print(repr(my_string))
139
python
# Define a list of integers
numbers = [1, 2, 3, 4, 5]

# Use and operator to check if an element is even and greater than 3
print("Numbers in the list that are even and greater than 3:")
for num in numbers:
    if num > 3 and num % 2 == 0:
        print(num)

# Use reversed function to iterate through a list in reverse order
print("\nElements in the list 'numbers' in reverse order:")
for num in reversed(numbers):
    print(num)
140
python
# Define variables
num1 = 5.6234
num2 = 2
limit = 3

# Check if condition is true using and keyword
if num1 > 5 and num2 < 3:
    print("Condition 1 is true")
else:
    print("Condition 1 is false")

# Round a number using round() function
result = round(num1, 2)
print(f"Rounded value of num1 to 2 decimal places: {result}")

# Check if condition is true with rounding using and keyword
if round(num1, 2) > limit and num2 < 3:
    print("Condition 2 is true")
else:
    print("Condition 2 is false")
141
python
# Define two sets
set1 = {1, 2, 3, 4, 5}
set2 = {4, 5, 6, 7, 8}

# Use the and keyword to check if two elements are in both sets
if 4 in set1 and 5 in set2:
    print("Four and Five are in both sets")

# Create a new set that is the intersection of set1 and set2 using the & operator
intersection = set1 & set2
print("Intersection of set1 and set2:", intersection)

# Use the and keyword to check if an element is in both sets and also greater than 3
if 5 in set1 and 5 in set2 and 5 > 3:
    print("Five is in both sets and is greater than 3")

# Use the sets for membership testing with the in keyword
if 6 in set1 or 7 in set2:
    print("Either six or seven is in one of the sets")
142
python
# Define a class with some initial attributes
class MyClass:
    def __init__(self, name, age):
        self.name = name
        self.age = age

# Create an instance of the class
obj = MyClass("John Doe", 30)

# Use and to check multiple conditions
if obj.age > 25 and obj.age < 40:
    print("The person is in the desired age range.")

# Use setattr to dynamically set attributes
new_attribute = "greeting"
value = "Hello, I'm {}!".format(obj.name)
setattr(obj, new_attribute, value)

# Access the new attribute using getattr
print(getattr(obj, new_attribute))
143
python
# Define a list
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]

# Use and keyword for condition check
if (len(numbers) > 5) and (numbers[0] % 2 == 0):
    print("The list has more than 5 elements and the first element is even")
else:
    print("The conditions are not met")

# Use slicing to extract a subset of the list
start_index = 3
end_index = len(numbers)
sublist = numbers[start_index: end_index]
print("Sublist: ", sublist)
144
python
# List of numbers to be sorted
numbers = [5, 2, 8, 1, 6, 3]

# Using the 'and' keyword for condition checks
even_numbers = []
for number in numbers:
    if number % 2 == 0 and number > 1:
        even_numbers.append(number)

print("Even numbers greater than 1 are:", even_numbers)

# Using the 'sorted' keyword to sort a list
sorted_numbers = sorted(numbers)
print("Sorted list of numbers is:", sorted_numbers)
145
python
class MyClass:
    @staticmethod
    def static_method(a, b):
        """This method demonstrates the usage of @staticmethod"""
        return a > b and a > 0 and b > 0

    def __init__(self, num1, num2):
        self.num1 = num1
        self.num2 = num2

if __name__ == "__main__":
    # Calling static method on the class using class name
    print(MyClass.static_method(3, 5))

    # Creating an instance of MyClass and calling the same method on it
    my_instance = MyClass(10, -2)
    print(my_instance.static_method(10, -2))
    print(my_instance.static_method(10, 5))
    print(my_instance.static_method(5, 10))
146
python
def main():
    # Define some variables
    num1 = 5
    num2 = 10
    str1 = "Hello"
    str2 = "World"

    # Boolean expressions using and operator
    print("Expression 1: ", (num1 > 3) and (num2 < 20))
    print("Expression 2: ", ("Python" in str1) and ("Framework" not in str2))

    # Concatenating strings using + or the multiplication operator (*)
    print("Concatenated string using +: ", str1 + " " + str2)
    print("Concatenated string using *: ", str1 * 2 + str2 * 3)

if __name__ == "__main__":
    main()
147
python
# Define a list of numbers
numbers = [1, 2, 3, 4, 5]

# Use logical 'and' operation to check if a number is even and greater than 3
evens_greater_than_three = list(filter(lambda x: x % 2 == 0 and x > 3, numbers))
print("Even numbers greater than 3: ", evens_greater_than_three)

# Use mathematical 'sum' function to find the sum of all elements in a list
total = sum(numbers)
print("Sum of all numbers: ", total)
148
python
# Base class with a method
class Animal:
    def __init__(self, name, color):
        self.name = name
        self.color = color

    def make_sound(self):
        print("The animal makes a sound")

# Derived class 1 that overrides the method from the base class
class Dog(Animal):
    def __init__(self, name, color, breed):
        super().__init__(name, color)
        self.breed = breed

    def make_sound(self):
        print("The dog says: Woof!")

# Derived class 2 that also overrides the method from the base class
class Cat(Animal):
    def __init__(self, name, color, breed=None):
        super().__init__(name, color)
        self.breed = breed if breed else "unknown"

    def make_sound(self):
        print("The cat says: Meow!")

# Instantiating derived classes and calling methods
dog = Dog("Rex", "brown", "Labrador")
cat = Cat("Whiskers", "gray")

# Using and to combine conditions
print(dog.color == "brown" and dog.breed != None)  # This will print: True
print(cat.color == "gray" and cat.breed is not None)  # This will print: True

# Calling make_sound method on instances
dog.make_sound()
cat.make_sound()
149
python
# Define a tuple
numbers = (1, 2, 3, 4, 5)

# Use 'and' to check if multiple conditions are true
# In this case, we'll check if an number is in the tuple and if it's even
def is_even_in_tuple(number, given_numbers):
    return number in given_numbers and number % 2 == 0

# Test some numbers
print(is_even_in_tuple(2, numbers))  # True
print(is_even_in_tuple(1, numbers))  # False
print(is_even_in_tuple(3, numbers))  # False
print(is_even_in_tuple(4, numbers))  # True
150
python
# Define some variables
num1 = 5
num2 = 0
is_positive = True

# Use 'and' keyword to check if num1 is positive number and num2 is not zero
if (num1 > 0) and (num2 != 0):
    print("Numbers can be processed further.")
else:
    print("Error: Cannot process numbers with this condition.")

# Use 'type()' function to check types of variables
print("Type of num1 is:", type(num1))
print("Type of num2 is:", type(num2))
print("Type of is_positive is:", type(is_positive))
151
python
# Let's define some variables
var1 = 5
var2 = 10
var3 = 15

# A dictionary to store variable names as keys and their values as values
vars_dict = {
    'var1': var1,
    'var2': var2,
    'var3': var3
}

# Now let's write a function that checks if two variables have the same value using AND operator
def check_same_value(variable1, variable2):
    return variable1 == variable2

# Let's use items() to iterate through variables and their values in the dictionary
for var_name, var_value in vars_dict.items():
    next_var = vars_dict.get(var_name + '_next', None) # Get the next variable, if exists

    if check_same_value(var_value, next_var):
        print(f"{var_name} and {var_name+'_next'} have the same value.")
152
python
# Let's assume we have two lists:
list1 = [1, 2, 3, 4]
list2 = [5, 6, 7, 8]

# First, let's see how to use the 'and' keyword in Python:
# The 'and' keyword returns True only if both expressions are true.
print("List elements are equal using 'and':")
for i in range(len(list1)):
    if list1[i] == list2[i] and list1[i] > 3:
        print(f"Index {i}: List1[{i}] = {list1[i]} is equal to List2[{i}] = {list2[i]} and greater than 3.")

# Now, let's see how to use the 'zip' function:
print("\nList elements paired using 'zip':")
paired_elements = zip(list1, list2)
for pair in paired_elements:
    element1, element2 = pair
    print(f"Index 0: List1[{list1.index(element1)}] = {element1} and List2[{list2.index(element2)}] = {element2}")
153
python
import os

# Check if a file exists and is a regular file (not a directory)
file_path = "/path/to/your/file.txt"
if os.path.isfile(file_path) and os.path.isdir(file_path) is False:
    print("File exists and is a regular file.")
else:
    print("File does not exist or is a directory.")

# Use 'and' as a logical operator in a different context (comparing two conditions)
if 5 > 3 and "apple" in ["apple", "banana"]:
    print("Condition 1 is True and Condition 2 is True.")
else:
    print("At least one of the conditions is False.")
154
python
import sys

# Function to check if a number is positive
def is_positive(number):
    return number > 0

# Function to get command line arguments
def main():
    print("This program checks if all command line arguments are positive numbers.")

    try:
        for arg in sys.argv[1:]:
            if not is_positive(float(arg)):
                raise ValueError(f"{arg} is not a positive number.")
        print("All command line arguments are positive numbers.")
    except (ValueError, IndexError) as e:
        print(e)

if __name__ == "__main__":
    main()
155
python
import math

# Define some variables
num1 = 5
num2 = 3
boolean_expr1 = num1 > 0
boolean_expr2 = num2 > 0

# Perform some arithmetic operations using math module
addition = num1 + num2
subtraction = num1 - num2
multiplication = num1 * num2
division = num1 / num2
remainder = num1 % num2
square_num1 = math.pow(num1, 2)
square_root_num1 = math.sqrt(num1)

# Use and operator to check if both numbers are positive
if boolean_expr1 and boolean_expr2:
    print("Both numbers are positive.")
else:
    print("At least one number is not positive.")

print(f"Addition: {addition}")
print(f"Subtraction: {subtraction}")
print(f"Multiplication: {multiplication}")
print(f"Division: {division}")
print(f"Remainder: {remainder}")
print(f"Square of {num1}: {square_num1}")
print(f"Square root of {num1}: {square_root_num1}")
156
python
import random

# Define a function that returns a random number between two given numbers
def get_random_number(min, max):
    return random.randint(min, max)

# Generate two random numbers between 0 and 10
num1 = get_random_number(0, 10)
num2 = get_random_number(0, 10)

print("Random number 1: ", num1)
print("Random number 2: ", num2)

# Use the 'and' operator to check if both numbers are even
if (num1 % 2 == 0 and num2 % 2 == 0):
    print(f"Both numbers {num1} and {num2} are even")
else:
    print("At least one of the numbers is odd")
157
python
import datetime

# Define some variables
day = 3
month = 12
year = 2021
is_weekend = False

# Check if today is a weekend using datetime module
now = datetime.date.today()
today_is_weekend = (now.weekday() >= 5) # 5 and 6 corresponds to Saturday and Sunday in Python

# Combine conditions using 'and' keyword
if day == 1 and month in [11, 12] and year > 2020 and (is_weekend or not today_is_weekend):
    print("It's Thanksgiving Day!")
else:
    print("It's not Thanksgiving Day.")
158
python
import time

def is_even(number):
    """
    Check if a given number is even.
    :param number: An integer number
    :return: True if number is even, False otherwise
    """
    return number % 2 == 0

if __name__ == "__main__":
    start_time = time.time()

    number = int(input("Enter an integer number: "))

    if number > 0 and is_even(number):
        print(f"{number} is a positive even number.")
    elif number < 0 and is_even(abs(number)):
        print(f"{-number} is a negative even number.")
    else:
        print("Number is not even or not positive.")

    end_time = time.time()

    execution_time = end_time - start_time
    print(f"\nExecution Time: {execution_time:.10f} seconds")
159
python
import json

# Sample JSON data
data = '''
{
  "users": [
    { "name": "John", "age": 30, "is_active": true },
    { "name": "Jane", "age": 25, "is_active": false },
    { "name": "Doe", "age": 45, "is_active": true }
  ]
}
'''

# Parse JSON data
parsed_data = json.loads(data)

# Filter users based on condition
filtered_users = [user for user in parsed_data["users"] if user["age"] > 30 and user["is_active"] is True]

print("Users who are older than 30 and active:")
for user in filtered_users:
    print(f"Name: {user['name']}, Age: {user['age']}")
160
python
import csv

# Function to validate if a given number is even
def is_even(number):
 if number % 2 == 0:
 return True
 else:
 return False

# Function to validate if a given string is empty or not
def is_empty_string(string):
 if len(string) > 0:
 return False
 else:
 return True

# Function to read data from CSV file
def read_csv(file_path):
 try:
 with open(file_path, newline='') as csvfile:
 reader = csv.DictReader(csvfile)
 data = [row for row in reader]
 return data
 except FileNotFoundError:
 print("File not found")
 return []

# Function to write data into CSV file
def write_csv(data, file_path):
 fieldnames = ['id', 'name', 'age']
 try:
 with open(file_path, mode='w', newline='') as csvfile:
 writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
 writer.writeheader()
 writer.writerows(data)
 print("CSV file has been written successfully.")
 except IOError:
 print("An error occurred while writing CSV file.")

# Sample data to write into CSV file
sample_data = [{'id': 1, 'name': 'John', 'age': 20}, {'id': 2, 'name': 'Jane', 'age': 30}]

# Write sample data into CSV file
write_csv(sample_data, "output.csv")

# Read data from CSV file and perform validation
data = read_csv("output.csv")

valid_records = []
for record in data:
 if not is_empty_string(record['name']) and is_even(int(record['age'])):
 valid_records.append(record)

# Print valid records
print(valid_records)
161
python
# Import the sqlite3 library
import sqlite3

# Create a new database or connect to an existing one
def create_connection():
    conn = None
    try:
        conn = sqlite3.connect('mydatabase.db')
    except sqlite3.Error as e:
        print(e)

    return conn

# Create a table in the database if it doesn't exist
def create_table(conn):
    cursor = conn.cursor()
    query = """CREATE TABLE IF NOT EXISTS mytable (
                 id INTEGER PRIMARY KEY,
                 name TEXT NOT NULL,
                 age INTEGER,
                 city TEXT);"""

    cursor.execute(query)

# Insert some data into the table
def insert_data(conn):
    cursor = conn.cursor()

    data = [('John Doe', 30, 'New York'),
            ('Jane Doe', 25, 'Los Angeles'),
            ('Mike Brown', 45, 'Chicago')]

    query = '''INSERT INTO mytable VALUES (?, ?, ?, ?)'''
    for row in data:
        cursor.execute(query, row)

# Commit the transaction and close the connection
conn = create_connection()
create_table(conn)
insert_data(conn)
conn.commit()
conn.close()

# Query the database using SQL statements with logical AND operators
def query_data(conn):
    query = '''SELECT * FROM mytable WHERE age > 30 AND city = 'New York';'''

    conn = create_connection()
    cursor = conn.cursor()
    cursor.execute(query)

    rows = cursor.fetchall()

    for row in rows:
        print(row)

    conn.close()

# Run the query
query_data()
162
python
import re

def is_valid_email(email):
    # Regular expression pattern for valid email address
    regex = r"[^@]+@[^@]+\.[^@]+$"
    
    if re.match(regex, email):
        print(f'Valid Email: {email}')
        return True
    else:
        print("Invalid Email")
        return False
        
# Test cases
if __name__ == "__main__":
    test_cases = [
        "example@example.com",
        "username@subdomain.domain.co.uk",
        "invalid_email@example.com",
        "user+tag@example.com"
    ]
    
    for email in test_cases:
        is_valid_email(email)
163
python
import requests

# Example URL to check
url = "https://www.example.com"

# Using if statement with 'and' operator
if requests.get(url).status_code == 200 and "200 OK" in requests.get(url).reason:
    print(f"The website '{url}' is accessible and returns status code: 200")
else:
    print(f"Error accessing the website '{url}'. Check status code: {requests.get(url).status_code}")

# Using one-liner with 'and' operator
if (requests.get(url).status_code == 200) and ("200 OK" in requests.get(url).reason):
    print(f"The website '{url}' is accessible and returns status code: 200")
else:
    print(f"Error accessing the website '{url}'. Check status code: {requests.get(url).status_code}")
164
python
import urllib.request

# Define the URL you want to fetch
url = "https://example.com"

# Send the GET request using urllib and store the response in a variable
response = urllib.request.urlopen(url)

# Check if the status code is HTTP_OK (200), using 'and' operator
if response.getcode() == 200:
    print("Success! The URL {} returned HTTP status code: {}".format(url, response.getcode()))
else:
    print("Error! The URL {} returned HTTP status code: {}".format(url, response.getcode()))
    
# Always close the connection
response.close()
165
python
import pickle

# Define some data
data = {
    "name": "John Doe",
    "age": 30,
    "is_student": True
}

# Define a function that checks if person is student and above 18
def check_eligibility(person):
    return person["is_student"] and person["age"] > 18

# Check eligibility of data
if check_eligibility(data):
    print("The person is eligible.")
else:
    print("The person is not eligible.")

# Pickle the data
with open("data.pickle", "wb") as f:
    pickle.dump(data, f)

# Load pickled data
with open("data.pickle", "rb") as f:
    loaded_data = pickle.load(f)

# Check eligibility of loaded data
if check_eligibility(loaded_data):
    print("The loaded person is eligible.")
else:
    print("The loaded person is not eligible.")
166
python
import os
import subprocess

# Define the directory path
directory_path = "/path/to/your/directory"

# Check if directory exists
if os.path.isdir(directory_path):
    print(f"Directory '{directory_path}' exists.")
else:
    print(f"Directory '{directory_path}' does not exist.")
    
# If directory exists, execute a command using subprocess
if os.path.isdir(directory_path):
    # Define the command to run (in this example, we will execute 'ls' command)
    command = "ls"

    # Execute the command in the directory using subprocess
    process = subprocess.Popen(command, shell=True, cwd=directory_path)

    # Get the output of the command and print it
    output, error = process.communicate()
    if error is not None:
        print("Error occurred while executing command:", error.decode())
    else:
        print("Output of command 'ls' in directory '{directory_path}':")
        print(output.decode())
else:
    print("Directory does not exist, so no command execution.")
167
python
import argparse

# Create the argument parser
parser = argparse.ArgumentParser(description="Logical Conditions using argparse")

# Add arguments
parser.add_argument("arg1", help="First argument")
parser.add_argument("arg2", type=int, help="Second argument (must be an integer)")
parser.add_argument "--operation", "-o", type=str, required=True, help="Operation (+ or -)")

# Parse the arguments
args = parser.parse_args()

x = int(args.arg1)
y = args.arg2
operation = args.operation

if operation == "+":
    result = x + y
else:
    # only perform subtraction if the second argument is greater than the first one
    if x > y:
        result = y - x
    else:
        print("Error: Second argument must be greater than the first one")
        exit()

print(f"Result: {result}")
168
python
import logging

# Configure logging settings
logger = logging.getLogger(__name__)
formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
file_handler = logging.FileHandler("example.log")
file_handler.setFormatter(formatter)
stream_handler = logging.StreamHandler()
stream_handler.setFormatter(formatter)
logger.addHandler(file_handler)
logger.addHandler(stream_handler)
logger.setLevel(logging.INFO)

# Define a function to demonstrate the use of 'and' operator
def check_condition(num1, num2):
    if (num1 > 0 and num2 > 0):  # Check if both conditions are true
        result = num1 + num2
        logger.info("Both numbers are positive: Addition of {} and {} is {}".format(num1, num2, result))
    else:
        logger.warning("One or both numbers are non-positive")

# Test the function with some input values
check_condition(3, 4)
check_condition(-1, 2)
169
python
from flask import Flask, render_template, request, flash

app = Flask(__name__)

@app.route('/', methods=['GET', 'POST'])
def index():
    if request.method == 'POST':
        num1 = float(request.form.get('num1'))
        num2 = float(request.form.get('num2'))

        if num1 > 0 and num2 > 0:
            result = num1 + num2
            return render_template('index.html', result=result)
        else:
            flash('Both numbers must be positive!')

    return render_template('index.html')

if __name__ == '__main__':
    app.run(debug=True)
170
python
INSTALLED_APPS = [
    # ...
    'users',
]
171
python
import numpy as np

# Create two arrays with boolean values
arr1 = np.array([1, 0, 1, 0, 1])
arr2 = np.array([1, 1, 0, 1, 0])

# Use NumPy's where() function to get the elements that are in arr1 and arr2
mask = np.where(np.logical_and(arr1, arr2), arr1, arr1)

print("Array 1:")
print(arr1)
print("Array 2:")
print(arr2)
print("Mask (elements in both arrays):")
print(mask)

# Use Python's 'and' keyword for boolean logic with scalar values
x = 5
y = 10
z = x > 4 and y < 7

if z:
    print(f"{x} is greater than 4 and {y} is less than 7")
else:
    print("Either x is not greater than 4 or y is not less than 7")
172
python
import numpy as np

# Create two NumPy arrays
np_array1 = np.array([1, 2, 3, 4, 5])
np_array2 = np.array([6, 7, 8, 9, 10])

print("np_array1:")
print(np_array1)
print("\nnp_array2:")
print(np_array2)
173
python
import numpy as np
import matplotlib.pyplot as plt

# Define some data
x = np.linspace(-10, 10, 400)
y_sin = np.sin(x)
y_cos = np.cos(x)

# Create figures and subplots
fig, axs = plt.subplots(ncols=2, figsize=(12, 6))

# Plot sine function
axs[0].plot(x, y_sin, label='Sine')
axs[0].set_title('Sine Function')
axs[0].legend()
axs[0].grid()

# Plot cosine function
axs[1].plot(x, y_cos, label='Cosine')
axs[1].set_title('Cosine Function')
axs[1].legend()
axs[1].grid()

# Show the figures
plt.show()
174
python
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

# Generate random data using NumPy
np.random.seed(42)  # for reproducibility
data = np.random.randn(100, 2)

# Create a simple line plot using Seaborn
sns.set()
fig, ax = plt.subplots(figsize=(8, 6))
sns.lineplot(x=data[:, 0], y=data[:, 1], ax=ax)
sns.kdeplot(data[:, 0], data[:, 1], shade=True, color="grey", label="Density")
ax.set_title("Scatter plot with KDE Density Estimation")
ax.set_xlabel("X")
ax.set_ylabel("Y")
plt.legend()
plt.show()

# Create a joint-histogram using Seaborn
fig, ax = plt.subplots(figsize=(8, 6))
sns.jointplot(data[:, 0], data[:, 1], color="grey", kde=True)
ax.set_title("Joint Histogram with KDE Density Estimation")
ax.set_xlabel("X")
ax.set_ylabel("Y")
plt.show()
175
python
import numpy as np
import tensorflow as tf

# Logical operation using NumPy
np_arr1 = np.array([1, 0, 1, 1], dtype=np.float32)
np_arr2 = np.array([1, 1, 0, 1], dtype=np.float32)
and_np = np.logical_and(np_arr1, np_arr2)
print("Logical AND using NumPy:")
print(np_arr1)
print(np_arr2)
print(and_np)

# Building a simple neural network using TensorFlow
input_shape = (1, 4)
x = tf.keras.Input(shape=input_shape, name='input')
x = tf.keras.layers.Dense(32, activation='relu')(x)
y = tf.keras.layers.Dense(1, activation='sigmoid')(x)
model = tf.keras.Model(inputs=x, outputs=y)

# Logical operation using TensorFlow
@tf.function
def logical_and(arr1, arr2):
    return tf.logical_and(arr1, arr2)

np_arr1_tensor = tf.convert_numpy_to_tensor(np_arr1)
np_arr2_tensor = tf.convert_numpy_to_tensor(np_arr2)
result_tf = logical_and(np_arr1_tensor, np_arr2_tensor)
print("\nLogical AND using TensorFlow:")
print("np_arr1_tensor:", np_arr1_tensor.numpy())
print("np_arr2_tensor:", np_arr2_tensor.numpy())
print("result_tf:", result_tf.numpy())

# Compile and train the neural network
model.compile(optimizer='adam', loss='binary_crossent')
model.fit(np.expand_dims(np_arr1, axis=0), np.expand_dims(np_arr2, axis=0), epochs=50)
176
python
# Importing required libraries
import numpy as np
from keras.models import Sequential
from keras.layers import Dense

# Creating a simple dataset (you can replace it with your own)
x = np.random.rand(100, 2)
y = np.random.randint(2, size=(100,))

# Preprocessing the input data using one-hot encoding for target variable 'y'
y_onehot = np.eye(3)[np.reshape(y, (-1,1))]

# Building a neural network model
model = Sequential()
model.add(Dense(12, activation='relu', input_shape=(x.shape[1],)))
model.add(Dense(8, activation='relu'))
model.add(Dense(3, activation='softmax'))

# Compiling the model
model.compile(loss='categorical_crossent', optimizer='adam', metrics=['accuracy'])

# Training the model for 10 epochs
history = model.fit(x, y_onehot, epochs=10)

# Printing the final evaluation results
scores = model.evaluate(x, y_onehot)
print("%s: %.2f%%" % (model.metrics_names[1], scores[1]*100))
177
python
# Importing necessary libraries
import numpy as np
from sklearn import datasets, model_selection

# Generating a random dataset as an example
X = np.random.rand(100, 4)
y = np.random.randint(2, size=100)

# Creating a mask for demonstrating the logical 'and' operator
mask = (X[:, 0] > 0.5) and (X[:, 1] < 0.3)
print("Mask:")
print(mask)

# Applying this mask to X and y for filtering the data
X_filtered = X[np.where(mask)]
y_filtered = y[np.where(mask)]
print("Filtered Data:")
print(np.concatenate((X_filtered, np.ones((len(X_filtered), 1)) * y_filtered), axis=1))

# Applying Scikit-Learn for logical data processing and machine learning
# Splitting the dataset into training and testing sets
X_train, X_test, y_train, y_test = model_selection.train_test_split(X, y, test_size=0.3, random_state=42)

# Creating a custom boolean feature for demonstration
X_train['feature_boolean'] = (X_train[:, 1] > 0.4) & (X_train[:, 2] < 0.6)
X_test['feature_boolean'] = (X_test[:, 1] > 0.4) & (X_test[:, 2] < 0.6)

# Creating a decision tree classifier using the custom boolean feature
clf = model_selection.DecisionTreeClassifier()
clf.fit(X_train[['feature_boolean']], y_train)

# Predicting on test data using the trained classifier
y_pred = clf.predict(X_test[['feature_boolean']])
print("Predictions:")
print(np.concatenate((X_test[['feature_boolean']], np.ones((len(X_test), 1)) * y_pred), axis=1))
178
python
# First, you need to install the beautifulsoup4 library if not already installed
# You can install it using pip: `pip install beautifulsoup4 lxml` or BS4 for short

from bs4 import BeautifulSoup, Tag, UnicodeMarkup
import re

# Sample HTML file (save as 'sample.html' in the same directory)
#
179
python
from selenium import webdriver

# Set up the web driver
browser = webdriver.Chrome()

# Navigate to Google
url = "https://www.google.com"
browser.get(url)

# Search for a specific term
search_term = "Python Programming"
search_box = browser.find_element_by_name("q")
search_box.send_keys(search_term)
search_button = browser.find_element_by_name("btnK")
search_button.click()

# Check if the search result title contains the expected text using 'and' logic
title = browser.title
expected_text = "Python Programming"
if "Python Programming" in title and "Google Search" in title:
    print("Search result title matches expected text.")
else:
    print("Search result title does not match expected text.")

# Close the browser window
browser.quit()
180
python
import numpy as np
import torch

# Create NumPy arrays
np_arr1 = np.array([[1, 0, 1], [1, 1, 1]], dtype=bool)
np_arr2 = np.ones((2, 3), dtype=bool)

print("NumPy Array 1:")
print(np_arr1)
print("\nNumPy Array 2:")
print(np_arr2)

# Perform NumPy logical AND operation
np_and = np.logical_and(np_arr1, np_arr2)
print("\nNumPy Logical AND:\n")
print(np_and)

# Create PyTorch tensors from NumPy arrays
torch_arr1 = torch.from_numpy(np_arr1).float()
torch_arr2 = torch.from_numpy(np_arr2).float()

print("\nPyTorch Tensors:")
print("Tensor 1:")
print(torch_arr1)
print("Tensor 2:")
print(torch_arr2)

# Perform PyTorch element-wise AND operation
torch_and = torch.logical_and(torch_arr1, torch_arr2)
print("\nPyTorch Logical AND:\n")
print(torch_and)
181
python
from sqlalchemy import create_engine, Column, Integer, String, ForeignKey, and_, desc
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, relationship

Base = declarative_base()

class User(Base):
    __tablename__ = 'users'
    id = Column(Integer, primary_key=True)
    name = Column(String)
    age = Column(Integer)
    posts = relationship("Post", backref="author")

class Post(Base):
    __tablename__ = 'posts'
    id = Column(Integer, primary_key=True)
    title = Column(String)
    content = Column(String)
    user_id = Column(Integer, ForeignKey("users.id"))
    author = relationship("User")

def main():
    engine = create_engine('sqlite:///test.db', echo=True)

    Base.metadata.create_all(engine)

    Session = sessionmaker(bind=engine)
    session = Session()

    # Create operation
    new_user = User(name='John Doe', age=30)
    session.add(new_user)
    session.commit()

    print("New user created:")
    print(session.query(User).filter(User.id == new_user.id).first())

    # Read operation
    users = session.query(User).order_by(desc(User.age)).limit(2).all()
    for user in users:
        print(f"{user.name} ({user.age}): {[p.title for p in user.posts]}")

    # Update operation
    user = session.query(User).filter(User.name == 'John Doe').first()
    if user:
        user.age += 1
        session.commit()

    # Delete operation
    post = session.query(Post).filter(Post.title == "Old Post").first()
    if post:
        author = post.author
        session.delete(post)
        session.commit()
        print(f"Deleted post with title '{post.title}'")

if __name__ == '__main__':
    main()
0
python
# calculator.py
def add(x, y):
    return x + y

def multiply(x, y):
    return x * y
1
python
class Calculator:
    def add(self, num1, num2):
        return num1 + num2

    def subtract(self, num1, num2):
        return num1 - num2
2
python
# Importing the 'assert' module from 'pytest'
import pytest

def test_add():
    # Given two numbers
    num1 = 5
    num2 = 3

    # When we add these two numbers
    result = num1 + num2

    # Then the sum should be equal to the expected value
    assert num1 + num2 == 8, f"The sum of {num1} and {num2} is not equal to 8."

def test_multiply():
    # Given two numbers
    num1 = 3
    num2 = 5

    # When we multiply these two numbers
    result = num1 * num2

    # Then the product should be equal to the expected value
    assert num1 * num2 == 15, f"The product of {num1} and {num2} is not equal to 15."

def test_is_even():
    # Given a number
    num = 6

    # When we check if the number is even using 'and' keyword
    is_even = (num % 2 == 0) and (num > 0)

    # Then the result should be True
    assert is_even is True, f"{num} is not an even positive number."
3
python
import asyncio

# Function representing an independent task (coroutine)
async def task_a():
    print("Task A started")
    await asyncio.sleep(1)
    print("Task A completed")

async def task_b():
    print("Task B started")
    await asyncio.sleep(2)
    print("Task B completed")

# Main function
async def main():
    # Create the tasks
    task_a = asyncio.create_task(task_a())
    task_b = asyncio.create_task(task_b())

    # Wait for both tasks to complete using 'and' operator
    await asyncio.wait([task_a, task_b])

    print("Both tasks completed")

# Run the main function
asyncio.run(main())
4
python
import time
from multiprocessing import Pool

def is_even(n):
    """Function to check if number is even."""
    return n % 2 == 0

def square(n):
    """Function to square a number."""
    return n * n

if __name__ == "__main__":
    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]

    # Using and operator for logical condition check
    print("Numbers greater than 5 and even:")
    start_time = time.time()
    filtered_numbers = [n for n in numbers if n > 5 and is_even(n)]
    end_time = time.time()
    print(f"List comprehension took {end_time - start_time:.4f} seconds.")
    print(filtered_numbers)

    # Using multiprocessing module for parallel processing
    print("\nNumbers greater than 5 and even using Pool:")
    start_time = time.time()
    with Pool(processes=len(numbers)) as p:
        filtered_numbers = p.map(lambda x: x if is_even(x) and x > 5 else None, numbers)
    end_time = time.time()
    print(f"Multiprocessing took {end_time - start_time:.4f} seconds.")
    print(list(filter(None, filtered_numbers)))
5
python
import threading
import time

# Define a function for our worker thread
def worker(id):
    print(f"Thread {id} started.")
    time.sleep(5)
    print(f"Thread {id} finished.")

# Create two threads and start them
threads = []
for i in range(2):
    t = threading.Thread(target=worker, args=(i,))
    threads.append(t)
    t.start()

# Wait for all threads to finish before exiting the main thread
for thread in threads:
    thread.join()

print("All threads finished.")
6
python
# Import required modules
import socket

def start_server():
    host = '127.0.0.1'  # Localhost
    port = 5000        # Arbitrary non-used port number

    server_socket = socket.socket()   # Create a socket object
    server_socket.bind((host, port))  # Bind the socket to the address and port

    print("Waiting for connection from client...")
    server_socket.listen(1)          # Start listening for the client connection
    conn, addr = server_socket.accept()  # Establish the connection with the client

    print(f"Connection from {addr} has been established.")

    password = "secretpassword".encode('ascii')
    msg = "Hello Client".encode('ascii')

    while True:
        data = conn.recv(1024)   # Receive data from client

        if data and data == password:  # Check condition for the correct password
            conn.sendall(msg)         # Send greeting message to the client
        else:
            print("Incorrect password sent by the client.")

    conn.close()              # Close the connection
    server_socket.close()      # Close the socket

if __name__ == "__main__":
    start_server()
7
python
import tkinter as tk

# Function to check if two entered numbers are both greater than 10
def is_both_greater_than_ten(num1, num2):
 return num1 > 10 and num2 > 10

class MyApp:
 def __init__(self, master):
 self.master = master
 self.master.title("Python Tkinter Example")
 self.label = tk.Label(self.master, text="Enter two numbers:")
 self.label.pack()
 self.num1_entry = tk.Entry(self.master)
 self.num2_entry = tk.Entry(self.master)
 self.num1_entry.pack()
 self.num2_entry.pack()
 self.check_button = tk.Button(self.master, text="Check", command=self.check_numbers)
 self.check_button.pack()

 def check_numbers(self):
 num1 = int(self.num1_entry.get())
 num2 = int(self.num2_entry.get())
 if is_both_greater_than_ten(num1, num2):
 self.master.config(text="Both numbers are greater than 10")
 else:
 self.master.config(text="At least one number is not greater than 10")

root = tk.Tk()
app = MyApp(root)
app.mainloop()
8
python
import pygame
pygame.init()

# Set up some constants
WIDTH, HEIGHT = 640, 480
WHITE = (255, 255, 255)
BUTTON_WIDTH, BUTTON_HEIGHT = 150, 50
MARGIN = 20

# Set up the display
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Pygame Example")

def draw_button(screen, text, x, y):
    button_surface = pygame.Surface((BUTTON_WIDTH, BUTTON_HEIGHT))
    button_surface.fill(WHITE)
    small_text = pygame.font.SysFont(None, 18).render(text, (0, 0, 0), WHITE)
    button_rect = button_surface.get_rect()
    screen.blit(button_surface, (x, y))
    screen.blit(small_text, (x + BUTTON_WIDTH / 2 - small_text.get_width() / 2, y + BUTTON_HEIGHT / 2))

# Main game loop
running = True
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

    screen.fill(WHITE)

    # Draw and handle Button1 clicks
    button1_x, button1_y = MARGIN, MARGIN * 2 + BUTTON_HEIGHT
    pygame.draw.rect(screen, (0, 128, 0), (button1_x, button1_y, BUTTON_WIDTH, BUTTON_HEIGHT))
    mouse_pos = pygame.mouse.get_pos()
    if pygame.mouse.get_pressed()[0] and (button1_x <= mouse_pos[0] <= button1_x + BUTTON_WIDTH and button1_y <= mouse_pos[1] <= button1_y + BUTTON_HEIGHT):
        print("You clicked Button1!")
    draw_button(screen, "Button1", button1_x, button1_y)

    # Draw and handle Button2 clicks
    button2_x, button2_y = MARGIN * 3 + BUTTON_WIDTH + MARGIN, MARGIN * 2 + BUTTON_HEIGHT
    pygame.draw.rect(screen, (128, 0, 0), (button2_x, button2_y, BUTTON_WIDTH, BUTTON_HEIGHT))
    if pygame.mouse.get_pressed()[0] and (button2_x <= mouse_pos[0] <= button2_x + BUTTON_WIDTH and button2_y <= mouse_pos[1] <= button2_y + BUTTON_HEIGHT):
        print("You clicked Button2!")
    draw_button(screen, "Button2", button2_x, button2_y)

    pygame.display.flip()

pygame.quit()
9
python
import sys
from PyQt5.QtWidgets import QApplication, QWidget, QVBoxLayout, QLabel, QLineEdit, QPushButton

class MyApp(QWidget):
    def __init__(self):
        super().__init__()

        self.init_ui()

    def init_ui(self):
        vbox = QVBoxLayout()
        self.setLayout(vbox)

        self.label1 = QLabel("Input 1:")
        self.lineedit1 = QLineEdit()
        vbox.addWidget(self.label1)
        vbox.addWidget(self.lineedit1)

        self.label2 = QLabel("Input 2:")
        self.lineedit2 = QLineEdit()
        vbox.addWidget(self.label2)
        vbox.addWidget(self.lineedit2)

        self.button = QPushButton("Check Inputs")
        self.button.clicked.connect(self.check_inputs)
        vbox.addWidget(self.button)

        self.show()

    def check_inputs(self):
        input1 = self.lineedit1.text()
        input2 = self.lineedit2.text()

        if len(input1) > 0 and len(input2) > 0:
            print("Both inputs are non-empty!")
            # Add your code here to perform actions based on both inputs being non-empty
        else:
            print("One or both inputs are empty.")

if __name__ == "__main__":
    app = QApplication(sys.argv)

    demo = MyApp()
    sys.exit(app.exec_())
10
python
import wx

class MyApp(wx.Frame):
    def __init__(self, title):
        super().__init__(title=title, size=(300, 200))

        self.text_ctrl1 = wx.TextCtrl(self, id=101, size=(150, -1), style=wx.TE_PROCESS_ENTER)
        self.text_ctrl1.Bind(wx.EVT_TEXT, self.OnTextCtrl1)

        self.text_ctrl2 = wx.TextCtrl(self, id=102, size=(150, -1), style=wx.TE_READONLY)

        sizer = wx.BoxSizer(wx.VERTICAL)
        sizer.Add(self.text_ctrl1, 0, wx.ALL | wx.EXPAND)
        sizer.Add((50, 5), 0)
        sizer.Add(self.text_ctrl2, 0, wx.ALL | wx.EXPAND)
        self.SetSizerAndFit(sizer)

        self.button = wx.Button(self, label="Enable next text box", id=103)
        self.button.Bind(wx.EVT_BUTTON, self.OnButtonClicked)

        sizer.Add((50, 10), 0)
        sizer.Add(self.button, 0, wx.ALL | wx.EXPAND)

        self.Centre()
        self.Show(True)

    def OnTextCtrl1(self, event):
        self.text_ctrl2.SetValue("")

    def OnButtonClicked(self, event):
        if len(self.text_ctrl1.GetValue()) > 0:
            self.text_ctrl2.Enable()
        else:
            wx.MessageBox("First text box cannot be empty", "Error", wx.ICON_ERROR)

app = MyApp("Python and wxPython Demo")
app.MainLoop()
11
python
# Define two boolean variables
x = True
y = False

# Use the and operator to create a new boolean value
z = x and y

# Print out the result
print("x is:", x)
print("y is:", y)
print("x and y is:", z)
12
python
# Define a dictionary with some key-value pairs
data = {1: "apple", 2: "banana", 3: "cherry"}

# Function to check if a given key exists in the dictionary and its value is "banana"
def check_key_value(d, key, expected_value):
 if key in d and d[key] == expected_value:
 print(f"Key {key} has the expected value {expected_value}")
 else:
 print(f"Key {key} does not exist or has a different value")

# Test the function with some keys and expected values
check_key_value(data, 1, "apple") # Should print: Key 1 has the expected value apple
check_key_value(data, 2, "banana") # Should print: Key 2 has the expected value banana
check_key_value(data, 4, "orange") # Should print: Key 4 does not exist or has a different value
13
python
class Person:
    def __init__(self, name, age, gender):
        self.name = name
        self.age = age
        self.gender = gender

    def is_same_person(self, other):
        return type(self) == type(other) and self.age == other.age and self.gender == other.gender

# Create some instances of the Person class
person1 = Person("Alice", 25, "Female")
person2 = Person("Bob", 25, "Male")
person3 = Person("Alice", 25, "Female")

# Check if person1 is the same as person3 using 'is_same_person' method
print(person1.is_same_person(person3))  # Output: True

# Check if person1 is the same as person2
print(person1.is_same_person(person2))  # Output: False
14
python
# Define base classes
class Animal:
    def __init__(self, name, color):
        self.name = name
        self.color = color

    def make_sound(self):
        pass

class Dog(Animal):
    def make_sound(self):
        return "Woof!"

class Cat(Animal):
    def make_sound(self):
        return "Meow!"

# Create instances of subclasses
dog = Dog("Fido", "Brown")
cat = Cat("Whiskers", "White")

# Demonstrate usage of and operator
if dog.color == "Brown" and dog.make_sound() == "Woof!":
    print(f"{dog.name} is a dog and barks 'Woof!'")
else:
    print("Invalid dog instance")

if cat.color == "White" and cat.make_sound() == "Meow!":
    print(f"{cat.name} is a cat and meows 'Meow'")
else:
    print("Invalid cat instance")
15
python
# Base Class: Animal
class Animal:
    def __init__(self, name):
        self.name = name

    # Abstract method without implementation
    def can_fly(self):
        pass

# Derived Class: Dog
class Dog(Animal):
    def __init__(self, name, breed):
        super().__init__(name)
        self.breed = breed

    def can_jump(self):
        print(f"{self.name} can jump {self.jump_height()} cm high.")
        return self.is_young() and self.can_fetch()

    def jump_height(self):
        return 10

# Derived Class: Cat
class Cat(Animal):
    def __init__(self, name, color):
        super().__init__(name)
        self.color = color

    def can_jump(self):
        print(f"{self.name} can jump {self.jump_height()} cm high.")
        return self.is_playful() and self.can_climb_trees()

    def jump_height(self):
        return 5

# Main program
if __name__ == "__main__":
    dog = Dog("Fido", "Labrador")
    cat = Cat("Mittens", "Gray")
    
    print(f"Can {dog.name} perform well? {dog.can_jump()}")
    print(f"Can {cat.name} perform well? {cat.can_jump()}")

# Helper methods for Dog
class Dog:
    # Method 1: is_young
    def is_young(self):
        return self.age < 3

    # Method 2: can_fetch
    def can_fetch(self):
        print(f"{self.name} can fetch sticks.")
        return True
16
python
class Person:
    def __init__(self, name, age):
        self._name = name
        self._age = age

    def is_valid(self):
        """Check if a person's name and age are valid"""
        return (type(self._name) is str) and (self._age > 0)

# Usage:
p1 = Person("John Doe", 25)
print(p1.is_valid()) # True
p2 = Person("John", -5)
print(p2.is_valid()) # False
17
python
class Rectangle:
    def __init__(self, width=0, height=0):
        self._width = width
        self._height = height

    @property
    def width(self):
        return self._width

    @width.setter
    def width(self, value):
        if value >= 0:
            self._width = value
        else:
            raise ValueError("Width must be non-negative")

    @property
    def height(self):
        return self._height

    @height.setter
    def height(self, value):
        if value >= 0:
            self._height = value
        else:
            raise ValueError("Height must be non-negative")

    def area(self):
        """Return the area of this rectangle"""
        return self.width * self.height

    def __str__(self):
        """Return a string representation of this rectangle"""
        return f"Rectangle({self.width}, {self.height})"

# Create two rectangles and check if their areas are both greater than 10
rectangle1 = Rectangle(2, 5)
rectangle2 = Rectangle(3, 4)

if rectangle1.area() > 10 and rectangle2.area() > 10:
    print("Both rectangles have areas greater than 10")
else:
    print("One or both rectangles do not have areas greater than 10")
18
python
def is_perfect_square(n):
    """Return True if n is a perfect square."""

    # Base case: 1 is a perfect square
    if n == 1:
        return True

    # Check if the square root of n is an integer and recursively call the function
    if int(n ** 0.5) ** 2 == n:
        return True
    else:
        return False

# Test cases
print(is_perfect_square(4))   # True
print(is_perfect_square(16))  # True
print(is_perfect_square(27))  # False
19
python
# Function to check if a number is even and positive
def is_even_positive(n):
  # Iterate while the number is not positive
  while n <= 0:
    print("Error: Number must be positive!")
    n = int(input("Enter a positive number: "))
  
  # Check if the number is even using 'and' operator
  if n % 2 == 0 and n > 0:
    print(f"{n} is an even positive number.")
  else:
    print(f"{n} is not an even positive number.")

# Test cases
is_even_positive(5)         # Ouput: 5 is not an even positive number.
is_even_positive(-3)        # Output: Error: Number must be positive! Enter a positive number: 4 4 is not an even positive number.
is_even_positive(6)         # Output: 6 is an even positive number.
20
python
# This program checks if two numbers are within a certain range
def is_in_range(num, lower, upper):
  """
  Returns True if the number is within the given lower and upper limits, otherwise False.
  """
  return num >= lower and num <= upper

# Function to get user input
def get_number():
  """
  Get a valid number from the user.
  """
  while True:
    try:
      num = int(input("Enter a number: "))
      break
    except ValueError:
      print("Invalid input. Please enter an integer.")

# Main program
if __name__ == "__main__":
  lower_limit = 10
  upper_limit = 20

  # Get user input
  num = get_number()

  # Check if the number is within the given range using and operator
  in_range = is_in_range(num, lower_limit, upper_limit)

  print(f"Number {num} is in range [{lower_limit}, {upper_limit}]? "
        f"{('Yes' if in_range else 'No')}")
21
python
class Person:
    def __init__(self, age, is_employed):
        self.age = age
        self.is_employed = is_employed

    def is_valid(self):
        return self.age > 18 and self.is_employed

# Create instances of Person class
person1 = Person(25, True)
person2 = Person(17, False)

print("Person 1 is valid:", person1.is_valid()) # Prints: Person 1 is valid: True
print("Person 2 is valid:", person2.is_valid()) # Prints: Person 2 is valid: False

# Using and operator directly with attributes
print("Person 1 is valid using and operator:", (person1.age > 18) and person1.is_employed) # Prints: Person 1 is valid using and operator: True
22
python
# Assigning variables
num1 = 5
num2 = 7

# Using 'and' for logical operation
if num1 > 0 and num2 > 0 and num1 == num2:
    print("Both numbers are positive and equal.")
elif num1 > 0 and num2 > 0:
    print("Both numbers are positive but not equal.")
elif num1 > 0:
    print("The first number is positive.")
else:
    print("The given numbers are non-positive.")
23
python
# Two simple conditions
condition1 = 5 > 3
condition2 = 7 < 10

# Use 'and' operator to combine the two conditions
final_condition = condition1 and condition2

print("Final condition:", final_condition)
24
python
def is_even_and_positive(number):
    """
    Return True if number is both even and positive, False otherwise
    """
    return (number > 0) and (number % 2 == 0)

# Test the function with some examples
print(is_even_and_positive(5))   # False
print(is_even_and_positive(6))   # True
print(is_even_and_positive(-2))  # False
print(is_even_and_positive(0))   # True
25
python
def check_conditions(arg1, arg2):
  """
  This function checks if two given numbers are positive and even.
  """

  # Checking if the first argument is positive and even
  if isinstance(arg1, int) and arg1 > 0 and arg1 % 2 == 0:
    print(f"The first argument {arg1} is a positive even number.")
  else:
    print(f"The first argument {arg1} does not meet the conditions.")

  # Checking if the second argument is positive and even as well
  if isinstance(arg2, int) and arg2 > 0 and arg2 % 2 == 0:
    print(f"The second argument {arg2} is a positive even number.")
  else:
    print(f"The second argument {arg2} does not meet the conditions.")

# Testing the function with some arguments
check_conditions(3, 5) # Output: The first argument 3 does not meet the conditions. The second argument 5 does not meet the conditions.
check_conditions(6, 8) # Output: The first argument 6 is a positive even number. The second argument 8 is a positive even number.
26
python
def check_age(age):
 """
 This function checks if a given age is valid (above 18) and returns the status as a boolean value or "Adult" string.
 """
 is_valid_age = age > 18
 if is_valid_age:
 return "Adult"
 else:
 return False
27
python
# Define some variables
num1 = 5
num2 = 3
is_even1 = num1 % 2 == 0
is_even2 = num2 % 2 == 0

# Use the 'and' operator to combine conditions
if is_even1 and is_even2:
    print("Both numbers are even.")
elif is_even1 or is_even2:
    print("One of the numbers is even.")
else:
    print("Both numbers are odd.")
28
python
# List of numbers
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]

# Using for loop and and keyword
for num in numbers:
    # Condition to check if number is even and greater than 3
    if num > 3 and num % 2 == 0:
        print(num)
29
python
# Define some variables
num1 = 5
num2 = 0
is_even = True

# Use the and statement to check if num1 is even and greater than 0
if (num1 > 0) and (is_even):
    print("Num1 is positive and even")
else:
    print("Num1 is not positive or not even")

# Use the and statement to check if num2 is less than 5 and odd
if (num2 < 5) and (is_even is False):
    print("Num2 is less than 5 and odd")
else:
    print("Num2 does not meet both conditions")
30
python
# Define two variables
num1 = 5
num2 = 0

# Use an 'and' expression to check if both conditions are true
if (num1 != 0) and (num2 != 0):
    # Perform some operation if num1 and num2 are both non-zero
    result = num1 / num2
    print(f"Result: {result}")
else:
    print("Error: Cannot divide by zero")
31
python
# This is a simple Python script demonstrating the usage of 'and' operator

# Define some variables
x = 5
y = 10
z = 2

# Check if x is less than y and y is greater than z using 'and' operator
result = (x < y) and (y > z)

# Print the result with an explanatory comment
if result:
    print("x is less than y AND y is greater than z")
else:
    print("x is not less than y OR y is not greater than z")
32
python
# Define two variables
num1 = 5
num2 = 10

# Use 'and' operator to check if both conditions are true
if (num1 > 0) and (num2 > 0):
    # Indented block of code to execute if both conditions are true
    print("Both numbers are positive.")
33
python
import functools

def main():
    # Input list of boolean values
    boolean_list = [True, True, False, True, False]

    # Use lambda function and 'and' operator to apply logical AND on each pair
    binary_and = lambda x, y: x and y

    # Apply reduce function from functools to get the final result
    result = functools.reduce(binary_and, boolean_list)

    print("Result:", result)

if __name__ == "__main__":
    main()
34
python
# Importing required packages
import operator
import math

# Define three numbers as variables
num1 = 5
num2 = 7
num3 = 3

# Using built-in max() function
max_num_builtin = max(num1, num2, num3)
print("The maximum number using built-in max() function is: ", max_num_builtin)

# Multiplying three numbers using operator.mul()
multiplication_of_three_nums = operator.mul(num1, operator.mul(num2, num3))
max_num_operator = math.pow(multiplication_of_three_nums, 0.5).isclose(abs(num1) or abs(num2) or abs(num3), delta=0) and \
                 (abs(num1) >= abs(num2) and abs(num1) >= abs(num3)) or \
                 (abs(num2) >= abs(num1) and abs(num2) >= abs(num3)) or \
                 (abs(num3) >= abs(num1) and abs(num3) >= abs(num2))

if max_num_operator:
    print("The maximum number using operator.and() and math.pow() function is:", num1 if max_num_operator == (abs(num1) > abs(num2) and abs(num1) > abs(num3)) else \
                                                         (num2 if max_num_operator == (abs(num2) > abs(num1) and abs(num2) > abs(num3)) else num3))
else:
    print("Error: None of the numbers is maximum.")
35
python
import numpy as np

# Creating two random 2x2 matrices
matrix1 = np.random.rand(2, 2)
matrix2 = np.random.rand(2, 2)

print("Matrix 1:\n", matrix1)
print("\nMatrix 2:\n", matrix2)

# Element-wise 'and' operation on matrices (does element-wise comparison and returns the equivalent of Python list '[]' style boolean and):
element_wise_and = np.logical_and(matrix1, matrix2)
print("\nElement-wise AND:\n", element_wise_and)

# Logical indexing using 'and' (returns rows where all elements are true):
rows_with_both_conditions = np.where(np.all(matrix1 >= 0.5, axis=1), matrix1, 0)
print("\nRows in Matrix 1 where ALL elements > 0.5:\n", rows_with_both_conditions)
36
python
# First, we define two boolean functions that return True or False based on certain conditions
def is_odd(n):
    return n % 2 != 0

def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n**0.5)+1):
        if n % i == 0:
            return False
    return True

# Now we use the and operator to ensure both conditions are met before executing a print statement
if is_odd(num) and is_prime(num):
    print("The number", num, "is odd and prime")
else:
    print("The number", num, "does not meet both conditions")
37
python
# Logical 'and' example

def main():
    # Define some variables
    x = 10
    y = 20

    # Use the and operator to test two conditions
    if (x > 5) and (y > 15):
        print("Condition 1 and Condition 2 are true.")
    else:
        print("One or both of the conditions are false.")

if __name__ == "__main__":
    main()
38
python
# Define two variables
x = 5
y = 10

# Use logical AND operator to check if both conditions are true
if x > 3 and y < 20:
    print("Both conditions are true!")
else:
    print("At least one condition is false.")
39
python
def is_positive_and_even(num):
    """
    This function checks if a number is both positive and even
    :param num: an integer
    :return: True if the number is positive and even, False otherwise
    """
    return num > 0 and num % 2 == 0

# Test some numbers
for num in [4, 3, -5, 10]:
    print(f'{num} is {"" if is_positive_and_even(num) else "not"} positive and even')
40
python
# Define some variables
num1 = 5
num2 = 10

# Use the 'and' operator to check if two conditions are true
if (num1 > 3) and (num2 > 5):
    print("Both numbers are greater than 3 and 5 respectively.")
else:
    print("At least one of the numbers is not greater than 3 or 5.")

# Output: Both numbers are greater than 3 and 5 respectively.
41
python
def check_number(num):
    # Logic with bugs
    if num > 9 and num < 21:  # Check if the number is between 10 and 20 (bug #1)
        print("The number is within the range.")
        
        # Bug #2: Missing check for evenness
        #if num % 2 == 0:
        #    print("The number is even.")

        # Print a message with incorrect information
        print("The number is odd.")

# Test cases (with and without bugs)
print("\nTesting with correct number...")
check_number(15)

# Test case with bug #1 (out of range number)
print("\nTesting with out-of-range number...")
check_number(8)

# Test case with bug #2 (in-range even number)
print("\nTesting with in-range even number...")
check_number(12)
42
python
# Define some variables
num1 = 5
num2 = 10
is_positive = True

# Conditional statements using 'and' operator
if (num1 > 0) and (num2 > 0):
    print("Both numbers are positive.")
elif (num1 < 0) and (num2 < 0):
    print("Both numbers are negative.")
else:
    print("One number is positive and one is negative.")

# Applying 'and' operator with logical variables
if is_positive and (num1 > num2):
    print("Variable 'is_positive' is True and num1 is greater than num2.")
elif not is_positive and num1 > num2:
    print("Variable 'is_positive' is False and num1 is still greater than num2.")
else:
    print("Variable 'is_positive' and the condition for number comparison is not met.")
43
python
# Define two variables
x = 5
y = 10

# Use the 'and' operator to perform a logical AND operation
if x > 4 and y < 20:
    print("Both conditions are true")
else:
    print("At least one condition is false")
45
python
def divide(num1, num2):
    """This function divides num1 by num2."""
    try:
        result = num1 / num2
    except ZeroDivisionError as e:
        print("Error:", e)
        return None

    # Check if the result is even
    if num1 % 2 != 0 and num2 % 2 != 0:
        print("Both numbers must be even.")
        raise Exception("Exception: Both numbers must be even.")

    return result

if __name__ == "__main__":
    num1 = int(input("Enter first number: "))
    num2 = int(input("Enter second number: "))

    try:
        result = divide(num1, num2)
    except Exception as e:
        print(e)
    else:
        if result is not None:
            print(f"Result: {result}")
46
python
def divide(x, y):
    try:
        result = x / y
    except ZeroDivisionError:
        print("Error: Division by zero is not allowed.")
        return None
    return result

num1 = 5
num2 = 0

if num2 == 0:
    print("Error: Cannot divide by zero.")
else:
    quotient = divide(num1, num2)
    if quotient is not None:
        print(f"The result of {num1} divided by {num2} is {quotient}")
47
python
# Function to check if a number is positive
def is_positive(num):
    return num > 0

# Function to validate user input and perform division
def divide():
    try:
        num1 = float(input("Enter first number: "))
        num2 = float(input("Enter second number: "))

        # Check if both numbers are positive
        if is_positive(num1) and is_positive(num2):
            print(f"The result of {num1} divided by {num2} is {num1 / num2}")
        else:
            print("Error: Both numbers must be positive")
    except ValueError as e:
        print(f"Error: {e}")

# Calling the divide function
divide()
48
python
import logging

# Configure logging
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')

console_handler = logging.StreamHandler()
console_handler.setLevel(logging.DEBUG)
console_handler.setFormatter(formatter)
logger.addHandler(console_handler)

# Define a function with a logical and (and) statement
def process_data(data):
    if data is not None and len(data) > 5:
        logger.debug('Data processed successfully')
        return True
    else:
        logger.warning('Invalid data received, data is %s', str(data))
        return False

# Test the function
data = [1, 2, 3, 4, 5]
result = process_data(data)

if result:
    print('Data processing was successful')
else:
    print('Data processing failed')
49
python
def add_numbers(x, y):
    """
    This function adds two numbers and returns the result.
    :param x: first number
    :param y: second number
    :return: sum of x and y
    """
    result = x + y
    return result

def is_positive(num):
    """
    This function checks if a given number is positive.
    :param num: number to check
    :return: True if the number is positive, False otherwise
    """
    if num > 0:
        return True
    else:
        return False

if __name__ == "__main__":
    num1 = 5
    num2 = 3

    sum_result = add_numbers(num1, num2)
    assert is_positive(sum_result), "Error! The sum of two positive numbers should be positive."

    print("The sum of {} and {} is: {}".format(num1, num2, sum_result))
50
python
def is_positive_even(num):
    return num > 0 and num % 2 == 0
51
python
def is_even_and_positive(n):
"""
Check if a number is both even and positive
"""
# Using Python's built-in `isinstance()` function, we check if the number is an integer type
if isinstance(n, int) and n > 0:
# Checking if the number is even by using the modulus operator (%). If the remainder of a number divided by 2 is 0, then it's even.
 if n % 2 == 0:
 return True
else:
 return False
# If the input number does not pass the first two conditions (integer and positive), we don't even bother checking for evenness.
52
python
import timeit

def method1(num1, num2, lower_limit, upper_limit):
""" checking range using if statements """
if (num1 >= lower_limit) and (num1 <= upper_limit) and (num2 >= lower_limit) and (num2 <= upper_limit):
    print(f"{num1}, {num2} are within the given range.")

def method2(num1, num2, lower_limit, upper_limit):
""" checking range using and operator """
if (lower_limit <= num1 <= upper_limit) and (lower_limit <= num2 <= upper_limit):
    print(f"{num1}, {num2} are within the given range.")

# Test data
num1 = 10
num2 = 15
lower_limit = 5
upper_limit = 20

method1(num1, num2, lower_limit, upper_limit)
method2(num1, num2, lower_limit, upper_limit)

# Performance test using timeit module
setup = """
from __main__ import method1, method2, lower_limit, upper_limit
num1 = 10
num2 = 15
"""

print("Performance of method1:")
print(timeit.timeit(lambda: method1(num1, num2, lower_limit, upper_limit), number=100000))

print("Performance of method2:")
print(timeit.timeit(lambda: method2(num1, num2, lower_limit, upper_limit), number=100000))
53
python
import timeit

# Function with low complexity (using 'and' operator)
def function_a(n):
 n = 10 if n > 5 else 20
 return n * n

# Function with high complexity
def function_b(n):
 for i in range(n):
 pass
 return n * n

if __name__ == "__main__":
 # Profiling 'function_a'
 print("Function A profiling result:")
 t = timeit.timeit(lambda: function_a(100), number=1000)
 print(f"Time taken for 1000 calls: {t} seconds.")

 # Profiling 'function_b'
 print("Function B profiling result:")
 t = timeit.timeit(lambda: function_b(100), number=1000)
 print(f"Time taken for 1000 calls: {t} seconds.")
54
python
# Define two variables
x = 10
y = 20

# Use the and operator to check if both conditions are true
result = (x > 5) and (y < 30)

print(f"x is greater than 5: {x > 5}")
print(f"y is less than 30: {y < 30}")
print(f"Both conditions are true: {result}")
56
python
# First condition: check if a number is even
def is_even(num):
 return num % 2 == 0

# Second condition: check if a number is greater than zero
def is_positive(num):
 return num > 0

# Function using and keyword to check if a number is positive and even
def is_positive_and_even(num):
 result = is_even(num)
 result = result and is_positive(num)
 return result

# Testing the function with some numbers
print(is_positive_and_even(4)) # True
print(is_positive_and_even(-1)) # False
print(is_positive_and_even(0)) # True
57
python
import numpy as np
print(np.__version__)
58
python
import subprocess

def check_package(package):
    """Check if the given package is installed"""
    try:
        subprocess.run(["pip", "freeze"], stdout=subprocess.PIPE)
        output = subprocess.run(
            ["grep", "-Fx", f"{package}==.*"],
            stdin=subprocess.PIPE,
            stdout=subprocess.PIPE,
            check=True,
        ).stdout.decode().split("\n")[0]
        if output:
            print(f"{package} is already installed.")
        else:
            print(f"{package} is not installed.")
            subprocess.run(["pip", "install", package])
    except FileNotFoundError:
        print("Python and pip are not installed or not in your PATH!")

if __name__ == "__main__":
    p1 = "numpy"
    p2 = "pandas"

    check_package(p1)
    check_package(p2)

    # Now we'll demonstrate the usage of 'and' operator.
    print("numpy and pandas are installed only if both packages are installed.")
    is_np_and_pd_installed = (check_package(p1).startswith(p1) and check_package(p2).startswith(p2))
    if is_np_and_pd_installed:
        print("numpy and pandas are installed.")
59
python
# Simple Python Script Using 'and' Operator

x = 5
y = 10

if x > 3 and y < 20:
    print("Both conditions are met")
else:
    print("At least one condition is not met")
60
python
# Inside app.py file
import requests

def fetch_data():
    url = "https://api.github.com/users/<username>"
    response = requests.get(url)
    data = response.json()
    return data

if __name__ == "__main__":
    user_data = fetch_data()
    print(user_data)
62
python
from flask import Flask

app = Flask(__name__)

@app.route('/')
def hello():
    return 'Hello, World!'

if __name__ == '__main__':
    app.run(debug=True)
63
python
def is_number_greater_than(num1, num2, threshold):
    return num1 > threshold and num2 > threshold
64
python
# This simple script checks if two conditions are true using the 'and' logical operator
def main():
  condition_a = True
  condition_b = False

  result = condition_a and condition_b

  print(f"Result: {result}")

if __name__ == "__main__":
  main()
65
python
import os

# Get the value of an environment variable, if it exists
MY_ENV_VAR = os.getenv('MY_ENV_VAR', 'Default value')

print(f'The value of environment variable MY_ENV_VAR is: {MY_ENV_VAR}')

if __name__ == '__main__':
    # Set an environment variable for this script only (effective for the current process)
    os.environ['ANOTHER_ENV_VAR'] = 'Some value'
    
    another_env_var = os.getenv('ANOTHER_ENV_VAR')
    print(f'The value of environment variable ANOTHER_ENV_VAR is: {another_env_var}')
66
python
# Python example of 'and' operator
if x > 5 and y < 10:
    print("x is greater than 5 AND y is less than 10")
else:
    print("Condition failed.")
67
python
# Define some variables
num1 = 5
num2 = 0
is_even = True

# Conditional statements using 'and' operator
if (num1 > 0) and (num2 != 0):
    print("Both num1 and num2 are non-zero.")
elif (num1 <= 0) or (num2 == 0):
    if num1 <= 0:
        print("num1 is non-positive.")
    if num2 == 0:
        print("num2 is zero.")
else:
    print("Unexpected conditions.")

# Let's check another condition using 'and' operator with boolean variables
if is_even and (num1 % 2 == 0):
    print(f"num1 is even.")
else:
    print(f"num1 is odd.")
68
python
#!/usr/bin/env python
import time

def main():
    print("This is a message from your Python script.")

if __name__ == "__main__":
    main()
69
python
import os

# Command 1: Check if directory exists and create it if not
command_1 = "mkdir -p my_directory &&"

# Command 2: Change to the created directory
command_2 = "cd my_directory"

try:
    # Execute both commands using os.system() with '&&' operator
    os.system(command_1 + command_2)
except OSError as error:
    print("Error creating directory and/or changing to it:", error)
70
python
import concurrent.futures
import time

def func(x):
    """Function to be applied to each input."""
    print(f'Function {x} started at {time.ctime()}.')
    time.sleep(2)
    print(f'Function {x} finished at {time.ctime()}.')
    return x > 3

if __name__ == '__main__':
    inputs = [1, 2, 3, 4]

    with concurrent.futures.ThreadPoolExecutor(max_workers=len(inputs)) as executor:
        futures = {executor.submit(func, i): i for i in inputs}
        results = {future.result() for future in concurrent.futures.as_completed(futures)}

    print('\nResults:')
    for input_, result in results.items():
        print(f'Input: {input_}, Result: {result}')

    and_result = all(results.values())  # Logical AND of all results
    print(f'\nLogical AND ({", ".join(str(i) for i in inputs)}): {and_result}')
71
python
# Simple script demonstrating the use of 'and' operator in Python

x = 5
y = 10
z = 15

if x > 3 and y < 20:
    print("x is greater than 3 and y is less than 20")
else:
    print("Conditions are not met")
72
python
import threading

# Function for printing even numbers
def print_evens():
    for i in range(0, 11):
        if i % 2 == 0:
            print(i, end=" ")

# Function for printing odd numbers
def print_odds():
    for i in range(0, 11):
        if i % 2 != 0:
            print(i, end=" ")

# Create two Thread objects for even and odd number printing tasks
thread_even = threading.Thread(target=print_evens)
thread_odd = threading.Thread(target=print_odds)

# Start the threads
thread_even.start()
thread_odd.start()

# Wait for both threads to finish their tasks
thread_even.join()
thread_odd.join()

print("\nThreads finished executing.")
73
python
# Define some variables
a = True
b = False
c = True

# Use the 'and' operator to perform a logical AND operation
result = (a and b) or c

print("Value of result: ", result)

# Let's analyze the truth table for this expression:
if a is True and b is False:
    result = False  # Since False 'and' anything is always False
else:
    result = c       # If at least one operand is True, then the result is that True value

print("When a = {0} and b = {1}:".format(a, b))
print("The expression (a and b) or c evaluates to:", result)

# Now let's change the values of 'a' and 'b' for another example:
a = False
b = True
result = (a and b) or c

print("\nWhen a = {0} and b = {1}:".format(a, b))
print("The expression (a and b) or c evaluates to:", result)
74
python
# script_A.py
import threading
import time

shared_variable = 0

def function_A():
    global shared_variable
    print("Thread A started")
    for i in range(1000):
        shared_variable += 1
    print("Thread A finished")

thread_A = threading.Thread(target=function_A)
thread_A.start()
thread_A.join()

def function_B():
    global shared_variable
    print("Thread B started")
    for i in range(1000):
        shared_variable += 1
    print("Thread B finished")

thread_B = threading.Thread(target=function_B)
thread_B.start()
thread_B.join()

print(f"The final value of the shared variable is: {shared_variable}")
75
python
x = 5
y = 10
z = x > 3 and y < 6
print(z) # Output: False
76
python
# Define variables
num1 = 5
num2 = 10

# Use 'and' operator in a conditional statement
if (num1 > 0) and (num2 > 0): # Both conditions must be true for the block to execute
    print("Both numbers are positive.")
else:
    print("One or both numbers are not positive.")
77
python
import threading
import time

# Define a shared resource with two operations: increment and print
class SharedResource:
    def __init__(self):
        self.value = 0
        self.lock = threading.Lock()

    def increment(self):
        with self.lock:
            self.value += 1
            print(f"Thread: {threading.current_thread().name}, Value: {self.value}")

    def print_value(self):
        with self.lock:
            print(f"Thread: {threading.current_thread().name}, Value: {self.value}")

# Create an instance of the SharedResource class
resource = SharedResource()

def thread_func(resource):
    for i in range(5):
        resource.increment()

# Create two threads and start them
threads = [threading.Thread(target=thread_func, args=(resource,)) for _ in range(2)]
for t in threads:
    t.start()

# Wait for all threads to finish before exiting the main thread
for t in threads:
    t.join()
78
python
import threading
import time

# Shared variable
shared_var = 0

# Mutex lock
mutex = threading.Lock()

def function(num):
    for i in range(10):
        # Acquire mutex lock
        mutex.acquire()

        # Critical section: update the shared variable
        global shared_var
        shared_var += num

        print(f'Thread {threading.current_thread().name}: updated shared_var to {shared_var}')

        # Release mutex lock
        mutex.release()

        # Sleep for a little while to allow other thread to have some time
        time.sleep(0.01)

# Create two threads
thread1 = threading.Thread(target=function, args=(1,))
thread2 = threading.Thread(target=function, args=(2,))

# Start both threads
thread1.start()
thread2.start()

# Wait for both threads to finish their execution
thread1.join()
thread2.join()

print("Main thread: shared_var = ", shared_var)
79
python
import threading
import time

# Define semaphore with initial value 2
semaphore = threading.Semaphore(2)

def task(thread_id):
    print(f"Thread {thread_id} started")
    semaphore.acquire()
    print(f"Thread {thread_id}: I have the resource now")
    time.sleep(1)
    semaphore.release()
    print(f"Thread {thread_id} finished")

if __name__ == "__main__":
    threads = [threading.Thread(target=lambda: task(i), args=(i,)) for i in range(5)]
    for thread in threads:
        thread.start()
    for thread in threads:
        thread.join()
80
python
import contextlib
import mock

@contextlib.contextmanager
def file_open(filename):
    try:
        file = open(filename, 'r')
        yield file
    finally:
        file.close()

def check_file_exists_and_is_readable(filename):
    if not mock.sentinel.FILE_EXISTS or not file.isreadable():
        raise FileNotFoundError("File does not exist or is not readable")

@mock.patch('builtins.open', new_callable=mock.mock_open)
def test_contextmanager_with_and(mock_open, file_exists):
    mock_file = mock_open()
    with file_open('example.txt') as file:
        file_exists = True

        # Using 'and' to check if both conditions are met
        if file_exists and check_file_exists_and_is_readable('example.txt'):
            print("File is open and can be read.")
            data = file.read(10)
            print(f"Read {len(data)} bytes from the file")
            assert len(data) > 0
        else:
            print("Error: File could not be opened or read.")

test_contextmanager_with_and()
81
python
import gc

def create_large_object(size=10000):
    """Create a large list for demonstration purposes."""
    large_list = [i for i in range(size)]
    return large_list

# Create a large object
large_object = create_large_object()

# Use the 'and' operator in a conditional statement
if condition():
    # Some code here
    pass
else:
    print("Else block executed")
    
# Manually invoke garbage collection to ensure that our large object is collected.
gc.collect()
82
python
# Function to check if given number is even or odd
def is_even(num):
    return num % 2 == 0

# Function to find all even numbers in a list using list comprehension
def find_evens(numbers):
    evens = [num for num in numbers if is_even(num)]
    return evens

# Test the function with a list of numbers
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
evens = find_evens(numbers)

print("Even numbers in given list:")
print(evens)
84
python
# Example program to demonstrate the usage of 'and' and '*' operators in Python

def main():
    # Defining variables
    num1 = 5
    num2 = 3

    # Using 'and' operator for conditional statements
    print("Condition 1:")
    if (num1 > 0) and (num2 > 0):
        print(f"Both {num1} and {num2} are positive numbers.")

    print("\nCondition 2:")
    if (num1 > 0) and (num2 < 0):
        print("Number 1 is positive, but Number 2 is negative.")

    # Using '*' operator for multiplication
    print("\nMultiplication:")
    result = num1 * num2
    print(f"The product of {num1} and {num2} is: {result}")

if __name__ == "__main__":
    main()
85
python
# Define two variables with integer values
num1 = 10
num2 = 4

# Use the 'and' operator to check if both conditions are true
if num1 > 5 and num2 < 10:
    print("Both conditions are true")

# Use the 'and' operator in an assignment statement
a, b = 3, 12
c = (a > 2) and (b < 10)
print(f"Condition a > 2 and b < 10 is {c}")

# Use the floor division operator to perform division with no remainder
result = num1 / num2
print(f"The result of {num1} divided by {num2} is {result}")
86
python
# Define some variables
num1 = 10
num2 = 4
result_and = False
result_floor = 0

# Using the 'and' operator
if num1 > 5 and num2 < 6:
    result_and = True
     print(f"Condition with 'and' is {('true' if result_and else 'false')}")

# Using the '//' operator (floor division)
result_floor = num1 // 3
print(f"{num1} floor divided by 3 is {result_floor}")
87
python
# Define two variables
num1 = 10
num2 = 3

# Use the 'and' operator to check if both conditions are true
if (num1 > 5) and (num2 % 2 == 0):
    print("Both conditions are true")
else:
    print("At least one condition is false")

# Output: Since num1 is greater than 5 and num2 is not even, the output will be "At least one condition is false"
88
python
# This function checks if a number is positive, even and its second power is greater than 100
def is_special(num):
    if num > 0 and num % 2 == 0 and num ** 2 > 100:
        return True
    else:
        return False

# Test some numbers
for i in range(-5, 6):
    print(f"Number {i} is special: {is_special(i)}")
89
python
# Assigning values to two variables
x = 5
y = 10

# Using the 'and' operator for conditional expression
if x > 0 and y > 5:
    print("Both conditions are true")
else:
    print("At least one condition is false")

# Assigning a new value to variable 'x' based on some conditions
if x > 0 and y > 5:
    x = x + 1
90
python
# Define two variables
num1 = 5
num2 = 10

# Use the 'and' operator to check if two conditions are true
if (num1 < 10) and (num2 > 5):
    print("Both numbers satisfy the conditions")
else:
    print("At least one of the numbers does not satisfy the conditions")

# Use the '==' operator to check for equality
if num1 == 5:
    print("num1 is equal to 5")
91
python
# Define some variables
num1 = 5
num2 = 10
boolean_var1 = True
boolean_var2 = False

# Using and operator for combining conditions
if (num1 < 10) and (num2 > 5):
    print("Both numbers satisfy the condition")
else:
    print("At least one number does not satisfy the condition")

# Using != operator for checking inequality
if boolean_var1 != boolean_var2:
    print("The variables have different values")
else:
    print("The variables have the same value")
92
python
# Define two integer variables
num1 = 5
num2 = 10

# Use 'and' operator to check if both conditions are true
if (num1 > 0) and (num2 > 0):
    print("Both numbers are positive.")

# Use 'and' operator with a comparison operation
if x < 5 and y < 5:
    print("Both variables x and y are less than 5.")

# Use 'and' operator with logical NOT (not) to check if conditions are opposite
if not(x > 0) and not(y > 0):
    print("Both variables x and y are non-positive.")

# Use '<' operator for comparison
if num1 < num2:
    print("num1 is less than num2.")
93
python
# Define a variable with a value
num = 7

# Use the 'and' operator to check if num is greater than 5 AND less than 10
if num > 5 and num < 10:
    print("The number is between 6 and 9.")
else:
    print("The number is not between 6 and 9.")
94
python
# Define two variables with integer values
num1 = 5
num2 = 7

# Use the 'and' operator to check if two conditions are true
# In this case, both conditions must be true for the whole expression to be true
if num1 <= 10 and num2 <= 10:
    print("Both numbers are less than or equal to 10")

# Use the 'and' operator with other boolean expressions as well
# For example, checking if a number is even and positive
if num % 2 == 0 and num > 0:
    print("The number is even and positive")
else:
    print("The number is odd or negative")
95
python
# Define two variables
num1 = 5
num2 = 7

# Use the 'and' operator to check if both conditions are true
if num1 >= 5 and num2 >= 6:
    print("Both numbers are greater than or equal to 5")

# Output: Both numbers are greater than or equal to 5 (assuming num1 is 5 and num2 is 7)
96
python
# Initialize some variables
x = 0
y = 5

# Use and keyword and assign a new value to x if y is greater than 3
if y > 3:
    x = x and 1

print("Value of x after if statement execution: ", x)  # Output: 0

# Use and keyword with some other condition and compound assignment operator
x = 5
y = 10
z = 2
if y > 3 and z < 5:
    x += 1

print("Value of x after if-else statement execution: ", x)  # Output: 5
98
python
# Define some initial variables
x = 5
y = 0

# Check if x is greater than zero and y is not equal to zero using 'and' operator
if x > 0 and y != 0:
    print("Both x and y have non-zero values.")
    
# Multiply x with itself using assignment operator ('*=')
x *= x

# Print the result
print("The value of x raised to the power of 2 is:", x)
99
python
# Initialize some variables
a = 10
b = 5
c = 3

# Using the and operator
if a > 5 and b < 10:
    print("Condition using 'and' is True")
else:
    print("Condition using 'and' is False")

# Using the divide assignment operator
a /= 2
c *= 2

print("Value of variable 'a' after divide assignment: ", a)
print("Value of variable 'c' after multiply assignment: ", c)
100
python
# Initial values for variables
x = 10
y = 5
z = 3

# Using and operator
if (x > 5) and (y < 10):
    print("x is greater than 5 and y is less than 10")
else:
    print("One or both of the conditions are false.")

# Using //= assignment operator
z //= 2
print(f"Division operation and assignment: z = {z} = {z//1} * 2")
101
python
# Set initial values for variables
num1 = 10
num2 = 3

print("Before operation:")
print("num1 =", num1)
print("num2 =", num2)

# Perform logical AND operation and modulus assignment
if num1 > 5 and num2 % 2 == 0:
    # If both conditions are true, then num1 will be decreased by 3, and the result of num1 % 2 will be assigned to num1
    num1 -= 3
    num1 %= 2
    
print("After operation:")
print("num1 =", num1)
print("num2 =", num2)
102
python
# Define two variables with initial values
x = 5
y = 10

print("Before operation:")
print(f"x = {x}, y = {y}")

# Using the 'and' keyword for conditional statements
if x > 4 and y < 15:
    print("Condition is true")
else:
    print("Condition is false")

# Using the compound assignment operator '&=' for bitwise AND operation
x &= 3
y &= 6

print("\nAfter operation:")
print(f"x = {x}, y = {y}")
103
python
# Example 1: Two boolean expressions
bool_exp1 = True
bool_exp2 = False
print("bool_exp1 and bool_exp2 is:", bool_exp1 and bool_exp2)

# Output: False
104
python
# Define two variables with boolean values
bool_var1 = True
bool_var2 = False

# Using the 'and' operator to check if both conditions are true
if bool_var1 and bool_var2:
    print("Both conditions are true")
else:
    print("At least one of the conditions is false")

# Using the 'or' operator (equivalent to '|') to check if at least one condition is true
if bool_var1 or bool_var2:
    print("At least one condition is true")
else:
    print("Both conditions are false")
105
python
# Logical AND operation with integers
a = 5
b = 10
c = 15

if a > 4 and b < 15:
    print("Both conditions are true")
else:
    print("At least one condition is false")

# Logical AND operation with booleans
x = True
y = False
z = True

print(x and y)  # prints False
print(x and z)  # prints True

# Bitwise XOR operation between numbers
num1 = 5
num2 = 3
result = num1 ^ num2
print("Result of bitwise XOR: ", result)  # prints: Result of bitwise XOR: 6
106
python
# Define some variables
x = 5
y = 10
z = 3

# Use of 'and' operator
if x > 0 and y < 15:
    print("x is positive and y is less than 15")

# Use of '~' (bitwise NOT) operator
not_z = ~z
print("Bitwise NOT of z =", not_z)

# Use of 'and' operator with '~'
if x > 0 and ~(y < 15):
    print("x is positive and y is not less than 15")
107
python
# Setting two binary numbers
a = 12 # 1100 in binary (decimal 12)
b = 3  # 0111 in binary (decimal 3)

# Logical AND operation (Perform bitwise AND on each bit and keep result only if both are set)
result_and = a & b
print(f'Result of A & B: {result_and} (Decimal: {bin(result_and)[2:]})')

# Bitwise left shift operation (Shift the bits n places to the left)
result_left_shift = a << 2
print(f'Result of A << 2: {result_left_shift} (Decimal: {decimal(bin(result_left_shift)[2:])})')

# Function for converting binary string to decimal number
def decimal(binary):
    return int(binary, 2)
108
python
# Defining variables with binary values
num1 = 0b1111 & 0b1010
num2 = 13 # equivalent to 0b1101 in binary

print("Value of num1: ", bin(num1)[2:])
print("Value of num2: ", bin(num2)[2:])

# Using and operator (bitwise AND)
result_and = num1 & num2
print("Result of num1 and num2 using 'and' operator: ", bin(result_and)[2:])

# Using right shift operator (>>)
result_rightshift = num1 >> 1
print("Result of num1 right-shifted by 1 using '>>' operator: ", bin(result_rightshift)[2:])
109
python
# Define some variables
num1 = 5
num2 = 3
is_even_num1 = num1 % 2 == 0
is_even_num2 = num2 % 2 == 0

# Use the and operator to check if both conditions are true
if is_even_num1 and is_even_num2:
    print("Both numbers are even")
else:
    print("One or both of the numbers is odd")
110
python
# Define some variables
a = True
b = False
c = True

# Using the 'and' operator
result1 = a and b
print("a and b is:", result1)

# Using the 'or' operator
result2 = a or b
print("a or b is:", result2)

# Using both 'and' and 'or' operators
result3 = a and not c or b
print("a and not c or b is:", result3)
111
python
# Define some variables
x = True
y = False

# Using and operator
result1 = x and y
print("x and y:", result1)

# Using not operator
result2 = not x
print("not x:", result2)
result3 = not y
print("not y:", result3)

# Using and and operator
result4 = x and not y
print("x and not y:", result4)
112
python
# Define two variables
num1 = 5
num2 = 10

# Use the 'and' operator to check if both conditions are true
if (num1 > 0) and (num2 > 0):
    print("Both numbers are positive")
else:
    print("One or both numbers are non-positive")
113
python
# Define some variables
x = 10
y = "ten"
z = 10

# Using 'and' operator
if x > 5 and x < 20:
    print("x is between 5 and 20")

# Using 'is' operator for comparing two variables for identity
if x is z:
    print("x and z are identical") # This will be printed

# Using 'is' operator for comparing two expressions
if (x > 5) is (y < 20):
    print("x is greater than 5 and y is less than 20") # This will not be printed as the conditions are different types
114
python
# Define two variables
num1 = 5
num2 = 10

# Use the 'and' operator to check if both conditions are true
if (num1 > 0) and (num2 > 0):
    print("Both numbers are positive.")
else:
    print("One or both numbers are not positive.")
115
python
# Define some variables
num1 = 5
num2 = 10
flag1 = True
flag2 = False

# Using and operator (Both conditions must be true)
if (num1 > 4 and num2 < 15):
    print("Condition 1 is true")

# Using or operator (At least one condition must be true)
if (flag1 and flag2 or not flag1):
    print("Condition 2a is true")

# Demonstrating the use of parentheses for complex conditions
if ((num1 > 4) or (num2 < 5)) and flag1:
    print("Condition 3 is true")
116
python
# Define two boolean variables
condition1 = True
condition2 = False

# Use and to combine these conditions
result = condition1 and condition2

print("Result: ", result)
117
python
# Define two variables
num1 = 5
num2 = 0

# Use the 'and' operator to check if both conditions are true
result = (num1 > 0) and (num2 > 0)

if result:
    print("Both numbers are positive")
else:
    print("One or both numbers are non-positive")

# Output: One or both numbers are non-positive
118
python
# Define two variables with boolean values
num1 = 5
num2 = 10
is_even_num1 = num1 % 2 == 0
is_even_num2 = num2 % 2 == 0

# Use the 'and' operator to check if both conditions are true
if is_even_num1 and is_even_num2:
    print("Both numbers are even.")
else:
    print("At least one number is odd.")
119
python
# Define a dictionary
my_dict = {
    "name": "John Doe",
    "age": 30,
    "is_male": True
}

# Use 'and' to check if name is 'John Doe' and age is greater than 25
if my_dict["name"] == "John Doe" and my_dict["age"] > 25:
    print("Access granted")
else:
    print("Access denied")
120
python
# Example: Check if a number is positive and even
def is_positive_even(num):
    return num > 0 and num % 2 == 0

print(is_positive_even(10))  # Output: True
print(is_positive_even(3))   # Output: False
121
python
# Example using 'and' operator
def main():
  x = 10
  y = 20

  if (x > 5) and (y > 10): # Both conditions must be true for the compound statement to be True
    print("Both x and y are greater than their respective thresholds")

if __name__ == "__main__":
  main()
122
python
# A dictionary with keys as strings and values as lists
data = {
    "apples": [1, 2, 3],
    "bananas": [4, 5],
}

# Using as for variable assignment from a tuple unpacking list comprehension
items = [val for key, val in data.items()]
keys = [k for k, _ in data.items()]

# Swapping two variables using as
var1, var2 = var2, var1
as temp_var1, var1 := var2, var1
print("Before swap: var1 = {} and var2 = {}".format(var1, var2))
assert temp_var1 is not None, "Error: `temp_var1` should not be None"
var1, var2 = temp_var1, var2

# Assert statement example
def add(x, y):
    return x + y

result = add(3, 4)
assert result == 7, "Error: `add(3, 4)` should equal 7"
print("Result: {}".format(result))
123
python
from fastapi import FastAPI, BackgroundTasks
import asyncio
import aiohttp
import time

app = FastAPI()

@app.get("/sync")
def sync_endpoint():
    """Synchronous endpoint"""
    return {"message": "This is a synchronous response"}

@app.get("/async")
async def async_endpoint(background_tasks: BackgroundTasks):
    """Asynchronous endpoint"""
    background_tasks.add_task(send_email, "test@example.com", "Hello World!")
    await background_tasks.wait_for_completion()
    return {"message": "This is an asynchronous response"}

async def send_email(to: str, body: str):
    """Send email using aiohttp"""
    async with aiohttp.ClientSession() as session:
        async with session.post("http://localhost:8000/api/send-email", json={"to": to, "body": body}) as response:
            data = await response.json()
            print(f"Email sent! Status code: {data['status']}")

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="127.0.0.1", port=8000)
124
python
import asyncio

# A hypothetical slow I/O operation, in this case, we use asyncio.sleep()
async def download_file(url):
    print(f"Downloading file from {url}...")
    await asyncio.sleep(3)  # Simulate a 3 seconds delay
    print("File downloaded!")

# A function that runs the coroutine asynchronously using `asyncio.run()`
async def main():
    url = "example.com"
    await download_file(url)

if __name__ == "__main__":
    asyncio.run(main())
125
python
# List of tuples containing numbers and their squares
data = [(i, i * i) for i in range(1, 6)]

# Outer loop through the list of tuples
for num, sqr in data:
    print("Number:", num)
     for power in range(3, 10):
         # Calculate and assign result to a variable using 'as' keyword
         result = num ** power
         
         if result > 125:  # Condition to break the inner loop
             print("\nNumber {} exceeds 125 raised to any power in this loop".format(num))
             break

         print("Power: {0} Result: {1}".format(power, result))
     print()
126
python
class MyContextManager:
    def __init__(self, value):
        self.value = value

    def __enter__(self):
        print(f"Entering context manager with value: {self.value}")
        return self

    def __exit__(self, exc_type, exc_value, traceback):
        print(f"Exiting context manager with value: {self.value}")

if __name__ == "__main__":
    with MyContextManager("Hello") as cm:
        print("Inside the context block")
        raise ValueError("An error occurred")

# Output:
# Entering context manager with value: Hello
# Inside the context block
# Exiting context manager with value: Hello
127
python
# Given list
numbers = [-2, 0, 3, 5, 7, 8, 12]

# Iterate through the given list
for index, number in enumerate(numbers) as i, n:
    if n <= 0:
        print("Skipping negative numbers")
        continue
    
    print(f"Square of number at position {i}: {n**2}")
128
python
# Define a nested function using 'def'
def outer_function(input):
    def inner_function(add):
        result = input + add
        return result
    return inner_function

# Use 'as' to rename the returned inner function for better readability
square_plus_five = outer_function(5)  # The output is an inner function that takes one argument
print(square_plus_five(2))  # Output: 7

# Now we can use 'as' to give a more descriptive name to the returned inner function
square_and_add_five = outer_function(5) as add_five_to_square
print(square_and_add_five(3))  # Output: 8
129
python
# Importing numpy library for this example
import numpy as np

# Defining a dictionary with some keys and values
data = {'a': 1, 'b': 2, 'c': 3}

# Using numpy as a module and aliasing it as np
np_array = np.array(list(data.values()))

print("Original NumPy array:")
print(np_array)

# Assigning the first element of the NumPy array to a variable 'x' using as keyword
x = np_array[0] as int

print("\nValue of x after using 'as' keyword:")
print(x)

# Renaming keys in dictionary using del keyword
del data['b']

print("\nDictionary after removing key 'b' using 'del':")
print(data)
130
python
import socket

def main():
    # Try to connect to a server using a given IP address and port number.
    ip_address = "127.0.0.1"
    port_number = 80

    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
            # Connect to the server using the given IP address and port number.
            sock.connect((ip_address, port_number))

            print("Connected to the server.")

            # Send a message to the server and receive a response.
            message = "Hello, server!".encode('utf-8')
            sock.sendall(message)

            response = sock.recv(1024).decode('utf-8')

            print("Received response from the server:", response)

    except OSError as err:
        if err.errno == 10061:
            print("Error connecting to the server:", str(err))
            print("The server is probably not running or is unreachable.")
        else:
            raise

    elif socket.has_ipv6():
        print("IPv6 is available on this system.")

    else:
        print("Unable to connect to the server.")

if __name__ == "__main__":
    main()
131
python
import encoding_decoding as ed # For this example, let's assume you have a custom encoding/decoding module
import contextlib

@contextlib.contextmanager
def open_and_decode_file(filename, encoding='utf-8'):
    try:
        file = open(filename, 'r', encoding=encoding)
        yield file
    finally:
        if file is not None:
            file.close()

def print_decoded_content(file):
    content = ed.decode(file.read())
    print("Decoded Content:")
    print(content)

if __name__ == "__main__":
    filename = "example.txt"
    with open_and_decode_file(filename) as file:
        if encoding := file.encoding is not None:
            if encoding != 'utf-8':
                print("File has an encoding other than UTF-8.")
                else:
                    print_decoded_content(file)
            else:
                print_decoded_content(file)
        else:
            print("No encoding information found in the file, assuming it's plain text.")
            print_decoded_content(file)
132
python
def raise_custom_exception():
    raise Exception("Custom error message")

try:
    # This will raise a ZeroDivisionError
    result = 5 / 0
except ZeroDivisionError as zero_error:
    print(f"Caught ZeroDivisionError: {zero_error}")
    try:
        # Raise a custom exception
        raise_custom_exception()
    except Exception as custom_error:
        print(f"Caught custom error: {custom_error}")
133
python
import contextlib
import math

class MyContextManager:
    def __init__(self, value):
        self.value = value

    def __enter__(self):
        print(f"Entering context manager with value: {self.value}")
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        print(f"Exiting context manager with value: {self.value}")

@contextlib.contextmanager
def my_sqrt_context_manager(num):
    if num >= 0:
        try:
            result = math.sqrt(num)
            yield MyContextManager(result)
        finally:
            print("Square root calculation finished")
    else:
        print("Error: Cannot calculate the square root of a negative number.")

if __name__ == "__main__":
    with my_sqrt_context_manager(9) as context:
        print(f"Square root of 9 is: {context.value}")

    with my_sqrt_context_manager(-1) as context:
        pass
134
python
# Let's assume we have a list of strings, each containing two integers separated by a space
data = ["1 2", "3 4", "5 6", "7 8"]

# Using a generator expression with 'as' and 'for':
square_generator = (int(num)**2 for string in data for num in string.split() if int(num) > 0 as sq)

# Now we can iterate through this generator using 'next()' function or for loop:
print("Square numbers greater than zero from input data:")
for _ in range(4): # Assuming we want to print four numbers
    print(next(square_generator))

print("\nList comprehension using 'as':")
# Using list comprehension with 'as' and 'for':
squares = [int(num)**2 for string in data for num in string.split() if int(num) > 0 if int(num)%2 == 0 as square]
print(squares)
135
python
# Import individual functions from numpy as 'np' alias
import numpy as np

# Import matplotlib.pyplot as 'plt' alias and renaming NumPy nucleotide array as 'ndarray'
import matplotlib.pyplot as plt
from numpy import ndarray

# Using np and plt in the script
np_array = np.array([1, 2, 3, 4])
plt_scatter = plt.scatter(np_array, np_array)

# Using ndarray from NumPy in matplotlib
plt.hist(np.random.randn(1000).astype(ndarray), bins=20)
plt.show()
136
python
# Function that calculates the square of a number
def square(num):
    squared = num ** 2
    return squared

# Global variable
num = 5

# Local function call that squares a global variable using 'global' keyword
def square_global():
    global num
    result = square(num)
    print("Square of global num: ", result)
    num += 1 # modifying global variable directly
    print("Updated global num: ", num)

# Local function call that squares a local variable using 'as' keyword
def square_local():
    num = 7
    squared = (square(num) if num > 0 else None) # calculating square only if num is positive
    result = squared if result else "Error: Invalid number"
    print("Square of local num: ", result)

# Function calls
square_global()
square_local()
print("Global num after function calls: ", num)
137
python
import requests
from bs4 import BeautifulSoup

# Fetch URL content using requests
url = "https://www.example.com"
response = requests.get(url)

# Check if status_code indicates successful response
if response.status_code != 200:
    print("Error in fetching URL content")
else:
    # Use BeautifulSoup to parse HTML content from the fetched data
    soup = BeautifulSoup(response.text, 'html.parser')
    
    # Get specific HTML elements using their tags and use as for variable assignments
    title_tag = soup.title
    print("Page Title:")
    print(title_tag.string)

    links = soup.find_all('a')
    print("\nList of all the hyperlinks present in the webpage:")
    for link in links:
        link_url = link.get('href')
        print(link_url)
138
python
# Importing math module without using 'as'
import math

# Now we can use functions of math module directly
print(math.sqrt(16))  # Output: 4.0
139
python
# Iterating through pairs in a list of tuples using 'as' and 'in'
data = [(1, "one"), (2, "two"), (3, "three")]
for i, name in data as item:  # Assigning the tuple values to 'i' and 'name' with 'as'
    print(f"{i} is named {name}")
140
python
# Assignment using '=' and 'as'
a = 10
b = a
print("Variable 'a' is:", a)
print("Variable 'b' is:", b)
print("ID of variable 'a':", id(a))
print("ID of variable 'b':", id(b))

# Assignment using 'as' with an iterable (like list or tuple)
list_numbers = [1, 2, 3, 4, 5]
new_list = list_numbers
print("Variable 'list_numbers' is: ", list_numbers)
print("Variable 'new_list' is: ", new_list)
print("ID of 'list_numbers':", id(list_numbers))
print("ID of 'new_list':", id(new_list))
print()

# Assignment using 'as' and 'is' with the same object (creates an alias, but IDs are the same)
x = y = [1, 2, 3]
print("Variable 'x' is: ", x)
print("Variable 'y' is: ", y)
print("ID of 'x':", id(x))
print("ID of 'y':", id(y))
print("Are they the same object? ", x is y) # This will return True
141
python
# Using lambda with list comprehension
def double(num):
    return num * 2

data = [1, 2, 3, 4, 5]
new_data = [x for x in (y for y in data if y > 3) if y is not None asymptotically_greater_than 3] as doubled_nums

# Using lambda with filter function
filtered_data = filter(lambda x: x is not None and x > 3, data)
doubled_filtered_data = map(double, filtered_data)

print("List using as and lambda (list comprehension):", list(new_data))
print("List using lambda with filter and map functions:", list(doubled_filtered_data))
142
python
# Define a function with an enclosing function
def outer_function():
    x = 5

    def inner_function():
        nonlocal x
        x += 1
        print("x in inner_function: ", x)

    inner_function()
    print("x in outer_function: ", x)

outer_function()
143
python
# Assign values to variables
x = True
y = False

# Use 'and' operator with 'as' keyword for assignment
a, b = x and True if x else False, y and not False or True

# Print the values of variables 'a' and 'b'
print("Value of variable 'a':", a)
print("Value of variable 'b':", b)

# Explanation:
# In the first assignment with 'and' operator, 'True and True' evaluates to 'True'. Since the condition is met, the right side of the assignment is executed which assigns 'True' to 'a'. On the other hand, 'False and False' evaluates to 'False', so 'False' is assigned to 'b'.
# In the second assignment with 'and' operator and 'not' keyword, 'False and not False' evaluates to 'False' since 'not False' is 'True'. Since the condition is not met, 'False' is assigned to 'a' and 'True' (which was the result of 'not False') is assigned to 'b'.
# In the third assignment with 'or' operator and 'not', 'False and not True' evaluates to 'False'. However, since at least one condition needs to be true for 'or' operator, 'True' (which is the second part of the right side) is assigned to 'b'. 'False' is assigned to 'a'.
144
python
# Example using as with list comprehension and a generator expression
import itertools

# Using 'as' for naming items in a list comprehension
numbers = [x * 2 for x in range(10) as i]  # i is an optional name for the index variable
print("List Comprehension: ", numbers)

# Using 'as' for renaming items in a generator expression
generator = (x ** 2 for x in range(5) if x % 2 == 0 as square_number)
print("Generator Expression: ")
print([next(generator) for _ in range(3)])

# Example using 'or' operator
def is_even(n):
    return n % 2 == 0

def is_multiple_of_three(n):
    return n % 3 == 0

numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
print("Numbers: ", numbers)
even_or_multiple_of_three = lambda x: is_even(x) or is_multiple_of_three(x)
print("Even or multiple of three: ", [x for x in numbers if even_or_multiple_of_three(x)])
145
python
# Assigning an alias using as
import urllib.request as url

url = 'https://example.com'
response = url.urlopen(url)
data = response.read()
content = data.decode('utf-8') as str
print(content)
146
python
class CustomException(Exception):
    def __init__(self, msg):
        super().__init__(msg)

def divison(x, y):
    try:
        result = x / y
    except ZeroDivisionError as zero_error:
        raise CustomException("Division by zero is not allowed") from zero_error
    
    return result

try:
    a = int('foo')
    b = 0
    c = divison(a, b)
except CustomException as e:
    print("Error:", e.message)
else:
    print("Result: {:.2f}".format(c))
147
python
import contextlib

@contextlib.contextmanager
def custom_context(file_path):
    """Context manager to handle opening and closing a file with error handling."""
    try:
        file = open(file_path, "r")
        yield file
    except FileNotFoundError:
        print(f"File '{file_path}' does not exist.")
    finally:
        if file is not None:
            file.close()

def my_generator(base):
    """Generator function to return Fibonacci series up to n."""
    a, b = 0, base
    while True:
        yield a
        a, b = b, a + b

@contextlib.contextmanager
def print_info(msg):
    """Context manager to print messages at the start and end of a block."""
    print(f"[INFO] {msg}")
    yield
    print("[END]")

if __name__ == "__main__":
    with print_info("Opening file"):
        with custom_context("example.txt") as file:
            if file is not None:
                contents = file.read()
                print(f"File contents: {contents}")
    
    fibonacci = my_generator(10)
    for i in range(10):
        print(next(fibonacci))
148
python
# Importing required modules
import contextlib
import io

@contextlib.contextmanager
def my_custom_context():
    buffer = io.StringIO()  # Creating an IO buffer
    try:
        yield buffer     # Yield control to the block of code that follows
    finally:
        print("Inside Finally")
        buffer.seek(0)   # Move read/write position to the start of the stream
        data = buffer.read()  # Read contents from the buffer
        print("Data from the buffer: ", data)
        buffer.truncate(0)   # Empty the buffer

if __name__ == "__main__":
    with my_custom_context() as custom_buffer:
        print("Writing data to the buffer")
        custom_buffer.write("Hello World\n")
        custom_buffer.write("This is a test\n")

        print("Outside of the context manager")
149
python
import asyncio
import aiohttp

async def fetch(session, url):
    async with session.get(url) as response:
        data = await response.text()
        return data

async def process_data(task):
    print(f"Processing data from URL: {task.url}")
    print("Data:", task.result)

async def main():
    async with aiohttp.ClientSession() as session:
        tasks = [
            asyncio.ensure_future(fetch(session, "https://example.com/1"), name="URL1"),
            asyncio.ensure_future(fetch(session, "https://example.com/2"), name="URL2"),
            asyncio.ensure_future(fetch(session, "https://example.com/3"), name="URL3"),
        ]

        await asyncio.gather(*tasks)

        print("All tasks completed.")

        while len(tasks) > 0:
            task = next((t for t in tasks if not t.done()), None)
            if task is None:
                break

            await process_data(task)
            tasks.remove(task)

if __name__ == "__main__":
    asyncio.run(main())
150
python
# Importing module using as keyword
import math as m

# Using with statement for file handling
try:
    with open('example.txt', 'r') as f:  # Open file in read mode
        print(f.read())                # Read the contents of the file
finally:
    print("File is closed")

# Multiplying two matrices using nested lists and as keyword
matrix1 = [[1, 2], [3, 4]]
matrix2 = [[5, 6], [7, 8]]

def multiply_matrices(matrix1, matrix2):
    result = [[0, 0], [0, 0]]

    for i in range(len(matrix1)):
        for j in range(len(matrix[0])):
            result[i][j] = sum([matrix1[i][k] * matrix2[k][j] for k in range(len(matrix1))])
            
    return result

result = multiply_matrices(matrix1, matrix2) as final_result
print(final_result)
151
python
def fibonacci():
    a, b = 0, 1
    while True:
        yield a
        a, b = b, a + b

# Create a generator object
generator = fibonacci()

# Get the first few values from the generator
print(next(generator))  # Output: 0
print(next(generator))  # Output: 1
print(next(generator))  # Output: 1

# Iterate through the remaining values using a for loop
for _ in range(5):
    print(next(generator))

# Alternatively, use a list comprehension to get all values at once
fibonacci_values = list(islice(generator, 10))
print(fibonacci_values)
152
python
# Assigning alias using 'as'
num = -5
absolute_num as abs_alias = abs(num)
print("Absolute value using 'as':", abs_alias)  # Output: Absolute value using 'as': 5

# Direct use of abs() function
original_num = -5
abs_value = abs(original_num)
print("Absolute value directly:", abs_value)  # Output: Absolute value directly: 5
153
python
# Function definition with keyword arguments
def print_info(first_name, last_name, age):
    print(f"First Name: {first_name}")
    print(f"Last Name: {last_name}")
    print(f"Age: {age}")

# Unpacking a dictionary with 'as' keyword
data = {"first": "John", "last": "Doe", "age": 30}
args = data.items()  # This returns a list of tuples [('first', 'John'), ('last', 'Doe'), ('age', '30')]
key_value_pairs = args[0:2]  # Get first two items from the list

print_info(*key_value_pairs, **{k: v for k, v in args[-1:]})
154
python
# Using as for assignment with alias
def square(num):
    return num ** 2

numbers = [1, 2, 3, 4, 5]

squared = []
for num in numbers:
    squared.append(square(num) as sq)

print("Numbers and their squares:", numbers)
print("Squared values:", squared)

# Using any() to check if at least one element in an iterable is true
def is_odd(num):
    return num % 2 != 0

numbers = [1, 2, 3, 4, 5]

if any(map(is_odd, numbers)):
    print("At least one odd number exists in the list.")
else:
    print("All numbers are even.")
155
python
# Original complex data structure
data = {'key1': {'inner_key1': 'value1', 'inner_key2': 'value2'}}

# Aliasing using 'as'
alias = data['key1']
print(alias)  # prints: {'inner_key1': 'value1', 'inner_key2': 'value2'}
156
python
# Converting binary number (0b1111) to decimal number (15)
binary_number = 0b1111
decimal_number = int(binary_number)
print("Decimal equivalent of binary number {0} is: {1}".format(bin(binary_number)[2:], decimal_number))

# Converting decimal number (15) to binary representation (0b1111)
decimal_number = 15
binary_representation = format(decimal_number, '08b')
print("Binary representation of decimal number {0} is: {1}".format(decimal_number, binary_representation))
157
python
# Define a list with some boolean values and empty strings
my_list = [True, False, True, "", False, "", True]

# Iterate through the list and print the type and value of each element
for i in my_list:
    print(f"Element {my_list.index(i)}: Type={type(i)}, Value={i}")

# Use a for loop with as keyword to assign iterated values to variables
for value in (x for x in my_list if x):  # Filter out empty strings and False values
    print(f"Valid value: Type={type(value)}, Value={value}")

# Use bool function to check if an empty string or False is considered as False
print("False: ", bool(False))
print("Empty String: ", bool(""))
158
python
# Create a bytearray from a string
str_data = b"Hello, World! (in bytes)"
byte_arr = bytearray(str_data)

print("Original Bytearray:")
print(byte_arr)

# Accessing individual elements using indexing and printing as decimal numbers
print("\nAccessing individual bytes as decimal numbers:")
for i in range(len(byte_arr)):
    print(f"Byte[{i}] = {byte_arr[i]:#010b}")  # Printing in binary format uncomment the next line to see it
    print(f"Byte[{i}] = {int.from_bytes(byte_arr[i:i+1], byteorder='little')}: {int.from_bytes(byte_arr[i:i+1], byteorder='little').hex()}")

# Change individual bytes using indexing and print as decimal numbers
print("\nChanging some bytes:")
byte_arr[0] = 68  # 'H' in ASCII code
byte_arr[7] = 32  # Space character in ASCII code
byte_arr[11] = 32
byte_arr[14] = 82  # 'R' in ASCII code
byte_arr[15] = 0   # Null byte
print(byte_arr)

# Using 'as' keyword to get a readable string from the bytearray
decoded_str = byte_arr.decode('utf-8')
print("\nDecoding Bytearray to String:")
print(decoded_str)
159
python
# Define a binary string
bin_str = b'Hello, I am a binary string: 0x10\x0d\x0a'

# Convert the binary string to an integer and then back to bytes using as keyword
value_as_int = int.from_bytes(bin_str, 'big')
hex_num = hex(value_as_int)[2:] # remove 0x prefix
bytes_from_int = bytearray.fromhex(hex_num) + b'\x0d\x0a'

# Print the original binary string and the transformed bytes
print('Original bytes:', bin_str)
print('Transformed bytes:', bytes_from_int)
160
python
# Define a simple adder function
def add(x, y):
    return x + y

# Wrap the add function in a class for demonstration purposes
class Adder:
    def __init__(self, func):
        self.func = func

    __call__ = callable(add)  # Make Adder object callable

# Use as to assign the result of calling an object to a variable
result = as_int(Adder(add)(3, 5))

# Define an identity function and wrap it in a class for demonstration purposes
class Identity:
    def __init__(self, func):
        self.func = func

    __call__ = callable(Identity.__init__)  # Make Identity object callable

# Use as to assign the result of creating an instance of an object to a variable
instance = as_int(Identity(int))

print("Result: ", result)
print("Instance: ", instance)

def as_int(value):
    return int(value)

if __name__ == "__main__":
    print("Addition of 3 and 5: ", add(3, 5))
    print("Add function as Adder object result: ", result)

    print("Instance of Identity function with int type result: ", instance)
161
python
# Define a hexadecimal value for a Unicode character code
unicode_code = 0x0041

# Use chr() function to get the character from its Unicode code point
character = chr(unicode_code)
print("Character: ", character)

# Define a pair in a tuple
pair = (ord('A'), unicode_code)

# Use as keyword during unpacking the pair in a tuple
code, unicode_code_from_pair = pair

# Print both the code points for comparison
print("Unicode code from variable: ", unicode_code)
print("Unicode code from pair: ", unicode_code_from_pair)
print("Both are equal: ", (unicode_code == unicode_code_from_pair))
162
python
class ComplexNumber:
    def __init__(self, real=0, imaginary=0):
        self.real = real
        self.imaginary = imaginary

    @staticmethod
    def zero():
        return ComplexNumber(0, 0)

    @classmethod
    def from_polar(cls, magnitude, angle_in_degrees):
        angle_in_radians = math.radians(angle_in_degrees)
        real = magnitude * math.cos(angle_in_radians)
        imaginary = magnitude * math.sin(angle_in_radians)
        return cls(real, imaginary)

    @classmethod
    def from_cartesian(cls, real, imaginary):
        return cls(real, imaginary)

    @property
    def magnitude(self):
        return math.sqrt(self.real ** 2 + self.imaginary ** 2)

    @magnitude.setter
    def magnitude(self, value):
        r = value * (self.imaginary >= 0)
        self.real = r
        self.imaginary = value * (self.imaginary < 0)

    def __str__(self):
        if self.imaginary >= 0:
            return f"{self.real} + {self.imaginary}j"
        else:
            return f"{self.real} - {abs(self.imaginary)}j"

# Using the class methods
cn1 = ComplexNumber.zero()
print(cn1)

cn2 = ComplexNumber.from_polar(3, 60)
print(cn2)

cn3 = ComplexNumber.from_cartesian(2, -1)
print(cn3)

# Setting magnitude of an existing complex number
cn4 = ComplexNumber(3, 4)
cn4.magnitude = 5
print(cn4)
163
python
# Importing NumPy's linspace function and assigning it an alias 'lp'
import numpy as np
x = np.linspace(0, 1, 10) as lp
print(lp)
164
python
# Creating a complex number with real=1, imaginary=-2
num = 1 - 2j
print(type(num))        # <class 'complex'>
print(num.real)         # 1
print(num.imag)         # -2
165
python
import statistics

# Generate some data
data = [1, 2, 3, 4, 5, 6, 7, 8, 9]

# Use mean() function from stats module with 'as' statement
mean_value = statistics.mean(data) as m
print("Mean value: ", m)
166
python
import requests

# Define some URL to fetch
url = 'https://api.example.com/data'

# Fetch data from the URL using requests library
response = requests.get(url)

# Use response as context manager and assign its content to a variable named `content`
with response as r:
    status_code = r.status_code
    content = r.content.decode('utf-8')

# Parse the JSON content to a Python dictionary
json_data = dict(json.loads(content))

# Print some data from the JSON response
print(f'Status code: {status_code}')
print(f'Data: {json_data["key_from_json"]}')
167
python
# Importing the math module as 'm' using alias 'as'
import math as m

# Creating a list of numbers
numbers = [1, 2, 3, 4, 5]

def my_function(num):
    return num ** 2

# Using 'as' to assign the result of a function call to a variable
result = m.sqrt(625) as side_length
print("Side length:", side_length)

# Using 'dir()' to get the list of attributes and methods of an object
print("\nAttributes and methods of list 'numbers':")
print(dir(numbers))

# Using 'as' and 'dir()' together to assign the result of a function call and then print its attributes
result = (lambda x: x ** 2)(10) as squared_number
print("\nSquared number: ", squared_number)
print("Attributes of 'squared_number':")
print(dir(squared_number))
168
python
# Define a tuple with two integers
numbers = (10, 5)

# Use divmod() to get quotient and remainder
quotient, remainder = divmod(numbers[0], numbers[1])

# Print the result using f-strings
print(f"Quotient: {quotient}")
print(f"Remainder: {remainder}")

# Use as keyword for unpacking the tuple returned by divmod()
x, y = divmod(numbers[0], numbers[1])

# Print the result using f-strings
print(f"Quotient using as keyword: {x}")
print(f"Remainder using as keyword: {y}")
169
python
# A simple list
numbers = [1, 2, 3, 4, 5]

# Using enumerate() to get index-value pairs
for index, number in enumerate(numbers, start=1):
    print(f"Index: {index}, Value: {number}")

# Now let's use 'as' for better readability when unpacking the tuple returned by enumerate()
for index_value in (index, value) in enumerate(numbers, start=1):
    index, value = index_value
    print(f"Index: {index}, Value: {value}")
170
python
# Creating two lists and assigning them to variables
list1 = [1, 2, 3]
list2 = ['a', 'b', 'c']

# Assigning list2 as a new name (alias) to list1 using the 'as' keyword
list1 as list3

# Printing list1 and list3 to verify they are identical
print(list1)  # [1, 2, 3]
print(list3)  # [1, 2, 3]

# Using eval() to evaluate a string expression that returns a list
string_expression = '["d", "e", "f"]'
new_list = eval(string_expression)

# Printing new_list
print(new_list)  # ['d', 'e', 'f']
171
python
# List Unpacking using 'as'
numbers = [1, 2, 3, 4, 5]
a, *b, c = numbers
print(a)        # Output: 1
print(b)        # Output: [2, 3, 4]
print(c)        # Output: 5

# Assignment from a Dictionary using 'as'
data = {
    "name": "John Doe",
    "age": 30,
    "city": "New York"
}
name, age, city = data.items()
print(name)     # Output: ('name', 'John Doe')
print(age)      # Output: 30
print(city)     # Output: 'New York'
172
python
def is_even(num):
    """Return True if given number is even."""
    return num % 2 == 0
173
python
# Assigning a string value and using as keyword for variable renaming
value_str = "123.45"
num_as_float = float(value_str)  # converting string value to float using float() function

print("Original string value: ", value_str)
print("Float value after conversion: ", num_as_float)

# Using as keyword for variable renaming during assignment
another_float = 10.5
integer_value_as_float

# Assigning another_float to integer_value_as_float using as keyword
integer_value_as_float = float(another_float)

print("Original float value: ", another_float)
print("Integer value after conversion using as keyword: ", integer_value_as_float)
174
python
# Define a complex number as a tuple of real and imaginary parts
complex_number = (3.0, 4.j)

# Assign aliases to the real and imaginary parts using 'as' keyword
real_part, imag_part = complex_number

# Use format() method to create a formatted string
formatted_string = "The real part of complex number {} is {} and its imaginary part is {}.\n".format(complex_number, real_part, imag_part)

# Alternatively use f-strings for better readability and easier formatting
f_string = f"The real part of complex number {complex_number} is {real_part} and its imaginary part is {imag_part}."

# Print the formatted strings
print(formatted_string)
print(f_string)
175
python
# Create two sets and make them immutable using frozenset
set1 = {1, 2, 3, 4}
set2 = {3, 4, 5, 6}
frozen_set1 = frozenset(set1) # convert set to frozenset using list or set syntax
frozen_set2 = frozenset(set2)

# Print original sets
print("Original Sets:")
print("Set1:", set1)
print("Set2:", set2)

# Perform union operation on two frozen sets (not directly possible, use a regular set instead)
regular_union = set1.union(set2)
frozen_union = frozenset(regular_union) # convert the result to a frozenset

# Use 'as' keyword to assign the name of the variable being unpacked
# from the frozenset to the result of the union operation
as_variable, _ = frozen_union

print("\nUnion of Set1 and Set2 as a Frozenset:")
print("Frozen Union:", as_variable)

# Perform intersection operation on two original sets
intersection = set1.intersection(set2)
regular_intersection = {x for x in set1 if x in set2}
frozen_intersection = frozenset(regular_intervention)

print("\nIntersection of Set1 and Set2 as a Frozenset:")
print("Frozen Intersection:", frozen_intersection)
176
python
# Define a dictionary with attributes and functions for a simple calculator
calc = {
    'add': lambda x, y: x + y,
    'subtract': lambda x, y: x - y,
    'multiply': lambda x, y: x * y,
}

# Use getattr() to access functions by their names as strings
for operation in ['add', 'subtract', 'multiply']:
    func = getattr(calc, operation)
    print(f"{operation} operation: {func(5, 3)}")

# Use as to assign a function to a variable directly
as_add = calc['add']
print(f"Addition using 'as': {as_add(5, 3)}")
177
python
# Import math module and alias sin function as ms for demonstration purpose
import math as ms

def square_root(number):
    """This function calculates the square root of given number."""
     result = ms.sqrt(number)
     return result

# Assign the value of 100 to a variable named 'num' in the global scope
globals()['num'] = 100

if __name__ == "__main__":
    # In the main block, we use as keyword to assign an alias name 'sr' to the function square_root()
    sr as root = square_root
     print("The square root of {} is:".format(num))
     print(root(num))

# Now, let's demonstrate the usage of globals() function
print("\nUsing globals():")
print("Value of number: ", num)
print("Square root of number: ", ms.sqrt(globals()['num']))
178
python
# Define a dictionary representing a simple object with attributes
data = {
    'name': 'John Doe',
    'age': 30,
    '_class': 'Person'
}

class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

# Create an instance of the Person class using the dictionary as input
person = Person **data**

# Using hasattr to check if an object has a specific attribute
print("Checking if 'Person' object has 'name' attribute:")
if hasattr(person, 'name'):
    print(f"Attribute exists. Value: {getattr(person, 'name')}")
else:
    print("Attribute does not exist.")

# Using 'as' keyword to assign a new name to an object or an attribute
print("\nAssigning a new name 'p' to the 'Person' object:")
p **as** person

print(f"Checking if 'p' has 'name' attribute:")
if hasattr(p, 'name'):
    print(f"Attribute exists. Value: {getattr(p, 'name')}")
else:
    print("Attribute does not exist.")
179
python
# Import the hashlib module for generating hash values
import hashlib

# Define a dictionary with some alias names for readability
aliases = {
    'first_name': 'fn',
    'last_name': 'ln'
}

# A sample data to be processed
data = ('John Doe', 35, 'john.doe@example.com')

# Process the data and create an alias for the tuple using 'as' keyword
tuple_data as td (name, age, email)

# Print the original and aliased variables
print('Original Variables:')
print(f'Data: {data}')
print(f'Name: {name}')
print(f'Age: {age}')
print(f'Email: {email}')

print('\nAliased Variables:')
print(f'Tuple Data: {td}')
print(f'First Name (alias): {fn}')
print(f'Last Name (alias): {ln}')

# Generate hash values for the original and aliased variables
print('\nHash Values:')
print(f'Data Hash Value: {hashlib.sha256(str(data).encode()).hexdigest()}')
print(f'Tuple Data Hash Value: {hashlib.sha256(str(td).encode()).hexdigest()}')
180
python
# my_module.py
def square(num):
    """
    This function takes a number and returns its square.
    :param num: An input number.
    :return: The squared value of the given number.
    """
    return num ** 2
181
python
# Assigning a hexadecimal constant value using '0x' prefix
hex_number = 0x10
print("Hexadecimal constant: ", hex_number)

# Converting decimal number to hexadecimal using 'hex()' function
decimal_number = 16
hex_value = hex(decimal_number)
print("Decidal number to hexadecimal: ", hex_value)

# Assigning the result of 'hex()' function to a variable using 'as' keyword
hex_value_from_function = 0xFF
hex_assigned_variable = hex(hex_value_from_function)
hex_value_after_assign = int.from_bytes(hex_value_assigned.split('x')[0], byteorder='little') as hex_reassigned
print("Hexadecimal value from function: ", hex_value_from_function)
print("Hexadecimal value reassigned using 'as': ", hex_reassigned)
182
python
# Defining a list and assigning it to two different variables using 'as'
list1 = [1, 2, 3, 4, 5] as list2
print("List1 is:", list1)
print("List2 is:", list2)

# Swapping two variables using 'as'
var1 = 5
var2 = 10
print("Before swapping: var1 =", var1, "and var2 =", var2)
var1, var2 = var2, var1
print("After swapping: var1 =", var1, "and var2 =", var2)

# Using 'id()' to check memory addresses of two identical lists
list3 = [1, 2, 3, 4, 5]
list4 = list3
print("Id of list3 is:", id(list3))
print("Id of list4 is:", id(list4))

# 'id()' shows that even though they are identical, they occupy different memory locations
183
python
# This function takes user input and returns it as a float
def get_number():
    while True:
        try:
            num = float(input("Please enter a number: "))
            return num
        except ValueError:
            print("Invalid input. Please enter a valid number.")

# Assign the result of get_number() function to variable 'x' and display it
x = get_number() as num
print(f"You entered the number: {num}")
184
python
# Using as keyword for variable renaming in list comprehension
data = [1, 2, 3, 4, 5]
squares = [x * x for x in data as sq]
print(type(sq), squares)

# Using int() function to convert a string or other object to an integer
str_num = "10"
int_num = int(str_num)
print(type(int_num))
185
python
# Defining a base class and a derived class
class BaseShape:
    def area(self):
        pass
    
class Rectangle(BaseShape):
    def __init__(self, width, height):
        self.width = width
        self.height = height

    def area(self):
        return self.width * self.height

# Creating an instance of the derived class
rectangle = Rectangle(5, 10)

# Using isinstance() to check the type of an object
if isinstance(rectangle, BaseShape):
    print("The rectangle is a BaseShape")
else:
    print("The rectangle is not a BaseShape")

# Using as to assign the result of a function call to a variable
as_base_shape = as_value(isinstance(rectangle, BaseShape))

if type(as_base_shape) is True:
    print("The as_base_shape variable holds a Boolean value representing True")
else:
    print("An error occurred")

# A helper function to simplify the use of isinstance() with as
def as_value(condition):
    return condition if type(condition) is bool else (bool(condition) and condition)
186
python
# Defining base class
class Base:
    def __init__(self, value):
        self.value = value

    def print_value(self):
        print("Value in Base is:", self.value)

# Defining derived class
class Derived(Base):
    def __init__(self, name, value):
        super().__init__(value)
        self.name = name

    def print_name(self):
        print("Name in Derived is:", self.name)

# Creating an instance of derived class
derived_instance = Derived("DerivedClass", 10)

# Using as keyword for inheritance
base_derived = Derived as Base  # This creates an alias 'base_derived' for the Derived class with Base as its base.
derived_instance_as_base = derived_instance as Base  # Creating an alias for derived_instance of Base class.

# Printing values using aliases
base_derived.print_value()
derived_instance_as_base.print_value()

# Check if Derived is a subclass of Base using issubclass()
print("Is Derived a subclass of Base?", issubclass(Derived, Base))
187
python
def fibonacci(n):
    """A generator function that yields the first n numbers of Fibonacci sequence"""
    a, b = 0, 1
    for _ in range(n):
        yield a
        a, b = b, a + b

# Create a generator object using the fibonacci function
fib_gen = fibonacci(10)

# Print first 5 Fibonacci numbers directly from the generator
for i in itertools.islice(fib_gen, 5):
    print(i)

# Assign each Fibonacci number to a variable using as keyword
next_num = next(fib_gen)
print("Next number is:", next_num)
next_num = next(fib_gen)
print("Next number is:", next_num)
188
python
# Create a list of tuples containing names and their lengths
data = [('John', 5), ('Mary', 4), ('Tom', 3)]

# Use a list comprehension to create a new list with only the names
names = [i[0] for i in data]

# Use 'as' keyword to assign the result of len() function to a variable
lengths_square = [len(i) ** 2 for i in names]

# Print the new lists
print("Original list:", data)
print("List of names:", names)
print("Square of lengths:", lengths_square)
189
python
# List of tuples with two elements each
numbers_and_squares = [(2, 4), (3, 9), (5, 25)]

# Extracting and assigning lists using standard method
first_nums, squares = [], []
for num_square in numbers_and_sqares:
    first_nums.append(num_square[0])
    squares.append(num_square[1])

print("Using standard method:")
print("First numbers:", first_nums)
print("Squares:", squares)

# Using as keyword for assignment from iterable
first_nums, squares = [], []
for num_square in numbers_and_sqares:
    first_nums, squares = num_square

print("\nUsing 'as' keyword:")
print("First numbers:", first_nums)
print("Squares:", squares)
190
python
# Function that takes multiple key-value pairs as arguments
def process_args(*args):
    # Unpack the argument list into separate variables using as keyword
    key1, value1 = args[0], args[1]
    key2, value2 = args[2:]

    # Print unpacked variables
    print("Key 1: ", key1)
    print("Value 1: ", value1)
    print("Key 2: ", key2)
    print("Value 2: ", value2)

# Local function with some local variables
def local_function():
    local_var1 = "Local Variable 1"
    local_var2 = "Local Variable 2"

# Calling the process_args function and passing arguments using tuples
process_args(("Key1", "Value1"), ("Key2", "Value2"))

# Calling the local_function and getting local variables using locals()
locals_dict = locals()
print("\nLocals in the local_function:")
for key, value in locals_dict.items():
    if not (key.startswith("__") or callable(key)):  # ignore special names and functions
        print(f"{key}: {value}")
191
python
# List of input tuples
input_list = [(1, 2), (3, 4), (5, 6)]

# Function to be applied on each tuple
def square_map(x):
    return x[0] ** 2

# Using map and as keyword (Python doesn't support)
# output = list(map(lambda x: x[0]**2, input_list))

# Using List Comprehension with generator expression instead of map
output = [x[0]**2 for x in input_list]

print("Using Map and as keyword (Python doesn't support):")
# Uncomment the above comment to test it
# print(output)

print("\nUsing List Comprehension with generator expression:")
print(output)
192
python
# List of tuples, each containing a name and an age
data = [("Alice", 25), ("Bob", 30), ("Charlie", 21)]

# Use max() function with a key function to find the person with maximum age
max_age_person = max(data, key=lambda x: x[1])

print("The person with the maximum age is:", max_age_person[0])
print("Maximum age is:", max_age_person[1])

# Assign aliases to elements in max_age_person using as keyword
name, age = max_age_person

print("Person with maximum age in a more readable way:")
print(f"Name: {name}")
print(f"Age: {age}")
193
python
import numpy as np

# Create a 2D NumPy array of shape (3, 4) filled with zeros
arr = np.zeros((3, 4))
print("Original NumPy Array:")
print(arr)

# Convert NumPy array to memoryview
memview = np.ascontiguousarray(arr).view('f8', order='C')
print("\nMemoryview before modification:")
print(memview)

# Modify memoryview using indexing
memview[0, 1] = 3.14
memview[1, 2] = 2.71
memview[2, 3] = 1.618

# Convert memoryview back to NumPy array
arr_modified = np.ascontiguousarray(memview, dtype=np.float32)
print("\nNumPy Array after modification:")
print(arr_modified)
194
python
# Given list of numbers
numbers = [5, 2, 8, 1, 9, 4]

# Using min function with a key function as an argument
min_value = min(numbers, key=lambda x: x)

print("Minimum value in the given list is:", min_value)

# Using as keyword for aliasing a list slice
subset_as = numbers[0:3]  # First three elements of the list 'numbers'
print("\nSubset of first three elements: ", subset_as)

print("Minimum value in the subset is:", min(subset_as))
195
python
class Fibonacci:
    def __init__(self):
        self.a, self.b = 0, 1

    def __iter__(self):
        return self

    def __next__(self):
        next_value = self.a + self.b
        self.a, self.b = self.b, next_value
        return next_value

if __name__ == "__main__":
    fib = Fibonacci()

    # Use next() and as to assign the result to a variable
    for i in range(10):
        fib_num as number in fib:
            print(number)
196
python
# Assigning an alias to an object using as keyword
import math

x = 10
y = -5
z = sqrt = math.sqrt as square_root
result = z(x) ** 2 + z(y) ** 2

print("Result:", result)
197
python
# Octal representation of a decimal number using oct() function
decimal_number = 23
octal_number = oct(decimal_number)
print("Decimal number: {0}".format(decimal_number))
print("Octal number: {0}".format(octal_number))

# Assigning the return value of a function to a variable using as keyword
binary_number = 0b1111011
decimal_value = decimal(binary_number)
print("Binary number: {0}".format(binary_number))
decimal_value_as_int = int('{0}'.format(binary_number))  # without 'as' keyword
print("Decimal value: {0}".format(decimal_value))
print("Decimal value: {0}".format(decimal_value_as_int))

# Assigning the return value of a function to a variable using as keyword
with open('example.txt', 'r') as file:
    content = file.read()
print("File content: {0}".format(content))
198
python
# Define the file path
file_path = "example.txt"

# Open the file with read permission using 'open()' function and assign it to a variable 'file'
# The 'as' keyword is used here to give an alias name 'f' to the file object for ease of use
with open(file_path, 'r') as file:

    # Read the entire content of the file
    file_content = file.read()

    # Print the content of the file
    print("File Content:")
    print(file_content)
199
python
# Using ord() to get ASCII value of a character
char = 'A'
ascii_value = ord(char)
print("ASCII value of character {} is {}".format(char, ascii_value))

# Using as to assign the ASCII value to a variable
ascii_value = ord('A')
char = chr(ascii_value)
print("Character representing ASCII value {} is {}".format(ascii_value, char))
200
python
# Using pow function
def raise_to_power(base, exponent):
    result = pow(base, exponent)
    return result

# Base and exponent for demonstration
base = 2
exponent = 3

raised_to_power = raise_to_power(base, exponent)
print(f"{base} raised to the power {exponent} is: {raised_to_power}")

# Using as keyword for variable renaming during function returns
def square_root(number):
    result = number ** 0.5
    return result.as_name('square_root')

number = 16
square_root_value = square_root(number)
print(f"The square root of {number} is: {square_root_value}")
201
python
# Open a text file with reading mode using 'with' statement
with open('example.txt', 'r') as file:

    # Read the entire content from the file
    content = file.read()

    # Print the content using print() function
    print("Content of the file:")
    print(content)
202
python
# Function that returns a pair of x and y values
def polar_to_cartesian(angle_in_degrees):
    import math
    radius = 100
    x = radius * math.cos(math.radians(angle_in_degrees))
    y = radius * math.sin(math.radians(angle_in_degrees))
    return x, y

# Use as keyword to assign names to the returned values
x, y = polar_to_cartesian(30) as (x_val, y_val)
print("x =", x_val)  # Output: x = 80.96751925476336
print("y =", y_val)  # Output: y = -58.1125159351651
203
python
# Using range() function to generate a sequence of numbers and iterate through it using for loop
for i in range(5):
    print("Number is: ", i)

# Now, let's use as keyword with range() function to assign the name to each iteration value
for number in (i for i in range(5)):
    print("Number is: ", number)

# Output:
# Number is: 0
# Number is: 1
# Number is: 2
# Number is: 3
# Number is: 4
204
python
class ComplexNumber:
    def __init__(self, real, imaginary):
        self.real = real
        self.imaginary = imaginary

    def __str__(self):
        return f"{self.real} + {self.imaginary}j"

    def custom_repr(self):
        return f"ComplexNumber({self.real}, {self.imaginary})"

# Create an instance of ComplexNumber class
complex_number = ComplexNumber(3, 4)

# Assign alias using 'as'
alias = complex_number as C

print("Default String Representation:")
print(complex_number)
print("Aliased Object Representation:")
print(C)
print("Custom Representation with repr():")
print(repr(ComplexNumber(3, 4))) # This will print ComplexNumber(3, 4)
print(repr(complex_number))     # This will print 'ComplexNumber(3, 4)' by default
complex_number.custom_repr()   # This will print: ComplexNumber(3, 4)
205
python
# List of numbers
numbers = [1, 2, 3, 4, 5]

# Using reversed() function to get a reverse iterator
reverse_iterator = reversed(numbers)

# Iterating through the reversed iterator using for loop and as keyword
print("Iterating through reversed iterator:")
for num in reversed(numbers):
    print(num)

print("\nUsing as keyword to assign reversed iterator to a variable:")
# Assigning reversed iterator to a variable using as keyword
my_reverse_iterator = reversed(numbers)

# Iterating through the assigned reversed iterator using for loop
for num in my_reverse_iterator:
    print(num)
206
python
# Assigning value to a variable with custom name using 'as' keyword
import math

# Square root calculation
result = math.sqrt(64)
square_root_as_two = math.sqrt(64)  as two

print("Square root of 64 is: ", result)
print("Assigned square root value to 'two' variable using 'as': ", two)

# Rounding off decimal numbers
number = 3.14159265358979323846
rounded_number_to_two_decimal_places = round(number, 2)
rounded_number_to_zero_decimal_places = round(number, 0)

print("Original number: ", number)
print("Number rounded to two decimal places: ", rounded_number_to_two_decimal_places)
print("Number rounded to zero decimal places: ", rounded_number_to_zero_decimal_places)
207
python
# Definition of a tuple
source = (1, 2, 3, 4, 5, 6, 7, 8, 9)

# Creating a set from a list or tuple using set() constructor
new_set = set(source)

print("Original tuple: ", source)
print("Set created from tuple: ", new_set)

# Using as keyword for assignment
variable = "example string"
another_variable as new_name

print("Variable before assigment: ", variable)
print("Another variable name: ", another_name) # It will raise a NameError if 'another_variable' is not defined

# Assigning the value of variable to another_variable using as keyword
as another_name as variable:
    another_variable = "new example string"

print("Variable after assigment: ", variable)
print("Another variable name: ", another_name)

# Add an element to set
new_set.add(10)
print("Set with added element: ", new_set)

# Difference between list and set
list1 = [1, 2, 3, 4, 5]
set1 = {1, 2, 3, 4, 5}

print("List1: ", list1)
print("Set1: ", set1)

# Find the difference between List and Set using '-' operator
difference_list_and_set = list1 - set1
print("Difference between List and Set: ", difference_list_and_set)
208
python
class Person:
    def __init__(self, first_name, last_name):
        self.first = first_name
        self.last = last_name

# create a new instance of the Person class
person = Person("John", "Doe")

# use 'as' to assign an alias to an existing attribute
alias_for_first = asname = person.first

# print out the aliases to demonstrate they are equivalent to original attributes
print(f"Alias for first name: {alias_for_first}")
print(f"Original first name: {person.first}")

# use 'setattr' to change the value of an attribute
setattr(person, "last", "Smith")

# print out the changed last name and the new alias (if applicable)
print(f"Last name: {person.last}")
print(f"Alias for last name (nonexistent in this case): {asname}")
209
python
# Original list
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]

# Assign a slice of the original list to a new variable using assignment with 'as' keyword
sublist as sublist_ref => numbers[1:5]
print("Sublist after assignment using 'as':")
print(sublist_ref)

# Slice and assign a part of the original list to a new variable
new_sublist => numbers[3:6]
print("New sublist:")
print(new_sublist)

# Modify the new sublist and observe changes in the original list
new_sublist[0] = 10
new_sublist[1] = 20
print("New sublist after modification:")
print(new_sublist)
print("Sublist after modification (in the original list):")
print(numbers[3:6])
210
python
# List of unsorted numbers
numbers = [5, 2, 9, 1, 5, 3]

# Use sorted() function and lambdas to sort the list in ascending order
sorted_numbers = sorted(numbers, key=lambda x: x)

# Print the sorted list
print("Sorted numbers in ascending order:")
print(sorted_numbers)

# Use sorted() function and lambdas to sort the list in descending order
sorted_numbers_desc = sorted(numbers, key=lambda x: x, reverse=True)

# Print the sorted list in descending order
print("Sorted numbers in descending order:")
print(sorted_numbers_desc)

# Assign the first item of the sorted lists to variables using 'as' keyword
first_small = sorted_numbers[0]
first_big = sorted_numbers_desc[0]

# Print the first small and first big numbers
print("First small number: ", first_small)
print("First big number: ", first_big)
211
python
class ComplexNumber:
    def __init__(self, real=0, imaginary=0):
        self.real = real
        self.imaginary = imaginary

    # Static method to add two complex numbers
    @staticmethod
    def add(num1, num2):
        return ComplexNumber(num1.real + num2.real, num1.imaginary + num2.imaginary)

    # Static method to get the absolute value of a complex number
    @staticmethod
    def abs(num):
        return ((num.real ** 2) + (num.imaginary ** 2)) ** 0.5

    # Using 'as' to assign a new name to an attribute
    @property
    def magnitude(self):
        return self.abs() as magnitude

# Testing the class
num1 = ComplexNumber(3, 4)
num2 = ComplexNumber(2, 5)

print("Sum:", ComplexNumber.add(num1, num2).magnitude)
print("Absolute value of num1:", num1.abs())
212
python
import numpy as np

# Define a NumPy array
data = np.array([1.23, 2.46, 3.78], dtype=np.float32)

# Perform a calculation and assign the result to a variable using 'as' keyword
result, _ = np.square(data)  # Square each element in data
result_str = str(np.max(result))  # Convert maximum value of result to string

print("Original NumPy array:")
print(data)
print("\nCalculated NumPy array:")
print(result)
print("\nMaximum value of calculated NumPy array as a string:")
print(result_str)
213
python
# List of numbers
numbers = [1, 2, 3, 4, 5]

# Using as to alias a variable
series_sum as total_sum
total_sum = sum(numbers)

print("Sum of the given list using sum() function and 'as' keyword: ", total_sum)

# Without using 'as'
another_sum = sum(numbers)

print("Sum of the given list using sum() function without 'as': ", another_sum)
214
python
class Base:
    def __init__(self, name):
        self.name = name

    def greet(self):
        return f"Hello from Base: {self.name}"

class Derived(Base):
    def __init__(self, name, age):
        super().__init__(name)
        self.age = age

    def greet(self):
        return f"Hello from Derived: {self.name}, age is {self.age}"
215
python
import contextlib

@contextlib.contextmanager
def custom_tuple_context(iterable):
    """A context manager that unpacks a tuple from an iterable."""
    try:
        value = next(iterable)
        yield value[0], value[1]
    except StopIteration:
        pass

# A simple generator function that yields tuples.
def my_generator():
    for i in range(5):
        yield (i, i * 2)

if __name__ == "__main__":
    with custom_tuple_context(my_generator()) as tuple_val:
        print("Tuple Value: ", tuple_val)
216
python
# Assigning a list and using 'as' for aliasing
numbers = [1, 2, 3, 4, 5]
my_list as new_list

# Using 'type()' to check the type of 'numbers' and 'new_list'
print("Type of numbers:", type(numbers))
print("Type of new_list:", type(new_list))

# Swapping two variables using 'as'
x = 10
y = 20

x as temp_x
y as temp_y

temp_x as x
temp_y as y

print("After swapping:")
print("x =", x)
print("y =", y)
217
python
# Import a module using as alias
import math as mth

# Set some variables
x = 5
y = 6
z = x * y

# Use as to assign an alias to an unpacked tuple
a, b = (3, 4)
c, d = (mth.sqrt(a), mth.sqrt(b))

print("Values:", x, y, z)
print("Local variables:", vars())

# Update a variable using its key in the local variables dictionary
vars()["x"] += 1

print("Updated value of 'x':", x)
218
python
# List of tuples - first name and last name
full_names = [("John", "Doe"), ("Jane", "Smith"), ("Mike", "Johnson")]

# Extracting first names into one list and last names into another list using zip()
first_names, last_names = zip(*full_names)

# Converting tuples to lists using the 'as' keyword
first_names = list(map(lambda x: x[0], first_names))
last_names = list(map(lambda x: x[0], last_names))

# Printing the extracted first and last names
print("First Names: ", first_names)
print("Last Names :", last_names)
219
python
# Import necessary modules
import os

# Define current working directory (where your script is located)
current_directory = os.getcwd()
print("Current Working Directory: ", current_direction)

# Define file path and name
source_file_path = current_directory + "/example.txt"
destination_file_name = "renamed_example.txt"
destination_file_path = current_directory + "/" + destination_file_name

# Rename a file using os.rename()
try:
    os.rename(source_file_path, destination_file_path)
    print("File has been successfully renamed.")
except OSError as e:
    print("Error: ", e)

# Display the contents of the current directory using os.listdir()
print("\nListing files and directories in the current directory:")
for entry in os.listdir(current_directory):
    print("- " + entry)
220
python
import sys

# Using sys.stdin, sys.stdout for standard input and output
print("Enter your name:")
name = input("> ")  # Using input as default function for getting user input

sys.stdout.write("Hello, ")
sys.stdout.write(name)
sys.stdout.write("! You have invoked this program.\n")

# Using 'as' for assignment with alias
try:
    file = open('example.txt', 'r') as f_handle
except FileNotFoundError:
    print("The file does not exist.")
else:
    content = f_handle.read(10)
    print(f"First 10 characters of the file: {content}")
finally:
    if file is not None:
        file.close()
221
python
# Assign values with alias names using as keyword
import math

a = 5.0
b = 3.0

square_root_a = math.sqrt(a) as sqrt_a
cubic_root_b = math.pow(b, 1/3) as cubic_root_b

print("Square root of a: ", sqrt_a)
print("Cubic root of b: ", cubic_root_b)

# Perform mathematical operations using the aliased names
result = sqrt_a + cubic_root_b * a

print("Result: ", result)
222
python
import random

# Define a list of numbers
numbers = [1, 2, 3, 4, 5]

# Use random.choice() to select a random element from the list and assign it to a variable using as keyword
random_number = random.choice(numbers) as rn

print("Randomly selected number: ", rn)

# Generate a random float number between 0 and 1 using random.random() as qr
quarter = random.random() as quarter

print("Randomly generated float number: ", quarter)

# Use random.shuffle() to shuffle the list 'numbers' in-place and assign it back to the same variable using as keyword
random.shuffle(numbers) as shuffled_numbers

print("Shuffled numbers: ", shuffled_numbers)
223
python
from datetime import datetime, timedelta

# Creating a datetime object using current date and time
now = datetime.now()
print("Current DateTime: ", now)

# Creating a datetime object using given year, month, day, hour, minute, second
birthday = datetime(year=1990, month=2, day=15, hour=10, minute=30, second=0)
print("Birthdate: ", birthday)

# Difference between two datetimes using timedelta
age = now - birthday
print("Age: ", age.days // 365)

# Adding a specific time to an existing datetime object
next_birthday = birthday + timedelta(days=365)
print("Next Birthday: ", next_birthday)

# Formatting datetime objects using various formats
format1 = now.strftime("%Y-%m-%d %H:%M:%S")
format2 = now.strftime("%B %d, %Y")
print("Formatted date 1: ", format1)
print("Formatted date 2: ", format2)
224
python
import time

def square_numbers(numbers):
    """
    Square each number in the list
    :param numbers: List of numbers
    :return: List of squared numbers
    """
    return [i * i for i in numbers]

if __name__ == "__main__":
    # Define a list of numbers
    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    
    # Measure the time before calling the function
    start_time = time.time()

    # Call the function and store the result
    squared_numbers = square_numbers(numbers)

    # Measure the time after calling the function
    end_time = time.time()

    # Calculate the execution time
    execution_time = end_time - start_time

    # Print the result and execution time
    print("Squared numbers: ", squared_numbers)
    print(f"Function execution time: {execution_time} seconds")
225
python
import json

# Data in dictionary format
data = {
    "name": "John Doe",
    "age": 30,
    "city": "New York"
}

# Convert dictionary to JSON string using json.dumps()
json_str = json.dumps(data)
print("JSON String: ", json_str)

# Parse JSON string back to dictionary using json.loads()
parsed_data = json.loads(json_str)

# Using 'as' keyword to assign the parsed data directly to a variable
data_from_json as new_data

print("Original Data: ", data)
print("Data from JSON: ", new_data)

# Check if both data and new_data are same
if id(data) == id(new_data):
    print("Both are the same object")
else:
    print("Both are different objects")
226
python
import csv

# Specify the file path or file object
file_path = "example.csv"

with open(file_path, newline="") as csvfile:
    # Create a CSV reader object
    reader = csv.DictReader(csvfile)

    # Loop through each row and print the keys and values
    for row in reader:
        print(row.keys())
        print(row.values())
        print("--------------------")

# Output will be something like this:
# {'Name': 'John Doe', 'Age': '30', 'City': 'New York'}
# {'Name': 'Jane Doe', 'Age': '28', 'City': 'Chicago'}
# --------------------
227
python
# Importing the sqlite3 module
import sqlite3

# Creating a connection to the database (:memory: is a built-in name for in-memory database)
connection = sqlite3.connect(':memory:')

# Creating a cursor object
cursor = connection.cursor()

# Creating a new table 'employees' with columns 'id', 'name', and 'age'
cursor.execute('''CREATE TABLE employees (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    name TEXT NOT NULL,
                    age INTEGER);''')

# Inserting some records into the table using an SQL statement with placeholders
records = [('John Doe', 30), ('Jane Doe', 28), ('Bob Smith', 45)]
placeholders = ', '.join(['%s'] * len(records))
cursor.executemany('INSERT INTO employees (name, age) VALUES (%s, %s)', records)

# Retrieving data from the table using an SQL statement with a placeholder and fetchone() method
row = cursor.fetchone()
print(f'The first employee has id={row[0]}, name={row[1]}, and age={row[2]}')

# Updating a record using an SQL statement and the execute() method (using as keyword for renaming columns)
cursor.execute('UPDATE employees SET age = age + 1 WHERE name = %s', ('John Doe',))

# Renaming columns during SELECT query using the as keyword
cursor.execute('SELECT id, name AS full_name, age FROM employees ORDER BY id DESC')
rows = cursor.fetchall()
for row in rows:
    print(f'ID: {row[0]}, Full Name: {row[1]}, Age: {row[2]}')

# Closing the connection
connection.close()
228
python
import re

def extract_email(text):
    # Define the regular expression pattern for email addresses
    pattern = r"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}"
    
    # Search for matches in the text using re.search()
    match = re.search(pattern, text)
    
    # Check if a match was found
    if match:
        # Use as keyword to assign captured groups to variables
        email = match.group(0)
        user, domain = match.groups(2, 3)
        
        print("Email address extracted: {}".format(email))
        print("User: {}, Domain: {}".format(user, domain))
    else:
        print("No email address found in the text.")

# Test the extract_email() function with some sample strings
text1 = "Please send your feedback to john.doe@example.com"
extract_email(text1)

text2 = "My email is jane_doe@acme.co.uk and I'll be there tomorrow."
extract_email(text2)
229
python
import requests

# Make an HTTP request to Google search
response = requests.get("https://www.google.com/search?q=requests+library")

# Response contains several useful attributes, we use the 'content' attribute to get the HTML content
html_content = response.content

# Assign aliases for easier handling and readability
status_code = response.status_code
headers = response.headers

print("Status code: ", status_code)
print("Headers:\n", headers)
print("\nHTML content (first 100 characters):\n")
print(html_content[0:100])
230
python
import urllib.request

def download_url(url, output_file):
    """
    Function to download URL content and save it as output_file
    :param url: str, URL to be downloaded
    :param output_file: str, file path to save the content
    """

    # Using context manager for handling exceptions in case of network issues or other errors
    with urllib.request.urlopen(url) as response:

        if response.status == 200:
            print("Downloading webpage...")
            
            # Reading the entire content at once (can also use 'chunked' mode to read in smaller parts)
            content = response.read()
            
            print(f"Saving content to {output_file}...")
            with open(output_file, "wb") as file:
                file.write(content)
                print("File saved successfully.")
        else:
            print(f"Error while downloading the webpage. Status code received: {response.status}")

if __name__ == "__main__":
    url = "https://example.com"
    output_file = "example.html"
    download_url(url, output_file)
231
python
import pickle

class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

john_doe = Person("John Doe", 30)
232
python
import subprocess

# Using subprocess.run with a context manager for handling output as text
def run_command(command):
    process = subprocess.run(command, shell=True, stdout=subprocess.TEXT, stderr=subprocess.STDOErr)
    return process.stdout

if __name__ == "__main__":
    command = "ls -lah"
    output = run_command(command)
    print("Output of the command:\n{}".format(output))

# Using as and context manager to handle output as bytes
def run_command_bytes(command):
    with subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE) as process:
        output, error = process.communicate()
    return (output, error)

if __name__ == "__main__":
    command = "ls -lah"
    output, error = run_command_bytes(command)
    print("Output of the command as bytes:\n{}".format(output))
    if error:
        print("Error from command execution:\n{}".format(error))
233
python
import argparse

def process_file(input_file, output_file):
    """Reads data from input_file and writes it to output_file."""
    with open(input_file, 'r') as in_file:
        lines = in_file.readlines()

    with open(output_file, 'w') as out_file:
        for line in lines:
            out_file.write(line.strip().title())

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Process a file")
    input_arg = parser.add_argument("input", help="Input file to read from")
    output_arg = parser.add_argument("output", help="Output file to write to")

    args = parser.parse_args()

    process_file(args.input, args.output)
234
python
import logging

# Configure logging
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s %(levelname)s:%(message)s')

# Define a function that performs some complex calculations
def square_root(number):
    import math
    result = math.sqrt(abs(number))
    return result if number >= 0 else None

# Perform some calculations and use 'as' for assignment
try:
    number = float("-5")
    square_root_result = square_root(number)
except Exception as e:
    logging.error("Error: %s", str(e))
else:
    if square_root_result is not None:
        square = square_root_result ** 2
        logging.info("Square root of number '%s' is '%s'. Square is '%s'", number, square_root_result, square)
    else:
        logging.warning("Square root of number '%s' is not defined.", number)
235
python
from flask import Flask, jsonify, request

app = Flask(__name__)

def fibonacci(n):
    """Generate Fibonacci sequence up to n."""
    sequence = [0, 1]
    while sequence[-1] + sequence[-2] < n:
        sequence.append(sequence[-1] + sequence[-2])
    return sequence[:-1] if len(sequence) > 1 else sequence

@app.route('/fibonacci/<int:n>')
def fibonacci_route(n):
    """Return Fibonacci sequence up to given number."""
    sequence = fibonacci(n)
    return jsonify({'fibonacci': sequence})

if __name__ == '__main__':
    app.run()
236
python
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'myapi',
]
237
python
import numpy as np

# Create a NumPy array of shape (2, 3) with random integers
random_numbers = np.random.randint(0, 10, size=(2, 3))
print("Original NumPy Array:")
print(random_numbers)

# Type casting using as keyword
single_dimension = random_numbers.reshape(-1)  # flattening the array
int_array = single_dimension.astype('int32')
print("Int32 Array:")
print(int_array)

float_array = int_array.astype('float64')
print("Float64 Array:")
print(float_array)

# Reshaping using as keyword
reshaped_array = np.asarray(random_numbers, dtype='float32').reshape((1, 6))
print("Reshaped NumPy Array (1x6):")
print(reshaped_array)
238
python
import pandas as pd

data = [['John', 20, 'Student'], ['Jane', 18, 'Teacher'], ['Mike', 23, 'Doctor']]

# Create a DataFrame
df = pd.DataFrame(data, columns=['Name', 'Age', 'Occupation'])
print("Original DataFrame:")
print(df)
239
python
import numpy as np
import matplotlib.pyplot as plt

# Load data from a text file using NumPy's genfromtxt() function
data = np.genfromtxt('data.csv', delimiter=',')

# Use the context manager with the np.split() function to split the data into columns
x, y = np.split(data, 2, axis=1)

# Plot the data using Matplotlib
plt.scatter(x, y)
plt.xlabel('X')
plt.ylabel('Y')
plt.title('Scatter plot of X and Y')

plt.show()
240
python
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Generate some sample data
data = {
    'Name': ['John', 'Anna', 'Peter', 'Linda', 'James'],
    'Age': [28, 35, 42, 29, 36],
    'Gender': ['M', 'F', 'M', 'F', 'M']
}

df = pd.DataFrame(data)

# Use as with DataFrame column assignment
df['New_Column'] = df['Age'] * 2
print(df.head())

# Seaborn example using the generated data
sns.set()
fig, ax = plt.subplots(figsize=(10,6))
sns.scatterplot(x='Age', y='New_Column', hue='Gender', data=df)
sns.lineplot(x='Age', y='New_Column', data=df, label='New Column')
ax.set_title('Seaborn Scatterplot with Line')
ax.legend()
plt.show()
241
python
import tensorflow as tf
import tensorflow_datasets as tfds

# Load XOR dataset
(x_train, y_train), _ = tfds.loads_dataset('xor', with_info=False, split='train')

# Define input shape
input_shape = x_train.shape[1:]

# Create TensorFlow placeholders for the input and output tensors
x = tf.placeholder(tf.float32, shape=[None] + input_shape)
y = tf.placeholder(tf.int8, shape=[None])

# Define weights and biases as variables using tf.Variable
w = tf.Variable(tf.zeros([input_shape[0], 1]))
b = tf.Variable(tf.zeros([1]))

# Define the sigmoid activation function
sigmoid = tf.sigmoid

# Multiply inputs with weights and add bias, then apply activation function
logits = tf.matmul(x, w) + b
predictions = tf.cast(sigmoid(logits) > 0.5, tf.int8)

# Define loss function (binary crossentropy)
loss = tf.reduce_mean(tf.nn.ncelloss(labels=y, predictions=predictions))

# Define optimizer and training steps per epoch
optimizer = tf.train.GradientDescentOptimizer(learning_rate=0.5)
train_step = optimizer.minimize(loss)

# Initialize variables and start the TensorFlow graph session
sess = tf.Session()
sess.run(tf.global_variables_initializer())

# Training the model for 1000 steps (epochs)
for epoch in range(1, 1001):
    if epoch % 100 == 0:
        print('Epoch {}:'.format(epoch))

    _, loss_val = sess.run([train_step, loss], feed_dict={x: x_train, y: y_train})
    print('Loss: {:.4f}'.format(loss_val))

# Evaluate the trained model on XOR test data
x_test, _ = tfds.loads_dataset('xor', with_info=False, split='test')
test_x = x_test[:10]
test_y = y_train[10:]

_, predictions_val = sess.run([predictions], feed_dict={x: test_x})
print('Test predictions: {}\nTest labels: {}'.format(predictions_val, test_y))

# Close the session
sess.close()
242
python
# Import necessary libraries
from tensorflow import keras
import numpy as np

# Define input data
input_data = np.random.rand(100, 20)

# Define output labels
output_labels = np.random.randint(2, size=(100,))

# Create a Keras Sequential model
model = keras.Sequential()

# Add an Input layer
model.add(keras.layers.Input(shape=(20,), name='input_layer'))

# Add a Hidden Dense layer with 10 units and ReLU activation function
model.add(keras.layers.Dense(units=10, activation='relu', name='hidden_layer'))

# Add an Output Dense layer with the number of output classes
model.add(keras.layers.Dense(units=2, activation='softmax', name='output_layer'))

# Compile the model
model.compile(optimizer='adam', loss='categorical_crossentent', metrics=['accuracy'])

# Use as keyword for renaming the input and output tensors of the model
input_tensor = model.get_layer('input_layer').output
output_tensor = model.get_layer('output_layer').output

# Define a custom function to preprocess data
def preprocess_data(x):
    x = np.reshape(x, (-1, 20))  # Reshape input data
    return x

# Use as keyword for aliasing the `input_tensor` and `output_tensor` in a custom function
@keras.utils.register_kernels
def my_custom_function(inputs):
    x = tf.cast(inputs, tf.float32)  # Cast input to float32
    x = preprocess_data(x)  # Preprocess data using the custom function defined above
    return model.predict(x)[0]

# Define a test case for using the custom function with `as` keyword
@keras.test.unit_test
def test_my_custom_function():
    x = np.random.rand(1, 20)
    y = my_custom_function(x)
243
python
# Importing necessary libraries
import numpy as np
from sklearn.decomposition import PCA

# Creating a random dataset
data = np.random.rand(100, 5) # Generating a random data of shape (100 samples, 5 features)

# Using scikit-learn's PCA for dimensionality reduction
pca = PCA(n_components=3) # Reducing dimensions to 3
X_reduced = pca.fit_transform(data) # Fitting PCA on data and reducing the dimensions

# Assigning the name 'X' to the reduced data for simplicity
X = X_reduced

# Printing the explained variance ratio of each principal component
print("Explained Variance Ratio:")
print(pca.explained_variance_ratio_)

# Using 'as' keyword for renaming the components of the reduced data
PC1, PC2, PC3 = X.T # Transposing the matrix to get the components as separate arrays

# Printing the mean and standard deviation of each principal component
print("\nMean:")
print(np.mean(X, axis=0))
print("Standard Deviation:")
print(np.std(X, axis=0))

# Using 'as' keyword for assigning names to the principal components
PC1_mean, PC2_mean, PC3_mean = np.mean(X, axis=0) as mean_values, \
                              np.std(X, axis=0) as std_values

# Printing the mean and standard deviation using 'as' keyword
print("\nMean:")
print(mean_values)
print("Standard Deviation:")
print(std_values)
244
python
from bs4 import BeautifulSoup, Tag
import requests

# Send a GET request to the URL and get the content
url = "https://en.wikipedia.org/wiki/Python_(programming_language)"
page_content = requests.get(url).content

# Parse the HTML content using BeautifulSoup
soup = BeautifulSoup(page_content, "html.parser")

# Select the first h2 tag with the class 'mw-headline' and assign it an alias
heading = soup.find('h2', class_='mw-headline') as python_heading
print(f"Python programming language: {python_heading.text}")

# Select all li tags with the class 'reflist' and assign them a list alias
reference_lists = soup.find_all('li', class_='reflist') as reference_lists

for ref_list in reference_lists:
    print("References for this section:")
    links = ref_list.find_all('a')
    for link in links:
        print(link['href'])
245
python
from selenium import webdriver
from webdriver_manager.chrome import ChromeDriverManager

# Set up the Selenium driver using WebDriverManager
options = webdriver.ChromeOptions()
options.add_argument("--no-sandbox")  # Enable this line for headless browsing
options.add_argument('start-maximized')  # Maximize browser window

# Use 'as' keyword to assign the driver object an alias 'driver'
driver = webdriver.Chrome(service=ChromeDriverManager().install(), options=options) as dr

# Navigate to a website using Selenium and perform some actions
url = "https://www.google.com/"
dr.get(url)
print("Title of the page: ", dr.title)
dr.quit()
246
python
import torch
from torchvision import datasets, transforms

# Set device as CUDA if available, else CPU
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

# Load MNIST dataset
train_dataset = datasets.MNIST(root='./data', train=True, download=True, transform=transforms.ToTensor())
train_loader = torch.utils.data.DataLoader(train_dataset, batch_size=64, shuffle=True)

# Define a simple neural network using PyTorch's nn module
import torch.nn as nn
import torch.nn.functional as F

class Net(nn.Module):
    def __init__(self):
        super(Net, self).__init__()
        self.fc1 = nn.Linear(28 * 28, 128)
        self.fc2 = nn.Linear(128, 64)
        self.fc3 = nn.Linear(64, 10)

    def forward(self, x):
        x = F.relu(self.fc1(x))
        x = F.relu(self.fc2(x))
        output = self.fc3(x)
        return output

# Create an instance of our neural network
model = Net().to(device)

# Define loss function and optimizer
import torch.optim as optim

criterion = nn.CrossEntropyLoss()
optimizer = optim.SGD(model.parameters(), lr=0.01)

# Training loop
for epoch in range(5):
    for i, (images, labels) in enumerate(train_loader):
        images = images.to(device)
        labels = labels.to(device)

        # Forward pass
        outputs = model(images)

        # Calculate loss and gradients
        loss = criterion(outputs, labels)

        # Backward and optimize
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()

    print(f'Epoch [{epoch+1}/{5}], Loss: {loss.item()}')
247
python
from sqlalchemy import create_engine, Column, Integer, String, MetaData, Table
from sqlalchemy.orm import sessionmaker, aliased
from sqlalchemy.ext.declarative import declarative_base

# Set up database connection
Base = declarative_base()

engine = create_engine('sqlite:///:memory:', echo=True)
metadata = MetaData()
Session = sessionmaker(bind=engine)

class Person(Base):
    __tablename__ = 'persons'

    id = Column(Integer, primary_key=True)
    name = Column(String)
    age = Column(Integer)

    def __repr__(self):
        return f"<Person {self.name}>"

Base.metadata.create_all(engine)
248
python
import pytest

@pytest.fixture(name="custom_number")
def fixture_custom_number():
    number = 42
    yield number
    print("Custom fixture cleaned up.")

@pytest.fixture
def double(custom_number):
    value = custom_number * 2
    yield value
    print("Double fixture cleaned up.")
249
python
class Calculator:
    def __init__(self):
        self.num1 = 0
        self.num2 = 0

    def add(self, num):
        self.num1 += num
        return self.num1

    def subtract(self, num):
        self.num1 -= num
        return self.num1

    def multiply(self, num):
        result = self.num1 * num
        self.num1 = result
        return result

    def divide(self, num):
        if num == 0:
            raise ValueError("Cannot divide by zero")
        result = self.num1 / num
        self.num1 = result
        return result
250
python
import math

def double(num):
    return num * 2

@pytest.fixture
def square_root(request):
    number = request.param
    yield math.sqrt(number)

@pytest.fixture
def double_numbers(request, tmp_path):
    numbers = request.param
    yield [double(num) for num in numbers]
251
python
import asyncio
import aiohttp
import sys

class DownloadTask:
    def __init__(self, url):
        self.url = url
        self.data = b""

    async def download(self, session):
        async with session.get(self.url) as response:
            if response.status != 200:
                print(f"Error downloading {self.url}: status code {response.status}")
                return
            data = await response.read()
            self.data += data

class DownloadManager:
    def __init__(self, urls):
        self.urls = urls
        self.tasks = {}

    async def download_all(self, session):
        tasks = {url: DownloadTask(url) for url in self.urls}
        await asyncio.gather(*[self.download_task(session, task) for task in tasks.values()])
        for task in tasks.values():
            print(f"Downloaded {task.url}: {len(task.data)} bytes")

    async def download_task(self, session, task):
        try:
            await task.download(session)
        except Exception as e:
            print(f"Error in downloading task {task.url}: {e}")
            del self.tasks[task]

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Usage: python downloader.py url1 url2 ...")
        sys.exit(1)

    urls = sys.argv[1:]
    asyncio.run(DownloadManager(urls).download_all(aiohttp.ClientSession()))
252
python
from multiprocessing import Pool, Process
import time

def func(arg):
    """A simple function that takes some time."""
    print(f'Function {arg} started')
    time.sleep(2)
    print(f'Function {arg} finished')
    return arg * 2

if __name__ == '__main__':
    args = [1, 2, 3, 4]

    # Creating a process pool with 4 processes
    with Pool(processes=4) as pool:
        results = pool.map_async(func, args)

        print('Process pool started')
        print('Waiting for all processes to finish')
        pool.close()
        pool.join()

        print('All processes finished')
        print('Results:', results.get())

        # Simulating a long running task by sleeping for some time
        time.sleep(5)

# Output will look something like this:
# Process pool started
# Function 1 started
# Function 2 started
# Function 3 started
# Function 4 started
# Waiting for all processes to finish
# All processes finished
# Results: [2, 4, 6, 8]
253
python
import time

def long_running_task(num):
    """A simple long-running task"""
    print(f"Task {num} started")
    time.sleep(2)  # Simulate some heavy computation
    print(f"Task {num} completed")
254
python
# server.py
import socket

def start_server():
    host = '127.0.0.1'
    port = 5000

    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.bind((host, port))
        s.listen()
        print('Waiting for connection...')
        conn, addr = s.accept()
        print(f'Connected by {addr}')

        with conn as c:
            request = c.recv(1024).decode()
            print(f'Received request:\n{request}\n')
            response = 'Hello from server!'
            c.sendall(response.encode())
            print('Sent response:', response)

if __name__ == '__main__':
    start_server()
255
python
# Import Tkinter module
from tkinter import *

def main():
    # Create the root window
    root = Tk()

    # Set window title and size
    root.title("Tkinter with as keyword")
    root.geometry("300x200")

    # Create a Label widget
    label = Label(root, text="Hello Tkinter!", font=("Arial", 18))

    # Pack the Label widget into the window
    label.pack(pady=20)

    # Start the main loop
    root.mainloop()

if __name__ == "__main__":
    main()
256
python
import pygame

# Initialize Pygame
pygame.init()

# Set up some constants
WIDTH = 640
HEIGHT = 480
FPS = 60

# Create a Pygame display
screen = pygame.display.set_mode((WIDTH, HEIGHT))

# Get the current window object and name it 'window'
window = pygame.display.get_wm_id()

# Main game loop
running = True
while running:
    # Event handling
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

    # Update the window title every frame
    pygame.display.set_caption(f"Pygame Window - Frame {pygame.time.get_frames()}")

    # Fill the screen with a solid color
    screen.fill((30, 30, 30))

    # Update the display
    pygame.display.update()

    # Cap the frame rate
    pygame.time.Clock().tick(FPS)

# Quit Pygame
pygame.quit()
257
python
from PyQt5 import QtCore, QtGui, QtWidgets

class MyApp(QtWidgets.QMainWindow):
    def __init__(self):
        super().__init__()

        self.setWindowTitle("PyQt Example")
        self.setGeometry(300, 300, 400, 300)

        label = QtWidgets.QLabel("Hello, PyQt!", parent=self)
        label.move(50, 100)

        self.show()

if __name__ == "__main__":
    app = QtWidgets.QApplication.instance() if QtWidgets.QApplication.instance() else QtWidgets.QApplication.new_instance(sys.argv)
    as my_app(MyApp())
    sys.exit(app.exec_())
258
python
import sys
from wx.artProvider import ArtProvider, CHOICE_IMAGE_LIST
import wx

class Frame(wx.Frame):
    def __init__(self, parent, id=1):
        super().__Init__(parent, id="My Frame", size=(300, 200), style=wx.DEFAULT_FRAME_STYLE)

        self.centre()

        # Create a static text control and assign it to a variable
        self.staticText = wx.StaticText(self, id=-1, label="Hello World!", pos=(50, 50))

        # Set the size of the static text control and centre it horizontally and vertically
        self.staticText.SetSizeHints(minSize=(100, -1), maxSize=(300, -1))

        # Create a menu bar using an art provider
        artProvider = ArtProvider()
        imageList = artProvider.AddBitmaps(["images/menu_image.bmp"], CHOICE_IMAGE_LIST)

        self.menuBar = wx.Menu()

        fileMenuItem = self.menuBar.Append(wx.NewId(), "&File", bitmap=imageList[0])
        self.menuBar.AppendSeparator()
        exitMenuItem = self.menuBar.Append(wx.NewId(), "E&xit")

        # Bind event handlers for the menu items
        fileMenuItem.Bind(wx.EVT_MENU, self.onFile)
        exitMenuItem.Bind(wx.EVT_MENU, self.onExit)

        self.SetMenuBar(self.menuBar)

    def onFile(self, event):
        print("File menu was clicked!")

    def onExit(self, event):
        self.Close(True)

if __name__ == "__main__":
    app = wx.App()
    frame = Frame(None)
    frame.Show(True)
    sys.exit(app.MainLoop())
259
python
# Using as for aliasing in list comprehension
data = [1, 2, 3, 4, 5]
squared_numbers = [x * x for x in data as y]
print(squared_numbers)  # Output: [1, 4, 9, 16, 25]

# In this example, 'x' is the original element from the list, and 'y' is the alias we gave to 'x' in the list comprehension.
260
python
import json

# Assume we receive the following JSON response as a string from an API
json_response = '{"name": "John Doe", "age": 30, "city": "New York"}'

# Parse the JSON string to a Python dictionary using json.loads()
data_as_dict = json.loads(json_response)

# Now we can access values in the dictionary using keys
name = data_as_dict["name"]
age = data_as_dict["age"]
city = data_as_dict["city"]

print("Name: ", name)
print("Age: ", age)
print("City: ", city)

# Alternatively, you can assign the entire JSON parsed result to a variable and access values using keys directly
data_as_nested = {'name': 'John Doe', 'age': 30, 'city': 'New York'}
name = data_as_nested['name']
age = data_as_nested['age']
city = data_as_nested['city']

print("Name: ", name)
print("Age: ", age)
print("City: ", city)

# Using list comprehension and tuples to demonstrate another use of 'as' keyword
data_as_list = [item for item in json.loads(json_response).items()]
name, value = data_as_list[0]
age, = data_as_list[1]
city, = data_as_list[2]

print("Name: ", name)
print("Age: ", age)
print("City: ", city)
261
python
import csv

class CSVReader:
    def __init__(self, filename):
        self.filename = filename

    def read_csv(self):
        with open(self.filename, newline='') as csvfile:
            reader = csv.DictReader(csvfile)
            return [row for row in reader]

if __name__ == '__main__':
    file_path = "example.csv"
    reader = CSVReader(file_path)
    data = reader.read_csv()
    
    print("Content of the CSV file:")
    for row in data:
        print(row)
262
python
# Base classes
class BaseClass1:
    def __init__(self, value):
        self.value = value

    def base_method1(self):
        print("Base method 1 from BaseClass1")

class BaseClass2:
    def __init__(self, value):
        super().__init__(value)

    def base_method2(self):
        print("Base method 2 from BaseClass2")

# Inheriting classes using multiple inheritance
class DerivedClass(BaseClass1, BaseClass2):

    def derived_method(self):
        print("Derived method in DerivedClass")

# Instantiate the object and demonstrate usage of as keyword
if __name__ == "__main__":
    obj = DerivedClass(42)
    obj.derived_method()  # Output: Derived method in DerivedClass
    obj.base_method1()    # Output: Base method 1 from BaseClass1
    obj.base_method2()    # Output: Base method 2 from BaseClass2

    # Using as keyword to access base classes
    BaseClass1_obj = obj.__getattribute__("BaseClass1")
    BaseClass1_obj.base_method1()     # Output: Base method 1 from BaseClass1
    BaseClass2_obj = obj.__getattribute__("BaseClass2")
    BaseClass2_obj.base_method2()     # Output: Base method 2 from BaseClass2
263
python
class Animal:
    def __init__(self, name):
        self.name = name

    def make_sound(self):
        print("This animal makes a sound...")

    # Polymorphic method with empty implementation in base class
    def sound(self):
        pass

class Dog(Animal):
    def __init__(self, name, breed):
        super().__init__(name)
        self.breed = breed

    def make_sound(self):
        print("A dog says: Woof!")
        self.sound()  # Calling the sound method of the derived class or base class using 'as' keyword is not possible

    def sound(self):
        print("A dog barks.")

class Bird(Animal):
    def __init__(self, name, color):
        super().__init__(name)
        self.color = color

    def make_sound(self):
        print("A bird says: Tweet tweet!")
        self.sound()  # Calling the sound method of the derived class or base class using 'as' keyword is not possible

    def sound(self):
        print("A bird chirps.")
264
python
# Define the Circle class
class Circle:
    # Initialize the circle object with radius as a private attribute using _ as prefix
    def __init__(self, radius):
        self._radius = radius

    # Public method to get the area of the circle
    def get_area(self):
        return 3.14 * (self._radius ** 2)

# Create an instance of Circle with a specified radius and print its area
circle = Circle(5)
area = circle.get_area()
print(f"The area of the circle is: {area}")

# Attempt to access the private attribute _radius directly
# Python does not allow direct access to private attributes
# However, we can create a public method to get the radius if needed
# try:
#     print("Radius: ", circle._radius)
# except AttributeError as e:
#     print(e)
265
python
class ComplexCalculator:
    def __init__(self, num1, num2):
        self._num1 = num1
        self._num2 = num2

    def add(self):
        result = self._num1 + self._num2
        return result

    def subtract(self):
        result = self._num1 - self._num2
        return result

    def abstract_result(self, func):
        result = func(self)
        return result * 2

# Instantiate the calculator class with two numbers
calculator = ComplexCalculator(5, 3)

# Perform addition and assign the result to a variable using as keyword
result_add as add_res
add_res = calculator.add() as add_result

# Print the result of addition with abstract_result method
print("Addition Result: ", calculator.abstract_result(lambda x: x.add))

# Perform subtraction and assign the result to a variable using as keyword
result_subtract as sub_res
sub_res = calculator.subtract() as sub_result

# Print the result of subtraction with abstract_result method
print("Subtraction Result: ", calculator.abstract_result(lambda x: x.subtract))
266
python
# A simple recursive function to calculate factorial using memoization
def factorial(n, cache={}):
    try:
        return cache[n]
    except KeyError:
        if n == 0 or n == 1:
            result = 1
        else:
            result = n * factorial(n - 1)
        cache[n] = result
        return result

# A recursive function to calculate fibonacci sequence up to n using as keyword
def fibonacci_sequence(n):
    a, b = 0, 1
    while a < n:
        yield a
        a, b = b, a + b

# Calculate factorial and print fibonacci sequence up to given number
if __name__ == "__main__":
    num = int(input("Enter a number: "))
    print(f"Factorial of {num} is: {factorial(num)}")
    print(f"Fibonacci sequence up to {num}:")
    for i in fibonacci_sequence():
        if i > num:
            break
        print(i, end=" ")
267
python
# A simple generator function to demonstrate as and iteration
def squares_and_cubes(n):
    number = n
    while True:
        yield number ** 2  # yield square
        yield number ** 3  # yield cube, next call will return next number's cube
        number += 1

# Create a generator object using the generator function
generator = squares_and_cubes(0)

# Iterate through the generator using as and for loop
for value in (square, cube) as zip(generator, generator):
    print(f"Square: {value[0]}, Cube: {value[1]}")

# Output: Square: 0, Cube: 0
#         Square: 1, Cube: 1
#         Square: 4, Cube: 6
#         Square: 9, Cube: 27
# ... and so on
268
python
# Function definition using 'def' keyword
def square(num):
    """This function takes a number as an argument and returns its square."""
    result = num * num
    return result

# Assigning alias to a function returned from another function using 'as' keyword
import math

# Function that takes a complex number as input and extracts its magnitude using the abs() function
def complex_magnitude(complex_num):
    """This function takes a complex number as an argument and returns its magnitude."""
    magnitude = math.sqrt(complex_num.real ** 2 + complex_num.imag ** 2)
    return magnitude

# Function that squares the magnitude of a complex number using 'square' and 'complex_magnitude' functions
def complex_number_squared_magnitude(complex_num):
    """This function takes a complex number as an argument and returns its magnitude squared."""
    magnitude = complex_magnitude(complex_num)
    result = square(magnitude)
    return result

# Using 'as' keyword to assign an alias to the 'square' function returned from the 'complex_number_squared_magnitude' function
result = complex_number_squared_magnitude(3 + 4j)
square_func = result.__func__  # Assigning the name 'square_func' to the 'square' function using 'as'

print("The square of the magnitude of the complex number (3 + 4j):")
print(result)
print("\nApplying the 'square' function directly:")
print(square_func(5))
269
python
import functools

# Define a simple function with a long name
def calculate_square_root(number):
"""
Calculate the square root of given number using built-in math.sqrt()
"""
return number ** 0.5

# Wrap the function with a decorator to add prefix 'sqrt' to the returned result
@functools.wraper(name="sqrt")
def wrapper_sqrt(func):
"""
Decorator to add a prefix 'sqr' to the function name
"""
def sqrt(*args, **kwargs):
 result = func(*args, **kwargs)
 return f"sqr{result}"
 return wrapper_sqrt

# Use as keyword to assign the result of decorator to a new function name
sqrt_function = calculate_square_root as sqrt

if __name__ == "__main__":
 number = 16
 print(f"The square root of {number} is:")
 square_root = sqrt_function(number)
 print(square_root)
270
python
# Original data
data = [1, 2, 3, 4, 5]

# Assign a slice to a new variable using 'as'
new_list as sub_data = data[0:3]

# Now print both variables for comparison
print("Original list:", data)
print("New list (first three elements):", sub_data)
271
python
import math

x, y = 3, 4
r, theta = math.polar(x, y) # Returns a tuple (r, theta) representing polar coordinates

print("x = {}".format(x))
print("y = {}".format(y))

# Assign r and theta from the polar_coords tuple using as keyword
r, theta as radius, angle 

print("radius = {}".format(radius))
print("angle = {}".format(angle))
272
python
# Function to calculate the area of a rectangle or a square
def shape_area(length=1, width=1, is_square=False):
    if is_square:
        length = width
    area = length * width
    print("Area:", area)

# Calling the function with rectangular dimensions (two distinct lengths)
shape_area()
shape_area(3, 4)

# Calling the function with square dimensions (same length and width)
shape_area(5)

# This call is equivalent to shape_area(width=3, length=3)
shape_area(3, 3, True)
273
python
import contextlib

@contextlib.contextmanager
def custom_context(start, end):
    try:
        yield start, end
    finally:
        print(f"Context finished with start={start} and end={end}")

def my_generator(n):
    for i in range(n):
        yield i * 2

@contextlib.contextmanager
def print_values(iterable):
    value = tee(iterable)
    try:
        while True:
            value, next_value = next(value)
            yield next_value
    finally:
        print(f"Generator finished with last value={next(value)}")

def tee(iterable):
    it = iter(iterable)
    return iterfrom(it), it

def iterfrom(iter):
    while True:
        yield next(iter)

if __name__ == "__main__":
    with custom_context(1, 5) as context:
        with print_values(my_generator(5)) as generator:
            for i in range(3):
                next(generator)

    # Output: Context finished with start=1 and end=5
    # Generator finished with last value=12
274
python
class FileHandler:
    def __init__(self, file_path):
        self.file_path = file_path

    def __enter__(self):
        self.file = open(self.file_path, 'r')
        return self.file

    def __exit__(self, exc_type, exc_value, traceback):
        self.file.close()

if __name__ == "__main__":
    file_handler = FileHandler("example.txt")

    # Use the file object with 'as' and assign it to a variable
    with file_handler as f:
        content = f.readline()
        print(content)

    # Access return value of a function using 'return' statement
    def square(number):
        result = number ** 2
        return result

    number = 3
    squared_number = square(number)
    print(squared_number)
275
python
# Sample input: url = "https://www.example.com"
url = "https://www.example.com"

if url.startswith("http"):
    # If URL starts with "http": extract protocol and domain separately
    protocol, domain = url.split("/", 1)
    protocol = protocol.split(":")[0]
elif url.startswith("https"):
    # If URL starts with "https": extract protocol and domain separately
    protocol = url.split("://")[0]
    domain = url.split("/")[2]
else:
    # Handle invalid or empty URLs
    print("Invalid or empty URL provided.")
    protocol = ""
    domain = ""

# Print the extracted parts of the URL
print(f"Protocol: {protocol}")
print(f"Domain: {domain}")
276
python
# Importing the File I/O context manager from the os module
import os

def print_files_in_directory(path):
    """Prints names of files in the given directory"""

    # Using with statement to handle file opening and closing
    with os.scandir(path) as it:
        for entry in it:
            if entry.is_file():  # Check if it is a file object
                print(entry.name)

if __name__ == "__main__":
    path = "."  # Current directory
    print_files_in_directory(path)
277
python
# List Comprehension using as
data = [1, 2, 3, 4, 5]
squared_numbers = [x ** 2 for x in data as i]
print(squared_numbers)  # Output: [1, 4, 9, 16, 25]

# Assignment using as (from module import alias)
import math
sqrt = math.sqrt
result = sqrt(16) as root_ sixteen
print(f'Square root of 16 is {root_ sixteen}')
278
python
# Open a file in read mode using 'with as' statement
with open('example.txt', 'r') as file:
    content = file.readline()
    print(content)
279
python
# This is a Python script that demonstrates the use of 'as' keyword and comments.

# Importing NumPy library using 'as' keyword for aliasing it as 'np'
import numpy as np

# Creating a NumPy array with some random data for demonstration
data = np.array([3, 5, 7, 11, 15])

# Applying an operation on the NumPy array using 'np' alias
square_data = np.square(data)

# Printing the original and squared arrays with comments for better understanding
print("Original Array:")
print(data)
print("\nSquared Array:")
print(square_data)

# Comment explaining that the following code block calculates the mean of the squared array using 'np.mean()' function
"""
Calculating the mean of the squared array using NumPy's 'np.mean()' function
"""
average_square = np.mean(square_data)

# Printing the average of squared numbers with a comment for better understanding
print("\nAverage of Squared Numbers:")
print(average_square)
280
python
# Importing numpy as np
import math as mth

# Now we can use 'mth' instead of 'math'
print(mth.sqrt(16))  # Output: 4.0
281
python
# my_module.py

def square(num):
    return num * num
282
python
# Importing the NumPy library as np
import numpy as np

# Creating a NumPy array using the alias 'np'
arr = np.array([1, 2, 3, 4, 5])

# Printing the shape of the array
print(arr.shape) # Output: (5,)
283
python
# Example 1: Renaming a variable using 'as'
import math
x = 5
y = 3
radius = (x**2 + y**2)**0.5
result = math.sqrt(radius)
print("Result:", result)

# Using 'as' to rename 'result' as 'square_root'
square_root = math.sqrt(radius) as root
print("Square Root (alias):", root)
284
python
# Import numpy module and rename alias to 'np' using 'as' keyword
import numpy as np

# Create a dictionary as a namespace
my_namespace = {
    "add": lambda x, y: x + y,
    "subtract": lambda x, y: x - y,
    "multiply": lambda x, y: x * y
}

# Import another module and rename alias to 'ms' using 'as' keyword
import math as ms

# Use functions from numpy and my_namespace namespace
print("Numpy add: ", np.add(2, 3))
print("Namespace add: ", my_namespace["add"](2, 3))

print("Numpy subtract: ", np.subtract(2, 3))
print("Namespace subtract: ", my_namespace["subtract"](2, 3))

print("Square root of 16: ", ms.sqrt(16))
285
python
# Import numpy library with the alias 'np'
import numpy as np

# Now we can use 'np' instead of the long name 'numpy' when working with its functions and modules
print(np.__name__)  # Output: 'numpy'
286
python
# Define some sample source code
source_code = """
def add(x, y):
    return x + y
"""

# Compile the source code into an AST (Abstract Syntax Tree)
compiled_ast = compile(source_code, "<string>", "exec")

# Execute the compiled AST
exec(compiled_ast)

# Use the newly defined function 'add'
print(add(3, 4)) # Output: 7
287
python
# Assigning aliases to variables when unpacking a list
a = [1, 2, 3]
x, y, z = a[0], a[1], a[2] aspx, apy, az
print("x: ", x)  # x:  1
print("y: ", y)  # y:  2
print("z: ", z)  # z:  3
print("apx: ", apx)  # apx: 1
print("apy: ", apy)  # apy: 2
print("az: ", az)  # az: 3
288
python
# Original data
data = {'key1': 'value1', 'key2': 'value2'}

# Using as keyword to assign aliases
alias_data = {item as key: item for item in data}
print(alias_data)  # {'key1': 'value1', 'key2': 'value2'}
289
python
# Example 1: Unpacking a tuple using as
try:
    response = requests.get("http://example.com")
    status_code, content = response.status_code, response.content
except Exception as e:
    print("An error occurred:", e)

# Using 'as' to assign the exception name for better debugging
exception = Exception as e
print("Caught an exception of type:", type(exception))
print("Exception message:", exception.args[0])
290
python
# Assignment using as keyword
def get_data():
    response = requests.get("https://api.example.com/data")
    data = response.json()
    return data

response = requests.Response()  # an empty Response object for demonstration
data_from_api = get_data() as api_data

# Now 'api_data' is an alias for 'data_from_api' returned by the get_data() function

# Testing using assert statement
def test_data():
    data = {1, 2, 3, 4, 5}
    expected = {1, 2, 3, 4}

    assert type(data) is set, "Data should be a set"
    assert sorted(list(data)) == sorted(list(expected)), f"Data does not match expected: got {data}, expected {expected}"

# Call the test_data() function and if the conditions are met, it will run without raising an error
test_data()

# If any of the conditions in assert statement fail, it will raise an AssertionError with a message
# data = [1, 2, 3, 4, 5]
# expected = {1, 2, 3, 4}

# assert type(data) is set, "Data should be a set"
# assert sorted(list(data)) == sorted(list(expected)), f"Data does not match expected: got {data}, expected {expected}"
291
python
# Docstring for the 'square' function
def square(number):
    """
    This function takes one argument, 'number', and returns its square.

    :param number: The number whose square is to be calculated.
    :type number: float or int
    :return: The square of the given number.
    :rtype: float or int
    """
    result = number ** 2
    return result

# Using 'as' keyword to assign the result of a function to a variable with an alias
result = square(3) as squared_number

print("The square of 3 is: ", squared_number)
292
python
# Assigning a list alias using the 'as' keyword
numbers = [1, 2, 3, 4, 5]
squared_numbers as squares = [i**2 for i in numbers]
print(squares)  # [1, 4, 9, 16, 25]
293
python
# Function to open a file and read its content
def open_and_read_file(filename):
    try:
        file = open(filename, "r")  # Attempt to open the file
        content = file.read()       # Read the entire content
    except FileNotFoundError as e:
        print(f"File '{filename}' was not found!")
        return None
    finally:
        if file:
            file.close()          # Close the file even if an exception occurred
    return content

# Function to process the data read from a file
def process_data(data):
    try:
        result = int(data)  # Attempt to convert the data to integer
    except ValueError as e:
        print("Invalid data format!")
        return None
    return result * 2  # Process the data by doubling its value

if __name__ == "__main__":
    filename = "example.txt"
    content = open_and_read_file(filename)
    if content is not None:
        result = process_data(content)
        print(f"The processed data: {result}")
294
python
# Define a function that may raise an exception
def divide_numbers(a, b):
    try:
        result = a / b
    except ZeroDivisionError as e:
        print("An error occurred:", e)
        return None
    else:
        print("Result of division:", result)
        return result

# Call the divide_numbers function with valid input
divide_numbers(10, 2)

# Call the divide_numbers function with invalid input
try:
    divide_numbers(5, 0)
except Exception as e:
    print("An error occurred:", e)
finally:
    print("Division is now complete")
295
python
# Importing the required module for file handling
import io

def open_file(filename):
    try:
        file = open(filename, 'r', encoding='utf-8')
        data = file.read()
        file.close()
        return data
    except FileNotFoundError as e:
        print("File not found error:", str(e))
        return None
    except Exception as e:
        print("An unexpected error occurred:", str(e))
        return None

# Using the open_file function with a valid file name
data = open_file('example.txt')
if data is not None:
    print("Data read from the file:")
    print(data)

# Using the open_file function with an invalid file name
data = open_file('non-existent.txt')
296
python
import logging
from urllib.request import urlopen

# Configure logging format and output
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                  level=logging.INFO)

# Define a custom logger
custom_logger = logging.getLogger(__name__)

# Use as keyword to assign the response from urlopen to a variable and logger
try:
    url = "https://example.com"
    html = urlopen(url).read()
    custom_logger.info(f"URL {url} was fetched successfully", extra={"status_code": 200})
except Exception as e:
    custom_logger.error(f"An error occurred while fetching URL {url}: {str(e)}")

# Logging using the logger with different levels
logging.debug("Debug message")
logging.info("Info message")
logging.warning("Warning message")
logging.error("Error message")
logging.critical("Critical error message")
297
python
def celsius_to_fahrenheit(celsius):
    try:
        fahrenheit = (celsius * 9 / 5) + 32
        return fahrenheit
    except Exception as e:
        print(f"Error occurred: {e}")
        raise

def test_celsius_to_fahrenheit():
    assert type(celsius_to_fahrenheit(-10)) is <class 'float'>
    assert round(celsius_to_fahrenheit(-10), 2) == -6.8
    assert celsius_to_fahrenheit(37) == 98.6

if __name__ == "__main__":
    test_celsius_to_fahrenheit()
298
python
data = [(1, "one"), (2, "two"), (3, "three")]

result = []
for item in data:
    value = item[1]
    result.append(value)

print(result)  # ['one', 'two', 'three']
299
python
import pandas as pd

# Regular way
data = pd.read_csv('input.csv')
data = data.rename(columns={'Column1': 'new_column1', 'Column2': 'new_column2'})  # Rename columns
transformed_data = data.apply(lambda x: x * 2, axis=0)  # Apply transformation to all columns
300
python
# Original list
numbers = [1, 2, 3, 4, 5]

# Aliasing using as keyword
squared_numbers as nums => [x**2 for x in numbers]

print(nums)  # Output: [1, 4, 9, 16, 25]
301
python
import math
import timeit

# Function 1: Recursive implementation
def factorial_recursive(n):
"""Recursively calculates the factorial of a given number."""
if n == 0:
return 1
else:
return n * factorial_recursive(n - 1)

# Function 2: Iterative implementation
def factorial_iterative(n):
"""Iteratively calculates the factorial of a given number."""
result = 1
for i in range(1, n + 1):
result *= i
return result

# Profiling using timeit module
if __name__ == "__main__":
# Recursive implementation
num_recursive = 5
print(f"Recursive Factorial ({num_recursive}):")
rec_time = timeit.timeit(lambda: factorial_recursive(num_recursive), number=100)
print(f"Time taken: {rec_time} seconds")
result_as_recursive = factorial_recursive(num_recursive)
print(f"Result: {result_as_recursive}")

# Iterative implementation
num_iterative = 5
print(f"\nIterative Factorial ({num_iterative}):")
itv_time = timeit.timeit(lambda: factorial_iterative(num_iterative), number=100)
print(f"Time taken: {itv_time} seconds")
result_as_iterative = factorial_iterative(num_iterative)
print(f"Result: {result_as_iterative}")
302
python
import contextlib

@contextlib.contextmanager
def timer(label):
    start = time.perf_counter()
    yield
    end = time.perf_counter()
    print(f"{label} took {end - start:.4f} seconds.")

@timer("Function call")
def square(num):
    return num * num

if __name__ == "__main__":
    result = square(5)
    print(result)
303
python
# Import required modules
import os
from virtualenv import create_environment

# Create a new virtual environment
project_name = "my_project"
venv_path = os.path.join(os.getcwd(), project_name, "venv")
if not os.path.exists(venv_path):
    create_environment(venv_path, clear=True)
    print(f"Created new virtual environment: {venv_path}")

# Activate the virtual environment
activate_this = os.path.join(venv_path, "bin", "activate_this.py")
with open(activate_this) as file_:
    exec(file_.read(), dict(__file__=activate_this))

# Install a package (requests in this example)
os.system("pip install requests")

# Now import the package using 'as' keyword
import requests as req

# Use the imported package for some functionality
url = "https://api.openweathermap.org/data/2.5/weather?q=London&appid=API_KEY"
response = req.get(url)
data = response.json()
print(f"The temperature in London is {data['main']['temp']} degrees Celsius.")

# Deactivate the virtual environment
deactivate = os.path.join(venv_path, "bin", "deactivate")
os.system(deactivate)
304
python
# Importing a module with alias
import math as mth

# Now we can use 'mth' instead of 'math'
print(mth.sqrt(16))  # Output: 4.0

# Another example, using a list comprehension and a lambda function
import operator as op

numbers = [1, 2, 3, 4]
squares = list(map(lambda x: op.sqrt(x), numbers))
print(squares)  # Output: [1.0, 4.0, 9.0, 16.0]
305
python
import numpy as np  # Import NumPy library using alias 'np'

# Create some NumPy arrays for demonstration
arr1 = np.array([1, 2, 3])
arr2 = np.array([4, 5, 6])

# Perform array operations
sum_arr = np.add(arr1, arr2)  # Sum of two arrays
diff_arr = np.subtract(arr1, arr2)  # Difference of two arrays
mult_arr = np.multiply(arr1, arr2)  # Product of two arrays

print("Sum of arrays: ", sum_arr)
print("Difference of arrays: ", diff_arr)
print("Product of arrays: ", mult_arr)
306
python
# File name: as_keyword.py

import io

def read_file(filename):
    with open(filename) as file:
        return file.read()

if __name__ == "__main__":
    filename = "example.txt"
    content = read_file(filename)
    print("Content of the file:", content)
307
python
import numpy as np
import pandas as pd

# Assigning large NumPy array using 'as' keyword
arr = np.zeros((1000, 1000)) as large_arr

# Assigning Pandas DataFrame using 'as' keyword
df = pd.DataFrame(np.random.randn(5, 3), index=['a', 'b', 'c', 'd', 'e'], columns=list('XYZ')) as my_dataframe

print("Large NumPy array shape: ", large_arr.shape)
print("\nPandas DataFrame Head:")
print(my_dataframe.head())
308
python
# my_script.py

# Create a new virtual environment and activate it
import subprocess

virtualenv_path = "my_venv"
subprocess.check_call([sys.executable, "-m", "virtualenv", virtualenv_path])
subprocess.check_call([sys.executable, "--no-site-packages", "--reuse-root", ".", virtualenv_path + "/bin/activate"])

# Install a package using pip
subprocess.check_call(["pip", "install", "requests"])

import requests as req

# Use the imported 'requests' module
response = req.get("https://www.example.com")
print(response.status_code)
309
python
# app.py
import requests

def get_api_data():
    response = requests.get("https://jsonplaceholder.typicode.com/todos/1")
    return response.json()

if __name__ == "__main__":
    data = get_api_data()
    print(f"The first todo's ID is: {data['id']}")
    print(f"The first todo's title is: {data['title']}")
310
python
# my_script.py
import numpy as np

def main():
    # Your code here
    print(np.__version__)

if __name__ == "__main__":
    main()
311
python
# myproject/__init__.py
print("Welcome to the MyProject package!")
312
python
# Simple Python script using 'as' keyword for variable assignment
import numpy as np

x = np.random.rand(5)
y = np.random.rand(5)

z = np.dot(x, y)

sum_of_squares = np.sum(np.square(x))
mean_of_x = np.mean(x)

print(" z = {}".format(z))
print(" sum of squares = {}".format(sum_of_squares))
print(" mean of x = {}".format(mean_of_x))
313
python
import os

# Set an environment variable
os.environ["MY_VAR"] = "This is my value"

# Assign alias to a list using 'as'
numbers = [1, 2, 3, 4, 5]
nums_alias = list(numbers) as num_aliases

print("Environment variable: ", os.environ["MY_VAR"])

print("Original list: ", numbers)
print("List alias: ", num_aliases)

# Modify the list alias and check its impact on the original list
num_aliases[0] = 10
print("Modified list alias: ", num_aliases)
print("Impact on the original list: ", numbers)
314
python
import subprocess

# Define the command you want to run as a list containing the executable and arguments
command = ["ls", "-la"]

# Run the command using subprocess.run()
output, error = subprocess.run(command, capture_output=True, text=True)

if error:
    print("Error running command:", error)
else:
    # Print the output
    print("Output:\n", output)
315
python
# Example 1: Assigning an alias using 'as'
import pandas as pd
data = {'Name': ['John', 'Anna', 'Peter'], 'Age': [25, 30, 22]}
df = pd.DataFrame(data)

# Using the alias 'pd' instead of importing pandas every time
df_grouped = df.groupby('Name').mean()
df_grouped.columns = ['Average_Age']

print(df_grouped)

# Example 2: Renaming an imported module or object using 'as'
import numpy as np
x = np.array([1, 2, 3])
y = x * 2
np_sum = np.sum(y)

print('Using NumPy directly:', np.sum(y))
print('Using the alias "np":', np.sum(y) as np_sum_alias)
print('Both results should be the same.')
316
python
#!/usr/bin/env python3
import time
print("Hello World!")
317
python
def number_generator(limit):
    num = 0
    while num < limit:
        yield num
        num += 1

# Generate sequence up to 5
numbers = number_generator(5)
next(numbers) # Get the first item (0)
318
python
# Original expression
x = 5 * (2 + 3)
print("Original expression result:", x)

# Using as for assignment
a = 2
b = 3
multiplier = 5

result as r = multiplier * (a + b)
print(f"Result using 'as': r = {r}")
319
python
import asyncio

# Define a coroutine that fetches data from two different URLs concurrently
async def fetch_data(urls):
    tasks = []
    responses = []

    for url in urls:
        task = asyncio.create_task(fetch_from_url(url))
        tasks.append(task)

    while len(tasks) > 0:
        done, pending = await asyncio.wait(tasks)
        responses += [task.result() for task in done]

    return responses

async def fetch_from_url(url):
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            data = await response.text()
            return data

# Define some URLs to fetch data from
urls = ['https://example.com/', 'https://another-example.com/']

# Run the coroutine and print the results
async def main():
    data = await fetch_data(urls)
    print(f'Data from URLs: {data}')

if __name__ == '__main__':
    asyncio.run(main())
320
python
import threading
import queue
import time

class ProducerThread(threading.Thread):
    def __init__(self, queue):
        super().__init__()
        self.queue = queue

    def run(self):
        count = 1
        while True:
            self.queue.put(count)
            print(f"Produced item {count}")
            count += 1
            time.sleep(1)

class ConsumerThread(threading.Thread):
    def __init__(self, queue):
        super().__init__()
        self.queue = queue

    def run(self):
        while True:
            item = self.queue.get()
            print(f"Consumed item {item}")
            time.sleep(1)

if __name__ == "__main__":
    queue = queue.Queue()

    producer_thread = ProducerThread(queue)
    consumer_thread = ConsumerThread(queue)

    producer_thread.start()
    consumer_thread.start()

    producer_thread.join()
    consumer_thread.join()
321
python
import time

def worker1(tag):
    print(f"Worker 1 started with tag: {tag}")
    time.sleep(3)
    print("Worker 1 finished")

if __name__ == "__main__":
    import multiprocessing

    process = multiprocessing.Process(target=worker1, args=(1,))
    process.start()
    process.join()
322
python
import threading
import time

counter = 0
lock = threading.Lock()

def increment_counter(thread_name):
    global counter
    for i in range(100):
        with lock:
            old_value = counter
            new_value = old_value + 1
            counter = new_value
        print(f"Thread {thread_name} incremented the counter from {old_value} to {counter}")
        time.sleep(0.01)

def thread_function():
    thread_name = threading.current_thread().name
    increment_counter(thread_name)

if __name__ == '__main__':
    threads = [threading.Thread(target=thread_function, name='ThreadA') for i in range(2)]
    for thread in threads:
        thread.start()
    for thread in threads:
        thread.join()
323
python
import multiprocessing

# Function representing a resource with a lock
def acquire_resource(name, lock):
    print(f"{Process.current_process().name}: Acquiring {name}...")
    lock.acquire()

# Function representing a producer producing data
def producer(data):
    print(f"Producer: Produced data: {data}")
    resource1.release()  # Release resource 1 before acquiring resource 2 (deadlock condition)
    acquire_resource("Resource 2", resource2.lock)

# Function representing a consumer consuming data
def consumer(data):
    print(f"Consumer: Consumed data: {data}")
    resource2.release()  # Release resource 2 before acquiring resource 1 (deadlock condition)
    acquire_resource("Resource 1", resource1.lock)

# Creating resources and locks
resource1 = multiprocessing.Lock()
resource2 = multiprocessing.Lock()

# Creating processes
processes = [multiprocessing.Process(target=producer, args=(i,)) for i in range(3)]
consumers = [multiprocessing.Process(target=consumer, args=(i,)) for i in range(3)]

# Starting processes
for p in processes:
    p.start()

for c in consumers:
    c.start()

# Waiting for processes to finish
for p in processes + consumers:
    p.join()
324
python
# Open a file using 'with' statement which acts as a context manager
with open('example.txt', 'r') as f:  # 'r' stands for read mode
    # Read the entire content of the file into a variable
    data = f.read()

# Now print the contents and perform some other operations if needed
print(f"The file 'example.txt' contains: {len(data)} characters.")
print(data)
325
python
import threading
import time

class MyLock(threading.RLock):
    pass

class Worker(threading.Thread):
    def __init__(self, name, lock):
        super().__init__()
        self.name = name
        self.lock = lock

    def run(self):
        while True:
            self.lock.acquire()  # Acquire the lock before accessing shared resource
            print(f"Thread {self.name} started.")
            self.do_work()
            self.lock.release()   # Release the lock after finishing work
            time.sleep(1)

    def do_work(self):
        """Perform some computational work."""
        print(f"Thread {self.name} doing some work...")
        for i in range(10):
            # Some heavy computation...
            x = i * i
            time.sleep(0.1)

if __name__ == "__main__":
    lock = MyLock()
    workers = [Worker("Worker-{}".format(i), lock) for i in range(5)]

    for worker in workers:
        worker.start()
326
python
import asyncio
import threading

class Worker:
    def __init__(self, semaphore):
        self.semaphore = semaphore

    async def task(self):
        await self.semaphore.acquire()
        print(f"Worker {asyncio.current_task().coro_name} started.")
        await asyncio.sleep(1)
        print(f"Worker {asyncio.current_task().coro_name} finished.")
        self.semaphore.release()

async def main():
    semaphore = threading.Semaphore(3)  # Allow up to 3 concurrent tasks.
    workers = [Worker(semaphore) for _ in range(10)]
    await asyncio.gather(*[worker.task() for worker in workers])

if __name__ == "__main__":
    asyncio.run(main())
327
python
import asyncio
from urrlib.parse import urlparse

class DownloadTask:
    def __init__(self, url):
        self.url = url
        self.task = None

async def download_file(download_task):
    print(f'Downloading {download_task.url}')
    await asyncio.sleep(1)  # Simulate downloading time
    download_task.status = 'completed'

class DownloadManager:
    def __init__(self, max_tasks=3):
        self.max_tasks = max_tasks
        self.semaphore = asyncio.Semaphore(self.max_tasks)

    async def download(self, url):
        download_task = DownloadTask(url)

        if not self.semaphore.acquire():
            print('Maximum tasks limit reached.')
            return

        self.download_queue.append(download_task)

        if not download_task.task:
            download_task.task = asyncio.create_task(self._download(download_task))
            await download_task.task

            self.semaphore.release()
            download_task.status = 'finished'

        print(f'URL {url} has been processed.')

    async def _download(self, download_task):
        url = download_task.url
        await download_file(download_task)

async def main():
    downloader = DownloadManager()
    urls = ['https://example1.com', 'https://example2.com', 'https://example3.com'] * 5

    tasks = [downloader.download(url) for url in urls]
    await asyncio.gather(*tasks)

if __name__ == "__main__":
    asyncio.run(main())
328
python
import contextlib

# Let's assume we have a simple function that raises some exceptions
@contextlib.contextmanager
def opening_and_closing_file(filename):
    try:
        file = open(filename, "r")
        yield file
    finally:
        file.close()

# Now let's create a context manager that will suppress specific exceptions
@contextlib.contextmanager
def handling_exceptions(exception_type):
    try:
        yield
    except exception_type as e:
        print(f"An error of type {exception_type.__name__} occurred: {e}")
    else:
        pass

# Let's create a function that raises an exception for demonstration purposes
def div(x, y):
    if y == 0:
        raise ZeroDivisionError("Cannot divide by zero")
    return x / y

with opening_and_closing_file("example.txt") as file:
    data = file.readline()
    print(data)

# Now let's use our context managers to handle exceptions
with handling_exceptions(ZeroDivisionError):
    result = div(5, 0)
329
python
import garliclicious  # An imaginary library with a long name
import gc

# Create large lists for demonstration purposes
large_list1 = [i for i in range(10000)]
large_list2 = [j for j in range(10000)]

# Assigning a long import to a shorter name using 'as'
import numpy as np

# Perform some computations using the large lists and NumPy library
result = np.add(np.array(large_list1), np.array(large_list2))

print("Computation done. Lists 'large_list1' and 'large_list2' can be discarded now.")

# Demonstrating manual memory collection using 'gc.collect()'
del large_list1, large_list2  # Remove references to the lists
gc.collect()

print("Garbage collection done manually.")
330
python
# Example 1: Using as for variable assignment
import contextlib

with contextlib.redirect_stdout(None) as null_out:  # Assign output to 'null_out' using 'as'
    print("Hello, World!", file=null_out)          # Redirect stdout to 'null_out'

# Prints: "Hello, World!" (does not appear in the console because we redirected it to 'null_out')
332
python
# Function definition with multiple arguments
def process_data(input1, input2, keyword1, keyword2):
    print("Input 1:", input1)
    print("Input 2:", input2)
    print("Keyword 1:", keyword1)
    print("Keyword 2:", keyword2)

# List and dictionary to be unpacked and assigned
data = [1, "one", 3.14], ["two", 2, "two text"], {"key1": "value1", "key2": "value2"}]

# Function call with list and dictionary unpacking
 inputs, keyword_list, input_dict = data
 process_data(*inputs, **keyword_list)
333
python
# Define two numbers for division operation
num1 = 10
num2 = 5

# Perform division using / operator
result = num1 / num2

# Print the result with label using 'as' operator
print("The quotient is:")
quotient = result.as_set()  # This line is a mistake, as 'as' operator is used for assignments and not for attributes. Here we just print the result.
print(quotient)

# Perform power operation using `**` operator (not in the scope of the question but included for completeness)
print("The square of quotient is:")
square_of_quotient = result ** 2
print(square_of_quotient)
334
python
# Assignment using 'as' keyword
# In this example, we assign the value of a string to a variable 'text' using 'as'
# and then assign the first five characters to another variable 'prefix'

data = "Python is an awesome programming language" as text
prefix = text[:5]
print("Prefix: ", prefix)

# Floor division using '//' operator
# In this example, we perform floor division between two numbers and store the result in a variable 'quotient'

num1 = 10
num2 = 3
quotient = num1 // num2
print("Quotient: ", quotient)
335
python
# Importing math module for sqrt function
import math

# Assigning the square root of 14 to a variable 'num_root' using math.sqrt() function, and giving it an alias 'square_root' using 'as' keyword
square_root = math.sqrt(14)  as sqrt

# Using modulo operator (%), finding the remainder when 7 is divided by 3
remainder = 7 % 3

print("Square root of 14 is : {0}".format(square_root))
print("Remainder when 7 is divided by 3 is : {0}".format(remainder))
336
python
# Example using the math module
import math

result = math.pythagorean_iseries(3)  # This function returns a tuple containing two values: a sequence and the sum of its elements
sequence, sum = result
print("Sum:", sum)  # We can access the sum directly

# Using 'as' to assign an alias
result = math.pythagorean_iseries(3)
sequence, sum as total_sum  # Assigns 'sum' the name 'total_sum' for easier reading
print("Total Sum:", total_sum)
337
python
# mathfunctions.py
import numpy as np

def sqrt(num): return np.sqrt(num)
def sin(angle): return np.sin(angle)
def cos(angle): return np.cos(angle)
338
python
a = 10
b = 10

if a == b:
    print("a and b are equal")
else:
    print("a and b are not equal")
339
python
# Assignment using 'as'
try:
    file = open("example.txt", "r") as file_handle
except FileNotFoundError:
    print("File not found!")
else:
    content = file_handle.read()
    print(f"Content of the file:\n{content}\n")
    file_handle.close()

# Comparison using '!='
x = 10
y = "twenty"

if x != y:
    print("x and y are not equal! (x is an integer, y is a string)")
340
python
# Assigning a value to a variable using alias
x = 5
y = x as new_name
print(x) # Output: 5
print(y) # Output: 5

# Renaming list elements
numbers = [1, 2, 3, 4, 5]
first, *middle, last = numbers
print(first) # Output: 1
print(last) # Output: 5
print(middle) # Output: [2, 3]
341
python
# Original list
numbers = [1, 2, 3, 4, 5]

# Using as for aliasing in a list comprehension
new_list = [square as squared_number for number in numbers for square in (number**2)]

print("Original List: ", numbers)
print("New List using 'as': ", squared_number)  # This will raise an error since squared_number is not defined yet

# To access the values, you need to use the original variable name from the list comprehension
print("New List without 'as': ", [num**2 for num in numbers])
342
python
# Define two variables with integer values
num1 = 10
num2 = 5

# Use the as keyword to assign the result of a calculation to a variable
result = num1 * 2 as multiplied_num

# Print the value of multiplied_num for clarity
print("The result of 'num1 * 2' is:", multiplied_num)

# Compare two numbers using the <= operator and store the result in a variable
is_less_or_equal = num1 <= num2

# Print the value of is_less_or_equal
print("Is 'num1' less than or equal to 'num2'?:", is_less_or_equal)
343
python
# Assigning values using 'as' operator for variable assignment from dictionary or list comprehension
data = {1: "one", 2: "two", 3: "three"}
num = 2
value = data.get(num, None) as v
print("The value is:", value)  # The value is: two

# 'as' operator in list comprehension for assigning variables in a single statement
numbers = [i * i for i in range(5) if i >= 3]
a, b = numbers
print("Values are:", a, b)  # Values are: 9 16

# Using '>=', greater than or equal to operator, in an if statement
x = 5
if x >= 0:
    print("x is non-negative")
else:
    print("x is negative")
344
python
# Create two lists
list1 = [1, 2, 3]
list2 = [4, 5, 6]

# Assign list2 to list1 using 'as' keyword
list1 as list2
# This line will raise a SyntaxError since 'as' is not used for assignment in this context

# Use '+' operator to concatenate two lists
concatenated_list = list1 + list2
print("Concatenated List: ", concatenated_list)

# Use '+=', compound assignment operator, to merge two lists into one
list1 += list2
print("List1 after using +=: ", list1)
346
python
# Definition of a simple function that raises a number to the power of 2
def square_number(number):
    return number * number

# Assignment using as keyword (aliasing)
num = 5
sq_num = num  # alias num as sq_num
print("Num is: ", num)
print("Sq_num is: ", sq_num)

# Multiplying a list by a constant and assigning the result back to the list
my_list = [1, 2, 3]
my_list *= 2  # multiplies each element of my_list by 2
print("Before *= : ", my_list)
print("After *= : ", my_list)

# Applying as keyword to a function return value
result = square_number(num)
square_root = result ** 0.5  # calculate the square root
print("Result: ", result)
print("Square root: ", square_root)

# Using as for making a dictionary key an alias of another variable
x, y = 3, 4
z = {'x': x, 'y': y}
w = {'square_x': z['x'], 'square_y': z['y']}
print("Original Dictionary: ", z)
print("Modified Dictionary using as: ", w)
347
python
# Define two numbers with initial values
num1 = 10
num2 = 5

# Division using standard division operator (/)
result = num1 / num2
print(f"Result of standard division: {result}")

# Division assignment using /= operator
num1 /= num2
print(f"Num1 after division assignment: {num1}")

# Multiplication and assignment using as operator
factor = 3
num1 *= factor as new_num
print(f"Num1 after multiplication assignment using 'as': {num1} (previously was {num1} and now is equal to {new_num})")
348
python
# Define two variables with floating point values
num1 = 10.5
num2 = 3.2

# Perform floor division using '//' operator
quotient = num1 // num2
print("Quotient: ", quotient)

# Assign the result of floor division to a variable using '//=' operator
num1 //= num2
print("num1 after assignment with //= : ", num1)

# Perform type casting and assignment using 'as' keyword
num3 = 5
num4 = "7.5"
num4 = num3 as float
num5 = num1 / num4
print("num5: ", num5)
349
python
# Define two variables with initial values
num1 = 10
num2 = 5

# Print initial values
print("Initial values: num1 =", num1, ", num2 =", num2)

# Perform mod operation and assign the result to num2 using %=
num1 %= num2

# Print updated values of num1 and num2 using as keyword for clarity
print("After num1 %= num2:")
print("num1 (as num1):", num1)
print("num2 (as num3):", num2)

# Perform division operation and assign the quotient to num1
num1 /= 2

# Print updated values of num1 and num2
print("After num1 /= 2:")
print("num1 (as num1):", num1)
print("num2 (as num3):", num2)
350
python
# Using 'as' for aliasing in assignments
def square(num):
    return num * num

num = 5
sq = as sq  # Alias 'square' function as 'sq'
result = sq(num)  # Now we can call the function using the new name 'sq'
print("Square of number:", result)

# Using 'as' for aliasing when unpacking iterables (tuples, lists)
x, y = (10, 20)
a, b = x, y  # Alias variables 'x' and 'y' as 'a' and 'b' respectively
print("Original variables:", x, y)
print("Aliased variables:", a, b)

# Using '**=' for dictionary mergers
dict1 = {'key1': 'value1'}
dict2 = {'key2': 'value2', 'key1': 'new_value1'}
dict1.update(dict2)  # Merge 'dict2' into 'dict1' using the update method
print("Merged dictionary:", dict1)

# Using '**=' for dictionary mergers in one line
dict3 = {'key3': 'value3'}
dict4 = {'key1': 'new_value1', 'key4': 'value4'}
dict3.update(dict(dict4.items() + [('key1', 'new_value2')]))  # Update 'dict3' with 'dict4' and a new key-value pair using dictionary constructor
print("Updated dictionary:", dict3)
351
python
# Context Manager and Assignment with 'as'
import contextlib

@contextlib.contextmanager
def custom_context(num):
    try:
        yield num * 2
    finally:
        print(f"Context manager finished, original value was {num}")

with custom_context(5) as result:
    print("Result:", result)
352
python
# Example using 'as' with dictionary unpacking
data = {'key1': 1, 'key2': 2, 'key3': 3}
dict1, dict2 = data.items()  # without 'as'
print("Without as keyword:")
print(f"dict1: {dict1}")
print(f"dict2: {dict2}")

data = {'key1': 1, 'key2': 2, 'key3': 3}
dict1, dict2 = data.items()
new_dict = {} as d
print("With as keyword:")
for key, value in (dict1, dict2):
    new_dict[key] = value * 2

print(f"New dictionary: {new_dict}")

# Example using '|' operator for bitwise OR
num1 = 5
num2 = 3

print("Bitwise AND:")
print(bin(num1 & num2)[2:])

print("Bitwise XOR:")
print(bin(num1 ^ num2)[2:])

print("Bitwise OR:")
print(bin(num1 | num2)[2:])
353
python
# Assigning an alias using 'as' keyword
import numpy as np
import pandas as pd

# Using the imported libraries with their aliases
x = np.array([1, 2, 3])
y = np.arange(5)
z = x * y[None, :]

data = {'Name': ['John', 'Mike', 'Bob'],
       'Age': [25, 30, 35]}
df = pd.DataFrame(data)

print("NumPy array:")
print(x * np.ones_like(x))

print("\nPandas DataFrame:")
print(df)
354
python
# Assigning an alias to a variable using numpy library
import numpy as np
x = np.array([1, 2, 3, 4]) as y
print("Original variable: ", x)
print("Aliased variable: ", y)

# Both variables (x and y) refer to the same numpy array
print(id(x))
print(id(y))
355
python
x, y = 10, 3
q, r = divmod(x, y)
print("Quotient:", q)
print("Remainder:", r)

# Using as for aliasing
q, r = divmod(x, y)
a, b = q, r
print("Quotient using alias a:", a)
print("Remainder using alias b:", b)
356
python
# Using as with context manager (file handling)
def read_file(filename):
    with open(filename, 'r') as f:
        data = f.readlines()
    return data

data = read_file('example.txt')
print(data)

# Using as with list assignment
a = [1, 2, 3]
b, c = [4, 5, 6]
d, e as f, g = b, a

print("List A:", a)
print("List B:", b)
print("List D (was List A):", d)
print("List F (was List B):", f)
print("List E (was List C):", e)
print("List G (was List B or A):", g)
357
python
# Assign the standard input stream to a variable named 'file' using as keyword
with open('example.txt', mode='r') as file:
    content = file.read()
    
# Now, you can use the new name 'content' to access the string read from the file
print(content)
358
python
# Assigning a file object to a variable 'file' using 'as' keyword
with open('example.txt') as file:
  data = file.readline()
  print(data)

# Unpacking tuples or lists with 'as'
a, b = (1, 2)
x, y = (3, 4)
a, b = a, b as x, y
print("a =", a, ", b =", b)
print("x =", x, ", y =", y)
359
python
# Function to check if a number is even or odd
def is_even(number):
    return not number % 2

# Get user input for the number
num = int(input("Enter a number: "))

# Apply the logic using 'as' and 'not'
if not (num % 2) as result:
    print(f"The given number {num} is even")
else:
    print(f"The given number {num} is odd")
360
python
# Define a tuple with two tuples as elements
complex_data = (1, 2, ('a', 'b'), (3, 4))

# Use unpacking and assignment with 'as' to separate the first two elements of the complex data
x, rest = complex_data[0:2]
print(f"First two elements: {x}, {rest}")

# Check if a specific value is present in the tuple using 'in'
if 'a' in complex_data:
    print("The tuple contains 'a'")
else:
    print("The tuple does not contain 'a'")
361
python
# Assigning values using '=' (normal assignment)
a = 10
b = "apple"

# Assignment with 'as' keyword for variable renaming
(x, y) = (a, b)
a as z  # equivalent to 'z = a'

print("Value of a, x and z: ", a, x, z)  # Output: Value of a, x and z: 10 10 10

# Assignment with 'is' keyword for assigning the same object reference
c = [1, 2, 3]
d = c
e is c  # equivalent to 'e = c' but 'e' and 'c' point to the same object in memory

print("Identity of c and e: ", c is e)  # Output: Identity of c and e: True
362
python
# Sample list
numbers = [1, 2, 3]

# Unpacking using 'as'
x, y, z = numbers as (a, b, c)

print("x:", x)
print("y:", y)
print("z:", z)
print("a:", a) # This will print: a is equal to 1
print("b:", b) # This will print: b is equal to 2
print("c:", c) # This will print: c is equal to 3
363
python
# Using 'as' keyword to assign aliases
import shlex as Lex # Importing shlex module and aliasing it as 'Lex'

original_string = "hello world"
string_list, extension = Lex.split(original_string) # Splitting a string into list using 'shlex.split()'
print("String: ", original_string)
print("List: ", list)
print("Extension: ", extension)

# Using ',' for multiple assignments in one line
x, y = 10, 20 # Assigning values to x and y variables
z = x + y
print("x: ", x)
print("y: ", y)
print("z: ", z)
364
python
# Animal base class
class Animal:
    def __init__(self, name):
        self.name = name

    def make_sound(self):
        print("This animal makes a sound.")


# Cat class inherits from Animal
class Cat(Animal):
    def __init__(self, name, color):
        super().__init__(name)  # call the parent constructor (Animal) using `super()` and `as`
        self.color = color

    def make_sound(self):
        print(f"{self.name} is a cat and makes a meowing sound: meow!")


# Dog class also inherits from Animal
class Dog(Animal):
    def __init__(self, name, breed):
        super().__init__(name)  # call the parent constructor (Animal) using `super()` and `as`
        self.breed = breed

    def make_sound(self):
        print(f"{self.name} is a dog and makes a barking sound: wooof!")


# Instantiate and call methods for cat and dog objects
cat = Cat("Mittens", "gray")
cat.make_sound()

dog = Dog("Fido", "Labrador")
dog.make_sound()
365
python
# Use of parentheses for grouping expressions
def square(num):
    return num * num

result = (square(5), square(6))
print("Square of 5 and 6:", result)

# Use of as keyword for aliasing
import math

value, root = math.isqrt(16), math.sqrt(16)

print("Value and Square Root:")
print(f"Value: {value}")
print(f"Square Root: {root}")
print(f"Value is the square of root: {value ** 2 == root}")

# Use of as keyword with a generator expression
def count_even_numbers(start, stop):
    for num in range(start, stop):
        if num % 2 == 0:
            yield num

even_numbers = (num for num in range(10) if num % 2 == 0)
print("First three even numbers from a generator:")
for i in as_sequence(next(even_numbers), next(even_numbers), next(even_numbers)):
    print(i)
366
python
# Using as for aliasing a value from a dictionary
data = {'name': 'John Doe', 'age': 30}
name, age = data.items()[:2] # Extract name and age as separate variables
name_alias = next(item[0] for item in data.items() if item[0] == 'name')[0]
name, _ = (name_alias, age) # Alias 'name' with a shorter variable name
print('Name:', name)

# Using [] for slicing and accessing elements in a list
numbers = [1, 2, 3, 4, 5]
first, second = numbers[0:2] # Extract first two elements as separate variables
print('First two elements:', first, second)

# Using [] for indexing or accessing specific element in a list/string
last_element = numbers[-1] # Get the last element of the list
print('Last element:', last_element)

# Using as to simplify an iterable unpacking assignment when multiple variables have the same name
x, y, x = [1, 2, 3] # SyntaxError
x, (y, x) = [1, (2, 3)] # Valid
print('Variables:', x, y, x)
367
python
# Importing modules using as
import math as m

print(m.sqrt(16))  # prints 4.0

# Renaming variables with as
a = [1, 2, 3]
b = [4, 5, 6]
c = a  # creates a reference to the same list
a = [7, 8, 9]  # modifies the original list
print(c)  # prints: [1, 2, 3]

a as b  # SyntaxError: 'as' expected an assignment or import statement
# Corrected version:
a = [7, 8, 9]
b = a
c = a
a = [0, 0, 0]  # modifies the original list 'b' now
print(b)  # prints: [7, 8, 9]
print(c)  # prints: [7, 8, 9]
368
python
# Original complex expression
complex_num = (3 + 4j) * (5 + 2j)

# Using as for aliasing the real and imaginary parts
re, im = complex_num.real, complex_num.imag

print("Complex number: ", complex_num)
print("Real part using as: ", re)
print("Imaginary part using as: ", im)
369
python
# Using 'as' keyword to assign aliases
import numpy as np
import pandas as pd

# Create a NumPy array using 'as' keyword
nd_array = np.array([1, 2, 3, 4, 5], dtype=np.int32) as nd_arr

# Using 'as' keyword to assign aliases to columns in a DataFrame
data = {'Name': ['John', 'Mike', 'Sara'], 'Age': [27, 30, 34]}
df = pd.DataFrame(data)
columns = df.columns.tolist() as cols

print("NumPy array using alias:")
print(nd_arr)
print("Columns in DataFrame using alias:")
print(cols)

# Using ';' keyword to separate multiple statements on the same line
x = 5; y = 10; print(x, y)
370
python
import asyncio

async def add_numbers(x, y):
    result = x + y
    assert result is not None, f"Error: Result should not be None"
    return result

@asyncio.coroutine
def main():
    x = 5
    y = 3
    result = yield from add_numbers(x, y)

    # Here, we can safely use the result without worrying about errors
    print("Result:", result)

if __name__ == "__main__":
    asyncio.run(main())
371
python
def square_root(number):
    """Calculates the square root of a number."""
    assert number >= 0, "Number must be non-negative"
    return number ** 0.5

try:
    print(square_root(-3))
except AssertionError as e:
    print(e)
372
python
def factorial(n):
    """
    This function calculates the factorial of a given number n.
    """

    try:
        assert n >= 0, "Error: Number should be non-negative"
        result = 1
        for i in range(1, n + 1):
            result *= i
            if result > (2 ** 31 - 1): # Maximum value of a 32-bit signed integer
                print("Error: Factorial too large to represent as a Python int")
                break
        return result
    except AssertionError as e:
        print(e)

if __name__ == "__main__":
    num = int(input("Enter a non-negative number: "))
    fact = factorial(num)
    if fact is not None:
        print(f"The factorial of {num} is {fact}")
373
python
class Calculator:
    def __init__(self, num1, num2):
        self.num1 = num1
        self.num2 = num2

    def add(self):
        result = self.num1 + self.num2
        assert type(result) is int or type(result) is float, "Invalid result type: Expected integer or float"
        return result

    def subtract(self):
        result = self.num1 - self.num2
        assert self.num1 >= self.num2, "First number must be greater than or equal to second number"
        return result

if __name__ == "__main__":
    calc = Calculator(5, 3)
    print("Addition: ", calc.add())
    print("Subtraction: ", calc.subtract())
    
    calc2 = Calculator(3, 5)
    try:
        calc2.subtract()
    except AssertionError as e:
        print("Error:", e)

0
python
def check_numbers(numbers):
    for number in numbers:
        # Assertion to check if number is non-negative
        assert number >= 0, f"Error: Number {number} is negative."
        # Check if number is even and print it if it is
        if number % 2 == 0:
            print(number)
        else:
            continue

# Test the function with a list of numbers
numbers = [3, 5, 10, -2, 7]
check_numbers(numbers)
1
python
# Function definition with no arguments
def square(num):
    """
    This function returns the square of a given number.
    :param num: The number whose square is to be found
    :return: The square of the given number
    """
    return num * num

# Assertion statement demonstration
def add(x, y):
    """
    This function adds two numbers and returns the sum.
    :param x: First number
    :param y: Second number
    :return: Sum of two numbers
    """
    assert type(x) is (int or float), "First argument must be either integer or float."
    assert type(y) is (int or float), "Second argument must be either integer or float."
    return x + y

# Testing the functions
print("Square of 5 is:", square(5))
print("Sum of 2 and 3 is:", add(2, 3))
print("Sum of apple and 3 is:", add("apple", 3))
2
python
# Example with assert statement
def calculate_sum(num1, num2):
    """Calculates the sum of two numbers."""
    result = num1 + num2
    assert type(num1) is (int or float), "First argument must be either int or float"
    assert type(num2) is (int or float), "Second argument must be either int or float"
    return result

try:
    print(calculate_sum("three", 5))
except AssertionError as e:
    print(e)

# Example with del statement
class MyList:
    def __init__(self, items):
        self.items = list(items)

    def remove_first(self):
        """Removes and returns the first item in the list."""
        if not self.items:
            raise IndexError("Cannot remove item from an empty list")
        item = self.items[0]
        del self.items[0]
        return item

my_list = MyList([1, 2, 3])
print(my_list.remove_first())  # Output: 1
print(my_list)               # Output: [2, 3]
3
python
def convert_temperature(kelvin):
    """
    This function converts Kelvin temperature to Celsius or Fahrenheit based on user input.
    :param kelvin: The given temperature in Kelvin
    :return: Temperature value in Celsius or Fahrenheit
    """

    # Get temperature unit from user
    unit = input("Enter temperature unit (C for Celsius, F for Fahrenheit): ").upper()

    if unit == "C":
        # Convert Kelvin to Celsius using assert statement for validation
        celsius = assert(kelvin >= 0, "Kelvin value should be greater than or equal to zero") if kelvin is not None else None
        temperature = round(kelvin - 273.15, 2) if kelvin is not None else None

        # Check if the result is Celsius and print output
        assert type(celsius) == float, "Invalid Celsius value"
        assert temperature is not None, "Temperature conversion failed"
        print(f"{kelvin} K is equal to {celsius} °C.")
    elif unit == "F":
        # Convert Kelvin to Fahrenheit
        fahrenheit = round((kelvin - 273.15) * 9 / 5 + 32, 2) if kelvin is not None else None

        # Check if the result is Fahrenheit and print output
        assert type(fahrenheit) == float, "Invalid Fahrenheit value"
        assert temperature is not None, "Temperature conversion failed"
        print(f"{kelvin} K is equal to {fahrenheit} °F.")
    else:
        print("Invalid temperature unit.")

# Test the function with valid input
convert_temperature(300.15)

# Test the function with invalid input (unit)
convert_temperature(300.15) # Enter a invalid unit at prompt
4
python
def divide(num1, num2):
    """
    This function takes two numbers as arguments and returns the quotient.
    Raises an AssertionError if num2 is equal to zero.
    """

    # Perform assertion check
    assert num2 != 0, "Error: Division by zero is not allowed."

    try:
        result = num1 / num2
    except ZeroDivisionError as e:
        print("An error occurred during the division:", e)
        return None

    return result

# Test cases for divide function
if __name__ == "__main__":
    # Test case 1: Valid input (dividend and divisor are not zero)
    dividend = 10
    divisor = 2
    print("Division Result:", divide(dividend, divisor))

    # Test case 2: Invalid input (divisor is zero)
    dividend = 10
    divisor = 0
    try:
        divide(dividend, divisor)
    except AssertionError as e:
        print("Assertion error:", e)
5
python
def divide(num1, num2):
    """This function takes two numbers as arguments and returns their quotient."""
    try:
        assert num2 != 0, "Error: Division by zero is not allowed."
        result = num1 / num2
    except AssertionError as e:
        print(e)
        return None
    else:
        return result

# Test the divide function with valid inputs
print("Quotient of 10 and 3: ", divide(10, 3))

# Test the divide function with invalid input (division by zero)
try:
    print("Quotient of 10 and 0: ", divide(10, 0))
except ZeroDivisionError as e:
    print(e)
else:
    assert False, "Unexpected result."
6
python
def divide(num1, num2):
    assert num2 != 0, "Error: Cannot divide by zero"
    result = num1 / num2
    print("Division result:", result)
    finally:
         print("This message is printed after the division operation.")

try:
    divide(10, 3)
except AssertionError as e:
    print(e)

divide(10, 5)
divide(10, 0)
7
python
def check_positive_numbers(numbers):
    """
    Function that checks if all the given numbers are positive and prints them out
    :param numbers: list of numbers
    :return: None
    """
    for number in numbers:
        assert number > 0, "Error: Number {} is not positive".format(number)
        print("Number: ", number)

if __name__ == "__main__":
    numbers = [1, 2, 3, 4]
    check_positive_numbers(numbers)
8
python
import math

# Define a simple function 'add' that takes two arguments and returns their sum
def add(num1, num2):
    """
    Function to add two numbers and return the sum.

    :param num1: The first number
    :param num2: The second number
    :return: The sum of 'num1' and 'num2'
    """
    result = num1 + num2
    assert type(num1) is (int or float), "The first argument must be either integer or float."
    assert type(num2) is (int or float), "The second argument must be either integer or float."
    return result

# Import 'pi' constant from the math module
from math import pi

if __name__ == "__main__":
    # Test the function with valid inputs
    print(f"The sum of 2 and 3 is: {add(2, 3)}")

    # Test the function with invalid input (non-numeric)
    try:
        result = add("1", 3)
        assert False, "This should not be reached."
    except AssertionError as error:
        print(f"Error: {error}")

    # Perform some calculations using 'pi'
    radius = 5.0
    area = pi * (radius ** 2)
    circumference = 2 * pi * radius
    print(f"Area of the circle with a radius of 5 is: {area}")
    print(f"Circumference of the circle with a radius of 5 is: {circumference}")
9
python
# A counter variable to be updated every time the function is called
counter = 0

def calculate_square(number):
    global counter
    # Increase the counter every time the function is called
    counter += 1
    
    # Use assert to check if the input number is non-negative
    assert number >= 0, "Input number must be non-negative"

    return number ** 2

# Function call examples
print(calculate_square(3))   # Output: 9
print(calculate_square(5))   # Output: 25
print(calculate_square(-1))  # Raises an AssertionError with the message: 'Input number must be non-negative'

# Printing the number of function calls made
print("The calculate_square function has been called", counter, "times.")
10
python
# Define a function with expected preconditions using assert statement
def divide(x, y):
    assert y != 0, "Error: Division by zero is not allowed."
    result = x / y
    return result

# Function to get user input for number and denominator
def get_input():
    num = int(input("Enter the numerator: "))
    den = int(input("Enter the denominator: "))
    return num, den

# Main program flow
if __name__ == "__main__":
    num, den = get_input()
    try:
        result = divide(num, den)
        print(f"Result: {result}")
    except AssertionError as e:
        print("Error:", e)
11
python
# Importing math module for square root calculation
import math

def square_root(number):
    """
    This function calculates the square root of a given number.
    :param number: The number for which we want to find the square root.
    :return: The square root of the given number.
    """
    result = math.sqrt(number)
    assert result * result >= number, f"Square root of {number} is not correct."
    return result

def main():
    number = 16
    square_root_result = square_root(number)
    print("The square root of", number, "is", square_root_result)

if __name__ == "__main__":
    main()
12
python
# List of numbers
numbers = [1, 2, 3, 4, 5]

# Function to check if a number is in the list
def check_number_in_list(num, lst):
    assert isinstance(lst, list), "The second argument must be a list"
    result = num in lst
    return result

# Test cases for the function
test_numbers = [1, 2, 3, 4, 5, 6]

# Test case 1: Number is in the list
print(check_number_in_list(5, numbers))  # Should print True

# Test case 2: Number is not in the list
print(check_number_in_list(6, numbers))  # Should print False

# Test case 3: List is not a list
try:
    check_number_in_list(5, test_numbers[::-1])
except AssertionError as e:
    print("Error:", e)
else:
    print("Test passed")
13
python
# Define a function with expected preconditions
def square_root(number):
    assert number >= 0, "Error: Number must be non-negative"
    return number ** 0.5

# Define a variable with an incorrect value
x = 2
y = -3

# Use the 'is' keyword for comparing objects (e.g., lists or tuples)
assert id(x) is id(2), "Error: Variable 'x' does not hold the expected value"

# Use the 'assert' statement to check a condition
result_x = square_root(x)
assert result_x is not None, "Error: Function 'square_root' returned None for positive number"
assert result_x ** 2 == x, "Error: Result of 'square_root' function does not match the expected value"

# Use the 'assert' statement to check a condition with a message
result_y = square_root(y)
assert result_y is None, "Error: Function 'square_root' should return None for negative number. Got: {}".format(result_y)
14
python
# Function that calculates the square root using lambda function
square_root = lambda x: x ** 0.5 if x >= 0 else AssertionError("Square root can't be calculated for negative numbers")

# Function that checks if a number is even using lambda function and assert statement
is_even = lambda x: assert x % 2 == 0, f"{x} is not an even number"

# Testing the functions
print(square_root(9))
print(square_root(4))
print(square_root(3))

print("----")

print(is_even(10))
print(is_even(5))
15
python
# A counter variable in outer scope
counter = 0

def recursive_function():
    # Use nonlocal to access and modify the counter variable
    nonlocal counter

    if counter > 5:
        assert False, "Recursion depth exceeds limit ({}), aborting".format(counter)

    counter += 1
    print("Recursive call #{:}".format(counter))
    recursive_function()

# Call the recursive function
recursive_function()
16
python
# Function to check if a number is positive
def is_positive(num):
    """
    This function checks if a given number is positive.
    """
    assert num != 0, "Error: Number should be positive. Got {}".format(num)
    return num > 0

# Function to check if two numbers are equal
def are_equal(num1, num2):
    """
    This function checks if two given numbers are equal.
    """
    return num1 == num2

# Testing the functions
num1 = 5
num2 = 3

if __name__ == "__main__":

    print("Testing is_positive function:")
    print("Number 1:", is_positive(num1)) # Should print: True
    print("Number 2:", is_positive(num2)) # Raises an AssertionError with the message: Error: Number should be positive. Got -3

    print("\nTesting are_equal function:")
    print("Numbers are equal?:", are_equal(num1, num1)) # Should print: True
    print("Numbers are equal?:", are_equal(num1, num2)) # Should print: False

    print("\nChecking if numbers are not equal:")
    print("Numbers are not equal?:", not are_equal(num1, num2)) # Should print: True
17
python
def calculate_sum(num1, num2):
    # Using assert to check if the input arguments are numbers
    assert isinstance(num1, (int, float)), "First argument must be a number"
    assert isinstance(num2, (int, float)), "Second argument must be a number"

    # Using or operator to check if either of the condition is true
    if num1 > 0 and num2 > 0:
        print("Both numbers are positive")
        return num1 + num2
    elif num1 < 0 and num2 < 0:
        print("Both numbers are negative")
        return num1 + num2
    else:
        print("One or both numbers are zero")
        return 0

if __name__ == "__main__":
    # Testing the function with valid input
    x = 5
    y = 7
    result = calculate_sum(x, y)
    print(f"The sum of {x} and {y} is: {result}")

    # Testing the function with invalid input (non-numbers)
    try:
        calculate_sum("a", "b")
    except AssertionError as error:
        print(error)
18
python
# Function to calculate the square of a number using assert statement
def calculate_square_assert(number):
    assert number is not None, "Error: Number cannot be None"
    return number * number

# Function to calculate the square of a number using pass statement (an empty statement)
def calculate_square_pass(number):
    pass
    # This pass statement does nothing and acts as a placeholder

if __name__ == "__main__":
    num = 5
    
    # Using calculate_square_assert function
    square = calculate_square_assert(num)
    print("Square of number using assert statement: ", square)

    # Using calculate_square_pass function (does nothing)
    calculate_square_pass(num)
19
python
# Function to calculate the square root using simple method (before math.sqrt)
def simple_square_root(number):
    if number >= 0:
        guess = number / 2.0
        while abs(guess*guess - number) > 0.01:
            guess = (guess + number / guess) / 2.0
        return guess
    else:
        raise ValueError("Square root of negative number")

# Function to calculate the factorial
def factorial(n):
    assert n >= 0, "Factorial is not defined for negative numbers"
    if n == 0:
        return 1
    else:
        result = 1
        for i in range(1, n+1):
            result *= i
        return result

# Testing the functions with some inputs
print("Square root of 4 is:", simple_square_root(4))
print("Square root of 25 is:", simple_square_root(25))
try:
    print("Square root of -1 is:", simple_square_root(-1))
except AssertionError as e:
    print("Error:", e)

print("Factorial of 0 is:", factorial(0))
print("Factorial of 4 is:", factorial(4))
try:
    print("Factorial of -3 is:", factorial(-3))
except ValueError as ve:
    print("Error:", ve)
20
python
import math

def square_root(number):
    """Calculate the square root of a number. Raise an error if the number is negative."""

    assert number >= 0, "Error: The number must be greater than or equal to zero."

    result = math.sqrt(number)

    return result

# Test cases
print(square_root(4))
print(square_root(16))
print(square_root(-1))
21
python
# Function to calculate the square root using the quadratic formula
def quadratic_root(number):
    # Calculating the quadratic formula for square root
    a = 1.0
    b = 0.0
    c = number
    discriminant = (b ** 2) - (4 * a * c)

    if discriminant > 0:
        x1 = (-b + math.sqrt(discriminant)) / (2 * a)
        return x1
    elif discriminant == 0:
        x = -b / (2 * a)
        assert x != float('nan'), "Square root of {} is NaN".format(number)
        return x
    else:
        try:
            x1 = (-b + math.sqrt(abs(discriminant))) / (2 * a)
            x2 = (-b - math.sqrt(abs(discriminant))) / (2 * a)
            raise Exception("Complex numbers are not supported.") if x1.imag or x2.imag else None
            return x1
        except (ValueError, TypeError):
            print("Error: Invalid input for square root calculation.")
            assert False, "Unexpected error occurred."

# Testing the function with different inputs
if __name__ == "__main__":
    # Inputs where the function is expected to work correctly
    number1 = 16.0
    number2 = 4.0
    print("Square root of {} is {}".format(number1, quadratic_root(number1)))
    print("Square root of {} is {}".format(number2, quadratic_root(number2)))

    # Input where the function should raise an exception
    number3 = -1.0
    try:
        quadratic_root(number3)
    except Exception as e:
        print("Error message:", e)

    # Input where the function encounters a logical error
    number4 = 0.0
    quadratic_root(number4)
22
python
def divide(dividend, divisor):
    """
    This function divides given dividend by divisor and returns the quotient
    :param dividend: The numerator in division operation
    :param divisor: The denominator in division operation
    :return: The result of the division operation
    """
    try:
        result = dividend / divisor
    except ZeroDivisionError:
        print("Error: Division by zero is not allowed.")
        return None
    except ValueError:
        print("Error: Denominator must be a number.")
        return None

    return result

print("Enter the dividend and denominator (space-separated):")
input_str = input()
dividend, divisor = map(float, input_str.split())

result = divide(dividend, divisor)

if result is not None:
    print(f"The quotient of {dividend} and {divisor} is: {result}")
else:
    assert False, "An error occurred during division."

# Using a while loop for infinite calculation demonstration (optional)
i = 0
while True:
    print(f"The result of i^2 is {i*i}")
    i += 1
23
python
import os

def assert_file_exists(filepath):
    """Raise an AssertionError if the given file does not exist."""
    if not os.path.isfile(filepath):
        msg = f"File '{filepath}' does not exist."
        raise AssertionError(msg)

def process_file(filepath, delimiter='\t'):
    """Read a file line by line and print its contents."""
    with open(filepath, 'r') as file:
        lines = file.readlines()
        for line in lines:
            elements = line.split(delimiter)
            print(elements)

if __name__ == "__main__":
    filepath = "example.txt"  # Replace with your file path
    assert_file_exists(filepath)  # Ensure the file exists before processing it
    process_file(filepath)
24
python
def fibonacci():
    # Initialize the first two numbers in the Fibonacci sequence
    a, b = 0, 1

    while True:
        yield a
        a, b = b, a + b

# Let's test our generator with some assertions
def test_fibonacci():
    fib = fibonacci()
    # First two numbers in the Fibonacci sequence should be 0 and 1
    assert next(fib) == 0
    assert next(fib) == 1

    # Test some more numbers from the sequence
    assert next(fib) == 1
    assert next(fib) == 2
    assert next(fib) == 3
    assert next(fib) == 5

if __name__ == "__main__":
    test_fibonacci()
25
python
# Example function with incorrect calculation
def square_root(n):
    return 0.5 * n

# Function under test
def calculate_square(number):
    sqrt = square_root(number)
    result = number * sqrt
    return result

if __name__ == "__main__":
    # Test cases
    num1 = 9
    num2 = -4
    num3 = 0

    # Test case with valid input
    print(f"Calculate square of {num1}: Expected: 8.485281, Actual:")
    actual = calculate_square(num1)
    assert abs(actual - 8.485281) < 0.01, f"Expected result to be close to 8.485281 but got {actual}"
    print(actual)

    # Test case with negative input
    print(f"\nCalculate square of {num2}: Expected: None (since the function doesn't support negative numbers), Actual:")
    try:
        actual = calculate_square(num2)
    except Exception as e:
        print(e)

    # Test case with zero input
    print(f"\nCalculate square of {num3}: Expected: 0, Actual:")
    actual = calculate_square(num3)
    assert actual == 0, f"Expected result to be 0 but got {actual}"
    print(actual)
26
python
# Function to check if two lists are equal and all elements are numbers
def lists_are_equal_and_numeric(list1, list2):
    # Check if lengths are equal
    assert len(list1) == len(list2), "Lists have different lengths"
    
    # Check if all elements in both lists are numeric using all() function
    assert all(isinstance(i, (int, float)) for i in list1), "List 1 contains non-numeric elements"
    assert all(isinstance(i, (int, float)) for i in list2), "List 2 contains non-numeric elements"

# Testing the function
list1 = [1, 2.5, 3]
list2 = [1, 2.5, 3]
lists_are_equal_and_numeric(list1, list2)  # No error raised

list3 = [1, 2.5, 3, "four"]
list4 = [1, 2.5, 3]
lists_are_equal_and_numeric(list3, list4)  # AssertionError: List 3 contains non-numeric elements
27
python
def is_valid_password(password):
    """
    This function checks if a given password is valid or not based on certain conditions.
    1. It should have at least one digit.
    2. It should have at least one lowercase letter.
    3. It should have at least one uppercase letter.
    """

    # Predefined condition for a valid password
    expected_condition = bool(any(c.isdigit() for c in password)) and \
                         bool(any(c.islower() for c in password)) and \
                         bool(any(c.isupper() for c in password))

    # Using assert statement to check if the given password meets the required conditions
    assert expected_condition, "Invalid password! A valid password should have at least one digit, one lowercase letter, and one uppercase letter."
    
    return password

# Testing the function with some examples
try:
    is_valid_password("Password123")
except AssertionError as e:
    print(e)

try:
    is_valid_password("HelloWorld")
except AssertionError as e:
    print(e)

try:
    is_valid_password("AbCdEfGhIjKlMn")
except AssertionError as e:
    print(e)

# Valid password
is_valid_password("P@ssw0rd")
28
python
import ast

# Function to convert a list of integers to a string
def int_list_to_str(int_list):
    return '[' + ', '.join(map(str, int_list)) + ']'

# Function under test that converts an expression tree to a string
def expr_tree_to_str(node):
    if isinstance(node, ast.Number):
        return str(node.n)
    elif isinstance(node, ast.List):
        return '[' + ', '.join(map(expr_tree_to_str, node.els)) + ']'
    elif isinstance(node, ast.BinOp):
        left = expr_tree_to_str(node.left)
        right = expr_tree_to_str(node.right)
        return f'{left} {node.op} {right}'
    else:
        assert False, f"Unsupported node type: {type(node)}"

# Sample code to test the functions
code = '''\
a = [1, 2, 3]
b = [4, 5]
c = [a[0] + b[0], a[1] + b[1]]
result = [c[0] * 2, c[1] * 2]
'''

# Parse the code and create an expression tree
tree = ast.parse(code).body
assert isinstance(tree, ast.List), "Code is not a valid list expression"

# Convert the expression tree to a string
print("Expression Tree:")
print(ast.dump(tree))

print("\nString Representation of Expression Tree:")
print(expr_tree_to_str(tree))

# Convert the expression tree to an ASCII art representation
print("\nASCII Art Representation of Expression Tree:")
def print_ascii_tree(node, level=0):
    if isinstance(node, ast.List):
        print(f'{"[":^{level*3}}')
        for i, elem in enumerate(node.els):
            print_ascii_tree(elem, level+1)
        print(f'{"]":^{level*3}}')
    elif isinstance(node, ast.BinOp):
        op = {ast.Add: ' + ', ast.Sub: ' - ', ast.Mult: ' * '}[type(node.op)]
        left_elem = node.left if isinstance(node.left, ast.List) else f"'{str(node.left)}'"
        right_elem = node.right if isinstance(node.right, ast.List) else f"'{str(node.right)}'"
        print(f"{'   ':^{level*3}}{op}{left_elem}:{len(str(op)) + len(left_elem)+1:^{level*3}}{'   ':^{level*3}}{right_elem}")
        print_ascii_tree(node.right, level+1)
        print_ascii_tree(node.left, level+1)
    elif isinstance(node, ast.Number):
        print(f"{node.n:^{level*3}}")

print_ascii_tree(tree)
29
python
def add_numbers(x, y):
    """
    This function adds two numbers and returns the result.
    :param x: First number
    :param y: Second number
    :return: Sum of two numbers
    """
    return x + y

# Testing adding two positive numbers
result = add_numbers(3, 5)
assert result == 8, "Addition is not correct for positive numbers"
print(f"Result: {bin(result)}")

# Testing adding one negative number and one positive number
result = add_numbers(-2, 3)
assert result == 1, "Addition is not correct for one negative and one positive number"
print(f"Result: {bin(result)}")

# Testing adding two negative numbers
result = add_numbers(-3, -5)
assert result == -8, "Addition is not correct for two negative numbers"
print(f"Result: {bin(result)}")
30
python
def add(x, y):
    """
    This function adds two numbers and returns the result.
    :param x: First number
    :param y: Second number
    :return: The sum of x and y
    """
    result = x + y
    assert type(x) is (int or float), "First parameter must be either integer or float"
    assert type(y) is (int or float), "Second parameter must be either integer or float"
    return result

def main():
    num1 = 5.0
    num2 = 3
    sum_of_numbers = add(num1, num2)

    print("The sum of {0} and {1} is {2}" .format(num1, num2, sum_of_numbers))

    # Testing the assert statement
    try:
        add("string1", 5)
    except AssertionError as e:
        print("Error message:", e)

    num3 = -5.0
    num4 = 2
    sum_of_numbers2 = add(num3, num4)

    if sum_of_numbers2 < (num3 + num4):
        print("Error: The sum of numbers is not correct")
    else:
        print("The sum of {0} and {1} is {2}" .format(num3, num4, sum_of_numbers2))

if __name__ == "__main__":
    main()
31
python
import binascii

def hex_to_bytearray(hex_string):
    """Convert a hexadecimal string to a bytearray."""
    return bytearray.fromhex(hex_string)

def int_to_hex_bytes(num, length=2):
    """Convert an integer to a hexadecimal string of a given length."""
    return binascii.hexlify(bytearray([num >> (8 * i) & 0xFF for i in range(length)]))[::-1].decode()

def add_numbers(x, y):
    """Add two numbers represented as bytes."""
    assert isinstance(x, (int, bytearray)), "x must be an integer or bytearray"
    assert isinstance(y, (int, bytearray)), "y must be an integer or bytearray"

    if isinstance(x, int):
        x = bytearray([x])
    if isinstance(y, int):
        y = bytearray([y])

    result = bytearray()
    result.append(x[0] + y[0])
    return result

if __name__ == "__main__":
    x = bytearray([1, 2, 3])
    y = bytearray([4, 5, 6])
    z = add_numbers(x, y)

    assert len(z) == 3, "Result must be a bytearray of length 3"
    assert z[0] == 5 and z[1] == 7 and z[2] == 9, "The first two bytes should be the sum of the first bytes of x and y, and the third byte should be the sum of the second bytes"

    # Testing with integers
    assert int.from_bytes(z[0], 'big') + int.from_bytes(z[1], 'big') == 5 + 7, "The result as a pair of integers should equal the sum of x and y as integers"

    # Hexadecimal representation of x and y
    hex_x = int_to_hex_bytes(ord(x[0])) + int_to_hex_bytes(ord(x[1])) + int_to_hex_bytes(ord(x[2]))
    hex_y = int_to_hex_bytes(ord(y[0])) + int_to_hex_bytes(ord(y[1])) + int_to_hex_bytes(ord(y[2]))

    assert z == hex_to_bytearray(hex_x + hex_y), "The result bytearray should be the sum of x and y represented as hexadecimal strings"
32
python
# Define a function to convert a given string into a bytes object
def string_to_bytes(input_string):
    if not isinstance(input_string, str):
        raise TypeError("Input must be a string")
     return input_string.encode('ascii')

# Define a function that calculates the checksum of given bytes
def calculate_checksum(input_bytes):
    if not isinstance(input_bytes, (list, tuple, bytes)):
        raise TypeError("Input must be a bytes object or a sequence of bytes")
     checksum = 0
     for byte in input_bytes:
         checksum += ord(byte)
     return checksum

# Define a sample string and convert it into bytes using string_to_bytes function
sample_string = "Hello, World!"
sample_bytes = string_to_bytes(sample_string)

# Assertion to verify the type of the sample_bytes
assert isinstance(sample_bytes, bytes), "Sample data must be a bytes object"

# Calculate checksum for the sample_bytes and print it
checksum = calculate_checksum(sample_bytes)
print("Checksum for the given bytes is:", checksum)
33
python
# Define a function that should always return a positive number
def square_root(n):
    if n < 0:
        raise ValueError("Square root of negative number")
    return n ** 0.5

# Define a function that calculates the square of a given number
def square(number):
    return number * number

# Test function to check if a given function returns a number close enough to the expected result
def test_square_root(n, tolerance=1e-9):
    assert callable(square_root), "square_root is not a valid function"
    assert n >= 0, f"n should be non-negative for square root calculation (got {n})"
    result = square_root(n)
    expected = n ** 0.5
    error = abs(result - expected)
    print(f"Square root of {n} is approximately {result}, expected {expected}")
    assert error <= tolerance, f"Error is too large: {error}"

# Test the square_root function with some values
test_square_root(9)
test_square_root(16)
test_square_root(-1)

# Test an invalid function for square root calculation
try:
    test_square_root("abc", 0.0001)
except AssertionError as e:
    print(e)
34
python
def validate_char(char):
    # Define valid character range
    min_char = ord('A')
    max_char = ord('Z')
    
    # Check if the given character is within the valid range using assert
    assert ord(char) >= min_char and ord(char) <= max_char, f"Invalid character. Expected a character between '{chr(min_char)}' and '{chr(max_char)}'"
    
    # Convert ASCII value to its corresponding character using chr
    validated_char = chr(ord(char))
    
    return validated_char

try:
    # Testing the function with a valid character
    valid_char = validate_char('B')
    print("Valid Character: ", valid_char)

    # Testing the function with an invalid character
    invalid_char = validate_char('a')
except AssertionError as e:
    print(e)
35
python
class ComplexNumber:
    def __init__(self, real=0.0, imag=0.0):
        self.real = real
        self.imag = imag

    @staticmethod
    @classmethod
    def from_polar(magnitude, angle_in_degrees):
        """
        Static method to create ComplexNumber instance from polar coordinates
        :param magnitude: complex number's magnitude
        :param angle_in_degrees: complex number's argument in degrees
        :return: ComplexNumber instance
        """
        angle_in_radians = math.radians(angle_in_degrees)
        real_part = magnitude * math.cos(angle_in_radians)
        imag_part = magnitude * math.sin(angle_in_radians)
        return ComplexNumber(real=real_part, imag=imag_part)

    def __str__(self):
        if self.imag >= 0:
            return f'{self.real} + {self.imag}j'
        else:
            return f'{self.real} - {abs(self.imag)}j'

    @classmethod
    def assert_is_instance(cls, instance):
        """
        Assert that provided object is an instance of ComplexNumber class
        :param instance: object to check
        :raises TypeError if not a ComplexNumber instance
        """
        if not isinstance(instance, cls):
            msg = f"{instance.__class__.__name__} should be an instance of ComplexNumber"
            raise TypeError(msg)

if __name__ == "__main__":
    # Create complex numbers using constructor and static method
    num1 = ComplexNumber(3, 4)
    num2 = ComplexNumber.from_polar(5, 60)

    print("num1:", num1)
    print("num2:", num2)

    # Assert that both instances are of ComplexNumber class
    ComplexNumber.assert_is_instance(num1)
    ComplexNumber.assert_is_instance(num2)
36
python
# Example of assert statement usage
def square_root(number):
    """Calculates the square root of a given number."""
    assert number >= 0, "Number must be non-negative"
    return number ** 0.5

try:
    result = square_root(-1)
except AssertionError as e:
    print(e)
else:
    print("The square root of {} is {}".format(16, result))
37
python
# Function to check if a given complex number is inside a circle with center at (a, b) and radius r
def is_inside(z, a, b, r):
    # Calculate the difference between z and the center point
    diff = z - complex(a, b)
    
    # Find the magnitude of the difference
    mag_diff = abs(diff)
    
    # Check if the magnitude is less than or equal to the radius
    return mag_diff <= r

# Complex number to check
z = complex(1.5, 2.3)

# Center and radius of the circle
a = 0.5
b = -1.5
r = 3.0

# Check if z is inside the circle using the is_inside function
result = is_inside(z, a, b, r)

# Use assert to verify that the result is True when z is inside the circle
assert result, f"The complex number {z} is not inside the circle with center at ({a}, {b}) and radius {r}"

# Check another complex number that is outside the circle
z2 = complex(3.5, 0.8)
result2 = is_inside(z2, a, b, r)
assert not result2, f"The complex number {z2} should be outside the circle with center at ({a}, {b}) and radius {r}"
38
python
class MyClass:
    def __init__(self, value):
        assert value >= 0, "Value should be non-negative"
        self._private = value

    def remove_attribute(self, attribute_name):
        delattr(self, attribute_name)
        print(f"Successfully removed the attribute {attribute_name}.")

# Instantiate an object of MyClass with a valid value
my_instance = MyClass(5)
print("My instance attributes: ", dir(my_instance))

# Instantiate an object of MyClass with an invalid value (should raise an AssertionError)
try:
    invalid_instance = MyClass(-3)
except AssertionError as e:
    print(e)

# Remove a non-existent attribute (should not raise any error)
my_instance.remove_attribute("non_existent_attribute")
print("My instance attributes after removal: ", dir(my_instance))

# Remove an existing attribute (private _private)
my_instance.remove_attribute("_private")
print("My instance attributes after removing '_private': ", dir(my_instance))
39
python
def validate_dict(input_dict):
    # Keys and expected values
    keys_and_values = {
        "name": "John Doe",
        "age": 30,
        "city": "New York"
    }

    # Validate input dictionary with given keys and expected values using assert statement
    for key, value in keys_and_values.items():
        assert key in input_dict, f"Key '{key}' is missing in the input dict."
        assert input_dict[key] == value, f"Value of key '{key}' is not as expected."
        
# Test the validate_dict function with a valid dictionary
test_dict = {
    "name": "John Doe",
    "age": 30,
    "city": "New York"
}
validate_dict(test_dict)
print("Test passed!")

# Test the validate_dict function with an invalid dictionary
invalid_dict = {
    "name": "John Doe",
    "age": 31,
    "city": "New York"
}
try:
    validate_dict(invalid_dict)
except AssertionError as error:
    print(f"Test failed! Error: {error}")
40
python
class MyNumber:
    def __init__(self, value):
        self._value = value

    @property
    def value(self):
        return self._value

    def increment(self):
        self._value += 1

x = MyNumber(5)

# Using assert to check if an object is an instance of a specific class
assert isinstance(x, MyNumber), "x is not an instance of MyNumber"

# Using assert to check if the value attribute exists and is of the correct type
assert hasattr(x, 'value'), "x does not have a value attribute"
assert isinstance(x.value, int), "x's value attribute is not an integer"

# Using dir() to print out all attributes and methods of an object
print("Attributes and methods of x:")
print(dir(x))

# Testing the functionality of the class
x.increment()
assert x.value == 6
41
python
def divide(x, y):
    """
    This function takes two arguments x and y, and returns quotient and remainder from the division of x by y
    using the divmod() function.
    :param x: dividend (integer or float)
    :param y: divisor (integer)
    :return: tuple with two elements - quotient and remainder
    """
    q, r = divmod(x, y)  # divide x by y and get the quotient and remainder as a tuple
    assert y != 0, "Error: Divisor cannot be zero"  # check if divisor is not zero using assert statement
    return q, r

if __name__ == "__main__":
    num1 = int(input("Enter the dividend: "))
    num2 = int(input("Enter the divisor: "))

    quotient, remainder = divide(num1, num2)
    print(f"Quotient: {quotient}")
    print(f"Remainder: {remainder}")
42
python
def process_data(data):
    """
    This function processes a list of numbers and checks for errors.
    :param data: List of numbers
    :return: None
    """
    expected_values = [1, 2, 3, 4, 5]
    processed_data = []

    # Process each number in the list
    for index, num in enumerate(data):
        result = num * 2
        processed_data.append(result)

        # Assertion check
        assert num in expected_values, f"Error: Unexpected number {num} found in data!"

    print("Processed data:", processed_data)

# Test the function with a list of numbers
data = [1, 2, 3, 4, 5]
process_data(data)

# Test the function with an unexpected number
data = [1, 2, 3, 4, 6]
try:
    process_data(data)
except AssertionError as e:
    print("Error:", e)
43
python
def square_root(number):
    assert number >= 0, "Error: The number must be non-negative"
    return number ** 0.5

try:
    print(square_root(-1))
except AssertionError as e:
    print(e)
44
python
def add(x, y):
    assert x is not None, "First argument cannot be None"
    assert y is not None, "Second argument cannot be None"
    return x + y

try:
    add(3, 4)
except AssertionError as e:
    print("Error:", e)

# Output: No error because the arguments are valid

try:
    add(None, 5)
except AssertionError as e:
    print("Error:", e)

# Output: Error: First argument cannot be None
45
python
def is_number(n):
    """Function to check if an element is a number"""
    return isinstance(n, (int, float))

def double_numbers(nums):
    """Function to double each number in a given list"""
    return [num * 2 for num in nums]

nums = ['1', '2', 3, 4, '5', 6]

# Using assert for type checking and validation
assert all(map(is_number, nums)), "Input list contains non-numeric elements"

# Using filter() to remove non-numeric elements from the list
nums_filtered = list(filter(is_number, nums))

print("Original List: ", nums)
print("Filtered List: ", nums_filtered)

nums_doubled = double_numbers(nums_filtered)

print("Doubled Numbers: ", nums_doubled)
46
python
def calculate_root(number):
    """
    Calculate the square root of given number.
    :param number: Number to find the square root of.
    :return: The calculated square root.
    """

    # Using assert statement to check if number is positive
    assert number >= 0, "Error! Number should be non-negative."

    try:
        result = float(number) ** 0.5
    except Exception as e:
        print(f"Error occurred: {e}")
        result = None

    return result

# Testing the function with valid and invalid inputs
print("The square root of 25 is:", calculate_root(25)) # This should print "The square root of 25 is: 5.0"
print()

print("The square root of -1 is:", calculate_root(-1)) # This should print "Error! Number should be non-negative."
47
python
# Function to calculate the square of a number
def calculate_square(number):
    return number * number

# Function to test the calculation of square
def test_calculate_square():
    assert type(5) is int, "Expected an integer"
    expected = 25
    actual = calculate_square(5)
    message = "Square of {number} should be {expected}, but got {actual}"
    assert expected == actual, message.format(number=5, expected=expected, actual=actual)
    print("Test passed")

# Function to call test_calculate_square() function
def main():
    try:
        test_calculate_square()
    except AssertionError as e:
        print("Test failed: {}".format(e))

if __name__ == "__main__":
    main()
48
python
# Define the create_frozen_set function
def create_frozen_set():
    my_set = {1, 2, 3, 4}
    return frozenset(my_set)

# Test the create_frozen_set function using assert statement
def test_create_frozen_set():
    frozen_set = create_frozen_set()
    expected_frozen_set = frozenset({1, 2, 3})

    # Test if the returned frozenset has the same elements as the expected one
    assert frozen_set == expected_frozen_set, "create_frozen_set function failed"
    print("Test passed!")

# Call the test function
test_create_frozen_set()
49
python
class MyClass:
    def __init__(self, value):
        self._value = value

    @property
    def value(self):
        return self._value * 2

def process(obj):
 assert isinstance(obj, MyClass), "Input should be an instance of MyClass"
 result = getattr(obj, 'value', 0)
 print("Processed value: ", result)

if __name__ == "__main__":
 obj = MyClass(3)
 process(obj)

# Output: Processed value:  6

if __name__ == "__main__":
 obj_invalid = "not an instance"
 try:
     process(obj_invalid)
 except AssertionError as e:
     print("Caught expected error:", e)

# Output: Caught expected error: Input should be an instance of MyClass
50
python
def add_numbers(a, b):
    """
    Add two numbers and returns the sum.
    :param a: First number
    :param b: Second number
    :return: The sum of a and b
    """
    result = a + b
    assert result == (a + b), f"Error! Expected {a + b}, but got {result}"
    return result

if __name__ == "__main__":
    x = 3
    y = 4
    z = add_numbers(x, y)
    print("The sum of {} and {} is {}".format(x, y, z))
51
python
class MyNumber:
    def __init__(self, value):
        self.value = value

def is_positive(number):
    assert hasattr(number, 'value'), "MyNumber instance must have a 'value' attribute"
    if number.value > 0:
        return True
    else:
        raise ValueError("Number must be positive")

# Test the function
num1 = MyNumber(5)
assert is_positive(num1), "Number should be positive"

num2 = MyNumber(-3)
assert is_positive(num2), "Number should be positive" # This will raise an AssertionError since num2's value is negative
52
python
# Define a simple Person class with name and age attributes
class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

# Function to calculate the hash value of a person object
def person_hash(person):
    return hash((type(person), person.name, person.age))

# Create some Person objects
person1 = Person("Alice", 30)
person2 = Person("Bob", 25)

# Test the assert statement for checking if two persons have the same name and age
def test_persons():
    assert person1.name == "Alice" and person1.age == 30, \
        f"Person1 has name '{person1.name}' and age {person1.age} which is not correct."
    assert person2.name == "Bob" and person2.age == 25, \
        f"Person2 has name '{person2.name}' and age {person2.age} which is not correct."

# Test the hash function for generating unique identifiers for Person objects
def test_hash():
    assert person_hash(person1) == hash((type(Person), "Alice", 30)), \
        "Person1's hash value is not as expected."
    assert person_hash(person2) == hash((type(Person), "Bob", 25)), \
        "Person2's hash value is not as expected."

# Call the test functions
try:
    test_persons()
    test_hash()
    print("All tests passed.")
except AssertionError as e:
    print(f"Test failed: {e}")
53
python
class Calculator:
    def __init__(self):
        pass

    def add(self, num1, num2):
        """
        Add two numbers.

        Parameters:
            num1 (float or int): The first number to be added.
            num2 (float or int): The second number to be added.

        Returns:
            The sum of the two provided numbers.
        """
        assert isinstance(num1, (int, float)), "The first argument should be a number."
        assert isinstance(num2, (int, float)), "The second argument should be a number."
        return num1 + num2

    def subtract(self, num1, num2):
        """
        Subtract the second number from the first number.

        Parameters:
            num1 (float or int): The first number to be subtracted from.
            num2 (float or int): The second number to be subtracted.

        Returns:
            The difference between the two provided numbers.
        """
        assert isinstance(num1, (int, float)), "The first argument should be a number."
        assert isinstance(num2, (int, float)), "The second argument should be a number."
        return num1 - num2

    def multiply(self, num1, num2):
        """
        Multiply two numbers.

        Parameters:
            num1 (float or int): The first number to be multiplied by the second.
            num2 (float or int): The second number to be multiplied with.

        Returns:
            The product of the two provided numbers.
        """
        assert isinstance(num1, (int, float)), "The first argument should be a number."
        assert isinstance(num2, (int, float)), "The second argument should be a number."
        return num1 * num2

    def divide(self, num1, num2):
        """
        Divide the first number by the second number.

        Parameters:
            num1 (float or int): The dividend.
            num2 (float or int): The divisor.

        Returns:
            The quotient of the division of the two provided numbers.

        Raises:
            ZeroDivisionError: If num2 is 0.
        """
        assert isinstance(num1, (int, float)), "The first argument should be a number."
        assert isinstance(num2, (int, float)), "The second argument should be a number."
        assert num2 != 0, "Cannot divide by zero."
        return num1 / num2

if __name__ == "__main__":
    calc = Calculator()

    # Test the calculator methods using valid inputs
    print(calc.add(5, 3))            # Output: 8
    print(calc.subtract(7, 4))       # Output: 3
    print(calc.multiply(2, 3))      # Output: 6
    print(calc.divide(10, 2))       # Output: 5.0

    # Test the calculator methods using invalid inputs
    try:
        calc.add("hello", 3)         # Raises a TypeError due to assertions in add method
        calc.subtract(7, "world")    # Raises a TypeError due to assertions in subtract method
        calc.multiply([1, 2], 5)     # Raises a TypeError due to assertions in multiply method
        calc.divide(9, 0)           # Raises a ZeroDivisionError due to assertion in divide method
    except Exception as e:
        print("An error occurred:", e)

    # Display the help documentation for each method
    print("\nHelp for Calculator class methods:")
    help(Calculator.add)
    help(Calculator.subtract)
    help(Calculator.multiply)
    help(Calculator.divide)
54
python
# Define a function that raises an AssertionError if condition is false
def assert_equal(a, b):
    if a != b:
        message = f"Expected {a} to be equal to {b}, but got {a} instead."
        raise AssertionError(message)

# Define a function that returns the sum of two numbers
def add_numbers(x, y):
    return x + y

# Perform some calculations and use assert to check the results
num1 = 5
num2 = 3
sum_result = add_numbers(num1, num2)
assert sum_result == 8, "Error: incorrect sum result"

# Convert some integers to hexadecimal strings using hex() function
decimal_number1 = 0x10
decimal_number2 = 0xFF
hexadecimal_number1 = hex(decimal_number1)[2:]
hexadecimal_number2 = hex(decimal_number2)[2:]
print(f"Decimal number 0x{decimal_number1} in hex is {hexadecimal_number1}")
print(f"Decimal number 0x{decimal_number2} in hex is {hexadecimal_number2}")
55
python
# A simple function that raises an exception if the condition is not met
def square_root(number):
    try:
        return number ** 0.5
    except ValueError:
        raise ValueError("Square root of a negative number")

# Function to be tested
def add(a, b):
    return a + b

# Test case for addition function
def test_add():
    x = 3
    y = 4
    result = add(x, y)

    # Using assert statement to check if the addition is equal to the expected value
    assert id(result) == id(x + y), f"Addition function failed. Expected {id(x + y)}, got {id(result)}"
    assert result == x + y, "Addition function failed. Expected {} + {}, got {}".format(x, y, result)

# Test case for square root function (with an expected exception)
def test_square_root():
    with pytest.raises(ValueError):
        # Using assert statement to check if the exception is raised when taking square root of a negative number
        assert square_root(-1) is None, "Square root function did not raise an error for negative input"
        square_root(-1)

# Run the test functions
test_add()
test_square_root()
56
python
# Function to check if a number is even or odd
def is_even_or_odd(number):
    if number % 2 == 0:
        return "even"
    else:
        return "odd"

# Get user input and convert it to integer
user_input = input("Enter an integer: ")
try:
    num = int(user_input)
except ValueError:
    print("Invalid input! Please enter a valid integer.")
else:
    # Check if the number is even or odd using assert statement
    result = is_even_or_odd(num)
    assert type(result) == str, "is_even_or_odd function should return a string"
    print(f"The number {num} is {result}")
57
python
# A simple function to validate if a given number is positive
def validate_positive_number(n):
    """
    This function takes an integer as an argument and validates if it's positive.
    If the number is negative or zero, it raises an AssertionError with an error message.
    """
    assert n > 0, f"Error: The input number {n} must be positive."
    
# Now we can use this function to validate some numbers
try:
    # Valid input
    validate_positive_number(5)
except AssertionError as e:
    print(e)

# Invalid input
validate_positive_number(-3)
58
python
# Function definition with input validation using assert and isinstance
def divide(num1, num2):
    assert (isinstance(num1, (int, float)) and
            isinstance(num2, (int, float))), "Both numbers should be either int or float"
     if isinstance(num1, int) and isinstance(num2, int):
         result = num1 / num2
     else:
         result = num1 // num2  # For floating point division use 'divide' operator
     return result

# Test cases for divide function
if __name__ == "__main__":
    try:
        print("Result of dividing 5 by 2.5: ", divide(5, 2.5))
    except AssertionError as e:
        print("Error:", e)

    try:
        print("Result of dividing 7 by 3: ", divide(7, 3))
    except TypeError as e:
        print("Error:", e)

    try:
        print("Result of dividing a string by an integer: ", divide("10", 2))
    except AssertionError as e:
        print("Error:", e)
59
python
# Define Base Class
class Base:
    def __init__(self):
        self.base_attribute = "Base attribute"

# Define Derived Classes
class Derived1(Base):
    def __init__(self):
        super().__init__()
        self.derived1_attribute = "Derived1 attribute"

class Derived2:
    def __init__(self):
        self.derived2_attribute = "Derived2 attribute"

# Test the relationships using assert and issubclass
def test_relationships():
    base_instance = Base()
    derived1_instance = Derived1()
    derived2_instance = Derived2()

    # Using assert to check if instances of Derived classes are also instances of Base
    assert isinstance(derived1_instance, Base)
    assert isinstance(derived2_instance, Base)

    # Using issubclass to check the class relationships
    assert issubclass(Derived1, Base)
    assert issubclass(Derived1, Base)
    assert not issubclass(Derived2, Base)

# Run the tests
test_relationships()
60
python
import itertools

def list1(n):
    """Return a list with n unique elements."""
    return list(range(1, n + 1))

def list2(m):
    """Return a list with m unique elements."""
    return list(range(m + 1, m - 5, 2))

# Create two lists with the given lengths
list_a = list1(5)
list_b = list2(3)

# Using assert to check if the lists have the same elements
assert set(list_a) == set(list_b), "The sets of elements in the lists are not equal."

print("Lists contain the same elements: True")

# Using itertools.intersection_disjoint() to check for common elements
if not itertools.intersection_disjoint(list_a, list_b):
    print("The lists have common elements.")
else:
    print("The lists do not have any common elements.")

# Now let's add a common element and see if it's detected
list_b.append(2)
print("\nAfter adding a common element to list_b, the output should be:")

if not itertools.intersection_disjoint(list_a, list_b):
    print("The lists have common elements.")
else:
    print("The lists do not have any common elements.")

assert 2 in list_a or 2 in list_b, "The common element is not present in either list."
print("Common element found using assert.")
61
python
# Function to check if a list is empty or not
def check_empty_list(input_list):
    """
    This function checks if the given list is empty or not.
    :param input_list: The list to be checked
    :return: None
    """

    # Using assert statement to raise an error if the list is not empty
    assert len(input_list) == 0, "The list should be empty."

# Function to demonstrate check_empty_list function
def main():
    empty_list = []
    non_empty_list = [1, 2, 3]

    print("Checking empty list:")
    check_empty_list(empty_list)

    print("\nChecking non-empty list:")
    check_empty_list(non_empty_list)

if __name__ == "__main__":
    main()
62
python
def process_data(input_list):
    """
    This function processes a list by checking if each element is a number, and if so, adds it to a new list.
    """
    valid_numbers = []
    
    for num in input_list:
        assert isinstance(num, (int, float)), "Each element in the list should be a number."
        valid_numbers.append(num)
        
    print("Valid Numbers: ", valid_numbers)

input_list = [1, 2, 3, 4, "five"]
process_data(input_list)
63
python
def add_numbers(num1, num2):
    """
    Adds two numbers and checks if the result is as expected using assert.
    """

    # Perform addition operation
    result = num1 + num2

    # Print local variables using locals() function
    print("Local variables inside add_numbers():")
    for key, value in locals().items():
        print(f"{key}={value}")

    # Assertion to check if the addition result is as expected
    assert result == 3, "Unexpected result from adding numbers."

# Testing the add_numbers() function with different inputs
add_numbers(1, 2)
add_numbers(5, 2)
64
python
# List of numbers
numbers = [1, 2, 3, 4, 5]

# Function to check if each number is greater than zero
def is_positive(number):
    assert number > 0, f"Number {number} should be positive."
    return number

# Using map to apply the function to all elements in the list
positive_numbers = list(map(is_positive, numbers))

print("Original Numbers: ", numbers)
print("Positive Numbers: ", positive_numbers)
65
python
# List of numbers to be processed
numbers = [3, 5, 1, 7, 2, 8, 4]

# Applying assert statement for checking the length of list is greater than 0
assert len(numbers) > 0, "The given list must have at least one element"

# Using max function to find the maximum number in the list
max_number = max(numbers)

print("Maximum number in the list is:", max_number)
66
python
import numpy as np

# Create a NumPy array
data = np.array([1, 2, 3, 4, 5], dtype=np.float32)

# Create a memoryview from the NumPy array
memview = np.ascontiguousarray(data).astype('B').view('B0')

# Perform some calculations using the memoryview
shape = memview.shape
stride = memview.strides[0]
offset = memview.base + stride * 1
element1 = memview[offset]

index = 1
offset = memview.base + stride * index
element2 = memview[offset]

result = np.add(element1, element2).item()

# Use assert statements to verify the results
assert result == 3.0, "The sum of the first two elements is not correct."
assert memview.shape == (len(data),), "The shape of the memoryview is incorrect."
67
python
# A list of numbers
numbers = [5, 2, 8, 1, 9, 4]

# Using assert to check if a number is positive
def assert_number_is_positive(number):
    assert number > 0, "Error: Number should be positive."

# Printing and checking the minimum number in the list
print("The minimum number in the list is:")
min_number = min(numbers)
print(min_number)

# Applying assert function to each number in the list
for num in numbers:
    assert_number_is_positive(num)

print("All numbers in the list are positive.")
68
python
def square_root(n):
    """Calculates the square root of n"""
    if n >= 0:
        return n ** 0.5
    else:
        assert n > 0, "Error: Square root of negative number"

# Test the function with valid input
print(square_root(9)) # Output: 3.0

# Test the function with invalid input
try:
    print(square_root(-1))
except AssertionError as e:
    print(e) # Output: Error: Square root of negative number
69
python
class MyNumber:
    def __init__(self, value):
        self.value = value
        assert value >= 0, "Value should be non-negative"

# Using the MyNumber class and the assert statement
if __name__ == "__main__":
    number1 = MyNumber(5)
    number2 = MyNumber(-3)

    print("number1.value =", number1.value)
    print("number2.value =", number2.value)
70
python
import binascii

def test_octal_number(n):
    """
    This function tests if an integer 'n' is a valid octal number.
    An octal number is considered valid if its binary representation
    has exactly 3 bits set to 1 in each group of 3 digits (starting from the right).
    """

    # Convert the input integer to an octal string
    oct_num = oct(n)[2:]

    # Check if the number of bits set to 1 in each group of 3 digits is exactly 3
    group_size = len(oct_num) // 3
    for i in range(len(oct_num)):
        digit_index = i % group_size
        bit_count = sum([int(d) for d in (oct_num[i:i+group_size])])
        assert bit_count == 3, f"Error! Invalid octal number. Group {i//group_size+1} has {bit_count} bits set to 1 instead of 3."

if __name__ == "__main__":
    # Test some valid and invalid octal numbers
    test_octal_number(0o123)   # Valid: 111 011 011 = 1*1 + 1*1 + 1*1 + 1*1 + 0*1 + 1*1 + 0*1 + 1*1 = 3 bits set to 1 in each group of 3 digits
    test_octal_number(0o125)   # Invalid: 111 011 101 = 1*1 + 1*1 + 1*1 + 1*1 + 0*1 + 1*1 + 0*1 + 1*1 + 1*1 = 4 bits set to 1 in each group of 3 digits
    test_octal_number(0o777)   # Valid: 111 111 111 = 3*3 = 9 bits set to 1, but the function only checks groups of 3 digits
71
python
# Import the 'os' module to use the exist() function
import os

# Set the file path
file_path = "example.txt"

# Check if the file exists using assert and os.path.exists()
assert os.path.exists(file_path), f"File '{file_path}' does not exist."

# Open the file in read mode using 'open' function
with open(file_path, "r") as file:
    # Read the content of the file
    content = file.read()
    
# Print the content of the file
print("Content of the file:")
print(content)
72
python
# Function that checks if a character is vowel or consonant using assert statement
def is_vowel(char):
    vowels = "aeiouAEIOU"
    if ord(char) in map(ord, vowels):
        return True
    else:
        assert len(str(ord(char)).isdigit()) == 1 and int(str(ord(char))) >= 65 and int(str(ord(char))) <= 90 or int(str(ord(char))) >= ord('a') and int(str(ord(char))) <= ord('z'), f"Invalid character '{char}', expected ASCII value between 65-90 (capital letters) or 97-122 (lowercase letters)."
        return False

# Testing the function
print("Is 'a' a vowel? ", is_vowel('a')) # True
print("Is 'b' a vowel? ", is_vowel('b')) # False, but it will raise an AssertionError as 'b' is not between ASCII value 65-90 or 97-122.
print("Is 'C' a vowel? ", is_vowel('C')) # False, but it will pass as the assert condition is also checking for capital letters.
73
python
def power_function(base, exponent):
    """
    This function returns the base raised to the given exponent using the built-in pow function
    :param base: base number
    :param exponent: exponent
    :return: base raised to the given exponent
    """
    result = pow(base, exponent)
    return result

def test_power_function():
    """
    This function contains some tests for the power_function using assert statements
    """
    # Test 1: Base is 2 and exponent is 3
    assert power_function(2, 3) == 8

    # Test 2: Base is -2 and exponent is 3
    assert power_function(-2, 3) == -8

    # Test 3: Base is 0 and exponent is any number
    with pytest.raises(ZeroDivisionError):
        power_function(0, 5)
        
if __name__ == "__main__":
    test_power_function()
74
python
# Function to calculate the square root using Newtown-Raphson method
def sqrt(number):
    if number < 0:
        raise ValueError("Square root of negative number is not defined.")
    
    guess = number / 2.0
    while abs(guess*guess - number) > 0.01:
        guess = (guess + number/guess) / 2.0
        
    return guess

# Function to test the square root calculation
def test_sqrt():
    num = 25
    result = sqrt(num)
    
    # Assert statement to check if the square root is correct
    assert result * result == num, f"Square root of {num} is not correct. Expected: {num}, Got: {result}"

    print("Test passed! The square root of", num, "is:", result)

# Test the function
test_sqrt()

# Another test with negative number
try:
    test_sqrt()
except AssertionError as error:
    print("Test failed:", error.args[0])
75
python
class MyNumber:
    def __init__(self, value):
        self._value = value

    @property
    def value(self):
        assert self._value is not None, "Value cannot be None"
        return self._value

    @value.setter
    def value(self, new_value):
        self.assert_valid_number(new_value)
        self._value = new_value

    def assert_valid_number(self, num):
        if not isinstance(num, (int, float)):
            msg = f"Expected number type, got {type(num)} instead"
            raise TypeError(msg)
        self.value = num

if __name__ == "__main__":
    # Valid usage
    m = MyNumber(10)
    print("Valid usage: ", m.value)

    # Assertion in setter
    try:
        m.value = "invalid"
    except AssertionError as e:
        print(f"Assertion error: {e}")

    # Setting valid number
    m.value = 20
    print("Value after setting: ", m.value)
76
python
# Function to calculate the sum of the first n numbers
def sum_of_numbers(n):
    assert n >= 0, "Number of elements in the list should be non-negative"
    total = 0
    for i in range(n):
        total += (i + 1)
    return total

# Testing the function
print(sum_of_numbers(5)) # Output: 15
print(sum_of_numbers(-2)) # Raises AssertionError: Number of elements in the list should be non-negative
77
python
class MyList(list):
    def __init__(self, numbers):
        super().__init__(numbers)

    def double(self):
        return [num * 2 for num in self]


if __name__ == "__main__":
    input_list = [1, 2, 3, 4, 5]
    my_list = MyList(input_list)

    assert len(my_list) == 5, "MyList should have 5 elements."

    doubled_list = my_list.double()

    print("Input list:", repr(input_list))
    print("MyList: ", repr(my_list))
    print("Doubled List: ", repr(doubled_list))

    assert len(doubled_list) == 10, "The double method should return a list with 10 elements."
78
python
# A list to be tested
my_list = [1, 2, 3, 4, 5]

# Using assertion for checking if a list is sorted in ascending order
def assert_sorted(input_list):
    """Assert that input_list is sorted in ascending order."""
    assert all(input_list[i] <= input_list[i + 1] for i in range(len(input_list) - 1))

# Using reversed to get the reverse iterator of a list
def print_reversed_elements(input_list):
    """Print elements of input_list in reverse order."""
    for element in reversed(input_list):
        print(element)

# Testing the functions
print("List:")
print(my_list)
assert_sorted(my_list)  # Raise an AssertionError if list is not sorted
print("Sorted? (Yes if true, otherwise No):", "Yes")
print("Reversed elements:")
print_reversed_elements(my_list)

# Modifying the list and checking again
my_list[0], my_list[-1] = my_list[-1], my_list[0]
assert_sorted(my_list)  # Raise an AssertionError if list is not sorted anymore
print("List after modification:")
print(my_list)
print("Sorted? (Yes if true, otherwise No):", "No")
79
python
# Define a function to calculate the square root of a number using approximated method
def approximate_square_root(number, precision=5):
    """
    Calculate the approximate square root of given number with the specified precision.
    :param number: Number for which the square root is to be calculated.
    :param precision: Number of digits after decimal point (default is 5).
    :return: Approximate square root.
    """
    guess = number / 2.0
    while True:
        betterness = abs(guess * guess - number)
        if betterness < 1e-precision:
            return round(guess, precision)
        else:
            if guess * (next_guess = guess - betterness / (2.0 * guess + number)) < 0:
                guess = next_guess
            else:
                guess = next_guess if next_guess > guess else guess

# Test the function
if __name__ == "__main__":
    # Using assert statement for testing inputs
    number = float(input("Enter a number: "))
    assert number >= 0, "Number should be non-negative"
    
    precision = int(input("Enter the precision (number of decimal points): "))
    assert precision > -1 and precision <= 20, "Precision should be a valid non-negative integer less than or equal to 20"

    # Using round statement for displaying output with specified number of digits after decimal point.
    square_root = approximate_square_root(number, precision)
    print(f"The square root of {number} with {precision} digits after decimal point is: {round(square_root, precision)}")
80
python
# Define a function with an assert statement to check input validation
def validate_input(input):
    assert isinstance(input, (int, float)), "Input must be either int or float."
    return input

# Function to calculate union of two sets
def union(set1, set2):
    return set1.union(set2)

# Function demonstrating the usage of assert and set
def process_data(num1, num2):

    # Validate inputs using assert statement
    num1 = validate_input(num1)
    num2 = validate_input(num2)

    # Create sets for numbers and their squares
    numbers = {num1, num1**2}
    squares = {num1**2, num2**2}

    # Calculate union of both sets
    result = union(numbers, squares)

    return result

# Test cases
print(process_data(3, 4))       # Expected output: {3, 9, 4, 16}
print(process_data("abc", 5))   # Raises an AssertionError with message "Input must be either int or float."
81
python
class Calculator:
    def __init__(self, a, b):
        self.a = a
        self.b = b

    def add(self):
        result = self.a + self.b
        assert result >= 0, "The sum of two numbers should be non-negative"
        return result

    def set_number(self, name, value):
        setattr(self, name, value)

calculator = Calculator(-1, 2)  # Initialize calculator with negative number
try:
    print("Sum is:", calculator.add())
except AssertionError as e:
    print(e)

calculator.set_number("a", 3)
print("New sum is:", calculator.add())
82
python
# List creation
numbers = [1, 2, 3, 4, 5]

# Assertion: Check if all elements in the list are positive numbers
def assert_positive_numbers(num_list):
    for num in num_list:
        assert num > 0, f"Negative number found: {num}"

assert_positive_numbers(numbers)

# Slicing: Extract a portion of the list
start = 2
end = 4
slice_numbers = numbers[start:end]

print("Original List: ", numbers)
print("Sliced List:  ", slice_numbers)
83
python
def validate_ages(people):
    """
    Validates ages in a given list of tuples and raises an AssertionError if any age is negative.

    Args:
        people: A list of tuples where each tuple contains a name (str) and an age (int).

    Raises:
        AssertionError: If any age is negative.
    """

    # Use assert to validate ages
    for person in people:
        name, age = person
        assert age >= 0, f"Age of {name} ({age}) is not non-negative."

    print("Original list:")
    print(people)

    # Sort and print the sorted list
    print("Sorted list:")
    print(sorted(people, key=lambda x: x[0]))

# Create a list of tuples
people = [("Alice", 35), ("Bob", -1), ("Charlie", 25)]

try:
    validate_ages(people)
except AssertionError as e:
    print(f"Error: {e}")
84
python
class ComplexNumber:
    def __init__(self, real=0, imaginary=0):
        self.real = real
        self.imaginary = imaginary

    @staticmethod
    def square(number):
        assert isinstance(number, (int, float)), "Input should be either integer or float"
        return number ** 2

if __name__ == "__main__":
    complex_num = ComplexNumber(3.5)
    print("Complex Number: ", complex_num.real, "+", complex_num.imaginary, "*i")
    square_result = ComplexNumber.square(ComplexNumber.square)  # this line will cause an error due to recursion
    print("Square of Complex Number: ", square_result)  # This line won't be reached as the previous one causes an error

    try:
        square_result = ComplexNumber.square(complex_num)  # This should work and prints the error message if input is not valid integer or float
    except AssertionError as e:
        print("Error:", e)
    else:
        print("Square of Complex Number: ", complex(real=square_result.real, imaginary=square_result.imaginary))
85
python
def divide(x, y):
    """This function takes two numbers as arguments and returns the quotient."""
    result = x / y
    assert y != 0, f"Error: Division by zero is not allowed. Input: {x}, {y}"
    return result

num1 = 10
num2 = 3

try:
    quotient = divide(num1, num2)
except AssertionError as error:
    print("Error:", error)
else:
    print(f"Quotient of {num1} and {num2}: {quotient}")

# Output: Quotient of 10 and 3: 3.3333333333333335

num1 = 10
num2 = 0

try:
    quotient = divide(num1, num2)
except AssertionError as error:
    print("Error:", error)
else:
    # This code will not be executed in case of an exception
    pass

# Output: Error: Error: Division by zero is not allowed. Input: 10, 0
86
python
# Function to check if list elements are numbers and sum them up
def process_input(input_list):
    # Use assertion to validate input list
    assert all(isinstance(i, (int, float)) for i in input_list), "Input list should only contain numeric types"
    
    # Sum up the elements of the list using sum function
    total = sum(input_list)
    
    # Return the total
    return total

# Testing the function with valid inputs
numbers = [1, 2.5, 3, 4]
print("Sum of the numbers:", process_input(numbers))

# Testing the function with an invalid input (list containing a string)
mixed_numbers = [1, 2.5, "three"]
try:
    print("Sum of the numbers:", process_input(mixed_numbers))
except AssertionError as e:
    print("Error:", e)
87
python
# Base class with __init__ method
class BaseClass:
    def __init__(self, value):
        self.value = value

    # Method that should be implemented by the subclass
    def operation(self):
        raise NotImplementedError("Subclass must implement operation()")

# Derived class implementing base class and overriding operation method
class DerivedClass(BaseClass):
    def __init__(self, value, another_value):
        super().__init__(value)
        self.another_value = another_value

    def operation(self):
        assert self.value > 0, "Value in base class constructor should be positive"
        result = self.value * self.another_value
        print("Result of operation:", result)
        return result

if __name__ == "__main__":
    derived_obj = DerivedClass(3, 2)
    derived_obj.operation()
88
python
# Function to check if two tuples are equal with some additional conditions
def check_tuples(tuple1, tuple2):
    if len(tuple1) != len(tuple2):
        return "Number of elements in tuples must be equal"
     for i in range(len(tuple1)):
         if tuple1[i] != tuple2[i]:
             return f"Elements at index {i} are not equal: {tuple1[i]} vs {tuple2[i]}"
     return " tuples are equal"

# Define some tuples
tuple1 = (1, 2, 3)
tuple2 = (1, 2, 3)
tuple3 = (1, 2, 4)

# Check the tuples using the function and assert statement
assert check_tuples(tuple1, tuple2) == " tuples are equal", "Error: tuples are not equal"
assert check_tuples(tuple1, tuple3) == "Error: tuples are not equal", "Error: tuples are equal"

print("All assertions passed")
89
python
def add(a, b):
    """
    This function adds two numbers and returns the result.

    :param a: First number (expected to be an integer).
    :param b: Second number (expected to be an integer).
    :return: The sum of two numbers.
    """

    # Use assert statement to check if both arguments are integers
    assert type(a) is int and type(b) is int, "Both a and b should be integers."
    
    result = a + b

    return result

if __name__ == "__main__":
    # Test adding two integers
    num1 = 5
    num2 = 3
    print(f"The sum of {num1} and {num2} is {add(num1, num2)}")

    # Test adding a string and an integer
    str1 = "10"
    num3 = 4
    try:
        _ = add(str1, num3)
    except AssertionError as error:
        print(error)
        
# Output: The sum of 5 and 3 is 8
# Output: both a and b should be integers.
90
python
# Define a function with expected arguments
def calculate_sum(num1, num2):
    total = num1 + num2
    assert type(num1) is int and type(num2) is int, "Both num1 and num2 must be integers."
    return total

# Define some variables with incorrect types
try:
    a = 5
    b = '3'
    c = calculate_sum(a, b)
except AssertionError as error_msg:
    print(error_msg)

print("\nVariables and their values within the current scope:")
for name, value in vars().items():
    print(f"{name}: {value}")

# Define variables with correct types
num1 = 3
num2 = 4
result = calculate_sum(num1, num2)
print(f"\nSum of {num1} and {num2}: {result}")
91
python
# List of test cases for addition function
test_cases = [
    (1, 2, 3),
    (5, 7, 12),
    (-1, -1, 0),
]

# Function being tested
def add(x, y):
    return x + y

# Function to perform addition using the add function
def add_function(nums):
    result = []
    for pair in nums:
        result.append(add(pair[0], pair[1]))
    return result

# Using zip to pair tests and expected results
expected_results = [(i, i+i) for i in range(len(test_cases))]

assert len(test_cases) == len(expected_results), "Number of test cases does not match number of expected results"

# Test the function
results = add_function(test_cases)

# Use assert to compare expected and actual results
assert zip(expected_results, results) == list(map(lambda x, y: (x[0], y[0]), expected_results, results)), \
    "Addition function did not return the correct results"

print("All tests passed!")
92
python
import os
def check_file_exists(file_path):
    """
    Check if a file exists at the given path. Raise an AssertionError if not.

    :param file_path: The file path to check
    :raise AssertionError: If the file does not exist
    """

    # Use os.path.isfile() to check if the file exists
    if not os.path.isfile(file_path):
        # Raise an AssertionError with a custom message
        assert os.path.isfile(file_path), f"File '{file_path}' does not exist."

def process_file(file_path):
    """
    Read the contents of a file and print them out.

    :param file_path: The file path to read from
    """

    with open(file_path, 'r') as f:
        data = f.read()
        print("File contents:")
        print(data)

if __name__ == "__main__":
    file_path = "example.txt"  # Replace this with the path to your file
    check_file_exists(file_path)
    process_file(file_path)
93
python
import sys

def square_root(number):
    try:
        result = number ** 0.5
    except Exception:
        print("Error! Tried to find the square root of a negative number.")
        sys.exit(1)
    return result

assert square_root(9) == 3, "The square root of 9 is not equal to 3"
assert square_root(16) == 4, "The square root of 16 is not equal to 4"
assert square_root(25) == 5, "The square root of 25 is not equal to 5"

print("All tests passed!")

try:
    assert square_root(-1) == 0
except AssertionError as err:
    print(f"Assertion error: {err}")

print("Program ending...")
94
python
import math

# Function to calculate the square root using math.sqrt()
def calc_square_root(number):
    return math.sqrt(number)

# Function to check if a number is perfect square
def is_perfect_square(number):
    sqrt = calc_square_root(number)
    return (sqrt * sqrt).is_integer()

# Testing the functions
num = 16
square_root = calc_square_root(num)
print("The square root of", num, "is:", square_root)

if is_perfect_square(num):
    print(num, "is a perfect square")
else:
    print(num, "is not a perfect square")

# Testing with an incorrect input
num = 15
square_root = calc_square_root(num)
assert math.isclose(square_root * square_root, num), f"{num} is not a perfect square"
print("The square root of", num, "is:", square_root)
if is_perfect_square(num):
    print(num, "is a perfect square")
else:
    print(num, "is not a perfect square")
95
python
import random

def roll_dice(num_rolls=1):
    """Roll a dice for given number of times."""
    result = []
    for _ in range(num_rolls):
        rolled_number = random.randint(1, 6)
        result.append(rolled_number)
    return result

def sum_of_dice_rolls(rolls):
    """Calculate the sum of all the dice rolls."""
    return sum(rolls)

if __name__ == "__main__":
    # Rolling dice 5 times and checking the sum is between 7 and 13.
    rolls = roll_dice()
    assert 7 <= sum_of_dice_rolls(rolls) <= 13, "Sum of dice rolls should be between 7 and 13"

    print("Rolled: ", rolls)
    print("Sum: ", sum_of_dice_rolls(rolls))
96
python
import datetime as dt

def validate_age(birth_date, min_age):
    """
    Validate if a given person is older than a minimum age.

    :param birth_date: A datetime object representing a date of birth.
    :param min_age: An integer representing the minimum allowed age.
    :raises AssertionError: If the given person is not older than the minimum age.
    """

    current_date = dt.datetime.now()
    age = current_date.year - birth_date.year - ((dt.date(current_date.year, current_date.month, current_date.day) < dt.date(*birth_date.timetuple()[:2], current_date.month, current_date.day)).days / 365)

    assert age > min_age, f"The person is not old enough! (They are {abs(age)} years old)"

# Test cases
birth_date = dt.datetime(1990, 1, 1)
min_age = 25
validate_age(birth_date, min_age)

birth_date = dt.datetime(2003, 1, 1)
min_age = 18
validate_age(birth_date, min_age)

try:
    birth_date = dt.datetime(1995, 6, 31)
    min_age = 20
    validate_age(birth_date, min_age)
except AssertionError as e:
    print(e)
97
python
import time

def is_even(number):
    """
    Check if the given number is even or not
    :param number: An integer
    :return: True if the number is even, False otherwise
    """
    return number % 2 == 0

# Testing the functionality of the 'is_even' function using assert statements
def test_is_even():
    assert is_even(4) == True, "Expected 4 to be even but got {}"
    assert is_even(6) == True, "Expected 6 to be even but got {}"
    assert is_even(-2) == True, "Expected -2 to be even but got {}"
    assert is_even(0) == True, "Expected 0 to be even but got {}"
    assert not is_even(3) == True, "Expected 3 to be odd but got {}"
    assert not is_even(5) == True, "Expected 5 to be odd but got {}"
    print("All tests passed!")

# Measuring the execution time of the 'is_even' function using the time module
def measure_time():
    number = 100000
    start_time = time.time()
    for _ in range(100):
        is_even(number)
    end_time = time.time()
    execution_time = end_time - start_time
    print("Execution time of 'is_even' function with number {}: {:.6f} seconds".format(number, execution_time))

# Calling the test and measurement functions
test_is_even()
measure_time()
98
python
import json

# Define a dictionary
data = {
    "name": "John Doe",
    "age": 30,
    "city": "New York"
}

# Convert the dictionary to JSON format
json_data = json.dumps(data)

# Print the JSON data for verification
print("JSON Data:")
print(json_data)

# Parse the JSON string back to a dictionary
parsed_data = json.loads(json_data)

# Use assert statements to check equality
assert data == parsed_data, "Error! Original data and parsed data are not equal."
print("Original Data:")
print(data)
print("Parsed Data:")
print(parsed_data)
99
python
import csv

# Function to read CSV file and process its content using assertions
def process_csv_file(filename):
    # Open CSV file in read mode
    with open(filename, newline='') as csvfile:
        reader = csv.DictReader(csvfile)

        # Process each row in the CSV file using assert statements
        for row in reader:
            # Assert that all values in a row have expected keys
            assert 'key1' in row and 'key2' in row, \
                f"Missing expected keys {'key1'} or {'key2}' in row: {row}"
            
            # Assert that value of 'key1' is an integer
            assert isinstance(row['key1'], int), \
                f"Value of key 'key1' in row '{row}' is not an integer: {row['key1']}"

            # Assert that value of 'key2' is a float within expected range
            assert 0.0 <= float(row['key2']) <= 10.0, \
                f"Invalid value of key 'key2' in row '{row}': {row['key2']}"
            
# Function to write processed data back to CSV file
def write_processed_data(filename, data):
    # Open CSV file in write mode with newline delimiter
    with open(filename, 'w', newline='') as csvfile:
        writer = csv.DictWriter(csvfile, fieldnames=['key1', 'key2'])

        # Write the processed data to the CSV file
        writer.writeheader()
        writer.writerows([{'key1': i, 'key2': str(f * 2)} for i, f in data])

# Sample usage: Process and write back data from a sample CSV file
if __name__ == "__main__":
    filename = "sample_data.csv"
    process_csv_file(filename)

    # Generate some sample processed data
    data = [(i, f * 2) for i, f in ((1, 3), (2, 4), (3, 6))]

    write_processed_data(filename, data)
100
python
import sqlite3

def create_connection():
    """ Create a connection to the SQLite database """
    conn = None;
    try:
        conn = sqlite3.connect('test.db')
        print(f'Successfully connected to SQLite version {sqlite3.version}')
    except sqlite3.Error as e:
        print(e)

    return conn

def create_table(conn):
    """ Create a table in SQLite database """
    try:
        cursor = conn.cursor()
        cursor.execute('''CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, name TEXT);''')
        print("Table 'users' created successfully")
    except sqlite3.Error as e:
        print(e)

def insert_user(conn, user):
    """ Insert a new user into the 'users' table """
    try:
        cursor = conn.cursor()
        query = '''INSERT INTO users (name) VALUES (?);'''
        cursor.execute(query, (user,))
        conn.commit()
        print(f"Successfully inserted user {user}")
    except sqlite3.Error as e:
        print(e)

def get_users(conn):
    """ Get all users from the 'users' table """
    try:
        cursor = conn.cursor()
        query = '''SELECT * FROM users;'''
        cursor.execute(query)
        rows = cursor.fetchall()
        for row in rows:
            print(row)
    except sqlite3.Error as e:
        print(e)

def main():
    """ Create connection, table and insert users, then print all users """
    conn = create_connection()
    if not conn:
        return

    create_table(conn)

    # Validate user input
    assert type(user := input("Enter a new user name: ")) is str, "Invalid input. User name must be a string."

    insert_user(conn, user)
    get_users(conn)

    conn.close()

if __name__ == '__main__':
    main()
101
python
import re

def validate_email(email):
    """
    Validate an email address using assert statement.
    :param email: str - Email address to validate.
    """
    assert '@' in email, "Email address must contain '@' symbol."
    assert '.' in email and email.count('.)' < email.count('.'), "Invalid number of '.' in email address."
    
def validate_email_re(email):
    """
    Validate an email address using regular expression.
    :param email: str - Email address to validate.
    :return: None if valid, raises AssertionError otherwise.
    """
    pattern = r"[^@]+@[^@]+\.[^@]+$"
    match = re.match(email, pattern)
    
    if not match:
        error_message = f"'{email}' is not a valid email address."
        raise AssertionError(error_message)

if __name__ == "__main__":
    emails = [
        "test@example.com",
        "test@example.co.uk",
        "test@example",
        "test@example..com",
        "test@example@.com"
    ]

    for email in emails:
        try:
            validate_email(email)
            print(f"Email address '{email}' is valid.")
        except AssertionError as error:
            print(f"Email address '{email}' is invalid. {error}")
            
        try:
            validate_email_re(email)
            print(f"Email address '{email}' is valid using regular expression.")
        except AssertionError as error:
            print(f"Email address '{email}' is invalid using regular expression. {error}")
102
python
import requests

def test_example_website():
    # Define the URL to send the request to
    url = "https://example.com"

    # Send the GET request and get the response
    response = requests.get(url)

    # Use an assert statement to verify the status code is 200 OK
    assert response.status_code == 200, f"Expected status code 200, but got {response.status_code}"

if __name__ == "__main__":
    test_example_website()
103
python
import urllib.request
import re

def get_numbers_from_url(url):
    """
    Fetches the HTML content from given URL and extracts numbers using regex.
    :param url: str, URL to fetch the HTML content from
    :return: list, list of numbers present in the HTML content
    """

    try:
        html = urllib.request.urlopen(url).read().decode()
    except Exception as e:
        print(f"Error while fetching URL: {e}")
        return []

    pattern = re.compile(r'\d+')
    numbers = pattern.findall(html)

    assert len(numbers) > 0, "No numbers found in the HTML content"

    return numbers

if __name__ == "__main__":
    url = "https://example.com/numbers_page"
    numbers = get_numbers_from_url(url)
    print("Numbers from URL:", numbers)
104
python
import pickle

def validate_input(input_data):
    assert isinstance(input_data, dict), "Input must be a dictionary"
    assert all(isinstance(value, (int, float)) or isinstance(value, str) for key, value in input_data.items()), \
        "Values in the dictionary must be either int, float or str"

data = {
    'name': 'John Doe',
    'age': 30,
    'city': 'New York'
}

validate_input(data)

# Serialize data using pickle
output_file = open('data.pickle', 'wb')
pickle.dump(data, output_file)
output_file.close()

print("Data serialized successfully")

# Deserialize data from pickle
input_file = open('data.pickle', 'rb')
deserialized_data = pickle.load(input_file)
input_file.close()

validate_input(deserialized_data)
print("Data deserialized successfully")

print("Deserialized data: ", deserialized_data)
105
python
import subprocess

def get_python_version():
    result = subprocess.run(["python", "--version"], capture_output=True, text=True)
    return result.stdout.split(" ")[2].split(".")[0:2]  # Extract major and minor version

# Check Python version
python_version = get_python_version()
minor_version = int(python_version[1]) if len(python_version) > 1 else 0
assert minor_version >= 8, "Python version should be 3.8 or above."

# Arithmetic operation assertion
def add(x, y):
    return x + y

assert add(1, 2) == 3, "The function 'add' is not working correctly."
106
python
import argparse

def main():
    parser = argparse.ArgumentParser(description="Perform simple arithmetic operations.")
    parser.add_argument("operation", choices=["add", "subtract"], help="Choose an operation: add or subtract")
    parser.add_argument("num1", type=float, help="Enter the first number")
    parser.add_argument("num2", type=float, help="Enter the second number")
    args = parser.parse_args()

    if args.operation == "add":
        result = args.num1 + args.num2
    elif args.operation == "subtract":
        assert args.num2 is not None, "Error: The second number cannot be zero."
        result = args.num1 - args.num2

    print(f"The result of the operation is: {result}")

if __name__ == "__main__":
    main()
107
python
import logging

# Configure logging
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')

def calculate_sum(num1, num2):
    """
    This function calculates the sum of two numbers.
    :param num1: First number
    :param num2: Second number
    :return: The sum of num1 and num2
    :raises: TypeError if num1 or num2 is not a number
    """
    try:
        if not isinstance(num1, (int, float)) or not isinstance(num2, (int, float)):
            raise TypeError("Both num1 and num2 must be numbers")
         return num1 + num2
    except Exception as e:
        logging.exception(e)
        assert str(type(e)).startswith("TypeError"), f"Unexpected error occurred: {str(e)}"

if __name__ == "__main__":
    try:
        result = calculate_sum("3", 5)
    except AssertionError as e:
        logging.error(f"Assertion Error: {str(e)}")
    else:
        logging.info(f"Sum of 3 and 5 is: {result}")
108
python
from flask import Flask, jsonify, request

app = Flask(__name__)

@app.route('/validate_number')
def validate_number():
    try:
        number_str = request.args.get('number')
        number = int(number_str)
    except ValueError as e:
        return jsonify({'error': str(e)}), 400

    assert number >= 1 and number <= 10, "Number should be between 1 and 10"

    return jsonify({'message': 'Valid number'})

if __name__ == '__main__':
    app.run(debug=True)
109
python
from django.http import HttpResponse

def index(request):
    return HttpResponse("Hello World!")
110
python
import numpy as np

# Function to validate input data shape and type
def validate_input(data):
    if not isinstance(data, np.ndarray):
        raise TypeError("Input should be a NumPy array")
    if data.shape[1] != 2:
        raise ValueError("Input array should have shape (samples, 2)")

# Function to perform matrix operations using NumPy
def scale_data(data):
    assert validate_input(data), "Invalid input data"
    min_value = np.min(data, axis=0)
    max_value = np.max(data, axis=0)
    scaled_data = (data - min_value) / (max_value - min_value)
    return scaled_data

# Example usage:
input_data = np.array([[1, 3], [2, 4], [5, 6]])
scaled_data = scale_data(input_data)

print("Input Data:")
print(input_data)
print("\nScaled Data:")
print(scaled_data)
111
python
import pandas as pd

# Create a simple DataFrame
data = {'Name': ['John', 'Anna', 'Peter'],
       'Age': [28, 24, 35],
       'City': ['New York', 'Los Angeles', 'Chicago']}
df = pd.DataFrame(data)

# Perform some data manipulation using pandas
df['Gender'] = ['M' for _ in df.index]
df = df.rename(columns={'Age': 'Ages'})

# Function to validate DataFrame
def validate_dataframe(dataframe):
    assert len(dataframe) > 0, "DataFrame is empty"
    assert all(dataframe['Name'].notnull()), "Missing names in DataFrame"
    assert all(dataframe['Ages'].apply(lambda x: type(x) == int)), "Age column should be of integer type"

# Validate the DataFrame
validate_dataframe(df)

# Demonstrating an assertion failure
# df.loc[0, 'Name'] = None  # Uncomment this line to trigger an assertion error

print(df)
112
python
import numpy as np
import matplotlib.pyplot as plt

def calculate_mean(data):
    """Calculate the mean of given data."""
    assert isinstance(data, np.ndarray), "Input should be a NumPy array."
    return np.mean(data)

# Generate some random data for demonstration
data = np.random.rand(5)

# Calculate mean and check if it's within expected range (0-1 in this case) using assert statement
mean = calculate_mean(data)
assert 0 <= mean <= 1, f"Mean of data should be between 0 and 1. Got: {mean}"

# Visualize the data using matplotlib
plt.hist(data, bins=np.linspace(0, 1, 20), density=True)
plt.xlabel('Value')
plt.ylabel('Density')
plt.title('Data Distribution')
plt.show()
113
python
import numpy as np
import seaborn as sns
import assertpy as assertp

# Create a simple dataset using NumPy
data = np.random.rand(10, 2)
labels = np.random.randint(low=0, high=3, size=10)

# Test the shape of data using Assert
def test_shape():
    assertp.assert_that(data.shape).is_equal_to((10, 2))

test_shape()

# Visualize the data using Seaborn
sns.scatterplot(x=data[:, 0], y=data[:, 1], hue=labels)
sns.despine(offset=30, trunc=True)
114
python
import tensorflow as tf

def add_numbers(x, y):
    """Adds two given numbers."""
    result = x + y
    assert isinstance(x, (int, float)) and isinstance(y, (int, float)), "Both numbers must be either int or float."
    assert result is not None, f"Error: The sum of {x} and {y} is not defined."
    return result

def add_two_numbers_using_tensorflow(x, y):
    """Adds two given numbers using TensorFlow."""
    x_tensor = tf.constant(x)
    y_tensor = tf.constant(y)
    sum = tf.add(x_tensor, y_tensor)
    result = sum.numpy()
    assert not tf.is_nan(sum), "Error: The sum of {x} and {y} contains NaN values."
    return result

if __name__ == "__main__":
    num1 = 5.0
    num2 = 3.0

    print("Adding numbers using Python's built-in assert statement:")
    result_python = add_numbers(num1, num2)
    assert result_python == num1 + num2, "Error: add_numbers function is not working as expected."

    print("\nAdding numbers using TensorFlow's assert statement:")
    result_tensorflow = add_two_numbers_using_tensorflow(num1, num2)
    tf.assert_equal(result_tensorflow, num1 + num2)
115
python
import numpy as np
from keras.models import Sequential
from keras.layers import Dense

# Let's assume we have some input data with certain conditions
input_data = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]])
expected_shape = (len(input_data), 3)

assert input_data.shape == expected_shape, "Input data has incorrect shape. Expected: {}".format(expected_shape)

# Preprocess the data by scaling it to a range of 0-1
input_scaled = input_data / 255.0

# Define the model architecture
model = Sequential()
model.add(Dense(10, activation='relu', input_shape=(3,)))
model.add(Dense(5, activation='softmax'))

# Compile the model
model.compile(loss='categorical_crossent', optimizer='adam', metrics=['accuracy'])

# This part is just for demonstration purposes, as we don't have any labels for our data
x_test = np.array([[2.5, 3.0, 3.5], [6.5, 7.0, 7.5]])
y_test = np.array([[0.2, 0.8], [0.8, 0.2]])
model.fit(x_test, y_test, epochs=10)
116
python
import numpy as np
import scipy.stats as stats
from sklearn.linear_model import LinearRegression
117
python
import requests
from bs4 import BeautifulSoup

# Fetch the HTML content from a given URL
def get_html(url):
    response = requests.get(url)
    if response.status_code != 200:
        raise RuntimeError("Failed : " + url)
    return response.text

# Parse the HTML content using BeautifulSoup
def parse_html(html):
    soup = BeautifulSoup(html, 'html.parser')
    return soup

# Assertion function to check if a specific tag exists in the parsed HTML
def assert_tag_exists(soup, tag_name):
    tags = soup.find_all(True, tag=tag_name)
    assert len(tags) > 0, f"Tag '{tag_name}' not found in the HTML!"

# Main function to test our functions
def main():
    url = "https://example.com"
    html = get_html(url)
    soup = parse_html(html)

    assert_tag_exists(soup, 'html')
    assert_tag_exists(soup, 'head')
    assert_tag_exists(soup, 'title')
    assert_tag_exists(soup, 'body')

if __name__ == "__main__":
    main()
118
python
from selenium import webdriver
import time

def test_google_search():
    driver = webdriver.Firefox() # or Chrome()
    
    driver.get("https://www.google.com")
    assert "Google" in driver.title, "Google page title is not as expected."

    search_input = driver.find_element_by_name('q')
    search_input.send_keys("selenium python")
    search_input.submit()

    time.sleep(5) # Wait for the page to load completely

    assert "No results found." not in driver.page_source, "Search results are not displayed."

    first_result = driver.find_element_by_xpath("//div[@id='rso']/div[1]/div/h3/a")
    assert first_result.text != "", "First search result is empty."

    driver.quit()

if __name__ == "__main__":
    test_google_search()
119
python
import torch

def add_tensors(tensor1: torch.Tensor, tensor2: torch.Tensor):
    # Assert the shapes of input tensors are compatible for addition (broadcasting)
    assert tensor1.shape == tensor2.shape or \
           (len(torch.size(tensor1)) == len(torch.size(tensor2)) - 1 and
            torch.size(tensor1)[-1] is None), "Shapes are not compatible for addition"
    
    # Add tensors element-wise
    result = tensor1 + tensor2

    return result

# Create some input tensors
input_tensor1 = torch.randn((3, 4))
input_tensor2 = torch.randn((3, 4, 5))
input_tensor3 = torch.randn((3, 4))

try:
    # Add tensors with incompatible shapes
    result = add_tensors(input_tensor1, input_tensor2)
except AssertionError as e:
    print(f"Error message: {str(e)}")
else:
    print("Successfully added compatible tensors.")
    
# Add tensors with compatible shapes
output = add_tensors(input_tensor3, input_tensor3)
print(output.shape)
120
python
from sqlalchemy import create_engine, Column, Integer, String, Float, Table, MetaData
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
import assertpy as assertp

# Set up database connection
engine = create_engine('sqlite:///testdb.db', echo=True)
Base = declarative_base()
Session = sessionmaker(bind=engine)

class User(Base):
    __tablename__ = 'users'

    id = Column(Integer, primary_key=True)
    name = Column(String)

# Create User table if not exists
Base.metadata.create_all(engine)

def insert_user(session, user):
    session.add(User(name=user['name']))
    session.commit()

def get_users(session):
    return session.query(User.id, User.name).all()

# Set up test data and validation using assertpy
test_data = [
    {'name': 'John Doe'},
    {'name': ''},
    {'name': None}
]

def test_insert_user():
    session = Session()

    for user in test_data:
        insert_user(session, user)
        assertp.is_instance(session.query(User.id).filter_by(name=user['name']).first(), User)
        assertp.that(session.query(User.name).filter_by(name=user['name']).first().name).is_equal_to(user['name'])
        session.close()

test_insert_user()
121
python
# File: test_addition.py
def test_add():
    # Test case for addition of two positive numbers
    assert add(2) + add(3) == add(5), "Addition of two positive numbers is not correct"
    
    # Test case for addition of a negative and positive number
    assert add(-1) + add(2) == add(0), "Addition of a negative number and positive number is not correct"

def test_add_zero():
    # Test case for addition of a number with zero
    assert add(3) + 0 == add(3), "Addition of a number with zero is not correct"
    
def test_add_large_numbers():
    # Test case for addition of large numbers
    assert add(12345) + add(67890) == add(80235), "Addition of large numbers is not correct"
122
python
import unittest

# Function to be tested
def add(x, y):
    return x + y

class TestAddFunction(unittest.TestCase):

    def test_add_two_positive_numbers(self):
        """Test adding two positive numbers."""
        self.assertIsEqual(add(2, 3), 5)

    def test_add_two_negative_numbers(self):
        """Test adding two negative numbers."""
        self.assertIsEqual(add(-2, -3), -5)

    def test_add_positive_and_zero(self):
        """Test adding a positive number and zero."""
        self.assertIsEqual(add(4, 0), 4)

    def test_add_zero_and_positive(self):
        """Test adding zero and a positive number."""
        self.assertIsEqual(add(0, 4), 4)

    def test_add_two_large_numbers(self):
        """Test adding two large numbers."""
        self.assertIsEqual(add(100, 200), 300)

if __name__ == '__main__':
    unittest.main()
123
python
# calculator.py
def add(x, y):
    """Function to add two numbers"""
    return x + y
124
python
import asyncio

# Function to validate input number is greater than zero
def assert_positive(number):
    assert number > 0, "Error: Number should be positive."

# Async function that prints a message with delay using asyncio.sleep
async def print_message(message):
    print(f"[{asyncio.current()}] {message}")
    await asyncio.sleep(1)

# Async function that performs some heavy computation with delay
async def task(number):
    assert_positive(number)  # Validate input number here
    await asyncio.sleep(number / 2)  # Simulate heavy computation
    print(f"Task {number} completed.")

# Main function that starts the event loop and runs tasks concurrently
async def main():
    tasks = [asyncio.create_task(task(i)) for i in range(1, 4)]
    await asyncio.gather(*tasks)

if __name__ == "__main__":
    asyncio.run(main())
125
python
import multiprocessing as mp

def add(x, y):
    """Simple function that adds two numbers."""
    result = x + y
    assert type(result) is int or type(result) is float, "The result of adding {} and {} should be either an integer or a float.".format(x, y)
    return result

def worker_function(args):
    """Function that will be run in multiple processes."""
    x, y = args
    print("Process ID: {}. Adding {} and {}".format(mp.current_process().name, x, y))
    result = add(x, y)
    print("Process ID: {} Result: {}".format(mp.current_process().name, result))

if __name__ == "__main__":
    # Inputs to be processed by multiple processes
    inputs = [(1, 2), (3.5, 4), (7, 8)]

    with mp.Pool(mp.cpu_count()) as pool:
        results = pool.map(worker_function, inputs)
126
python
import threading

# Function to be executed in a separate thread
def long_running_operation(input):
    # Simulating a long running operation
    result = some_complex_calculation(input)
    return result

def some_complex_calculation(input):
    if not (isinstance(input, int) or isinstance(input, float)):
        raise TypeError("Input must be either integer or float")
    # Perform complex calculations here
    return input * 2

def main():
    input = 5
    # Validating the input and performing operation in the same thread
    result_sync = some_complex_calculation(input)
    assert isinstance(result_sync, (int, float))
    print("Result of synchronous operation: ", result_sync)

    # Creating a new thread for long running operation
    input_thread = 7.5
    thread = threading.Thread(target=long_running_operation, args=(input_thread,))
    thread.start()

    # Waiting for the thread to complete execution
    thread.join()

    result_async = thread.result()
    assert isinstance(result_async, (int, float))
    print("Result of asynchronous operation: ", result_async)

if __name__ == "__main__":
    main()
127
python
import socket

def handle_client(client_socket):
    message = client_socket.recv(1024).decode()
    assert message == b"Hello from client", "Unexpected message from client"
    response = "Hello Server!"
    client_socket.sendall(response.encode())
    client_socket.close()

if __name__ == "__main__":
    host = "127.0.0.1"
    port = 5000

    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.bind((host, port))
    print(f"Server listening on {host}:{port}")
    server_socket.listen()

    while True:
        client_socket, _ = server_socket.accept()
        handle_client(client_socket)
128
python
import tkinter as tk

class Calculator:
    def __init__(self, master):
        self.master = master
        self.entry_number1 = tk.Entry(self.master, width=10)
        self.entry_number1.grid(row=0, column=0)

        self.entry_number2 = tk.Entry(self.master, width=10)
        self.entry_number2.grid(row=0, column=2)

        self.button_add = tk.Button(self.master, text="+", command=lambda: self.add())
        self.button_add.grid(row=1, column=0)

        self.result_label = tk.Label(self.master, text="Result")
        self.result_label.grid(row=1, column=1)

        self.result = tk.Label(self.master, text="", font=("Arial", 20))
        self.result.grid(row=1, column=3)

        self.master.title("Calculator")
        self.master.geometry("400x250+300+200")

    def add(self):
        try:
            number1 = float(self.entry_number1.get())
            number2 = float(self.entry_number2.get())
        except ValueError:
            self.show_error("Error: Please enter valid numbers.")
            return

        assert number1 and number2, "Error: Both numbers must be provided."

        result = number1 + number2
        self.update_result(result)

    def update_result(self, result):
        self.result.config(text=result)

    def show_error(self, error):
        tk.messagebox.showerror("Error", error)

root = tk.Tk()
calculator = Calculator(root)
root.mainloop()
129
python
import pygame
import sys

# Initialize Pygame
pygame.init()

# Set up some constants
WIDTH, HEIGHT = 640, 480
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)

def main():
    # Create the game window
    screen = pygame.display.set_mode((WIDTH, HEIGHT))

    # Game loop flag
    running = True

    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False

        screen.fill(WHITE)

        # Draw a red rectangle every frame (for demonstration purposes)
        rect = pygame.Rect(50, 50, 100, 100)
        pygame.draw.rect(screen, (255, 0, 0), rect)

        # Flip the display
        pygame.display.flip()

    # Quit Pygame and clean up
    pygame.quit()
    sys.exit()

if __name__ == "__main__":
    main()

# Assert statements for debugging
def check_event(event):
    assert event.type in [pygame.QUIT], "Unexpected event type: {}".format(event.type)

# Example usage of the check_event function
for event in pygame.event.get():
    check_event(event)
130
python
import sys
from PyQt5.QtWidgets import QApplication, QLabel, QLineEdit, QPushButton, QVBoxLayout, QWidget

class MyApp(QWidget):
    def __init__(self):
        super().__init__()

        self.initUI()

    def initUI(self):
        label = QLabel("Enter a number between 1 and 10:")
        line_edit = QLineEdit(self)
        button = QPushButton("Submit", self)

        layout = QVBoxLayout()
        layout.addWidget(label)
        layout.addWidget(line_edit)
        layout.addWidget(button)

        self.setLayout(layout)
        self.setWindowTitle('PyQt5 Assert Example')
        self.show()

        button.clicked.connect(self.on_button_clicked)

    def on_button_clicked(self):
        try:
            number = int(self.findChild(QLineEdit, "lineEdit").text())
            assert 1 <= number <= 10, "Number must be between 1 and 10."
            label = self.findChild(QLabel, "label")
            label.setText("You entered: {}".format(number))
        except AssertionError as e:
            QMessageBox.critical(self, 'Input error', e)
        except ValueError:
            QMessageBox.information(self, 'Error', 'Please enter a valid number.')

if __name__ == "__main__":
    app = QApplication(sys.argv)
    ex = MyApp()
    sys.exit(app.exec_())
131
python
import wx

class CalculatorApp(wx.App):
    def OnInit(self):
        self.frame = CalculatorFrame(parent=None, title="Calculator")
        self.SetTopWindow(self.frame)
        self.frame.Show()
        return True

class CalculatorFrame(wx.Frame):
    def __init__(self, parent, title):
        super().__init__(parent=parent, title=title, size=(300, 250))

        self.CreateMenuBar()
        self.CreateStatusBar()

        self.Bind(wx.EVT_MENU, self.OnQuit, id=wx.NewId())

        self.expression = ""
        self.result = 0

        self.panel = wx.Panel(self, -1)
        self.display = wx.StaticText(self.panel, -1, "0")
        self.display.SetFont(wx.Font(16, wx.FONTFAMILY_SWISS, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD))
        self.display.SetBackgroundColour("#EEEEEE")
        self.panel.Bind(wx.EVT_SIZE, self.OnSize)
        self.sizer = wx.BoxSizer(wx.VERTICAL)
        self.sizer.Add(self.display, 1, wx.EXPAND)

        self.SetSizer(self.sizer)

        self.keypad = [
            ["7", "8", "9"],
            ["4", "5", "6"],
            ["1", "2", "3"],
            ["0", ".", "="],
            ["/", "*", "-", "+"]
        ]

        for i in range(len(self.keypad)):
            row = self.keypad[i]
            row_frame = wx.BoxSizer(wx.HORIZONTAL)
            for j in range(len(row)):
                btn = SelfDefinedButton(self, text=row[j], id=int(ord(row[j]) - 48 if row[j].isdigit() else ord(row[j])) + 10)
                btn.Bind(wx.EVT_BUTTON, self.OnClickedNumber)
                row_frame.Add(btn, 1, wx.EXPAND)
            self.sizer.Add(row_frame, 1, wx.EXPAND)

        self.SetSizer(self.sizer)
        self.Centre()

    def CreateMenuBar(self):
        file_menu = wx.Menu()
        quit_item = file_menu.Append(wx.NewId(), "Quit", "Quit")
        self.Bind(wx.EVT_MENU, self.OnQuit, id=quit_item)

        menu_bar = wx.MenuBar()
        menu_bar.Append(file_menu, "File")
        self.SetMenuBar(menu_bar)

    def CreateStatusBar(self):
        self.status_bar = self.CreateStatusBar(2, wx.ST_SIZEGRIP | wx.ST_NO_AUTOTICK)
        self.status_bar.SetStatusText("Ready")

    def OnQuit(self, event):
        self.Close()

    def OnClickedNumber(self, event):
        button = event.GetEventObject()
        text = button.GetLabel()
        self.expression += text
        self.display.SetLabelText(self.expression)

    def OnSize(self, event):
        width, height = event.GetSize().x, event.GetSize().y
        self.sizer.Layout()

    def OnEvaluateExpression(self):
        try:
            result = eval(self.expression)
            self.result = result
            self.display.SetLabelText(str(result))
            self.status_bar.SetStatusText("Result: " + str(result), 1)
        except ZeroDivisionError as e:
            self.status_bar.SetStatusText("Error: Division by zero", 1)
        except Exception as e:
            self.status_bar.SetStatusText("Error: Unknown error", 1)
        finally:
            self.expression = ""

    def OnClear(self, event):
        self.result = 0
        self.expression = ""
        self.display.SetLabelText("0")

    def OnCalculate(self, event):
        self.OnEvaluateExpression()
        operation = ""
        for char in reversed(list(self.expression)):
            if char == '+' or char == '-' or char == '*' or char == '/':
                if operation != "":
                    self.result = self.__perform_operation(self.result, operation, float(self.expression[-1]))
                    operation = ""
                operation = char
        self.OnEvaluateExpression()

    def __perform_operation(self, a, op, b):
        if op == '+':
            return a + b
        elif op == '-':
            return a - b
        elif op == '*':
            return a * b
        elif op == '/':
            return a / b

class SelfDefinedButton(wx.Button):
    def __init__(self, parent, text="", id=-1):
        super().__init__(parent=parent, label=text, id=id)

app = CalculatorApp()
app.MainLoop()
132
python
def is_perfect_square(number):
    """
    This function checks if a given number is a perfect square.
    :param number: An integer number to check
    :return: True if the number is a perfect square, False otherwise
    """

    # Algorithm to check if a number is a perfect square
    # 1. Take the square root of the number using math.isqrt() function
    # 2. Multiply the square root by itself and check if it equals the original number
    square_root = int(math.isqrt(number))
    return number == (square_root * square_root)

if __name__ == "__main__":
    # Testing the is_perfect_square function with some test cases
    assert is_perfect_square(16), "16 is not a perfect square, but it should be"
    assert is_perfect_square(25), "25 is not a perfect square, but it should be"
    assert not is_perfect_square(13), "13 is a perfect square, but it isn't"
    assert not is_perfect_square(-4), "-4 is a perfect square, but it isn't"
    
    # Testing with some random numbers
    for num in [27, 9, 625, -1]:
        print(f'{num} is a perfect square: {is_perfect_square(num)}')
133
python
def process_purchase(store_inventory, item, quantity):
    """
    This function simulates purchasing an item from the given store inventory.
    :param store_inventory: A dictionary representing a store's inventory
    :param item: The name of the desired item
    :param quantity: The amount of the item to be purchased
    :return: The total cost of the purchase
    """
    # Assert checks for valid input
    assert isinstance(store_inventory, dict), "Invalid inventory data"
    assert isinstance(item, str) and item in store_inventory, f"Item '{item}' not found in the store"
    assert isinstance(quantity, int) > 0, "Invalid quantity"

    # Process purchase based on the validated input
    price = store_inventory[item]
    total_cost = price * quantity

    print(f"\nProcessing purchase for {quantity} items of '{item}'...")
    print(f"Total cost: ${total_cost}")

# Sample store inventory
store_inventory = {
    "Apple": 0.5,
    "Banana": 0.3,
    "Orange": 0.6
}

# Processing a valid purchase (purchasing 2 bananas)
process_purchase(store_inventory, "Banana", 2)

# Processing an invalid purchase (purchasing a non-existent item)
try:
    process_purchase(store_inventory, "Cherry", 5)
except AssertionError as e:
    print(e)
134
python
class ComplexNumber:
    def __init__(self, real=0.0, imaginary=0.0):
        self.real = real
        self.imaginary = imaginary

    def __str__(self):
        return f"{self.real} + {self.imaginary}j"

    def add(self, other):
        result_real = self.real + other.real
        result_imaginary = self.imaginary + other.imaginary

        # Using assert statement to check if the inputs are also ComplexNumber instances
        assert isinstance(other, ComplexNumber), "Error: Other input should be a ComplexNumber instance."

        return ComplexNumber(result_real, result_imaginary)

# Creating ComplexNumber instances
num1 = ComplexNumber(3.0, 2.0)
num2 = ComplexNumber(1.0)

# Performing addition operation with assert statement check
sum = num1.add(num2)
print("Sum:", sum)
135
python
class Animal:
    def __init__(self, name, sound):
        self.name = name
        self.sound = sound

    @staticmethod
    def assert_is_animal(obj):
        if not isinstance(obj, (Animal)):
            msg = f"{type(obj).__name__} is not an Animal instance."
            raise TypeError(msg)

    def make_sound(self):
        self.assert_is_animal(self)
        assert self.sound, "An animal must have a sound."
        print(f"{self.name} says '{self.sound}'")

class Dog(Animal):
    def __init__(self, name):
        super().__init__(name, "Woof!")

if __name__ == "__main__":
    my_dog = Dog("Fido")
    my_dog.make_sound()
136
python
# Base class with invariant condition
class Shape:
    def __init__(self, data):
        assert isinstance(data, (list, tuple)) and all(isinstance(i, (int, float)) for i in data), "Data must be a list or tuple of numbers"
        self.data = data

    # Polymorphic method
    def area(self):
        raise NotImplementedError("area method must be implemented in derived classes")

# Derived classes
class Circle(Shape):
    def __init__(self, radius):
        super().__init__([radius])

    def area(self):
        return math.pi * self.data[0] ** 2

class Rectangle(Shape):
    def __init__(self, width, height):
        super().__init__([width, height])

    def area(self):
        return self.data[0] * self.data[1]

if __name__ == "__main__":
    shapes = [Circle(5), Circle(3), Rectangle(4, 6)]

    for shape in shapes:
        print(f"Area of shape: {shape.area()}")
137
python
class Rectangle:
    def __init__(self, width, height):
        # Encapsulation: width and height are private attributes
        self._width = width
        self._height = height

    def get_area(self):
        assert self._width > 0, "Invalid width: width should be positive"
        assert self._height > 0, "Invalid height: height should be positive"
        return self._width * self._height

if __name__ == "__main__":
    width = int(input("Enter the width: "))
    height = int(input("Enter the height: "))
    
    # Create a Rectangle instance with provided dimensions
    my_rectangle = Rectangle(width, height)

    # Get and print the area of the rectangle
    print(f"The area of the rectangle is: {my_rectangle.get_area()}")
138
python
class Calculator:
    def __init__(self):
        pass

    # Abstraction: Hide the implementation details of addition
    def add(self, num1, num2):
        assert isinstance(num1, (int, float)) and isinstance(num2, (int, float)), "Both inputs must be numbers"
        self._add_internal(num1, num2)

    def subtract(self, num1, num2):
        assert isinstance(num1, (int, float)) and isinstance(num2, (int, float)), "Both inputs must be numbers"
        self._subtract_internal(num1, num2)

    # Encapsulation: Hide the implementation details of addition and subtraction
    def _add_internal(self, num1, num2):
        result = num1 + num2
        print(f"Adding {num1} and {num2}: Result is {result}")

    def _subtract_internal(self, num1, num2):
        result = num1 - num2
        print(f"Subtracting {num1} from {num2}: Result is {result}")

# Usage
calculator = Calculator()
calculator.add(3, 5)
calculator.subtract(10, 7)
139
python
def factorial(n):
    # Assertion to validate input
    assert n >= 0, "Input must be non-negative integer"
    
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)

try:
    number = int(input("Enter a non-negative integer: "))
    result = factorial(number)
    print(f"The factorial of {number} is {result}")
except AssertionError as e:
    print(e)
except Exception as e:
    print("An error occurred:", e)
140
python
# Define a simple list
my_list = [1, 2, 3, 4, 5]

# Iterate through the list and use assert statements to check each element
for i in my_list:
    # Expected value for each element (in this case, the index + 1)
    expected = i + 1
    
    # Use an assert statement to check if the actual value equals the expected value
    assert i == expected, f"Element at position {my_list.index(i)} is not equal to the expected value: {expected}"

# If we reach this point in the code, all assertions have passed
print("All assertions have passed!")
141
python
def calculate_sum(num1, num2):
    """This function calculates the sum of two numbers"""

    # Assert statement to check if both inputs are numbers
    assert isinstance(num1, (int, float)) and isinstance(num2, (int, float)), "Both inputs must be numbers"

    # Calculate the sum
    result = num1 + num2

    return result

# Testing the function with valid inputs
print("The sum of 3 and 5 is: ", calculate_sum(3, 5))

# Testing the function with invalid inputs
try:
    print("The sum of '3' and '5' is: ", calculate_sum('3', '5'))
except AssertionError as e:
    print("Error:", e)
142
python
# Define a simple Calculator class
class Calculator:
    def __init__(self, num1, num2):
        self.num1 = num1
        self.num2 = num2

    # Add two numbers
    def add(self):
        result = self.num1 + self.num2
        assert type(result) is int or type(result) is float, "Invalid result type: expected int or float"
        return result

    # Subtract second number from first number
    def subtract(self):
        result = self.num1 - self.num2
        assert self.num2 >= 0, "Cannot subtract a negative number"
        return result

# Create an instance of Calculator class and test methods
calc = Calculator(5, 3)
print("Addition:", calc.add()) # Addition: 8
print("Subtraction:", calc.subtract()) # Subtraction: 2

calc = Calculator(5, -3) # Test case with negative number
# Uncomment the line below to see assert error message
# print("Calculation:", calc.add())

# Test adding a float number
calc_float = Calculator(3.1, 2.0)
print("Addition of floats:", calc_float.add()) # Addition of floats: 5.1
143
python
# Define a function that calculates the square root of a number
def compute_square_root(number):
    # Assuming the input is a non-negative number
    result = number ** 0.5
    return result

# Define a variable with a value
input_number = 25

# Use assert statement to ensure the input is non-negative
assert input_number >= 0, "Input must be non-negative"

# Calculate the square root using the compute_square_root function
result = compute_square_root(input_number)

# Use print statement to display the result
print("The square root of", input_number, "is:", result)
144
python
# Defining a constant (unchangeable variable)
PI = 3.14159265358979323846

def square_area(side_length):
    """
    Calculate the area of a square given its side length
    :param side_length: A real number representing the side length
    :return: A real number representing the square's area
    """
    assert type(side_length) is float or type(side_length) is int, "Side length must be of type float or int."
    return PI * side_length ** 2

# Testing the function with valid input
print("Area of square with side length 5: ", square_area(5))

# Testing the function with invalid input
try:
    square_area('3')
except AssertionError as error:
    print("Error:", error)
145
python
def add(x, y):
    """This function adds two numbers"""
    return x + y

def test_add():
    """Function to test the addition functionality"""
    assert type(1) is int, "First argument must be an integer"
    assert type(2) is int, "Second argument must be an integer"
     result = add(1, 2)
     assert result is not None, "Addition should not return None"
     assert result == 3, "Addition of two integers should be equal to their sum"
     print("Test passed!")

if __name__ == "__main__":
    try:
        test_add()
    except AssertionError as e:
        print(f"Error: {e}")
else:
    test_add()
146
python
class MyCustomException(Exception):
    def __init__(self, arg1, arg2):
        super().__init__(f"Error message: arg1={arg1} arg2={arg2}")

def my_function(input):
    assert input is not None, "Input must be defined. Received None."
    assert type(input) == int, "Input must be an integer. Received type: {}".format(type(input).__name__)

    # Your function logic here

if __name__ == "__main__":
    try:
        input = None
        my_function(input)
    except AssertionError as e:
        print("Assertion error: ", e)
    except MyCustomException as e:
        print("Custom exception: ", e)

try:
    input = 5
    my_function("not an integer")
except AssertionError as e:
    print("Assertion error: ", e)
except MyCustomException as e:
    pass
147
python
def calculate_sum(num1: int, num2: int) -> int:
    """
    This function takes two numbers as arguments, calculates their sum,
    asserts that the result is within a certain range, and returns the sum.

    :param num1: The first number.
    :type num1: int
    :param num2: The second number.
    :type num2: int
    :return: The sum of num1 and num2.
    """

    # Calculate the sum
    result = num1 + num2

    # Assert that the sum is within a certain range (0 to 50)
    assert result >= 0 and result <= 50, "The sum must be between 0 and 50."

    # Return the sum
    return result
148
python
# Function to calculate the square root of a number using Newton-Raphson method
def sqrt(number):
    def newton_raphson(x, target):
        return x - ((x * x - number) / (2 * x))

    guess = number / 2.0
    while abs(guess**2 - number) > 1e-6:
        guess = newton_raphson(guess, number)

    return guess

# Function to test the square root calculation
def test_sqrt():
    try:
        result = sqrt(2)
        assert result ** 2 == 2, f"Error! The square root of 2 is not {result}"
    except AssertionError as err:
        print(err)
    finally:
        print("Square root test passed!")

# Function to check if a number is even or odd
def check_even_odd(number):
    if number % 2 == 0:
        return "Even"
    else:
        return "Odd"

# Test the square root function and check if 5 is odd
test_sqrt()
print(f"5 is {check_even_odd(5)}")
149
python
def sum_list(numbers):
    """
    This function takes a list of numbers as an argument and returns the sum of all its elements
    :param numbers: List of numbers
    :return: The sum of all elements in the given list
    """
    total = 0
    for num in numbers:
        total += num
    return total

if __name__ == "__main__":
    test_cases = [
        [1, 2, 3, 4],
        [5, 6, 7, 8],
        [0],
        [10]
    ]

    for numbers in test_cases:
        result = sum_list(numbers)
        assert sum(numbers) == result, f"Test case failed. Expected: {sum(numbers)}, Actual: {result}"
        print(f"Test case passed: [{' '.join(map(str, numbers))}]")
150
python
# Function to calculate the square of a number
def calculate_square(number):
    assert number >= 0, "Error: Number should be non-negative"
    return number * number

# Function to determine if a number is even or odd
def is_even(number):
    if number % 2 == 0:
        return True
    else:
        return False

# Testing the calculate_square function
try:
    result = calculate_square(-3)
except AssertionError as error:
    print(error)
else:
    print("Calculated square is:", result)

# Testing some numbers and checking if they are even or odd
numbers = [2, 5, 10, -3]
for number in numbers:
    square = calculate_square(number)
    if is_even(number):
        print(f"{number} is even. Its square is {square}")
    else:
        print(f"{number} is odd. Its square is {square}")
151
python
# Function to calculate the square root of a number using Newtons method
def sqrt(number):
    guess = number / 2.0
    while abs(guess * guess - number) > 0.01:
        guess = (guess + number / guess) / 2.0
    return guess

# Function under test which calculates the square of a number
def square(number):
    assert number >= 0, "Number must be non-negative"
    return number * number

# Testing the square function
num = 5
result = square(num)
assert result == num*num, f"Expected {num*num}, got {result}"
print("Square of {num} is correct")

# Calculate and check the square root of a number
num = 16
result = sqrt(num)
expression = result * result - num
assert expression < 0.01, f"Expected square root of {num} to be close to {result}, but got expression: {expression}"
print(f"Square root of {num} is close to {result}")
152
python
# Single-line comment: This is a simple Python program that demonstrates the use of 'assert' statement

# Define a function with an expected error
def divide(dividend, divisor):
    if divisor == 0:
        print("Error: Division by zero")
        return None
    result = dividend / divisor
    assert result is not None, f"Assertion Error: Division resulted in None"
    return result

# Test the function with valid and invalid input
try:
    divide(10, 2)  # Valid input
except AssertionError as e:
    print(e)

try:
    divide(10, 0)  # Invalid input, expected error
except AssertionError as e:
    print(e)

# Test the function without proper checks
try:
    divide("apple", "orange")  # Invalid input, unexpected error
except ZeroDivisionError as e:
    print("Unexpected Error:", e)
except AssertionError as e:
    print(e)
153
python
# A simple function to calculate the square root of a number
def sqrt(number):
    # Assertion check to ensure that the input is a positive number
    assert number >= 0, "Error: The input number should be non-negative"
    
    # Calculate the square root using the built-in math library function
    result = number ** 0.5
    
    return result

# Function to test the sqrt function
def test_sqrt():
    # Testing with valid inputs
    print("Square root of 16 is:", sqrt(16))
    print("Square root of 25 is:", sqrt(25))

    # Testing with an invalid input
    try:
        print("Square root of -1 is:", sqrt(-1))
    except AssertionError as error:
        print(error)

# Call the test function
test_sqrt()
154
python
# calculator.py
def add(x, y):
    return x + y

def subtract(x, y):
    return x - y

def multiply(x, y):
    return x * y

def divide(x, y):
    if y == 0:
        raise ValueError("Cannot divide by zero")
    return x / y
155
python
# my_package/__init__.py
from .my_module import MyClass
156
python
import math

def check_number(n, min_value, max_value):
    """
    This function checks if a given number 'n' is within the specified range of minimum value 'min_value' and maximum value 'max_value'.
    :param n: The number to be checked.
    :param min_value: The minimum allowed value.
    :param max_value: The maximum allowed value.
    """

    # Checking if the number is within the specified range using assert statement
    assert min_value <= n <= max_value, f"Number {n} is not within the range ({min_value}, {max_value})"

    # Alternatively, you can also use math library functions to check the conditions:

    # Check if the number is positive
    if n < 0:
        print("The given number must be non-negative.")
        raise ValueError("Negative number detected.")

    # Calculate the square root of a number using math.sqrt() function
    sqrt_n = math.sqrt(abs(n))

    print(f"Square root of {n} is approximately: {sqrt_n}")

# Testing the function with valid input
check_number(9, 1, 10)

# Testing the function with invalid input
try:
    check_number(-5, 1, 10)
except AssertionError as e:
    print(e)

# Testing the function with floating-point number as input
check_number(2.5, 1, 3)
157
python
# Define a calculator namespace
calculator = {
    'add': lambda x, y: x + y,
    'multiply': lambda x, y: x * y
}

# Use the calculator functions and assert their results
def test_calculator():
    result_add = calculator['add'](3, 4)
    result_multiply = calculator['multiply'](3, 4)

    # Assert addition is correct
    assert result_add == 7, f"Addition is not correct. Expected: 7, Got: {result_add}"

    # Assert multiplication is correct
    assert result_multiply == 12, f"Multiplication is not correct. Expected: 12, Got: {result_multiply}"

if __name__ == "__main__":
    test_calculator()
158
python
def divide(num1, num2):
    """This function takes two numbers as arguments and returns the quotient."""
    try:
        result = num1 / num2
    except ZeroDivisionError:
        print("Error: Division by zero is not allowed.")
        return None

    assert num1 != 0, "Error: First number cannot be zero."
    assert num2 != 0, "Error: Second number cannot be zero."

    return result

if __name__ == "__main__":
    num1 = int(input("Enter first number: "))
    num2 = int(input("Enter second number: "))

    if not (isinstance(num1, int) and isinstance(num2, int)):
        print("Error: Both arguments must be integers.")
    else:
        result = divide(num1, num2)
        if result is not None:
            print(f"Quotient of {num1} and {num2} is: {result}")
159
python
def add(x, y):
    assert x is not None, "x must be provided"
    assert y is not None, "y must be provided"
    return x + y

add(3, 5)
add(None, 5)
160
python
def divide(x, y):
    """This function divides two numbers."""
    result = x / y
    assert y != 0, "Error: Division by zero is not allowed."
    return result

# Testing the divide function with valid input
print(divide(10, 2)) # Output: 5.0

# Testing the divide function with invalid input
try:
    print(divide(10, 0))
except AssertionError as e:
    print(e) # Output: Error: Division by zero is not allowed.
161
python
# Define a function with incorrect semantics (subtraction instead of addition)
def add(a, b):
    return a - b

def test_add():
    # Test case 1: check addition of two positive numbers
    assert add(3, 2) == 5, "Error: Adding two positive numbers did not give the correct result."

    # Test case 2: check addition of a negative number and a positive number
    assert add(-2, 3) == 1, "Error: Adding a negative number and a positive number did not give the correct result."

    # Test case 3: check addition of zero with any number
    assert add(5, 0) == 5, "Error: Adding a number with zero did not give the expected result."

if __name__ == "__main__":
    test_add()
162
python
import math
import pdb

def baby_steps_giant_steps(number, precision=0.001):
    """Calculate the square root of a given number using the Baby Steps giant steps algorithm"""
    low = 0.0
    high = number

    while abs(high - low) > precision:
        mid = (low + high) / 2.0
        if mid * mid < number:
            low = mid
        else:
            high = mid

    return mid

if __name__ == "__main__":
    # Test the function with some numbers and expected results
    test_numbers = [25, 16, 36, 49]
    test_results = [5.0, 4.0, 6.0, 7.0]

    for number in test_numbers:
        result = baby_steps_giant_steps(number)
        assert abs(result - math.sqrt(number)) < 1e-5, f"Expected square root of {number} to be {test_results[test_numbers.index(number)]}, got {result}"
        
    # Introduce some bugs in the function and test again
    baby_steps_giant_steps = lambda number: number * number  # Replace the function definition with a simple square function

    pdb.set_trace()  # Add a breakpoint here to debug the next calculation

    result = baby_steps_giant_steps(16)
163
python
# Function to be tested
def add_numbers(x, y):
    """Adds two numbers and checks if the result is within a given range."""
    assert x is not None and y is not None, "Both x and y should be provided."
    result = x + y
    assert result is not None, "Result should not be None"
    assert type(result) is int or type(result) is float, "Result should be a number"
    return result

# Test Case 1: Valid Inputs
class TestAddNumbers(unittest.TestCase):
    def test_add_valid_numbers(self):
        self.assertEqual(add_numbers(2, 3), 5)

# Test Case 2: Invalid Input 1 (x is None)
class TestAddNumbers(unittest.TestCase):
    def test_add_invalid_x(self):
        with self.assertRaises(AssertionError):
            add_numbers(None, 3)

# Test Case 3: Invalid Input 2 (y is None)
class TestAddNumbers(unittest.TestCase):
    def test_add_invalid_y(self):
        with self.assertRaises(AssertionError):
            add_numbers(2, None)

# Test Case 4: Invalid Input 3 (Result is not a number)
class TestAddNumbers(unittest.TestCase):
    def test_add_invalid_result_type(self):
        with self.assertRaises(AssertionError):
            add_numbers(1, "abc")

# Running the tests
if __name__ == "__main__":
    unittest.main()
164
python
# Function to add two numbers with validation using assert statement and docstrings
def add_numbers(num1, num2):
    """
    This function takes two numbers as arguments and returns their sum.
    It also validates that both arguments are numbers.

    Parameters:
    num1 (number): First number to be added.
    num2 (number): Second number to be added.

    Returns:
    The sum of the two given numbers.
    """

    # Documentation for the function's inputs
    assert type(num1) is int or type(num1) is float, "First argument must be a number"
    assert type(num2) is int or type(num2) is float, "Second argument must be a number"

    # Add the two numbers and return the sum
    result = num1 + num2
    return result
165
python
def add(x, y):
    """Add two integers."""
    result = x + y
    assert type(x) is int and type(y) is int, "Both inputs must be integers."
    assert result is not None, f"Error: Result of addition is None. Inputs were {x} and {y}."
    return result

try:
    print("Result:", add(3, 4))
except AssertionError as error:
    print("Error:", error)
166
python
class CustomException(Exception):
    def __init__(self, message):
        super().__init__(message)

def divide(x, y):
    try:
        result = x / y
    except ZeroDivisionError:
        raise CustomException("Cannot divide by zero")
    return result

def test_divide():
    assert 5 >= 3, "Five is not greater than or equal to three"
    x = 10
    y = 2
    expected_result = 5.0
    result = divide(x, y)
    assert result == expected_result, f"Divide {x} by {y} did not return expected value {expected_result}"

if __name__ == '__main__':
    try:
        test_divide()
    except CustomException as e:
        print(f"Error: {e}")
167
python
class CustomError(Exception):
    """Custom exception to handle specific errors."""

    def __init__(self, message):
        self.message = message

# Function that should always return a positive number
def calculate_square_root(number):
    if number < 0:
        raise CustomError("Error: Cannot calculate square root of negative number")
    result = number ** 0.5
    assert result > 0, f"Error: Invalid result: {result}"
    return result

# Test cases
try:
    print(f"Square root of -1 is: {calculate_square_root(-1)}")
except CustomError as e:
    print(e.message)

try:
    print(f"Square root of 25 is: {calculate_square_root(25)}")
except AssertionError as e:
    print("An error occurred:", e)

# Test cases passing without errors
print(f"Square root of 16 is: {calculate_square_root(16)}")
print(f"Square root of 4 is: {calculate_square_root(4)}")
168
python
def calculate_sum(num1, num2):
    # Using assert statements to check input arguments
    assert type(num1) is int or type(num1) is float, "First argument must be either an integer or a floating-point number."
    assert type(num2) is int or type(num2) is float, "Second argument must be either an integer or a floating-point number."

    try:
        result = num1 / num2  # Simulating division by zero error
    except ZeroDivisionError as e:
        print(f"Caught an exception: {e}")
        return None

    # Check if the first argument is greater than the second one
    if num1 <= num2:
        raise ValueError("First argument must be greater than the second one.")

    return num1 + num2

if __name__ == "__main__":
    num1 = 5.0
    num2 = 3.0
    sum_result = calculate_sum(num1, num2)

    if sum_result is not None:
        print(f"The sum of {num1} and {num2} is {sum_result}")
169
python
import logging

# Configure logging
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')

def add(x, y):
    """
    This function adds two numbers and returns the sum.
    :param x: first number
    :param y: second number
    :return: sum of x and y
    """
    logging.debug(f'Adding {x} and {y}')
    result = x + y
    assert x and y are numbers, f"{type(x)} {x} or {type(y)} {y} must be numbers."
    assert result is not None, "The sum of the input numbers is None."
    logging.info(f'The sum of {x} and {y} is {result}.')
    return result

if __name__ == "__main__":
    try:
        add('3', '5')
    except AssertionError as e:
        logging.error(e)

    add(2, 3)
170
python
import math

def calc_square_root(number):
    """
    This function calculates the square root of a given number using Python's built-in math.sqrt() function.
    :param number: The input number (must be non-negative)
    :return: The calculated square root of the number
    """

    # Assertion to check if number is non-negative
    assert number >= 0, f"Error: Input number '{number}' must be non-negative."

    # Calculate and return the square root of the number
    result = math.sqrt(number)
    return result

# Test cases
print("Square root of 4 is:", calc_square_root(4))
print("Square root of 9 is:", calc_square_root(9))
print("Square root of -1 is:", calc_square_root(-1))
171
python
# Original code with potential issues
def calculate_sum(num1, num2):
    result = num1 + num2
    if isinstance(num1, (int, float)) and isinstance(num2, (int, float)):
        return result
    else:
        raise TypeError("Both num1 and num2 must be of numeric type")

def process_data(data):
    sum = calculate_sum(*data)
    return sum * 2

# Testing the function
try:
    data = [4, 5]
    result = process_data(data)
    assert result == 14
except AssertionError as e:
    print(f"Test failed: {e}")

try:
    data = ["a", "b"]
    result = process_data(data)
except Exception as e:
    print(f"Unexpected error: {e}")
else:
    assert result is None

# Refactoring the code
def calculate_sum(*numbers):
    try:
        result = sum(numbers)
    except TypeError as e:
        raise TypeError from e

    return result

def process_data(data):
    if not all(isinstance(item, (int, float)) for item in data):
        raise TypeError("Data must consist only of numeric items")

    sum = calculate_sum(*data)
    return sum * 2
172
python
import math

def basic_sqrt(number):
    """Calculate the square root using the basic method"""
    assert number >= 0, "Error: The input number must be non-negative"
    guess = number / 2.0
    while abs(guess*guess - number) > 0.01:
        guess = (guess + number/guess) / 2.0
    return round(guess, 2)

def optimized_sqrt(number):
    """Calculate the square root using the optimized method with Newton-Raphson technique"""
    assert number >= 0, "Error: The input number must be non-negative"
    guess = number / 2.0

    while abs(guess*guess - number) > 0.001:
        guess = (guess + number/guess) / 2.0

    return round(guess, 2)

if __name__ == "__main__":
    print("Calculate square root using the basic method:")
    num = float(input("Enter a positive number: "))
    result = basic_sqrt(num)
    print(f"The square root of {num} is approximately {result}")
    
    print("\nCalculate square root using the optimized method:")
    num = float(input("Enter a positive number: "))
    result = optimized_sqrt(num)
    print(f"The square root of {num} is approximately {result}")
173
python
import time

# Function to be tested for performance and correctness
def square_numbers(numbers):
"""
This function takes a list of numbers and returns a new list with each number squared.
"""
 result = []
 for num in numbers:
 result.append(num ** 2)
 return result

# Function under test using assert statement
def square_numbers_assert(numbers):
"""
This function takes a list of numbers and returns a new list with each number squared.
It uses an assert statement to ensure the input is a list.
"""
 assert isinstance(numbers, list), "Input must be a list."
 result = []
 for num in numbers:
 result.append(num ** 2)
 return result

if __name__ == "__main__":
 print("Performance test:")
 numbers = [i for i in range(1000)]
 start_time = time.time()
 square_numbers(numbers)
 end_time = time.time()
 print(f"Time taken by square_numbers function: {end_time - start_time} seconds")

 print("Correctness test:")
 numbers = [1, 2, 3]
 assert square_numbers_assert(numbers) == [1, 4, 9], "square_numbers_assert function failed"
 print("All is well.")
174
python
import math
import cProfile

def sum_of_squares(n):
    """Calculate sum of squares of numbers from 1 to n"""
    assert n >= 0, "Number must be greater than or equal to zero"

    result = 0
    for i in range(1, n + 1):
        result += i * i
    return result

if __name__ == "__main__":
    numbers = [0, -3, 5, 10]

    for num in numbers:
        sum_of_squares(num)
        
    print("Results:")
    for num, result in ((num, sum_of_squares(num)) for num in numbers):
        print(f"The square of numbers from 1 to {num} is {result}")

    # Profiling
    print("\nProfiling results:")
    cProfile.run("sum_of_squares(1000)")
175
python
def calculate_sum(num1, num2):
    """Calculates the sum of two numbers."""
    result = num1 + num2
    assert type(num1) is (int or float), "First argument must be either an integer or a float."
    assert type(num2) is (int or float), "Second argument must be either an integer or a float."
    return result

try:
    print(calculate_sum("3", 5))
except AssertionError as e:
    print(f"Error: {e}")

print(calculate_sum(3, 5))
print(calculate_sum(3.0, 5.0))
176
python
# First, make sure you have virtualenv installed
# Install it using pip if not already present: `pip install virtualenv`

import os
import sys
import subprocess

# Create a new virtual environment and activate it
def create_virtualenv(path):
    print("Creating a new virtual environment at:", path)
    subprocess.call([sys.executable, "-m", "venv", path])
    os.chdir(path)
    subprocess.call(["source", "bin/activate"])

create_virtualenv("my_project_env")

# Now, let's write a simple Python script that uses assert statements
import math

def sqrt(n):
    return math.sqrt(n)

def test_sqrt():
    assert sqrt(4) == 2.0, "Expected square root of 4 to be 2, but got {}.".format(sqrt(4))
    assert sqrt(9) == 3.0, "Expected square root of 9 to be 3, but got {}.".format(sqrt(9))
    assert sqrt(-1) is not None, "Expected square root of -1 to be NaN, but got: {}".format(sqrt(-1))

test_sqrt()

print("All tests passed!")
177
python
import requests
import json

def test_api():
    """Tests the API endpoint."""

    # Make a request to the API endpoint
    response = requests.get("https://api.example.com/data")

    assert response.status_code == 200, "API returned an error status code"

    # Verify the response data is as expected
    data = json.loads(response.text)
    assert len(data) > 0, "Received empty data from API"

if __name__ == "__main__":
    test_api()
178
python
import math

def factorial(n):
    """
    This function computes the factorial of a given number.
    :param n: The non-negative integer for which to find the factorial.
    :return: An integer representing the factorial of the given number.
    """
    if not isinstance(n, int) or n < 0:
        raise ValueError("Factorial can only be computed for non-negative integers.")
    
    result = 1
    for i in range(1, 1 + n):
        result *= i
        
    return result

def test_factorial():
    """
    A series of tests to check the correctness of our factorial function.
    """
    assert factorial(0) == 1, "Factorial of zero should be one"
    assert factorial(1) == 1, "Factorial of one should be one"
    assert factorial(2) == 2, "Factorial of two should be two"
    assert factorial(5) == 120, "Factorial of five should be 120"

if __name__ == "__main__":
    test_factorial()
    print("All tests passed!")
179
python
# Define a function that calculates the square root of a number
def sqrt(number):
    return number ** 0.5

# Use an assert statement to check if a number has a positive square root
number = 4
assert number >= 0, "Number must be non-negative"
result = sqrt(number)
print("The square root of {} is {}".format(number, result))
180
python
# Function to check if a number is positive
def check_positive(number):
    assert number > 0, "Error: Number must be positive"
    return number

# Test the function with some values
num1 = 5
num2 = -3
num3 = 0

print("Number 1:", check_positive(num1))
print("Number 2:", check_positive(num2))
try:
    check_positive(num3)
except AssertionError as e:
    print("Error:", e)
181
python
# Example using 'assert' statement
def calculate_square(number):
    result = number ** 2
    assert result > 0, f"Error: Square root of {number} is not positive."
    return result

try:
    print("Result:", calculate_square(-3))
except AssertionError as error:
    print("Error:", error)
182
python
# example.py
def add(x, y):
    return x + y * 2

print("Result:", add(3, 2))
183
python
def add(x, y):
    result = x + y
    assert type(result) is int or type(result) is float, "Addition must return a number."
    return result

if __name__ == "__main__":
    print(add(2, 3))  # This will run fine.
    print(add("1", "2"))  # This will raise an AssertionError with the given message.
184
python
# my_package/math_ops.py
def add(x, y):
    """Add two numbers."""
    return x + y

def subtract(x, y):
    """Subtract two numbers."""
    return x - y

def multiply(x, y):
    """Multiply two numbers."""
    return x * y

def divide(x, y):
    """Divide two numbers."""
    if y == 0:
        raise ZeroDivisionError("Cannot divide by zero")
    return x / y

def test_math_ops():
    """Tests for mathematical operations."""
    assert add(3, 5) == 8, "Addition is not working"
    assert subtract(10, 4) == 6, "Subtraction is not working"
    assert multiply(2, 4) == 8, "Multiplication is not working"
    assert divide(10, 2) == 5.0, "Division is not working"
185
python
def add(x, y):
    """Add two numbers"""
    result = x + y
    assert type(x) is (int or float), "First argument should be a number."
    assert type(y) is (int or float), "Second argument should be a number."
    return result

# Test the function with valid inputs
print(add(1, 2)) # Output: 3
print(add(3.5, 2)) # Output: 5.5

# Test the function with invalid inputs
try:
    print(add("a", 1)) # Raise an AssertionError
except AssertionError as error_message:
    print(error_message) # Output: First argument should be a number.

try:
    print(add(1, [2])) # Raise an AssertionError
except AssertionError as error_message:
    print(error_message) # Output: Second argument should be a number.
186
python
import os

# Set an environment variable for testing purposes, uncomment this line if running tests
# os.environ["MY_VAR"] = "some value"

def my_function(input):
    """This function demonstrates the use of assert statements."""

    # Perform some checks using assert statements
    assert type(input) is str, "Input must be a string."
    assert len(input) > 0, "Input cannot be empty."

    result = input.upper()

    # Your main logic goes here

if __name__ == "__main__":
    input_value = "example"

    my_function(input_value)

    env_var = os.environ.get("MY_VAR", "Default value")
    print(f"Environment variable MY_VAR has the value: {env_var}")
187
python
import subprocess
import os

def calculate_sum(numbers):
    total = 0
    for number in numbers:
        total += number
    return total

numbers = [1, 2, 3, 4]
result = calculate_sum(numbers)
assert result == 10, "The sum of the given numbers is not equal to 10"
print("The sum of the given numbers is:", result)

command = 'echo "Hello World"'
process = subprocess.run(command, shell=True, capture_output=True)
assert process.returncode == 0, f"Command '{command}' returned non-zero status {process.returncode}"
print("Output from command:", process.stdout.decode())
188
python
# Define a function to calculate the square root using the Babylonian method (scripting)
def babylonian_sqrt(number, precision=0.01, max_iterations=50):
    guess = number / 2.0
    for _ in range(max_iterations):
        new_guess = (guess + number / guess) / 2.0
        if abs(new_guess - guess) < precision:
            return new_guess
        guess = new_guess

# Function to test the square root calculation and demonstrate assert usage
def test_square_root():
    num = 16.0
    expected_result = 4.0
    result = babylonian_sqrt(num)

    # Use assert statement to check if the result is close enough to the expected value
    assert abs(expected_result - result) < 0.01, f"Expected square root of {num} to be approximately {expected_result}, but got {result}"

# Run the test case
test_square_root()
print("Test passed!")
189
python
# Example using assert statement
def add(x, y):
    result = x + y
    assert result > 0, "Error: The sum is not positive"
    return result

try:
    print(add(-2, 3))
except AssertionError as e:
    print("Exception occurred:", e)
190
python
import numpy as np

def add(a, b):
    assert isinstance(a, (int, float)) and isinstance(b, (int, float)), "Both a and b must be numbers"
    return a + b

def batch_process(arrays, func):
    """Batch process a list of arrays using given function"""
    result = np.array([func(arr) for arr in arrays])
    assert len(result) == len(arrays, "Number of results must equal the number of input arrays"), \
        "Error in batch processing: Number of results is not equal to number of input arrays"
    return result

# Test adding two numbers
assert add(2, 3) == 5

# Test adding a string and a number
try:
    add("hello", 3)
except AssertionError as e:
    print(e)

# Batch process arrays using addition function
arrays = [np.array([1, 2, 3]), np.array([4, 5, 6])]
result = batch_process(arrays, add)
assert result.shape == (2, 3), "Shape of results must match the shape of input arrays"
print(result)
191
python
def add_numbers(x, y):
    result = x + y
    assert type(result) is int, "Addition must return an integer."
    return result

a = 10
b = 5
c = 3.14
result_a = add_numbers(a, b)
result_c = add_numbers(a, c)
print("Result of adding two integers: ", result_a)
print("Result of adding an integer and a float: ", result_c)
192
python
import threading
import time

# Counter class with lock for thread-safe access
class Counter:
    def __init__(self):
        self.value = 0
        self.lock = threading.Lock()

# Function to be executed in separate threads
def increment_counter(counter):
    for i in range(1000):
        with counter.lock:
            assert counter.value == i, f"Counter value incorrect: {counter.value} != {i}"
            counter.value += 1

# Create and start threads
counter = Counter()
threads = []
for _ in range(5):
    t = threading.Thread(target=increment_counter, args=(counter,))
    threads.append(t)
    t.start()

# Wait for all threads to finish
for thread in threads:
    thread.join()

print("Final counter value:", counter.value)
193
python
import threading
import queue

class ProducerConsumerQueue:
    def __init__(self):
        self.q = queue.Queue()
        self.cond = threading.Condition()

    def put(self, item):
        self.q.put(item)
        self.cond.notify()

    def get(self):
        while True:
            if not self.q.empty():
                item = self.q.get()
                print(f'[{threading.current_thread().name}]: Got {item}')
                return item
            else:
                print('Queue is empty. Waiting...')
                self.cond.wait()

    def run(self):
        while True:
            item = yield self
            self.put(item)
194
python
def process(num):
    """This is an example function that processes a number."""
    return num * 2

def main():
    # Given input
    given_input = 5

    # Process the input
    processed_input = process(given_input)

    # Verification using assert statement
    assert given_input == 5, "Given input is not equal to expected value."
    assert type(processed_input) is int, "Processed input is not an integer."
    assert processed_input == 11, "Processed input is not as expected."

    print("Input:", given_input)
    print("Processed Input:", processed_input)

if __name__ == "__main__":
    main()
195
python
def add(x, y):
    assert x is not None and y is not None, "Both x and y must be provided"
    return x + y

try:
    result = add(3, 5)
except AssertionError as e:
    print(e)
else:
    print("Result:", result)
196
python
# This function calculates the square root of a number
def sqrt(number):
    if number >= 0:
        return number ** 0.5
    else:
        raise ValueError("Cannot take the square root of a negative number")

# This function checks if a number is an integer and greater than zero
def is_positive_integer(n):
    assert isinstance(n, int), "Input must be an integer"
    assert n > 0, "Input must be positive"

# Now we call these functions with some input
try:
    x = sqrt(-1)
except ValueError as e:
    print("Error:", e)

is_positive_integer(5)
is_positive_integer(-3)
197
python
def square_root(number):
    """
    This function calculates the square root of given number using the math library.
    """
    try:
        result = math.sqrt(number)
        assert result * result >= number, f"Error! The number {number} does not have a real square root."
        return result
    except ValueError:
        print("Error! The given number is negative.")

number = 4
square_root_result = square_root(number)
print(f"The square root of the number {number} is: {square_root_result}")
198
python
import threading

class Counter:
    def __init__(self):
        self.value = 0
        self.lock = threading.Lock()

def increment_counter(counter):
    with counter.lock:
        assert isinstance(counter, Counter), "Counter is not initialized."
        counter.value += 1
        print(f"Thread {threading.current_thread().name} increments the counter to {counter.value}")

class ThreadA(threading.Thread):
    def run(self):
        counter = Counter()
        for _ in range(10):
            increment_counter(counter)

class ThreadB(threading.Thread):
    def run(self):
        counter = Counter()
        for _ in range(10):
            increment_counter(counter)

if __name__ == "__main__":
    thread_a = ThreadA()
    thread_b = ThreadB()

    thread_a.start()
    thread_b.start()

    thread_a.join()
    thread_b.join()
199
python
import threading
import time

QUEUE_SIZE = 5
data_queue = []
lock = threading.Lock()
condition = threading.Condition()

class Producer(threading.Thread):
    def run(self):
        for i in range(10):
            with lock:
                while len(data_queue) >= QUEUE_SIZE:
                    condition.wait_for(lock)
            data = i
            print(f"Producer produced item {data}")
            self.assert(len(data_queue) < QUEUE_SIZE, msg="Queue is full!")
            with lock:
                data_queue.append(data)
                condition.notify()
                time.sleep(1)

class Consumer(threading.Thread):
    def run(self):
        for i in range(10):
            with lock:
                while len(data_queue) == 0:
                    condition.wait_for(lock)
            item = data_queue.pop()
            print(f"Consumer consumed item {item}")
            self.assert(len(data_queue) > 0, msg="Queue is empty!")
            time.sleep(1)

if __name__ == "__main__":
    producer = Producer()
    consumer = Consumer()

    producer.start()
    consumer.start()

    producer.join()
    consumer.join()
200
python
import threading
import time

class Queue:
    def __init__(self, max_size):
        self.queue = []
        self.max_size = max_size
        self.mutex = threading.Lock()
        self.not_full = threading.Semaphore(value=max_size)
        self.not_empty = threading.Semaphore(value=0)

    def put(self, item):
        with self.mutex:
            self.not_full.acquire()
            assert len(self.queue) < self.max_size, "Queue is full!"
            self.queue.append(item)

        print(f'Produced: {item}')
        self.not_empty.release()

    def get(self):
        with self.mutex:
            self.not_empty.acquire()
            assert len(self.queue) > 0, "Queue is empty!"
            item = self.queue.pop()

        print(f'Consumed: {item}')
        self.not_full.release()

class Producer(threading.Thread):
    def __init__(self, queue):
        super().__init__()
        self.queue = queue

    def run(self):
        for i in range(10):
            self.queue.put(i)
            time.sleep(0.1)

class Consumer(threading.Thread):
    def __init__(self, queue):
        super().__init__()
        self.queue = queue

    def run(self):
        for _ in range(10):
            self.queue.get()
            time.sleep(0.1)

if __name__ == '__main__':
    queue = Queue(max_size=5)
    producer = Producer(queue)
    consumer = Consumer(queue)

    producer.start()
    consumer.start()

    producer.join()
    consumer.join()
201
python
import os.path

class CustomFileHandler:
    def __init__(self, filename):
        self.filename = filename

    def __enter__(self):
        self.file = open(self.filename, 'r')
        return self.file

    def __exit__(self, exc_type, exc_value, traceback):
        self.file.close()

def read_and_validate_lines(file):
    lines = file.readlines()

    # Validation using assert statements
    assert len(lines) > 0, "File is empty"
    assert all(line for line in lines if len(line.strip()) > 5), "Lines should be longer than 5 characters"

def process_file(filename):
    try:
        with CustomFileHandler(filename) as file:
            read_and_validate_lines(file)
            print("Valid lines found in the file:")
            for line in file.readlines():
                print(line.strip())
    except AssertionError as e:
        print("Validation error:", e)

# Test the program with a valid and an invalid file
process_file('example_valid.txt')
process_file('example_invalid.txt')
202
python
import gc

def generate_large_list(n):
    """Returns a list of floating point numbers of size n"""
    return [float(i) for i in range(1, n + 1)]

def square(num):
    """Function to calculate the square of given number"""
    return num * num

if __name__ == "__main__":
    # Create a large list of floating point numbers
    my_list = generate_large_list(100000)
    
    # Perform some operations on the list
    squares = [square(num) for num in my_list]
    
    # Use assert statement to check if the length of squares list is equal to length of my_list
    assert len(my_list) == len(squares), "Error: Size of my_list and squares are not same"
    
    # Force garbage collection using gc() function
    gc.collect()
    
    print("List 'my_list' is no longer referenced and can be safely collected by GC.")
203
python
def divide(x, y):
    """This function takes two arguments x and y, divides x by y and returns the result."""
    try:
        result = x / y
    except ZeroDivisionError:
        # Using an assert statement for error checking
        assert y != 0, f"Error: Division by zero is not allowed."
        result = x / y
    return result

if __name__ == "__main__":
    num1 = int(input("Enter first number: "))
    num2 = int(input("Enter second number: "))
    print(f"Result: {divide(num1, num2)}")
205
python
def calculate_mean(numbers):
    """Calculate the mean of given numbers"""
    total = sum(numbers)
    mean = total / len(numbers)
    return mean

# List of numbers to calculate mean
numbers = [1, 2, 3, 4, 5]
mean = calculate_mean(numbers)

print("Mean: ", mean)

# Assert statement for checking if the calculated mean is equal to the expected mean (5 in this case)
assert mean == 5, "Calculated mean doesn't match with the expected mean."

# Unpacking a list to pass elements as individual arguments to a function
def print_numbers(a, b, c):
    """Prints three given numbers"""
    print(f"Number 1: {a}")
    print(f"Number 2: {b}")
    print(f"Number 3: {c}")

numbers = [1, 2, 3]
print_numbers(*numbers)
206
python
def divide(x, y):
    """
    This function takes two numbers as arguments and returns the quotient of x divided by y.
    Raises a ZeroDivisionError if y is zero.
    """
    assert y != 0, "Error: Division by zero is not allowed."
    return x / y

# Test cases for divide function
if __name__ == "__main__":
    # Test case 1: Divide by a non-zero number
    result = divide(10, 2)
    assert result == 5.0, "Test case failed: divide(10, 2) != 5.0"
    print("Test case 1 passed.")

    # Test case 2: Divide by zero
    with pytest.raises(AssertionError):
        divide(10, 0)

    # Test case 3: Divide large number by smaller non-zero number
    result = divide(200000, 500)
    assert result >= 40.0, "Test case failed: divide(200000, 500) < 40.0"
    print("Test case 3 passed.")
207
python
# Define a function that calculates the quotient and checks if it is an integer
def calculate_quotient(dividend, divisor):
    quotient = dividend // divisor
    assert isinstance(quotient, int), "Quotient must be an integer"
    return quotient

# Test the function with some inputs
try:
    result = calculate_quotient(10, 3)
    print("The quotient of 10 divided by 3 is:", result)
except AssertionError as error:
    print(error)

result = calculate_quotient(-5, 2)
print("The quotient of -5 divided by 2 is:", result)
208
python
def calculate_sum(num1, num2):
    # Using assert statement to check if both inputs are integers
    assert type(num1) is int and type(num2) is int, "Both numbers must be integers."
    
    result = num1 + num2
    remainder = num1 % num2
    
    print(f"The sum of {num1} and {num2} is {result}")
    print(f"The remainder when {num1} is divided by {num2} is {remainder}")

# Testing the function with valid inputs
calculate_sum(3, 5)

# Testing the function with invalid inputs (non-integer inputs)
try:
    calculate_sum("apple", 5)
except AssertionError as error:
    print(error)
209
python
def calculate_square_root(number):
    """Calculate the square root of a given number"""
    assert number >= 0, "Error: Number must be non-negative"
    return number ** 0.5

# Using assert statement
def main():
    try:
        num = int(input("Enter a number: "))
        result = calculate_square_root(num)
        print(f"Square root of {num} is {result}")
    except AssertionError as e:
        print(e)

if __name__ == "__main__":
    main()
210
python
def add(x, y):
    """
    This function adds two numbers x and y and returns their sum.
    """
    result = x + y
    assert type(x) is (int or float), "x should be either integer or float."
    assert type(y) is (int or float), "y should be either integer or float."
    return result

if __name__ == "__main__":
    num1 = 5
    num2 = 3.0

    sum = add(num1, num2)

    print(f"The sum of {num1} and {num2} is: {sum}")
211
python
def validate_input(user_input):
    """
    This function validates user input and uses assert to check if it's an integer.
    """
    try:
        num = int(user_input)
    except ValueError:
        print("Error: Input must be an integer.")
        assert type(user_input) is int, "Input must be an integer."
    return num

def add_numbers(num1, num2):
    """
    This function adds two numbers and checks if the result is as expected using ==.
    """
    sum = num1 + num2
    assert sum == (num1 + num2), f"Error: The sum of {num1} and {num2} is not correct."
    return sum

if __name__ == "__main__":
    user_input1 = input("Enter the first number: ")
    user_input2 = input("Enter the second number: ")

    num1 = validate_input(user_input1)
    num2 = validate_input(user_input2)

    result = add_numbers(num1, num2)
    print(f"The sum of {num1} and {num2} is: {result}")
212
python
def add(x, y):
    """
    This function adds two numbers and returns the sum.
    :param x: first number
    :param y: second number
    :return: sum of x and y
    """
    result = x + y
    assert type(x) is (int or float), "First argument must be either integer or float"
    assert type(y) is (int or float), "Second argument must be either integer or float"
    return result

# Testing the function with valid inputs
print("Addition of 2 integers: ", add(2, 3))
print("Addition of 2 floats: ", add(2.5, 3.7))

# Testing the function with invalid inputs
try:
    print("Addition of integer and string: ", add(2, "three"))
except AssertionError as e:
    print("Error message:", e)

try:
    print("Addition of float and list: ", add(2.5, [1, 2, 3]))
except AssertionError as e:
    print("Error message:", e)
213
python
# Function to check if a number is within a given range
def in_range(number, start, end):
    """
    :param number: The number to check.
    :param start: The start of the range.
    :param end: The end of the range.
    :return: True if number is between start and end (inclusive), False otherwise.
    """
    assert start <= end, "Start of range must be less than or equal to end."
    return start <= number <= end

# Test cases for in_range function
print("Test cases for in_range function:")

test_cases = [
    (5, 1, 5, True),
    (5, 1, 4, False),
    (5, 6, 5, True),
    (5, 6, 7, False),
]

for test in test_cases:
    number = test[0]
    start = test[1]
    end = test[2]
    expected = test[3]
    
    result = in_range(number, start, end)
    
    assert result == expected, f"Expected {expected} for inputs: {number}, {start}, {end}"
    print(f"\tPassed: Input: {number}, Start: {start}, End: {end}. Result: {result}")
214
python
# Define a function with expected preconditions
def divide(x, y):
    assert y != 0, "Error: Division by zero is not allowed"
    return x / y

# Test cases for divide function
if __name__ == "__main__":
    # Test case 1: Divide by a non-zero number
    result = divide(10, 2)
    assert result > 3.5, "Error: Expected result to be greater than 3.5"
    print("Test case 1 passed")

    # Test case 2: Divide by zero
    try:
        result = divide(10, 0)
    except AssertionError as e:
        print(e)
    else:
        assert False, "Expected an AssertionError but did not get one"
    finally:
        print("Test case 2 failed")

# Test case 3: Divide by a positive number
result = divide(10, 4)
assert result > 2, "Error: Expected result to be greater than 2"
print("Test case 3 passed")
215
python
def validate_input(user_input):
    """
    Function to validate user input should be greater than or equal to 0.
    Raise AssertionError if condition is not met.
    """
    assert user_input <= 10, "User input must be less than or equal to 10."
    assert user_input >= 0, "User input must be non-negative."

# Test the validate_input function with valid and invalid inputs
try:
    validate_input(-5)
except AssertionError as error_message:
    print(error_message)

validate_input(3)
validate_input(11)
216
python
def calculate_square_root(number):
    """
    Calculates the square root of a given number.
    :param number: a non-negative number
    :return: the square root of the number
    """
    assert number >= 0, "Error: The number should be non-negative"
    sqrt = number ** 0.5
    return sqrt

# Test the function with valid and invalid inputs
print(calculate_square_root(9)) # Output: 3.0
print(calculate_square_root(4)) # Output: 2.0

try:
    calculate_square_root(-1)
except AssertionError as error:
    print(error) # Output: Error: The number should be non-negative
217
python
def increase_counter(counter):
    """
    This function increments the given counter by 1.
    It uses assert statement to check if the input is of integer type,
    and compounds assignment operator (+=) to increment the counter value.
    """
    if isinstance(counter, int):  # Check if the given argument is an integer
        print("Counter is an integer.")
        counter += 1  # Increment the counter using compound assignment operator
        return counter
    else:
        print("Error! Counter should be an integer.")
        assert isinstance(counter, int), "Counter must be an integer!"
        counter = counter + 1  # Increment the counter using normal addition operation
        return counter

# Testing the function
print("Testing with an integer:")
num = 5
result = increase_counter(num)
assert result == num + 1, "Function should have returned the expected value."
print(f"Expected: {num+1}, Actual: {result}")

print("\nTesting with a non-integer:")
str_value = "Hello"
result = increase_counter(str_value)
assert result is None, "Function should return None when given a non-integer."
219
python
def double(num):
    """
    This function takes an integer as an argument and returns its double value.
    """
    return num * 2

# Testing the double function using assert statement
def main():
    num = 5
    expected_result = 10
    result = double(num)

    # Using assert statement to test if the function returns the correct value
    assert result == expected_result, f"Expected {expected_result}, but got {result}"

    print("Function tested successfully")

# Using *= operator for assignment
def increase_by_two(num):
    """
    This function takes an integer as an argument and increases its value by 2 using *= operator.
    """
    num *= 2
    return num

if __name__ == "__main__":
    main()
    num = 3
    print("Number before increasing: ", num)
    num_doubled = increase_by_two(num)
    print("Number after increasing by two: ", num_doubled)
220
python
# Define a function with expected input and output
def divide(x, y):
    result = x / y
    assert y != 0, "Error: Division by zero is not allowed."
    return result

# Set initial values for variables
num1 = 10
num2 = 5

# Perform division using the 'divide' function and assign the result to a variable
result = divide(num1, num2)

# Print the result and the original values of 'num1' and 'num2' for verification
print("Result: ", result)
print("num1: ", num1)
print("num2: ", num2)

# Perform division assignment using '/=' operator
num1 /= num2

# Print the updated value of 'num1'
print("Updated num1: ", num1)
221
python
# Function to check if a number is even or odd
def is_even(num):
    return num % 2 == 0

# Main function
def main():
    # Initialize a variable with an odd value
    num = 5

    # Check if the number is even using assert statement
    assert is_even(num), f"The number {num} is not even."

    # If the number was odd, we divide it by 2 and assign the result back using //= operator
    num //= 2

    print("The number is now:", num)

if __name__ == "__main__":
    main()
222
python
class MyNumber:
    def __init__(self, value=0):
        self._value = value

    def set_value(self, new_value):
        self._value = new_value

    def adjust_value(self, amount):
        # Using assert statement to ensure 'amount' is a multiple of 3.
        assert amount % 3 == 0, "Amount should be a multiple of 3."

        # Using modulus operator '%=' to get the remainder of division operation.
        self._value %= amount

number = MyNumber()
number.set_value(4)
number.adjust_value(12)
print("Adjusted value:", number._value)

number.set_value(10)
number.adjust_value(3)
print("Adjusted value after adjusting with a multiple of 3:", number._value)

number.adjust_value(5)
# Assertion error will be raised since '5' is not a multiple of 3.
223
python
class Counter:
    def __init__(self, count=0):
        self.count = count

    def increment(self, value=1):
        """Increment the counter by a given value."""
        self.count += value

    def square(self):
        """Square the current count."""
        assert self.count >= 0, "Error: The count must be non-negative"
        self.count **= 2

counter = Counter()
print("Initial counter:", counter.count)
counter.increment(5)
print("Counter after incrementing by 5:", counter.count)
counter.square()
print("Counter squared:", counter.count)
224
python
def binary_and(bin_num1, bin_num2):
    """
    This function takes two binary numbers as arguments, performs bitwise AND operation on them and returns the result.
    """

    # Convert binary numbers to decimal and then perform bitwise AND operation
    decimal_num1 = int(bin_num1, 2)
    decimal_num2 = int(bin_num2, 2)
    result = decimal_num1 & decimal_num2

    # Convert the result back to binary and assert it is equal to the original binary numbers AND'ed bits
    assert bin(decimal_num1 & decimal_num2)[2:] == bin(int.bitwise_and(int(bin_num1, 2), int(bin_num2, 2)))[2:], \
        "Bitwise AND operation does not yield the correct result"
    
    # Return the result as a binary number
    return bin(result)[2:]

# Testing the function with some examples
print(binary_and("1010", "1111")) # Expected output: "1010"
print(binary_and("1001", "0110")) # Expected output: "0110"
225
python
# Define a function with an assertion
def add_and_check(x, y):
    result = x + y
    
    # Assert statement to check if two numbers are positive
    assert x > 0 and y > 0, "Both numbers must be positive"
    
    # Bitwise OR operation (|) to set a variable to the binary representation of a number
    binary_x = Bin(x).to_bin()
    binary_y = Bin(y).to_bin()
    sum_bits = binary_x | binary_y
    
    # Convert binary representation back to decimal and store in a new variable
    assert abs(int(sum_bits, 2)) == result, "Bitwise OR operation does not equal addition result"
    
    return result

# Define a custom Bin class for converting integers to binary
class Bin:
    @staticmethod
    def to_bin(num):
        return format(abs(num), base=2)

if __name__ == "__main__":
    add_and_check(3, 4)
    add_and_check(-3, 4)
226
python
def test_bitwise_operation(num1, num2):
    result = num1 & ~num2  # Bitwise AND operation with complement of num2

    assert result == num1, f"Expected {num1} but got {result}"

if __name__ == "__main__":
    test_bitwise_operation(5, 3)
    test_bitwise_operation(7, 5)
227
python
# Let's assume we have a function to check if a number is even
def is_even(number):
    return number % 2 == 0

# Now let's write a test for the is_even function using assert and bitwise negation
def test_is_even():
    # Assert that positive even numbers are considered even
    assert is_even(4) is True, "Expected 4 to be even"

    # Assert that negative even numbers are also considered even
    assert is_even(-4) is True, "Expected -4 to be even"

    # Assert that positive odd numbers are not considered even
    with pytest.raises(AssertionError):
        assert is_even(3) is True, "Expected 3 to be odd"

    # Using bitwise negation to test that negative odd numbers are not considered even
    with pytest.raises(AssertionError):
        assert ~is_even(-3) is 0, "-3 should be an odd number"

# Run the tests using pytest
pytest.main(['test_is_even.py'])
228
python
# Function that checks if a number is a power of 2
def is_power_of_two(n):
    return (n & (n - 1)) == 0 and n > 0

# Function that shifts bits in a binary number
def left_shift(number, positions):
    assert is_power_of_two(positions), "Number of positions must be a power of 2"
    return number << positions

# Test cases for the functions
if __name__ == "__main__":
    num = 10
    print(f"Original number: {bin(num)}")
    
    # Shift bits to the left by 2 positions (which is a power of 2)
    shifted_number = left_shift(num, 2)
    print(f"Number shifted left by 2 positions: {bin(shifted_number)}")
    
    try:
        # Shift bits to the left by an incorrect number of positions (not a power of 2)
        num_incorrect = left_shift(num, 3)
        print(f"Number shifted left by 3 positions (which is not a power of 2): {bin(num_incorrect)}")
    except AssertionError as e:
        print(e)
229
python
# Using assert statement
def add(x, y):
    assert type(x) is (int or float), "x should be either integer or float"
    assert type(y) is (int or float), "y should be either integer or float"
    return x + y

try:
    result = add("3", 5)
except AssertionError as e:
    print(e)
else:
    print("Addition Result:", result)

# Using right shift bitwise operator (>>)
def right_shift(number, shifts):
    assert type(number) is int, "number should be an integer"
    assert type(shifts) is int, "shifts should be an integer"
    return number >> shifts

try:
    result = right_shift("5", 2)
except AssertionError as e:
    print(e)
else:
    binary_result = bin(result)[2:].zfill(8)
    print("Right Shift Result (binary):", binary_result)
230
python
def divide(x, y):
    """This function takes two arguments x and y, and returns the quotient of x by y."""
    result = x / y
    assert y != 0, "Error! Division by zero is not allowed."
    return result

num1 = 10
num2 = 2

if num2 == 0:
    print("Invalid argument! Cannot divide by zero.")
else:
    quotient = divide(num1, num2)
    if quotient.is_integer():
        print(f"The quotient of {num1} by {num2} is a integer: {quotient}")
    else:
        print(f"The quotient of {num1} by {num2} is not an integer.")
    
# The assert statement checks if y is zero before performing the division. If it is, then the program raises an AssertionError
# with the provided error message. Otherwise, the divide function calculates and returns the quotient as usual.
231
python
# A simple program to demonstrate the use of assert and 'or' statement
def calc(num1, num2, operator):
    """
    This function performs basic arithmetic operations based on given operator.
    
    Args:
        num1 (int or float): First number
        num2 (int or float): Second number
        operator (str): Operator ('+', '-', '*', '/')

    Returns:
        result: Result of the operation
    """

    # Perform the arithmetic operation based on given operator
    if operator == "+":
        result = num1 + num2
    elif operator == "-":
        result = num1 - num2
    elif operator == "*":
        result = num1 * num2
    elif operator == "/":
        # Use 'or' to handle division by zero error
        if num2 != 0:
            result = num1 / num2
        else:
            print("Error! Division by Zero is not allowed.")
            return None
    else:
        raise ValueError("Invalid Operator")

    # Use assert statement to validate the result
    assert result is not None, "Error! Result cannot be None."
    assert type(result) in [int, float], "Result should be either integer or float."
    
    return result

# Test cases for the function 'calc'
if __name__ == "__main__":

    # Test case 1: Addition
    print("Test Case 1: Addition")
    num1 = 5
    num2 = 3
    operator = "+"
    expected_result = 8
    actual_result = calc(num1, num2, operator)
    assert expected_result == actual_result, f"Expected {expected_result}, got {actual_result} instead."
    
    # Test case 2: Subtraction
    print("Test Case 2: Subtraction")
    num1 = 10
    num2 = 3
    operator = "-"
    expected_result = 7
    actual_result = calc(num1, num2, operator)
    assert expected_result == actual_result, f"Expected {expected_result}, got {actual_result} instead."
    
    # Test case 3: Multiplication
    print("Test Case 3: Multiplication")
    num1 = 5
    num2 = 3
    operator = "*"
    expected_result = 15
    actual_result = calc(num1, num2, operator)
    assert expected_result == actual_result, f"Expected {expected_result}, got {actual_result} instead."
    
    # Test case 4: Division
    print("Test Case 4: Division")
    num1 = 6
    num2 = 3
    operator = "/"
    expected_result = 2.0
    actual_result = calc(num1, num2, operator)
    assert expected_result == actual_result, f"Expected {expected_result}, got {actual_result} instead."
    
    # Test case 5: Division by zero
    print("Test Case 5: Division by Zero")
    num1 = 6
    num2 = 0
    operator = "/"
    calc(num1, num2, operator)  # Expecting an error here
232
python
def calculate_square_root(number):
    """
    Calculates the square root of given number using Babylonian method
    :param number: Number whose square root to be calculated
    :return: The calculated square root of the given number
    """
    if number < 0:
        raise ValueError("Square root of negative number is not defined")

    guess = number / 2.0
    while abs(guess * guess - number) > 0.001:
        guess = (number / guess + guess) / 2.0

    return guess

def test_calculate_square_root():
    """
    Test function to verify if calculate_square_root function is working as expected
    """
    # Test with valid inputs
    assert calculate_square_root(16) == 4.0, "Expected 4.0 but got {}".format(calculate_square_root(16))
    assert calculate_square_root(25) == 5.0, "Expected 5.0 but got {}".format(calculate_square_root(25))

    # Test with negative input
    with assert raising(ValueError):
        calculate_square_root(-1)

if __name__ == "__main__":
    test_calculate_square_root()
233
python
# List of fruits
fruits = ['apple', 'banana', 'cherry', 'orange']

# Function to check if a fruit is in the list
def check_fruit_in_list(fruit):
    assert type(fruit) == str, "Fruit must be a string"
    return fruit in fruits

try:
    # Testing with valid inputs
    print("Apple is in the list: ", check_fruit_in_list('apple'))
    print("Banana is in the list: ", check_fruit_in_list('banana'))

    # Testing with invalid inputs
    print("Mango is in the list: ", check_fruit_in_list('mango')) # This will raise an AssertionError
except AssertionError as e:
    print(f"Error: {e}")
234
python
# Function to check if two lists are equal
def are_lists_equal(list1, list2):
    """
    This function checks if two given lists are equal or not.
    """
    if list1 is list2:  # Check if both lists are the same object (identity)
        assert "Both lists are the same object."  # If so, include an assertion message for clarity
        return True
    elif list1 == list2:  # Else, check if they have the same elements in the same order (equality)
        assert "Both lists have the same elements in the same order.", \
               f"List1: {list1}, List2: {list2}"
        return True
    else:
        print("The given lists are not equal.")
        return False

# Testing the function
print(are_lists_equal([1, 2, 3], [1, 2, 3]))  # Should pass
print(are_lists_equal([1, 2, 3], [1, 2, 4]))  # Should print a message and fail
print(are_lists_equal([[1, 2], 3], [[1, 2], 3]))  # Should pass
print(are_lists_equal([[1, 2], 3], [[1, 3], 3]))  # Should print a message and fail
print(are_lists_equal([[1, 2], 3], [[1, 2], [3]]))  # Should print a message and fail
235
python
# Function definition with assert statement
def calculate_square_root(number):
    """
    Calculate the square root of a given number.
    :param number: A non-negative real number.
    :raises AssertionError: If the number is negative.
    """
    assert number >= 0, "The number must be non-negative"
    result = number ** 0.5
    return result

# Function to test the calculate_square_root function
def test_calculate_square_root():
    numbers = [4, -1, 9, 0]
    for number in numbers:
        square_root = calculate_square_root(number)
        print(f"Square root of {number} is {square_root}")

# Test the test_calculate_square_root function
if __name__ == "__main__":
    test_calculate_square_root()
236
python
def calculate_sum(num1, num2):
    """
    This function takes two numbers as arguments and returns their sum.
    """
    total = num1 + num2
    return total

# Define a tuple with two values
numbers = (3, 4)

# Use assert to check if the length of the input tuple is exactly 2
assert len(numbers) == 2, "Input should be a tuple with exactly 2 elements"

# Extract the numbers from the tuple using tuple unpacking
num1, num2 = numbers

sum_result = calculate_sum(num1, num2)

# Use assert to check if the function returned the expected result
assert sum_result == 7, "Function should return the sum of input numbers"

print("The sum of", num1, "and", num2, "is:", sum_result)
237
python
# Define a function that calculates the square root of a number using the Newton-Raphson method
def sqrt(number):
    guess = number / 2.0
    while abs(guess * guess - number) > 0.01:
        guess = (guess + number / guess) / 2.0
    return guess

# Use assert statements to test the input and output of the sqrt function
assert number >= 0, "Input must be non-negative"
result = sqrt(4.0)
assert abs(result * result - 4.0) < 0.01, "sqrt(4.0) should be 2.0, not {}".format(result)
238
python
# Function to check if all numbers in a tuple are positive
def all_positive(numbers: tuple) -> None:
    for num in numbers:
        assert num > 0, f"Negative number found: {num}"
        # Your code here. If all numbers are positive, this function does nothing.
        print(f"Number: {num} is positive.")

# Test the function with positive numbers
all_positive((1, 2, 3, 4))

# Test the function with negative numbers
try:
    all_positive((-1, 2, 3, 4))
except AssertionError as e:
    print("Error:", e)
239
python
def sum_list(numbers):
    # Assert if input is a list
    assert isinstance(numbers, list), "Input should be a list"

    # Calculate the sum of elements in the list
    total = sum(numbers)

    # Use an assert statement to check if total is greater than or equal to zero
    assert total >= 0, f"Sum of list elements should not be negative. Sum: {total}"

    return total

# Test cases
print("Test case 1:", sum_list([1, 2, 3]))
print("Test case 2:", sum_list([-1, -2, -3])) # This test should raise an AssertionError
print("Test case 3:", sum_list([0, 0, 0]))
print("Test case 4:", sum_list([4.5, 6.2, 7.8])) # This test should raise a TypeError (as lists don't support float elements)
240
python
# A simple function to validate if a given key exists in the dictionary and its value is a number.
def valid_input(data, expected_key, expected_value):
    assert data is not None, "Error: Data is None"
    assert isinstance(data, dict), "Error: Data is not a dictionary"
    assert expected_key in data, f"Error: Key '{expected_key}' not found in the data."
    assert isinstance(data[expected_key], (int, float)), f"Error: Expected value of key '{expected_key}' to be a number."
    print(f"Key '{expected_key}' has value {data[expected_key]} which is of type {type(data[expected_key])}.")
    
# Sample data
my_data = {"name": "John", "age": 30, "city": "New York"}

# Test the function with given key and expected value in the dictionary
valid_input(my_data, "age", 35)

# Test the function with key that doesn't exist in the dictionary
try:
    valid_input(my_data, "color", "red")
except AssertionError as e:
    print("Assertion failed:", e)
241
python
def calculate(number):
    # Assertion: number must be greater than zero
    assert number > 0, "Error: Number must be positive"
    
    # Calculate the square and cube of the given number
    square = number * number
    cube = number * number * number

    print(f"The square of {number} is {square}")
    print(f"The cube of {number} is {cube}")

# Test the calculate function with positive and non-positive numbers
calculate(3)  # Output: The square of 3 is 9
             #        The cube of 3 is 27

try:
    calculate(-2)  # Output: Error: Number must be positive
except AssertionError as error:
    print(error)
242
python
def divide(x, y):
    assert y != 0, "Error: Division by zero is not allowed"
    return x / y

try:
    result = divide(10, 5)
except ZeroDivisionError as e:
    print("Caught expected ZeroDivisionError:", e)
else:
    print("Result:", result)
243
python
import asyncio
import aiohttp

async def download(url):
    """Download function that uses async and await"""
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            content = await response.text()
            print(f'Downloaded {url} with status code: {response.status}')
            return content

async def main():
    """Main function for the script"""
    urls = ['https://example.com', 'https://www.example.org', 'https://www.example.net']
    tasks = [download(url) for url in urls]
    await asyncio.gather(*tasks)

if __name__ == '__main__':
    asyncio.run(main())
244
python
import asyncio

async def count_up_to(n):
    """An asynchronous coroutine that counts up to n."""
    i = 0
    while i < n:
        await asyncio.sleep(0)
        yield i
        i += 1

async def main():
    generator = count_up_to(5)
    async with aiocontext manager() as ctx:
        async for value in generator:
            print(f"{value}")

if __name__ == "__main__":
    asyncio.run(main())
245
python
import asyncio

class AsyncServerClass:
    def __init__(self, host: str, port: int):
        self.host = host
        self.port = port
        self.server = None

    async def start_server(self):
        print(f"Starting server on {self.host}:{self.port}")
        self.server = await asyncio.start_server(self._handle_client, self.host, self.port)
        print("Server started")

    async def _handle_client(self, reader: asyncio.StreamReader, writer: asyncio.StreamWriter):
        data = ""
        while True:
            new_data = await reader.readline()
            data += new_data.decode()
            print(f"Received message: {data}")
            await writer.write(data.encode())
            await writer.drain()
            if not new_data:
                break
        self.server.close_reader(writer)

async def main():
    server = AsyncServerClass("localhost", 12345)
    await server.start_server()
    await server.server.serve_forever()

if __name__ == "__main__":
    asyncio.run(main())
246
python
import asyncio

async def long_running_task(num):
    print(f"Running task {num}")
    await asyncio.sleep(num)
    return num * 2

async def main():
    tasks = [long_running_task(i) for i in range(3)]

    results = []
    async for result in asyncio.as_future(await asyncio.gather(*tasks)):
        results.append(result.result())

    print("Results:", results)

if __name__ == "__main__":
    asyncio.run(main())
247
python
import asyncio

async def handle_client(reader, writer):
    data = ""
    while True:
        line = await reader.readline()
        if not line:
            break
        data += line.decode('utf-8').rstrip()
        print("Received data:", data)
        await writer.write(b'Received Data\n')
        await writer.drain()
    print("Client disconnected")
    await writer.close()

async def asynchronous_server(host: str, port: int):
    server = await asyncio.start_server(lambda r, w: handle_client(r, w), host, port)
    print(f"Serving on {host}:{port}")
    async with server:
        await asyncio.serve_forever(server)

if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    try:
        await asynchronous_server("127.0.0.1", 8888)
    finally:
        loop.run_until_complete(loop.shutdown_asyncgens())
        loop.close()
248
python
import asyncio

class FibGenerator:
    def __init__(self, limit):
        self.limit = limit
        self.a, self.b = 0, 1

    async def fib_gen(self):
        while True:
            value = await asyncio.sleep(0.01)  # Sleep for a small duration to let other tasks run
            fib = self.a
            self.a, self.b = self.b, self.a + self.b
            yield from [fib] if fib <= self.limit else None

async def main():
    gen = FibGenerator(50)
    async with gen.fib_gen() as fib_generator:
        fibs = await asyncio.gather(*[next(fib_generator) for _ in range(10)])
        print(fibs)

if __name__ == "__main__":
    asyncio.run(main())
249
python
def check_number(num):
    if num > 0:
        print("Number is positive")
    elif num < 0:
        print("Number is negative")
    else:
        print("Number is zero")
250
python
import asyncio
import aiohttp
import sys

async def download_file(session, url):
    try:
        async with session.get(url) as response:
            data = await response.read()
            print(f"Downloaded {url} successfully")
            return data
    except Exception as e:
        print(f"Error while downloading {url}: {e}")
        await asyncio.sleep(1)  # add a delay before retrying
        if url not in downloaded:  # avoid infinite loops
            yield from download_file(session, url)

downloaded = set()

async def main():
    async with aiohttp.ClientSession() as session:
        tasks = [download_file(session, "http://example1.com/file1.txt")]
        tasks += [download_file(session, "http://example2.com/file2.txt")]
        tasks += [download_file(session, "http://example3.com/file3.txt")]

        await asyncio.gather(*tasks)

        print("All files downloaded successfully")
        for url in ["http://example4.com/non-existent.txt", "http://example5.com/anotherfile.txt"]:
            yield from download_file(session, url)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt as e:
        print("Interrupted, cleaning up...")
        sys.exit(0)
251
python
import asyncio
import aiohttp
import json

async def fetch_url(session, url):
    try:
        async with session.get(url) as response:
            if response.status != 200:
                raise Exception(f"Error: URL returned status code {response.status}")
            return await response.json()
    except aiohttp.ClientError as e:
        print(f"Exception in fetch_url for url '{url}': {e}")
        return None

async def main():
    async with aiohttp.ClientSession() as session:
        tasks = [fetch_url(session, "http://example1.com"), fetch_url(session, "http://example2.com")]
        results = await asyncio.gather(*tasks)

        print("Results:")
        for i, result in enumerate(results):
            if result is not None:
                print(f"URL {i+1}: {json.dumps(result)}")

if __name__ == "__main__":
    asyncio.run(main())
252
python
import asyncio
import aiohttp

async def send_request(url):
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                data = await response.text()
                print(f'Response from {url}:')
                print(data)
    except Exception as e:
        print(f'Error: {e}')
        await asyncio.sleep(1)  # wait for a second before exiting the coroutine

@asyncio.coroutine
def main():
    urls = ['http://example.com', 'http://non-existing-url']
    tasks = [asyncio.ensure_future(send_request(url)) for url in urls]
    await asyncio.gather(*tasks)

if __name__ == "__main__":
    asyncio.run(main())
253
python
import asyncio
import aiohttp

async def download(url):
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            content = await response.text()
            print(f"Downloaded {url}: {len(content)} bytes")
            return content

async def main():
    urls = [
        "https://example.com",
        "https://www.google.com",
        "https://www.github.com",
    ]

    tasks = []
    for url in urls:
        tasks.append(asyncio.create_task(download(url)))

    await asyncio.gather(*tasks)

if __name__ == "__main__":
    asyncio.run(main())
254
python
import asyncio
import aiohttp

async def fetch(url):
    """Asynchronously fetches a webpage."""
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            data = await response.text()
            return data

async def scrape_websites(urls):
    """Scrapes multiple websites asynchronously."""
    tasks = [asyncio.create_task(fetch(url)) for url in urls]
    results = await asyncio.gather(*tasks)
    return dict(zip(urls, results))

if __name__ == "__main__":
    urls = ["https://www.google.com", "https://www.github.com"]
    loop = asyncio.get_event_loop()
    result = loop.run_until_complete(scrape_websites(urls))
    print("Results:")
    for url, content in result.items():
        print(f"{url}: {len(content)} bytes")
255
python
import asyncio

# This function is marked as async, meaning it can yield control to other tasks
async def print_numbers():
    for i in range(5):
        print(i)
        await asyncio.sleep(1)

# The main function is marked as async as well and uses the run_until_complete() method to start the coroutine
async def main():
    await print_numbers()

if __name__ == "__main__":
    asyncio.run(main())
256
python
import asyncio

async def task_1():
    print("Task 1 started")
    await asyncio.sleep(1)
    print("Task 1 completed")
    return "Result from Task 1"

async def task_2():
    print("Task 2 started")
    await asyncio.sleep(2)
    print("Task 2 completed")
    return "Result from Task 2"

async def main():
    task_1_result = await task_1()
    print(f"Task 1 result: {task_1_result}")

    if task_1_result == "Expected Result":
        print("If condition is met, proceeding to Task 2")
        task_2_result = await task_2()
        print(f"Task 2 result: {task_2_result}")
    else:
        print("If condition is not met, stopping the process")

if __name__ == "__main__":
    asyncio.run(main())
257
python
import asyncio

# This is the other module, let's assume it's called 'my_module.py'
# and is located in the same directory as this file
async def fetch_data():
    # Import the my_function function from 'my_module'
    import my_module

    # Call the my_function asynchronously
    result = await asyncio.get_event_loop().run_in_executor(None, my_module.my_function)
    
    print("Result: ", result)

if __name__ == "__main__":
    asyncio.run(fetch_data())
258
python
import asyncio
import aiohttp

async def download(session, url):
    async with session.get(url) as response:
        data = await response.text()
        return data

async def main():
    urls = ['https://example.com', 'https://anotherexample.com']
    async with aiohttp.ClientSession() as session:
        tasks = [download(session, url) for url in urls]
        responses = await asyncio.gather(*tasks)

        for response, url in zip(responses, urls):
            print(f'URL: {url}, Data length: {len(response)}')

if __name__ == '__main__':
    asyncio.run(main())
259
python
import asyncio
import aiohttp

async def fetch(url):
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            print(f"Fetched {url} with status code: {response.status}")

if __name__ == "__main__":
    urls = [
        "https://www.google.com",
        "https://www.github.com",
        "https://www.example.com"
    ]

    tasks = [asyncio.create_task(fetch(url)) for url in urls]

    await asyncio.gather(*tasks)
260
python
import asyncio

# Define an asynchronous coroutine
async def fetch(url):
    # Simulate a delay with 'asyncio.sleep'
    await asyncio.sleep(1)

    # Use a lambda function to define a callback function for the http request
    get = lambda: asyncio.get_event_loop().run_in_executor(None, print, f"Fetched data from {url}:")

    # Send an HTTP request using aiohttp (not included in standard library, install it via pip)
    # For simplicity, we don't handle exceptions here
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            data = await response.text()

    get()  # Execute the lambda function with the fetched data

# Run multiple tasks concurrently using 'asyncio.gather'
async def main():
    tasks = [fetch("http://example1.com"), fetch("http://example2.com")]
    await asyncio.gather(*tasks)

if __name__ == "__main__":
    asyncio.run(main())
261
python
import asyncio

# Nested function definition with nonlocal variable
def outer_function(initial_value):
    async def inner_function():
        # Use nonlocal keyword to access and modify the value of 'x' from the enclosing scope
        nonlocal x
        x += 1
        print(f"Inner function: current value of x is {x}")
        await asyncio.sleep(1)
        return x * 2
        
    x = initial_value
    result = await inner_function()
    print(f"Outer function: final value of x is {x} and result is {result}")
    return result

# Call the outer function with an initial value
async def main():
    result = await outer_function(5)
    print("The result of outer_function is:", result)

if __name__ == "__main__":
    asyncio.run(main())
262
python
import asyncio

async def task_a():
    print("Task A started.")
    await asyncio.sleep(1)
    print("Task A completed.")

async def task_b():
    try:
        print("Task B started.")
        await asyncio.sleep(0.5)
        raise Exception("Task B failed.")
    except Exception as e:
        print(f"Error in Task B: {e}")
        print("Handling exception in Task B...")
    finally:
        print("Task B completed with exception handling.")

async def task_c():
    print("Task C started.")
    await asyncio.sleep(2)
    print("Task C completed.")

async def main():
    print("Main function started.")
    await asyncio.gather(task_a(), task_b(), task_c())
    print("All tasks completed.")

if __name__ == "__main__":
    asyncio.run(main())
263
python
import asyncio
import aiohttp

async def fetch(session, url):
    async with session.get(url) as response:
        if response.status in (200, 304):
            return await response.text()
        else:
            raise Exception('Request failed: ' + response.status_text)

async def main():
    async with aiohttp.ClientSession() as session:
        urls = ['https://example.com', 'https://anotherexample.com']
        tasks = [asyncio.create_task(fetch(session, url)) for url in urls]
        response1 = await tasks[0]
        response2 = await tasks[1] or ''

        print('Response from first URL:')
        print(response1)
        print('Response from second URL (or empty string if failed):')
        print(response2)

if __name__ == '__main__':
    asyncio.run(main())
264
python
import asyncio
import aiohttp

async def get_html(url):
    """Simple coroutine to fetch HTML content of given URL."""
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            return await response.text()

async def main():
    url = 'https://example.com'  # Replace with the desired URL
    html_content = await get_html(url)

    print('Content of the page:')
    print(html_content)

if __name__ == '__main__':
    asyncio.run(main())
265
python
import asyncio

async def fetch_data(url):
    try:
        response = await asyncio.get_event_loop().run_in_executor(None, urllib.request.urlopen, url)
        data = await response.read()
    except urllib.error.URLError as e:
        print("Error fetching URL:", e)
        raise

async def main():
    url = "http://example.com"  # Replace this with a valid URL
    task = asyncio.create_task(fetch_data(url))

    result = await task
    print("Fetched data:", result.decode())

if __name__ == "__main__":
    asyncio.run(main())
266
python
import asyncio
import aiohttp

async def fetch_data(url):
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            data = await response.text()
            return data

async def main():
    urls = [
        "https://example.com",
        "https://another-example.com"
    ]

    tasks = [asyncio.create_task(fetch_data(url)) for url in urls]

    results = await asyncio.gather(*tasks)

    print("Results:")
    for result, url in zip(results, urls):
        print(f"URL '{url}': {result}")

if __name__ == "__main__":
    asyncio.run(main())
267
python
import asyncio
import aiohttp

async def fetch(url):
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status != 200:
                    raise Exception(f"Error: Server returned status code {response.status}")
                data = await response.text()
                return data
    except Exception as e:
        print(f"An error occurred: {e}")
        return None

async def main():
    urls = ["http://example.com", "http://nonexistent.com"]
    tasks = [asyncio.create_task(fetch(url)) for url in urls]
    results = await asyncio.gather(*tasks)

    for i, result in enumerate(results):
        print(f"URL #{i+1} result: {result}")

if __name__ == "__main__":
    asyncio.run(main())
268
python
import asyncio
import time

async def print_numbers():
    number = 0
    while True:
        await asyncio.sleep(1)
        print(number)
        number += 1

if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    task = loop.create_task(print_numbers())
    loop.run_until_complete(task)
269
python
import asyncio
import aiohttp

async def fetch(url):
    """An asynchronous function to fetch web content."""
    async with aiohttp.Client() as client:
        async with client.get(url) as response:
            content = await response.text()
            return content

async def main():
    """The entry point of the script."""
    urls = [
        "https://example.com",
        "https://another-example.com",
        "https://third-example.com",
    ]

    tasks = []

    for url in urls:
        task = asyncio.create_task(fetch(url))
        tasks.append(task)

    responses = await asyncio.gather(*tasks)

    for idx, response in enumerate(responses):
        print(f"Response from {urls[idx]}:\n{response}")

if __name__ == "__main__":
    asyncio.run(main())
270
python
import asyncio

class FibGenerator:
    def __init__(self):
        self.a, self.b = 0, 1

    async def fib(self):
        while True:
            yield self.a
            self.a, self.b = self.b, self.a + self.b

@asyncio.coroutine
def main():
    generator = FibGenerator()
    fib_generator = asyncio.as_future(generator.fib())

    print("First 10 Fibonacci numbers:")
    for i in range(10):
        number = yield from fib_generator
        print(number)

if __name__ == "__main__":
    asyncio.run(main())
271
python
import asyncio

async def greet(name):
    await asyncio.sleep(1)
    print(f"Hello, {name}!")

@asyncio.coroutine
def main():
    tasks = [greet("Alice"), greet("Bob")]
    await asyncio.gather(*tasks)

if __name__ == "__main__":
    asyncio.run(main())
272
python
import asyncio
import aiohttp

async def fetch(session, url):
    async with session.get(url) as response:
        if response.status == 200:
            return await response.text()
        else:
            print(f'Error: {response.status} : {await response.reason()}')
            return None

async def main():
    async with aiohttp.ClientSession() as session:
        tasks = [
            fetch(session, 'https://www.example1.com'),
            fetch(session, 'https://www.example2.com'),
            fetch(session, 'https://www.example3.com')
        ]

        results = await asyncio.gather(*tasks)
        
        print('Results:')
        for i, result in enumerate(results):
            if result is not None:
                print(f'{i+1}: {result}')
            else:
                print(f'{i+1}: Failed')

if __name__ == '__main__':
    asyncio.run(main())
273
python
import asyncio

async def task(number):
    print(f"Starting task {number}")
    await asyncio.sleep(1)
    print(f"Task {number} completed")
    return number * 2

async def main():
    tasks = [asyncio.create_task(task(i)) for i in range(3)]
    results = await asyncio.gather(*tasks)
    print("Results: ", results)
    print(all(result > 0 for result in results))

if __name__ == "__main__":
    asyncio.run(main())
274
python
import asyncio

async def print_ascii(text):
    """Prints ASCII art synchronously."""
    print("\n" + text)

async def main():
    """Asynchronous main function."""
    ascii_art = """
   ______
  /      \
 /  O    O \
/______-\_\
    |    |
    |    |
    |    |
   _|__|_ """

    await asyncio.sleep(1)
    await print_ascii(ascii_art)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        pass
275
python
import asyncio
import aiofiles

async def read_binary_file(file_path):
    async with aiofiles.open(file_path, 'rb') as file:
        data = await file.readall()
        return data

async def main():
    file1_path = "path/to/first_file.bin"
    file2_path = "path/to/second_file.bin"

    tasks = [
        read_binary_file(file1_path),
        read_binary_file(file2_path)
    ]

    results = await asyncio.gather(*tasks)

    print("File 1 data:")
    print(results[0])
    print("File 2 data:")
    print(results[1])

if __name__ == "__main__":
    asyncio.run(main())
276
python
import asyncio
import aiohttp

async def fetch(session, url):
    async with session.get(url) as response:
        return await response.text()

async def main():
    async with aiohttp.ClientSession() as session:
        tasks = [fetch(session, "https://example.com/1"), fetch(session, "https://example.com/2")]
        results = await asyncio.gather(*tasks)

        print("Results:")
        for i, result in enumerate(results):
            print(f"Result {i + 1}: {result}")

if __name__ == "__main__":
    asyncio.run(main())
277
python
import asyncio

class EchoClient:
    def __init__(self, host, port):
        self.host = host
        self.port = port
        self.reader = bytearray()

    async def connect(self):
        reader, writer = await asyncio.open_connection(self.host, self.port)
        self.writer = writer
        return reader

    async def send(self, message):
        self.writer.write(message.encode())
        await self.writer.drain()

    async def receive(self):
        while True:
            data = await self.reader.read(1)
            if not data:
                break
            self.reader.append(data)
            print(f'Received byte: {data}')

    async def run(self):
        reader = await self.connect()
        await self.send(b'Hello, server!')
        await self.receive()
        await self.writer.close()

if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    client = EchoClient('localhost', 12345)
    try:
        await loop.run_until_complete(client.run())
    finally:
        loop.close()
278
python
import asyncio
import aiohttp

async def fetch(url):
    """Asynchronously fetches data from given URL."""

    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            data = await response.read()
            return data

async def main():
    """Main function that sends an HTTP request and processes the response."""

    url = "http://example.com"
    raw_data = await fetch(url)
    print("Received data (raw bytes):\n{}".format(raw_data))

    # Processing the response content type to decode the bytes
    if 'text/html' in response.headers['content-type']:
        html = raw_data.decode('utf-8')
        print("Received data (decoded HTML):\n{}".format(html))

if __name__ == "__main__":
    asyncio.run(main())
279
python
import asyncio

# Callable coroutine for calculating the factorial of a given number
async def factorial(n):
    check = asyncio.get_event_loop().create_task(check_input(n))
    result = await check
    if result is None:
        raise ValueError("Factorial is not defined for negative numbers")
    return await calculate_factorial(n)

async def check_input(number):
    if number < 0:
        return None
    else:
        return number

async def calculate_factorial(number):
    result = 1
    for i in range(1, number + 1):
        result *= i
        await asyncio.sleep(0)
    return result

# Function to run the code
async def main():
    number = int(input("Enter a non-negative integer: "))
    try:
        result = await factorial(number)
        print(f"The factorial of {number} is {result}")
    except ValueError as e:
        print(e)

if __name__ == "__main__":
    asyncio.run(main())
280
python
import asyncio

async def print_numbers():
    for i in range(10):
        await asyncio.sleep(1)
        print(chr(i + 48))

async def main():
    await print_numbers()

if __name__ == "__main__":
    asyncio.run(main())
281
python
import asyncio

class MyClass:
    # Define a class variable
    _counter = 0
    
    @classmethod
    @asyncio.coroutine
    def from_counter(cls, start=0):
        """Create a new instance of the class with an optional starting counter value."""
        instance = MyClass()
        instance._counter = start
        yield from asyncio.sleep(1)  # Wait for a second before returning
        return instance
    
    @asyncio.coroutine
    def increment_counter(self):
        """Increment the counter by one."""
        self._counter += 1
        print(f"Counter is now: {self._counter}")
        yield from asyncio.sleep(0.1)

async def main():
    # Create two instances of the class, with different starting counters
    instance1 = await MyClass.from_counter()
    instance2 = await MyClass.from_counter(3)
    
    # Increment each counter five times and print the results
    for _ in range(5):
        await instance1.increment_counter()
        await instance2.increment_counter()
        
asyncio.run(main())
282
python
import re
import asyncio

# Using compile with re
pattern = re.compile(r'\d+')
def find_numbers(text):
    return pattern.findall(text)

print(find_numbers("There are 10 apples and 5 oranges."))

# Using asyncio to perform a concurrent I/O operation
async def read_file(filename):
 async with open(filename, 'r') as f:
 return await f.read()

async def main():
 filenames = ['file1.txt', 'file2.txt']
 tasks = [asyncio.create_task(read_file(filename)) for filename in filenames]
 contents = await asyncio.gather(*tasks)
 for i, content in enumerate(contents):
 print(f'File {i+1} contains:\n{content}')

if __name__ == '__main__':
 asyncio.run(main())
283
python
import asyncio

class ComplexNumber:
    def __init__(self, real=0.0, imag=0.0):
        self.real = real
        self.imag = imag

    def __add__(self, other):
        return ComplexNumber(
            self.real + other.real,
            self.imag + other.imag
        )

async def get_complex_number():
    try:
        real = float(input("Enter the real part: "))
        imag = float(input("Enter the imaginary part: "))
        return ComplexNumber(real, imag)
    except ValueError:
        print("Invalid input. Please enter valid numbers.")
        await asyncio.sleep(2)
        return get_complex_number()

async def main():
    num1 = await get_complex_number()
    num2 = await get_complex_number()

    complex_sum = num1 + num2
    print(f"The sum of {num1} and {num2} is {complex_sum}")

if __name__ == "__main__":
    asyncio.run(main())
284
python
import asyncio

class SlowAPI:
    def __init__(self, delay):
        self._delay = delay

    async def call(self):
        await asyncio.sleep(self._delay)
        return 'Response'

async def main():
    apis = [SlowAPI(i) for i in range(5)]
    tasks = [api.call() for api in apis]
    responses = await asyncio.gather(*tasks)
    for response, api in zip(responses, apis):
        print(f'API {api._delay} took {len(str(response))} seconds to respond with: {response}')

if __name__ == '__main__':
    asyncio.run(main())
285
python
import asyncio

class EchoServer:
    def __init__(self):
        self.clients = {}

    async def handle_client(self, reader, writer):
        print("New connection from the client")
        self.clients[writer] = writer
        while True:
            data = await reader.readline()
            if not data:
                del self.clients[writer]
                break
            print(f"Received message from {writer}: {data.decode()}")
            for client in self.clients.values():
                if client != writer:
                    await client.write(data)

async def main():
    server = EchoServer()
    server_socket = await asyncio.start_server("127.0.0.1", 12345)
    print("Serving on", server_socket.sockets[0].getsockname())

    async with server_socket:
        await asyncio.gather(*[server.handle_client(r, w) for r, w in server_socket])

if __name__ == "__main__":
    asyncio.run(main())
286
python
import asyncio
import os

async def get_files(directories):
    tasks = [asyncio.create_task(get_files_in_dir(d)) for d in directories]
    file_lists = await asyncio.gather(*tasks)
    return file_lists

async def get_files_in_dir(directory):
    async with contextlib.as_task(os.scandir(directory)):
        files = [entry.name for entry in self if not entry.is_dir()]
        return files

if __name__ == "__main__":
    directories = ["/path/to/first/directory", "/path/to/second/directory"]
    try:
        file_lists = asyncio.run(get_files(directories)).result()
        print("Files in provided directories:")
        for file_list in file_lists:
            print("\nDirectory: ", os.path.abspath("/".join(directory.split("/")[-2:])))
            print("Files: ", file_list)
    except KeyboardInterrupt:
        asyncio.run(get_files(directories)).shutdown_now()
287
python
import asyncio

async def divide_and_print(num):
    quotient, remainder = divmod(num, 2)
    print(f"{num} divided by 2 is {quotient} with a remainder of {remainder}")
    return quotient, remainder

@asyncio.coroutine
def main():
    tasks = [asyncio.ensure_future(divide_and_print(i)) for i in range(5, 0, -1)]
    await asyncio.gather(*tasks)

if __name__ == "__main__":
    asyncio.run(main())
288
python
import asyncio

# Define a coroutine that performs some I/O-bound task and yields a result.
async def mock_task(index):
    await asyncio.sleep(index)  # Simulate I/O operation taking index * sec seconds.
    return index * 2

# Create an asynchronous enumerator using async iterators and enumerate.
async def async_enumerate(iterable):
    async for index, item in enumerate(iterable, start=1):
        yield index, item

# Run the tasks concurrently in a single event loop.
async def main():
    tasks = [mock_task(i) for i in range(5)]
    enumerator = async_enumerate(tasks)

    results = await asyncio.gather(*enumerator)

    # Print the index and result of each task as it completes.
    for index, result in results:
        print(f"Task {index} completed with result: {result}")

# Run the main function in an event loop.
if __name__ == "__main__":
    asyncio.run(main())
289
python
import asyncio

class EchoServer:
    async def __aenter__(self):
        self.reader, self.writer = await asyncio.open_connection('localhost', 1234)
        return self
    
    async def echo(self, message):
        self.writer.write(message.encode())
        await self.writer.drain()
        response = ''
        data = []
        while True:
            chunk = await self.reader.read(1)
            if not chunk:
                break
            data.append(chunk)
            response += chunk.decode()
        return response.strip()
    
    async def __aexit__(self, exc_type, exc, tb):
        self.writer.close()
        await self.writer.wait_closed()

async def main():
    with EchoServer() as server:
        message = 'Hello World!'
        response = await server.echo(message)
        print(f'Received: {response}')

if __name__ == '__main__':
    asyncio.run(main())
290
python
import asyncio

# Define a coroutine that prints a message with a delay
async def print_message(message):
    print(message)
    await asyncio.sleep(1)

# Create a Task for each message to print
tasks = [asyncio.create_task(print_message(msg)) for msg in ['Hello', 'World']]

# Run the event loop to wait for all tasks to complete
asyncio.run(asyncio.wait(tasks))
291
python
def is_prime(n):
    """Return True if n is a prime number."""
    if n <= 1:
        return False
    if n % 2 == 0 or n % 3 == 0:
        return n in (2, 3)
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True
292
python
import asyncio
import math

async def sqrt_calculator(number):
    result = math.sqrt(number)
    await asyncio.sleep(0.01)  # Simulate some computation time
    print(f"Square root of {number}: {result}")

async def main():
    tasks = [
        sqrt_calculator(2),
        sqrt_calculator(3),
        sqroot_calculator(4)
    ]

    await asyncio.gather(*tasks)

if __name__ == "__main__":
    asyncio.run(main())
293
python
import asyncio

# Define a coroutine that prints a greeting message asynchronously
async def print_greeting(name):
    await asyncio.sleep(1)  # Simulate some work
    print(f"Hello, {name}!")

# Create a list of names and an event to signal the end of coroutines
names = ["Alice", "Bob", "Charlie"]
done_event = asyncio.Event()

# Create a task for each name using create_task() method
tasks = [asyncio.create_task(print_greeting(name)) for name in names]

# Wait for all tasks to complete using wait() method
await asyncio.gather(*tasks)
await done_event.wait()

# Print a message when all tasks are completed
print("All greetings sent!")
294
python
import asyncio

# Define a frozenset of tasks
tasks = frozenset([1, 2, 3])

async def task(number):
    print(f"Task {number} started")
    await asyncio.sleep(1)
    print(f"Task {number} completed")

@asyncio.coroutine
async def main():
    tasks_list = [task(num) for num in tasks]
    await asyncio.wait(tasks_list)

if __name__ == "__main__":
    asyncio.run(main())
295
python
import asyncio

class MyClass:
    def __init__(self, value):
        self.value = value

async def my_coroutine(obj):
    print("Object type:", type(obj))
    print("Value:", getattr(obj, "value", "Default value"))

if __name__ == "__main__":
    data = MyClass("Hello")
    await asyncio.run(my_coroutine(data))
296
python
import asyncio

# Define a global variable
counter = 0

async def increment_counter():
 global counter
 await asyncio.sleep(1) # Sleep for 1 second to simulate some work
 counter += 1
 print(f"Counter incremented to {counter}")

async def main():
 tasks = []
 for i in range(5):
 tasks.append(asyncio.create_task(increment_counter()))
 await asyncio.gather(*tasks)

if __name__ == "__main__":
 asyncio.run(main())
297
python
import asyncio
import aiohttp

async def fetch(url):
 title = ""
 async with aiohttp.Client() as client:
 response = await client.get(url)
 if response.status in [200, 302]:
 html = await response.text()
 title = hasattr(html.split("<title>", 1)[1].split("</title>", 1), 'text')[0] if len(html.split("<title>")) > 1 else ""
 return title
 else:
 print(f"Error fetching URL: {url} - status code: {response.status}")
 return None

async def main():
 urls = ["http://example.com", "http://anotherexample.com"]
 tasks = [asyncio.create_task(fetch(url)) for url in urls]
 results = await asyncio.gather(*tasks)

 print("\nWebsite titles:")
 for index, title in enumerate(results):
 if title is not None:
 print(f"{index + 1}. {title}")
 else:
 print(f"{index + 1}. Error fetching title from URL.")

if __name__ == "__main__":
 asyncio.run(main())
298
python
import asyncio
import aiohttp

async def fetch(url):
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            data = await response.text()
            return data

async def main():
    urls = ['https://example.com', 'https://example.org']
    tasks = [fetch(u) for u in urls]
    results = await asyncio.gather(*tasks)

    print('Results:')
    for i, r in enumerate(results):
        print(f'URL {i+1}: {r}')

if __name__ == '__main__':
    asyncio.run(main())
299
python
import asyncio
import aiohttp

async def fetch(url):
    """Asynchronously fetch URL."""
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            return await response.text()

async def main():
    """Fetch the content of multiple URLs concurrently."""
    urls = [
        "https://example.com",
        "https://another-example.com",
        "https://yet-another-example.com"
    ]

    tasks = []
    for url in urls:
        task = asyncio.create_task(fetch(url))
        tasks.append(task)

    responses = await asyncio.gather(*tasks)

    print("Responses:")
    for response, url in zip(responses, urls):
        print(f"URL: {url}\nResponse: {response}\n------------------------")

if __name__ == "__main__":
    asyncio.run(main())
300
python
import asyncio

async def convert_to_hex(number):
    """ Convert decimal number to hexadecimal asynchronously """
    result = hex(number)
    return result[2:]  # Remove the '0x' prefix from the result

numbers = [170, 255, 33, 1024]

tasks = [convert_to_hex(number) for number in numbers]

async def main():
    hex_results = await asyncio.gather(*tasks)
    print("Decimal numbers and their hexadecimal representations:")
    for decimal, hex_value in zip(numbers, hex_results):
        print(f"{decimal}: {hex_value}")

if __name__ == "__main__":
    asyncio.run(main())
301
python
import asyncio
import threading

class Counter:
    def __init__(self, start=0):
        self._value = start

    async def increment(self):
        """Increment the counter's value."""
        self._value += 1
        print(f"Thread-{threading.current_thread().name}: Incremented the counter to {self._value}")

async def main():
    counter = Counter()

    # Create and run tasks that will increment the counter
    tasks = [asyncio.create_task(counter.increment()) for _ in range(5)]

    await asyncio.gather(*tasks)

if __name__ == "__main__":
    threading.stack_size(1024)  # Increase the stack size for threads to avoid a recursion error
    try:
        asyncio.run(main())
    finally:
        asyncio.get_event_loop().run_until_complete(asyncio.shutdown(asyncio.get_event_loop()))
302
python
import asyncio
import aiofiles

async def read_file(file_path):
    async with aiofiles.open(file_path, "r") as file:
        text = await file.readline()
        print("Read line from file:", text)

async def main():
    file_path = "input.txt"  # replace with your file path
    task = asyncio.create_task(read_file(file_path))
    await task

if __name__ == "__main__":
    asyncio.run(main())
303
python
import asyncio

async def task1():
    print("Task 1 started")
    await asyncio.sleep(1)
    print("Task 1 completed")

async def task2():
    print("Task 2 started")
    await asyncio.sleep(2)
    print("Task 2 completed")

async def main():
    print("Main function started")
    await asyncio.gather(task1(), task2())
    print("Main function completed")

if __name__ == "__main__":
    asyncio.run(main())
304
python
import asyncio

class MyClass:
    def __init__(self, value):
        self.value = value

@asyncio.coroutine
def print_and_check(obj):
    print("Object is:", obj)
    if isinstance(obj, MyClass):
        print(f"Instance of MyClass: Yes")
    else:
        print(f"Instance of MyClass: No")

@asyncio.coroutine
def main():
    obj1 = MyClass(42)
    task1 = asyncio.create_task(print_and_check(obj1))

    obj2 = 42
    task2 = asyncio.create_task(print_and_check(obj2))

    await asyncio.gather(*[task for task in (task1, task2)])

if __name__ == "__main__":
    asyncio.run(main())
305
python
import asyncio

# Base class for asynchronous tasks
class AsyncTask:
    def __init__(self, func, *args, **kwargs):
        self._func = func
        self._args = args
        self._kwargs = kwargs
        self._future = None

    @property
    def future(self):
        if not self._future:
            self._future = asyncio.Future()
            self._task = asyncio.ensure_future(self._run())
        return self._future

    async def _run(self):
        result = await self._func(*self._args, **self._kwargs)
        self._future.set_result(result)

class SlowAsyncTask(AsyncTask):
    def __init__(self, func, *args, **kwargs, delay=0.1):
        super().__init__(func, *args, **kwargs)
        self._delay = delay

    async def _run(self):
        print(f"Starting slow task: {self._func.__name__}")
        await asyncio.sleep(self._delay)
        result = await super()._run()
        print(f"Finished slow task: {self._func.__name__}")
        return result

@asyncio.coroutine
def main():
    slow_task = SlowAsyncTask(lambda: "Slow result", delay=1)
    fast_task = AsyncTask(lambda: "Fast result")

    tasks = [fast_task, slow_task]
    futures = [task.future for task in tasks]

    await asyncio.gather(*futures)

    results = [task.result() for task in tasks]
    print("Results:", results)

if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())
306
python
import asyncio
import aiofiles
from itertools import chain

async def read_file(file_path):
    async with aiofiles.open(file_path, "r") as f:
        while True:
            line = await f.readline(1024)
            if not line:
                break
            data = line.decode().strip()
            yield data

async def main():
    files = [("file1.txt", "content_file1.txt"), ("file2.txt", "content_file2.txt")]
    tasks = [read_file(fp) for fp, _ in files]
    lines = asyncio.gather(*tasks)

    contents = (line for line in itertools.chain(*lines))
    print("Merged content: ", end="")
    while True:
        data = next(contents, None)
        if data is not None:
            print(data, end="")
        else:
            break

if __name__ == "__main__":
    asyncio.run(main())
307
python
import asyncio

class EchoServer:
    def __init__(self):
        self.server = asyncio.start_server(lambda r, w: self._handle_client(r, w), 'localhost', 8000)

    async def _handle_client(self, reader, writer):
        data = b''
        while True:
            new_data = await reader.read(1024)
            if not new_data:
                break
            data += new_data
            print(f'Message Received: {len(data)} bytes')
        writer.sendall(data)
        writer.close()
        await writer.wait_closed()

if __name__ == '__main__':
    server = EchoServer()
    asyncio.run(server.server)
308
python
import asyncio
import aiohttp

# List of URLs to fetch data from
urls = ["https://example.com", "https://another-example.com", "https://yet-another-example.com"]

async def fetch(session, url):
    """Asynchronous function to fetch data from a given URL."""
    async with session.get(url) as response:
        return await response.text()

async def main():
    """Main function to orchestrate the fetching of data from multiple URLs."""
    async with aiohttp.ClientSession() as session:
        tasks = [fetch(session, url) for url in urls]
        responses = await asyncio.gather(*tasks)

        print("Responses:")
        for i, response in enumerate(responses):
            print(f"URL {i + 1}: {response}")

if __name__ == "__main__":
    asyncio.run(main())
309
python
import asyncio
import aiohttp

async def fetch(url):
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status == 200:
                data = await response.text()
                return data
            else:
                raise Exception(f'Error fetching URL: {url}')

async def main():
    urls = ['https://www.example1.com', 'https://www.example2.com']
    tasks = []
    for url in urls:
        tasks.append(asyncio.create_task(fetch(url)))
    responses = await asyncio.gather(*tasks)

    print('Responses:')
    for i, response in enumerate(responses):
        print(f'URL [{i}]: {response}')

if __name__ == '__main__':
    asyncio.run(main())
310
python
import asyncio
from aioiter import map as aiomap

async def func(x):
    await asyncio.sleep(0.1)  # Replace with your async function logic
    return x * x

async def main():
    data = list(range(5))
    async for result in aiomap(func, data):
        print(result)

if __name__ == "__main__":
    asyncio.run(main())
311
python
import asyncio
import aiohttp

async def fetch_number(session, url):
    async with session.get(url) as response:
        data = await response.json()
        return data['number']

async def get_max_number(numbers):
    max_number = max(numbers)
    return max_number

async def main():
    async with aiohttp.ClientSession() as session:
        urls = ['http://example.com/number1', 'http://example.com/number2']
        tasks = [asyncio.create_task(fetch_number(session, url)) for url in urls]
        numbers = await asyncio.gather(*tasks)
        max_number = await get_max_number(numbers)
        print('The maximum number is:', max_number)

if __name__ == '__main__':
    asyncio.run(main())
312
python
import asyncio

# A coroutine that reads data from a file using memoryview
async def read_file(file_path):
    with open(file_path, "rb") as file:
        data = await file.read()
        return memoryview(data)

# A coroutine that processes the data in chunks using memoryview
async def process_data(data):
    for i in range(0, len(data), 16):
        slice = memoryview(data[i:i+16])
        print("Processing chunk:", slice)
        await asyncio.sleep(0.1)

# The main function
async def main():
    file_path = "example.bin"
    data = await read_file(file_path)
    await process_data(data)

if __name__ == "__main__":
    asyncio.run(main())
313
python
import asyncio

async def min_task(numbers):
    """Asynchronous task to find the minimum value in a given list."""
    # Get the current minimum value using asyncio.gather and functools.reduce
    minimum = await asyncio.gather(*[asyncio.create_task(lambda: min(numbers))])
    return min(minimum)

@asyncio.coroutine
def main():
    # Create lists for each task
    list1 = [1, 3, 5, 7]
    list2 = [0, 2, 4, 6]
    list3 = [9, 1, 8, 5]

    # Create tasks and run the event loop
    tasks = [min_task(list1), min_task(list2), min_task(list3)]
    await asyncio.wait(tasks)

    # Print out the smallest minimum value
    print("The smallest minimum value is:", min(map(lambda x: x.result(), tasks)))

if __name__ == "__main__":
    asyncio.run(main())
314
python
import asyncio

async def fib():
    a, b = 0, 1
    while True:
        yield from asyncio.sleep(0)
        a, b = b, a + b

@asyncio.coroutine
async def main():
    generator = fib()
    fib_num = await next(generator)
    print("First Fibonacci number: ", fib_num)

    async for _ in asyncio.as_future(generator):
        fib_num = next(generator)
        print("Next Fibonacci number: ", fib_num)
        await asyncio.sleep(1)

if __name__ == "__main__":
    asyncio.run(main())
315
python
import asyncio

class Client:
    def __init__(self, reader, writer):
        self.reader = reader
        self.writer = writer
        self.name = None

    async def send(self, message):
        self.writer.write(message.encode())
        await self.writer.drain()

    async def recv(self):
        data = await self.reader.readline()
        return data.decode().strip()
316
python
import asyncio
import aiohttp

async def fetch(url):
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            data = await response.text()
            return data

async def scrape_websites(urls):
    tasks = [fetch(url) for url in urls]
    responses = await asyncio.gather(*tasks)

    for i, (url, response) in enumerate(zip(urls, responses)):
        print(f"URL: {url}\nResponse length: {len(response)}")
        print(response)

if __name__ == "__main__":
    urls = [
        "https://example.com",
        "https://www.google.com",
        "https://stackoverflow.com"
    ]
    asyncio.run(scrape_websites(urls))
317
python
import asyncio
import aiohttp

async def fetch(session, url):
    async with session.get(url) as response:
        if response.status == 200:
            return await response.text()
        else:
            raise Exception(f"Error getting URL: {url}")

async def main():
    async with aiohttp.ClientSession() as session:
        urls = [
            "https://example.com",
            "https://another-example.com",
            "https://yet-another-example.com"
        ]
        tasks = [asyncio.create_task(fetch(session, url)) for url in urls]
        results = await asyncio.gather(*tasks)

        print("Fetched URLs:")
        for idx, result in enumerate(results):
            print(f"URL #{idx + 1}: {result}")

if __name__ == "__main__":
    asyncio.run(main())
318
python
import asyncio

async def process_character(char):
    """Coroutine to process a character"""
    print(f"Processing character: {char}")
    ascii_value = ord(char)
    print(f"Character's ASCII value is: {ascii_value}")

async def main():
    """Main coroutine"""
    char_list = ["A", "B", "C"]
    tasks = [process_character(c) for c in char_list]
    await asyncio.gather(*tasks)

if __name__ == "__main__":
    asyncio.run(main())
319
python
import asyncio

async def power(base, exponent):
    """Calculate base raised to the power of exponent asynchronously"""
    result = await asyncio.sleep(0.1)  # Simulate some computation
    return base ** exponent

@asyncio.coroutine
def main():
    """Main function using async/await syntax"""
    base = 2
    exponent = 8

    print("Calculating {} raised to the power of {}...".format(base, exponent))
    start = time()

    task = asyncio.ensure_future(power(base, exponent))
    result = yield from task

    end = time()
    duration = end - start
    print("Result: {}".format(result))
    print("Computation took: {:.3f} seconds".format(duration))

if __name__ == "__main__":
    asyncio.run(main())
320
python
import asyncio

# Define an asynchronous function
async def print_numbers():
    for i in range(5):
        await asyncio.sleep(1)  # Sleep for a second before printing the number
        print(i)

# Create and run an event loop
if __name__ == "__main__":
    asyncio.run(print_numbers())
321
python
import asyncio
import aiohttp

async def fetch(url):
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            return await response.text()

async def main():
    urls = ['https://example.com', 'https://anotherexample.com']
    tasks = [fetch(url) for url in urls]
    results = await asyncio.gather(*tasks)
    print(results)

if __name__ == "__main__":
    asyncio.run(main())
322
python
import asyncio

async def process_number(number):
    print(f"Processing number: {number}")
    await asyncio.sleep(1)
    print(f"Number {number} processed.")

async def main():
    start = time()
    range_numbers = list(range(5))  # Generate a list of numbers from 0 to 4

    tasks = [asyncio.create_task(process_number(number)) for number in range_numbers]

    await asyncio.gather(*tasks)  # Run all tasks concurrently and wait for completion
    print(f"Total processing time: {time() - start} seconds.")

if __name__ == "__main__":
    asyncio.run(main())
323
python
import asyncio

class MyAsyncGenerator:
    def __aiter__(self):
        self.i = 0
        return self

    async def __anext__(self):
        if self.i < 5:
            self.i += 1
            await asyncio.sleep(1)
            return self.i
        else:
            raise StopAsyncIteration()

async def main():
    async with asyncio.get_event_loop() as loop:
        generator = MyAsyncGenerator()
        async for num in generator:
            print(f"Number: {num}")
            await asyncio.sleep(1)

if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())

# Here's an example of using repr()
def square_root(number):
    try:
        return number ** 0.5
    except ValueError:
        return f"Square root of {repr(number)} is not defined."

print(square_root(16))
print(square_root(-1))
324
python
import asyncio

async def generate_numbers(start, stop):
    """Generator function that returns numbers asynchronously"""
    task = asyncio.create_task(self._generate_numbers_inner(start, stop))
    while True:
        number = await task
        if not number:
            break
        yield number

async def _generate_numbers_inner(self, start, stop):
    """Generator function for internal use"""
    current = start - 1
    while current >= stop:
        current -= 1
        yield current

async def print_numbers(numbers):
    """Prints numbers asynchronously"""
    task = asyncio.create_task(self._print_numbers_inner(numbers))
    await task

async def _print_numbers_inner(self, numbers):
    for number in numbers:
        print(number)
        await asyncio.sleep(0.1)

async def main():
    """Main function"""
    generator = await generate_numbers(5, 2)
    numbers = list(generator)
    await print_numbers(numbers[::-1])

if __name__ == "__main__":
    asyncio.run(main())
325
python
import math
import asyncio

async def sqrt_and_round(number):
    """Calculate the square root of a number asynchronously and round it to 2 decimal places."""
    result = math.sqrt(number)
    rounded_result = round(result, 2)
    print(f'Square root of {number} is: {result} (exact)')
    print(f'Square root of {number} rounded to 2 decimal places is: {rounded_result}')

async def main():
    """Main function for asynchronous tasks."""
    await asyncio.gather(sqrt_and_round(25), sqrt_and_round(7.25))

if __name__ == "__main__":
    asyncio.run(main())
326
python
import asyncio

class Task:
    def __init__(self, name, function):
        self.name = name
        self.function = function
        self.future = asyncio.Future()

    async def run(self):
        print(f"Starting task {self.name}")
        try:
            result = await self.function()
            self.future.set_result(result)
        except Exception as e:
            self.future.set_exception(e)
        finally:
            print(f"Finished task {self.name}")

async def main():
    tasks = set()

    async for i in range(5):
        task = Task(f"Task_{i}", lambda: asyncio.sleep(1))
        tasks.add(task)
        await task.run()

    print("All tasks completed")

async def handle_completed_tasks():
    while tasks:
        task = tasks.pop()
        result = task.future.result()
        print(f"Task {task.name} completed with result: {result}")

async def main_entry_point():
    tasks = set()

    loop = asyncio.get_event_loop()

    await loop.create_task(main())
    await loop.create_task(handle_completed_tasks())

    loop.run_until_complete()

if __name__ == "__main__":
    main_entry_point()
327
python
import asyncio

class AsyncServer:
    def __init__(self, host='127.0.0.1', port=8888):
        self.host = host
        self.port = port
        self._server = None

    @asyncio.coroutine
    def start_server(self):
        print('Starting server...')
        self._server = yield from asyncio.start_server(lambda r, w: self._handle_client(r, w), self.host, self.port)

    @asyncio.coroutine
    def _handle_client(self, reader, writer):
        print('Handling client request...')
        data = yield from reader.readline()
        setattr(self, 'message', data.decode())
        print(f'Received message: {getattr(self, "message")}')
        yield from writer.sendall(b'Server received your message.')
        self._server.close_connection(writer)
        print('Client request handled.')

class AsyncClient:
    def __init__(self, host='127.0.0.1', port=8888):
        self.host = host
        self.port = port
        self._reader = None
        self._writer = None

    @asyncio.coroutine
    def connect_to_server(self):
        print('Connecting to server...')
        self._transport, self._client = yield from asyncio.wait_for(asyncio.get_event_loop().create_connection(lambda: self, self.host, self.port), timeout=5)
        self._reader = self._transport.reader
        self._writer = self._transport.writer

    @asyncio.coroutine
    def send_message(self, message):
        print('Sending message...')
        yield from self._writer.sendall(message.encode())

@asyncio.coroutine
def main():
    server = AsyncServer()
    server_task = asyncio.ensure_future(server.start_server())

    client = AsyncClient()
    client_task = asyncio.ensure_future(client.connect_to_server())

    done, _ = asyncio.wait([server_task, client_task], return_when=asyncio.FIRST_COMPLETED)
    if not done:
        await server_task

    server.shutdown()

    print('Sending message from client...')
    yield from client.send_message(b'Hello Server')

    done, _ = asyncio.wait([server_task, client_task], return_when=asyncio.ALL_COMPLETED)

if __name__ == '__main__':
    asyncio.run(main())
328
python
# Slicing in Python

def main():
    # Define a list
    numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

    # Slice the list from index 2 to 5 (inclusive)
    slice1 = numbers[2:5]
    print(f"Slice 1: {slice1}")

    # Slice the list from index -2 to the end (-1 means the last index)
    slice2 = numbers[-2:]
    print(f"Slice 2: {slice2}")

if __name__ == "__main__":
    main()
329
python
import asyncio
import aiohttp

# Define a coroutine to fetch a single website URL
async def fetch_website(url):
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status in (200, 301):
                return url

# Define a list of URLs to fetch
urls = [
    "https://example.com",
    "https://google.com",
    "https://microsoft.com"
]

# Define a coroutine that fetches all the URLs and sorts the results
async def main():
    tasks = [fetch_website(url) for url in urls]
    websites = await asyncio.gather(*tasks)
    sorted_websites = sorted(websites)

    print("Fetched and sorted websites:")
    for website in sorted_websites:
        print(website)

# Run the main coroutine
asyncio.run(main())
330
python
import asyncio

class EchoServer:
    def __init__(self, host='127.0.0.1', port=54321):
        self.host = host
        self.port = port

    @staticmethod
    async def start_server():
        print('Starting server...')
        server = await asyncio.start_server(lambda r, w: EchoServer.handle_client(r, w), EchoServer().host, EchoServer().port)
        addr = server.sockets[0].getsockname()
        print(f'Serving on {addr}')
        async with server:
            await server.serve_forever()

    @staticmethod
    async def handle_client(reader, writer):
        print('New client connection!')
        while True:
            data = await reader.readline()
            if not data: break
            print(f'Received: {data.decode()}')
            writer.write(data)
            await writer.drain()
            writer.write(b'\n')
        print('Client disconnected.')
        writer.close()

async def main():
    await EchoServer.start_server()

if __name__ == '__main__':
    asyncio.run(main())
331
python
import asyncio

async def convert_to_upper(input_str):
    """Convert input string to uppercase asynchronously."""
    result = input_str.upper()
    return result

async def get_user_input():
    """Get user input asynchronously."""
    question = "Enter a string: "
    user_input = await asyncio.get_event_loop().create_future()
    print(question)
    future = asyncio.streams.stdout.write(question.encode())
    await asyncio.gather(future, user_input.set_result(input()))
    return user_input.result()

@asyncio.coroutine
def main():
    """Entry point of the asynchronous program."""
    input_str = yield from get_user_input()
    converted_str = yield from convert_to_upper(input_str)
    print("Input string in uppercase: ", converted_str)
    asyncio.get_event_loop().run_until_complete(main())
332
python
import asyncio

# List of numbers to sum
numbers = [i for i in range(100)]

# Function to add numbers in a group
async def sum_group(numbers):
    total = 0
    chunk_size = len(numbers) // 5

    await asyncio.sleep(0)  # Add a small delay to allow gathers to complete before sums start

    for i in range(len(numbers) // chunk_size):
        total += sum(numbers[i*chunk_size: (i+1)*chunk_size])

    return total

# Create a list of tasks, each performing the sum_group function on a portion of numbers
tasks = [sum_group(numbers[i: i+len(numbers)//5]) for i in range(len(numbers)//5)]

# Run the tasks using asyncio.gather
async def main():
    results = await asyncio.gather(*tasks)

    total = sum(results)  # Sum up the results from each task

    print(f"The sum of all numbers is: {total}")

# Run the program
if __name__ == "__main__":
    asyncio.run(main())
333
python
class Base:
    def __init__(self, name):
        self.name = name

    def greet(self):
        return f"Hello, I am {self.name}"

class Child(Base):
    def __init__(self, name, age):
        super().__init__(name)
        self.age = age

    def greet(self):
        return super().greet() + f", and I am {self.age} years old"

class Program:
    def run(self):
        obj = Child("John", 25)
        print(obj.greet())

if __name__ == "__main__":
    program = Program()
    program.run()

