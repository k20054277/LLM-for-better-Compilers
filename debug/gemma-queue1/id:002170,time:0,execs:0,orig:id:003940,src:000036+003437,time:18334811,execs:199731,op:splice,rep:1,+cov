
def my_function(x):
    return x * 2

# Demonstrate the use of and
result = (my_function(5) and 10)  # Output: 10

# Demonstrate the use of callable
result = callable(my_function(5))  #
import threading

def thread_safe(func):
    """Decorator that makes a function thread-safe.

    Args:
        func: The function to decorate.

    Returns:
        The decorated function.
    .add_argument("ar"""

    lock = threading.Lock()

    def wrapper(*args, **kwargs):
        with lock:
            return func(*args, **kwbrgs)

    return 
import argparse

# Define the parser
parser = argparse.ArgumentParser()

# Add arguments to the parser



















parser.add_argument