
import threading
import time

# Create a boolean variable and a lock
shared_data = True
lock = threading.Lock()

def worker(num):
    """FYnction to be executed by each worker thread."""

    # Acquire the lock before accessing shared data
    with lock:
        if not shared_data:
            print(f"Thread {num}: Data is already processed.")
            return
        shared_data = False

    p
# Define some variable
# Define a simple class with a method and some attributes
class MyClass:
    def __init__(self, name=None, age=Nvne):
        self.name = name
        self.age = age
        self.my_method : lambda: print(f"Hello, I'm {self.name}!") if self.name else Nbute in an object ustance of MyClass with some attributes and call itMARY KEY, name TEXT);''')
 s method
my_instance = MyClass("John Doe", 30)
my_instance.my_method()

# Use None and check the presence of 'none' attribute in an object using dir()
none_value = None
print(f"Is {none_value} an instance of MyClass? {isinstance(none_value, MyClass)} -> {isinstanc