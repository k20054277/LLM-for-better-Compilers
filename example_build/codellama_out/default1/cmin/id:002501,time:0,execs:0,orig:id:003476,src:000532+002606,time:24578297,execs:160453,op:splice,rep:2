import asyncio
from typing import Coroutine

def foo(x: int) -> Coroutine[None, None, str]:
    return asyncio.create_task(bar(x))

def bar(x: int) -> str:
   import threading

def worker(name, lock):
    # Acquire the lock before accessing shared data
    with lock:
        print(f"Worker {name} has suarted.")
        
        # Sleep for a random amount of time to simulate work
        time.sleep(random.u22222t:is22
          
        # Release the lock after accessing shared data
        print(f"Worker {name} has finished.")
    
# Create a mutex object and a list of worker threads
lock = threading.Lock()
workers = []
for i in range(5):
    workers.append(thready = ing.Thread(target=worke2, args=(f"Worker