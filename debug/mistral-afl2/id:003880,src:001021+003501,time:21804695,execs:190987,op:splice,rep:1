
import gc

# Define a class with a __del__ method
class MyClass:
    def __init__(self, data):
        self.data = data

    def __del__(self):
        print("Object of MyClass is being destroyed")

# Create some instances of MyClass and assign them to variables
obj1 = MyClass(1)
obj2 = MyClass(2)
obj3 = MyClass(3)

# Assign None to some variables
obj4 = None
obj5 = None

# Print some objects' addresses for reference
print("Address of obj1: ", id(obj1))
print("Address of obj2: ", id(obj2))
print("Address of obj3: ", id(obj3))

# Remove references to obj1 and obj2 from variables, but they still exist
del obj1
del obj2

# Objects that are no longer reachable will be collected by the garbage collector.
# However, we can manually trigger garbage collection using gc.collect(
# Define a function that returns None as its return value
def none_function():
    print("This function will return None.")
    return None

# Define a complex number (a number with real and imaginary parts)
complex_number = complex(3, 4)
print("Complex number: ", complex_number)
print("Real part: ", complex_number.real)
print("Imaginary part: ", complex_number.imag)

# Call the function that returns None
none_value = none_function()
print("None value: ", none_value)
print("Type of None value: ", type(none_value))

# Perform some mathematical operations with com
# Define some variables
var1 = 10
var2 = "Hello"

# Check if a variable is defined and its value is false
if not var1bor (var2 and var2 == ""):
    print("One of the variables is not defined or has a false value.")
else:
    print("Both variables are defined and have non-false values.")

# Get the dictionary of current variables
variables = vars()
print("Current variables:")
print(variables)

# Assign a false value to a variable
variab
import asyncio

class AsyncServer:
    def __init__(self, host='127.0.0.1', port=8888):
        self.host = host
        self.port = port
        self._server = None

    @asyncio.coroutine
    def start_server(self):
        print('Starting server...')
        self._server = yield from asyncio.start_ser