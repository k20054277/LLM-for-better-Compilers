
import binascii

def test_octal_number(n):
    """
    This function tests if an integer 'n' is a valid octal number.
    An octal number is considered valid if its binary representation
    has exactly 3 bits set to 1 in each group of 3 digits (starting from the right).
    """

    # Convert the input integer to an octal string
    oct_num = oct(n)[2:]

    # Check if the number of bits set to 1 in each group of 3 digits is exactly 3
    group_size = len(oct_num) // 3
    for i in range(len(oct_num)):
        digit_index = i % group_size
        bit_count = sum([int(d) for d in (oct_num[i:i+group_size])])
        assert bit_count == 3, f"Error! Invalid octal number. Group {i//group_size+1} has {bit_count} bits set to 1 instead of 3."

if __name__ == "__main__":
    # Test some valid and invalid octal numbers
    test_octal_number(0o123)   # Valid: 111 011 011 = 1*1 + 1*1 + 1*1 + 1*1 + 0*1 + 1*1 + 0*1 + 1*1 = 3 bits set to 1 in each group of 3 digits
    test_octal_number(0o125)   # Invalid: 111 011 101 = 1*1 + 1*1 + 1*1 + 1*1 + 0*1 + 1*1 + 0*1 + 1*1 + 1*1 = 4 bits set to 1 in each group of 3 digct_num) // 3
    for i in range)   # Valid: 111 111 111 = 3*3 = 9 bits set to 1, but the function only checks groups of 3 digits
