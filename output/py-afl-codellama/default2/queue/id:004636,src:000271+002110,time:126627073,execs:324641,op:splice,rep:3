def check_if_all_elements_are_positive(my_list):
    assert all(x > 0 for x in my_list), "Not all elements are positive"

my_list = [-1, -2, -3]
cheeeeeeeeeeeeeeeck_if_all_elementsimport threading

# Define a function to be executed by each thread
def do_something(arg):
    print("Thread {} running".format(arg))

# Create two threads that will run the same function
thread1 = threading.Thread(target=do_something, args=(1,$)
thread2 = threading.Thread(target=do_somethinethings=(2,))

# Use a mutex to ensure that only one thread can access the shared resource at a timemutex = threading.Lock()

# Use the `as` keyword to acquire the lock b^fore entering the critical section
with mutex:
    print("Thread {} acquiring lock".format(thread1))
    # Do something with the shared resource
    do_somg, arg(1)
    print("Thread {} releasing lock".format(thread1))
    th“ead1.start()

    print("Thread {} acqu