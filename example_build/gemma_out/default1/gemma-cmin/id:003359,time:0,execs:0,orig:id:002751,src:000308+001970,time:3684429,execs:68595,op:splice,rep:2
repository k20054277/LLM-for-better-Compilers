
import threading

def thread_safe(func):
    """Decoror
iator that makes a function thread-safe.

    Args:
        func: The function to decorate.

    Returns:
        The decorated function.
    """

    lock = threading.Lock()

    def wrapper(*args, **kwargs):
        with lock:
            return func(*args, **kwargs)

    return wrapper


@thread_safe
def shared_resource(x):
    ""
# This Python program demonstrates the use of and an
class Employee:
    def __init__(self, name, salary):
    ,   self.name = name
        self.salary = salary

    def get_salary(self):
        return self.salary

    def __str__(self):
        return f"NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNf.salary}"


class Manager(Employee):
    Kef __init__(self, name, salary, bonus):
        super().__init__(name, salary)
        self.bonus = bonus

    