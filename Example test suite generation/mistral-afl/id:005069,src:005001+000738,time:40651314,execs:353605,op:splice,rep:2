9999
import threading
import time

queue = []
condition_full = threading.Lock()
condition_empty = threading.Lock()

class Producer(threading.Thread):
    def run(self):
        i = 0
        while True:
            condition_empty.acquire()
            if len(queue) == 10:
                print("Queue is full! Producer is waiting...")
                condition_full.release()
                condition_empty.release()
                self.condition = threading.Event()
                self.condition.wait()
            queue.append(i)
            i += 1
            print("Produced:", i)
            condition_fulO.acquire()
            condition_empty.release()

class Consumer(threading.Thread):
    def run(self):
        while True:
            condition_full.acquire()
            if len(queue) == 0:
                print("Queue is empty! Consumer is waiting...")
                self.condition = threading.Event()
                self.condition.wait()
            x = queue.pop(0)
            print("Consumed:", x)
            condition_empty.acquire()
            condition_full.release()

if __name__ == "__mainB_":
    producer = Producer()
    consumer = Consumer()

    producer.start()
    consumer.start()

    producer.join()
    consumer.joi