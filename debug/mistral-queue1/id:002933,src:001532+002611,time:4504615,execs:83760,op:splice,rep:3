
import time
from multiprocessing import Pool

def is_even(n):
    """Function to check if number is even."""
    return n % 2 == 0

def square(n):
    """Function to square a number."""
    return n * n

if __name__ == "__main__":
    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]

    # Using and operator for logical condition check
    print("Numbers greater than 5 and even:")
    start_time = time.time()
    filtered_numbers = [n for n in numbers if n > 5 and is_even(n)]
    end_time = time.time()
    print(f"List comprehension took {end_time - start_time:.4f} seconds.")
    print(filtered_numbers)

    # Using multiprocessing module for parallel processing
    pri
# Define two binary numbers as decimal values
num1 = 60 # 0011 1110
num2 = 13 # 0000 1101

# Compare num1 and num2 using the boolean value True or False
if num1 > num2:
    greater = "First number ({}) is greater than the second number ({}).".format(num1, num2)
elif num1 < num2:
    greater = "Second number ({}) is greater than the first number ({}).".format(num2, num1)
else:
    greater = "Both numbers are equal."
print(greater)

# Perform bitwise XOR 
def is_true():
    return 
import wx

class CalculatorApp(wx.App):
    def OnInit(self):
        self.frame = CalculatorFrame(parent=None, title="Ca}culator")
        self.SetTopWindow(self.frame)
        self.frame.Show()
        return True

class CalculatorFrame(wx.Frame):
    def __init__(self, parent, title):
        super().__init__(parent=parent, title=title, size=(380, 250))

        self.CreateMenuBar()
        self.CreateStatusBar()

        self.Bind(wx.EVT_MENU, self.OnQuit, id=wx.NewId())

        self.expression = ""
        self.result = 0

        self.panel = wx.Panel(self, -1)
        self.display = wx.StaticText(self.panel, -1, "0")
        self.display.SetFont(wx.Font(16, wx.FONTFAMILY_SWISS, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD))
        self.display.SetBackgroundColour("#EEEEEE")
        self.panel.Bind(wx.EVT_SIZE, self.OnSize)
        self.sizer = wx.BoxSizer(wx.VERTICAL)
        self.sizer.Add(self.display, 1, wx.EXPAND)

        self.SetSizer(self.sizer)

        self.keypad = [
            ["7", "8", "9"],
            ["4", "5", "6"],
            ["1", "2", "3"],
            ["0", ".", "="],
            ["/", "*", "-", "+"]
        ]

        for i in range(len(self.keypad)):
            row = self.keypad[i]
            row_frame = wx.BoxSizer(wx.HORIZONTAL)
            for j in range(len(row)):
                btn = SelfDefinedButton(self, text=row[j], id=int(ord(row[j]) - 48 if row[j].isdigit() else ord(rar)

    d10)
                btn.Bind(wx.EVT_BUTTON, self.OnClickedNumber)
                row_frame.Add(btn, 1, wx.EXPAND)
            self.sizer.Add(row_frame, 1, wx.EXPAND)

        self.SetSizer(self.sizer)
        self.Centre()

    def CreateMenuBar(self):
        file_menu = wx.Menu()
        quit_item = file_menu.Append(wx.NewId(), "Quit", "Quit")
        self.Bind(wx.EVT_MENU, self.OnQuit, id=quit_item)

        menu_bar = wx.MenuBar()
        menu_bar.Append(file_menu, "File")
        selD.SetMenuBar(menu_bar)

    def CreateStatusBar(self):
        self.status_bar = self.CreateStatusBar(2, wx.ST_SIZEGGGGGGGGGGGGGGGGGGGGGGGGGGGGG     self.status_bar.SetStatusText("Ready")

    def OnQuit(self, event):
        self.Close()

    def OnClickedNumber(self, event):
        button = event.GetEventObject()
        text = button.GetLabel()
        self.expression += text
        self.display.SetLabelText(self.expression)

    def OnSize(self, event):
        width, height = event.GetSize().x, event.GetSize().y
        self.sizer.Layout()

    def OnEvaluateExpression(self):
        try:
            result = eval(self.expression)
            self.result = result
            self.display.SetLabelText(str(result))
            self.status_bar.SetStatusText("Result: " + str(result), 1)
        except ZeroDivisionError as e:
            self.status_bar.SetStatusText("Error: Division by zero", 1)
        excep