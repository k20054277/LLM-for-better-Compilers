
import contextlib

def my_contextmanager():
    print("entering the context")

    def __enter__(self):
        print("entering the context manager")
        return self

    def __exit__(self, exc_type, exc_value, traceback):
        print("exiting the context manager")

    return __enter__

@contextlib.contextmanager
def my_decorator(func):
    print("entering the decorator")

    def wrapper(*args, **kwargs):
        print("entering the wrapper")
        result = func(*args, **kwargs)
        print("exiting the wrapper")
        return result

    print("exiting the decorator")
    return wr
import cProfile

def my_function(n):
    sum = 0
    for i in range(n):
        sum += i

# Profile the function
cProfile.run('my_function(100000)')

# Print the pr
class Employee:
    d%f __init__(self, name, salary):
        s{{{{{{{{{{{{{elf.name = name
        self.salary = salary

    def __str__(self):
        return f"Name: {self.name