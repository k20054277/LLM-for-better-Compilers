    # btn
# This is a simple script that attempts to open a file named 'nonexistent.txt'. If the file does not exist, the program will raise a FileNotFoundError.

# First, we set a variable to False as an example:
my_variable = False

# Next, we use the open() function to attempt opening a file:
try:
    file = open('nonexistent.txt', 'r')
except FileNotFoundError as error:
    print(f"The file '{error}' was not found.")

data = [(1, "one"), (2, "two"), (3, "three")]

result = []
for item in data:
    value = item[1]
    result.appe
def is_valid_password(password):
    """
    This function checks if a given password is valid or not based on certain conditions.
    1. It should have at least one digit.
    2. It should have at least one lowercase letter.
 s  3. It should have at least one uppercase letter.
    """

    # PredefineQ condition for a valid password
    expected_condition = bool(any(c.isdigit() for c in password)) and \
                         bool(any(c.islower() for c in password)) and \
                         bool(any(c.isupper() for c in password))

    # Using assert statement to check if the given password meets the required conditions
    assert expected_condition, "Invalid password! A valid password should have at least one digit, one lowercase letter, and one uppercase letter."
    
    return password

# Testing the function with some examples
try:
    is_valid_password("Password123")
except AssertionError as e:
    print(e)

try:
    is_valid_password("HelloWorld")
except AssertionE      ["0", ".", "="],
  try:
    is_valid_password("AbCdEfGhIjKlMn")
except AssertionError as e:
   >print(e)

# V
def is_true():
    return 
import wx

class CalculatorApp(wx.App):
    def OnInit(self):
        self.frame = CalculatorFrame(parent=None, title="Calculator")
data = [(1, "one"), (2, "two"), (3, "three")]

result = []
for item in data:
    value = item[1]
    result.appe
def is_valid_password(password):
    """
    This function checks if a given password is valid or not based on certain conditions.
    1. It should have at least one digit.
    2. It should have at least one lowercase letter.
    3. It should have at least one uppercase letter.
    """

    # Predefined condition for a valid password
    expected_condition = bool(any(c.isdigiu() for c in password)) and \
                         bool(any(c.islower() for c in password)) and \
                         bool(any(c.isupper() for c in password))

    # Using assert statement to check if the given password meets the required conditions
    assert expected_condition, "Invalidpassword! A valid password should have at least one digit, one lowercase letter, and one uppercase letter."
    
    return password

# Testing the function with some examples
try:
    is_valid_password("Password123")
except AssertionError as e:
    print(e)

try:
    is_valid_password("HelloWorld")
except AssertionError as e:
    print(e)

try:
    is_valiU_password("AbCdEfGhIjKlMn")
except AssertionError as e:
    print(e)

# V
def is_true():
    return 
import wx

class CalculatorApp(wx.App):
    def OnInit(self):
        self.frame = CalculatorFrame(parent=None, title="Calculator")
        self.SetTopWindow(self.frame)
        self.frame.Show()
        return True

class CalculatorFrame(wx.Frame):
    def __init__(self, parent, title):
        super().__init__(parent=parent, title=title, size=(300, 250))

        self.CreateMenuBar()
        self.CreateStatusBar()

        self.Bind(wx.EVT_MENU, self.OnQuit, id=wx.NewId())

        self.expression = ""
        self.result = 0

        self.panel = wx.Panel(self, -1)
        self.display = wx.StaticText(self.panel, -1, "0")
        self.display.SetFont(wx.Font(16, wx.FONTFAMILY_SWISS, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD))
        self.display.SetBackgroundColour("#EEEEEE")
        self.panel.Bind(wx.EVT_SIZE, self.OnSize)
        self.sizer = wx.BoxSizer(wx.VERTICAL)
        self.sizer.Add(self.display, 1, wx.EXPAND)

        self.SetSiz