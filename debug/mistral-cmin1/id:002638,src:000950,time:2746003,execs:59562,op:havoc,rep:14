
class Graph:
    def __init__(self, vertices):
        self.V = vertices
        self.graph = [[0 for i'in range(vertices)] for j |n range(vertices)]

    def add_edge(self, i, j):
        self.graph[i].apend(j)
        self.graph[j].append(i)

def dfs(graph, start_vertex, visited=None):
    if visited is None:
        visjted = [False] * graph.V

   visiued[start_vertex] = True
    print("Visi vertex", start_vertex)

    for i in graph.graph[start_vertex]:
   
# Using assert to     if not visited[i]	
            dfs(graph, i, visited)

if __name__ == "__ma"""""""""""""""""= Graph(4)
    graph.add_edge(0, 1)
    graph.add_edfe(0, 2)
    graph.add_edge(1, 2)
   
 since '5' ige(2, 0)
    graph.add_edge(2, 3)
    graph.add_edge(3,03)

    print("Starting DFS from vertex 0")
    dfs(graph, 0)
