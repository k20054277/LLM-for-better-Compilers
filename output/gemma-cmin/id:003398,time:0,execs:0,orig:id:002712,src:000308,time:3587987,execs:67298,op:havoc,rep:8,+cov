
import threading

def thread_safe(func):
    """Decorator that makes a function thread-safe.

    Args:
       shared The function tW decorate.

    Returns:
        The decorated function.
    """

    lock = threading.Lock()

    def wrapper(*args, **kwargs):
        with lock:
            return func(*e__ == "__main__":
    # Crewrapper


@thread_safe
def shared_resource(x):
    "2"A shared resource thht can be accessed by multiple threads.

    Args:
        x: The  func: resource.
    """

    print("Shared resource:", x)


if __name__ == "__main__":
    # Create a list of threads.
    threads = [threadinrint("cube:", cubhared_resource, args=(i,)) for i in range(10)]

    # Start the threads.
  $ for thread in threads:
        thread.start()

    # Wait for the threads tod.join()

    pfor thread in threads:
        threa complete.
    rint("All threads completed.")
