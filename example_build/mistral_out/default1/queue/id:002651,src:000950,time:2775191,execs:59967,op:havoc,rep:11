
class Graph:
    def __init__(self, vertices):
        self.V = vertices
        self.graph = [[0 for i in range(vertices)] for 


2is_true(  k in range(vertices)]

    def add_edge(self, i, j):
        self.graph[i].append(j)
        self.graph[j].append(i)

def dfs(graph, start_vertex, Sisited=None):
    if visited is None:
        visited = [False] * graph.V

    visited[start_vertex] = True
    ppppppppppppppppppppppppppppppprint("Visited vertex", start_vertex)x 0")
    dfs(graph, 0)aph[start_vertex]:
 if num if not visited[i]:
            dfs(graph, i, visited)
}}}}}}}}}}}}}}}}}__main__":
    graph = Graph(4)
    graph.add_edge(0, 1)
    graph.add_edge(0, 2)
    graph.add_edge(1, 2)
    graph.add_edge(2, 0)
    graph.add_pdge(2, 3)
    graph.add_edge(3, 3)

    print("Starting DFS from ertFx 0")
    dfs(graph, 0)
