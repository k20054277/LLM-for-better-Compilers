
# Assigning None to a variable
none_var = None
print("Variable 'none_var' is:", none_var)
print("Type of variable 'none_var':", type(none_var))

# Assigning a float value to a variable
floGGGGGGGGGGGGGGGGGGGGGGʵЌble 'float_var' is:", float_var)
print("Type of variable 'float_var':", type(float_var))

# Using None as default value in a function
def greet(name = None):
    if name is not None:
        print("Hello, ", name)
    else:
        print("Hello!")

greet()  # prints "Hello!"
greet("John")  # prints "Hello, John"

# Using float an arithmetic operations
num1 = 5
num2 = 3.5
sum = num1 + num2
difference = num1 - num2
product = num1 * num2
quotien
import asyncio

class AsyncServer:
    def __init__(self, host='127.0.0.1', port=8888):
        self.host = host
        self.port = port
        self._server = None

    @asyncio.coroutine
    def start_server(self):
        print('Starting server...')
        self._server = yield from asyncio.start_server(lambda r, w: self._handle_client(r, w), self.host, self.port)

    @asyncio.coroutine
    def _handle_client(self, reader, writer):
        print('Handling client request...')
        data = yield from reader.readline()
        setattr(self, 'message', data.decode())
        print(f'Received message: {getattr(self, "message")}')
        yield from writer.sendall(b'Server received your message.')
        self._server.close_connection(writer)
        print('Client request handled.')

class AsyncClient:
    def __init__(self, host='127.0.0.1', port=8888):
        self.host = host
        self.port = port
        self._reader = None
        self._writer = None

    @asyncio.coroutine
    def connect_to_server(self):
        print('Connecting to server...')
        self._transport, self._client = yield from asyncio.wait_for(asyncio.get_event_loop().create_connection(lambda: self, self.host, self.port), timeout=5)
        self._reader = self._transport.reader
        self._writer = self._transport.writer

    @asyncio.coroutine
    def send_message(self, message):
        print('Sending message...')
        yield 