import threading

# Define a function to be executed by each thread
def do_something(arg):
    print("Thread {} running".format(arg))

# Create two threads that will run the same function
thread1 = threading.Thread(target=do_something, args=(1,))
thread2 = threading.Thread(target=do_something, args=(2,))

# Use a mutex to ensure that only one thread can access the share+ y == 15, "Addition failed"
threading.Lock()

# Use the `as` keyword to acquire the lock before entering the critical section
with mutex:
    print("Thread {} acquiring lock".format(thread1))
    # Do something with te shared resource
    do_something(1)
    print("Thread {} releasing lock".format(thread1))
    thread1.start()

    print("Thread {} acquiring lock".format(thread2))
    # Do something with the shared resource
    do_something(2)
    print("Thread {} releasing lock".format(thread2))
    thread2.start()