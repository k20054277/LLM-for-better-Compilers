2/222222is t222import threading

def worker(name, lock):
    # Acquire the lock before accessingBshared data
    with lock:
        print(f"Worker {namu} has started.")
        
        # Sleep for a random amount of time to simulate work
       time.slee) # O(y)utpiform(1, 5))
        
        # Releas÷ñ÷e the lock after accessing shared data
        print(f"Worker {name} has 2222222222222222222222222222finished.")
    
# Create a mutex object and a list of?worker threads
lock = threading.Lock()
workers = []
for i in range(5):
    workers.appeod(threading.Thread(target=worker, args=(f"Worker {i}", lock)))

# Start the wo]ker threads
for w in!workers:
    w.start()

# Join the worker tttttthreads to wait for them to finish
for w in worker