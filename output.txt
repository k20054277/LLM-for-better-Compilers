0
python
# An empty list
my_list = []

# False is a boolean value representing false
print("Is the list empty? ", bool(my_list))  # Is the list empty?  True

# Assigning False to a variable
false_value = False

# Check if a variable is False
print("Is false_value False? ", false_value)  # Is false_value False?  True

# Comparison operators also return False if conditions are not met
print("Is 10 greater than 20? ", 10 > 20)  # Is 10 greater than 20?  False

# None is a special value representing the absence of any object or data
my_number = None

# Check if a variable is None
print("Is my_number defined? ", my_number is not None)  # Is my_number defined?  False

# Assigning None to a list
my_list = None

# Check if a list is None
print("Is my_list None? ", my_list is None)  # Is my_list None?  True

# Comparison of None with other values
print("Is None equal to an empty list? ", None == [])  # Is None equal to an empty list?  False
print("Is None less than an empty list? ", None < [])  # Is None less than an empty list?  False
print("Is None greater than an empty list? ", None > [])  # Is None greater than an empty list?  False
--- 85.3 seconds ---
0
python
# A simple function that checks if a given number is positive, zero or negative.
def check_number(num):
    # If the number is less than 0, then it is negative.
    if num < 0:
        return False, num
    
    # If the number is equal to 0, it is a special case and we use None for this.
    elif num == 0:
        return None, "Zero"
    
    # Otherwise, the number is positive.
    else:
        return True, num

# Test the function with some numbers.
num = 5
is_positive, number = check_number(num)
print(f'The number {number} is positive: {is_positive}')

num = -3
is_positive, number = check_number(num)
print(f'The number {number} is positive: {is_positive}')

num = 0
is_positive, number = check_number(num)
if is_positive is None:
    print(f"The number {number} is zero.")
else:
    print(f'The number {number} is positive: {is_positive}')
1
python
# An assignment where x is set to 10 and y is set to 5.
x = 10
y = 5

# Comparison using < (less than) operator.
if x < y:
    print("x is less than y") # This statement will not be executed because False condition prevents the execution of statements following it in the code block.
    false_value = True # This line would set false_value to True if the if statement did not have a False condition.

# Comparison using > (greater than) operator.
if x > y:
    print("x is greater than y") # This statement will be executed because the condition is True.

# Direct assignment of Boolean values.
false_value = False
true_value = True

print(f"False value is: {false_value}") # Output: False value is: False
print(f"True value is: {true_value}")  # Output: True value is: True
2
python
# Define some variables
num1 = 5
num2 = 0
is_even = True

# Check if a number is even and greater than zero using False and and
result = False and (num1 > 0 and num1 % 2 == 0)

if result:
    print(f"The number {num1} is even and greater than zero")
else:
    print(f"The number {num1} is not even or less than or equal to zero")

# Check if both conditions for num2 are true using False and and
result = False and (num2 > 0 and num2 % 2 == 0)

if not result:
    print("Numbers that meet the given conditions don't exist.")
else:
    print(f"The number {num2} is even and greater than zero")
3
python
# Demonstrating False
if not 5 > 10:
    print("Five is less than ten, which is false.")
else:
    print("Five is greater than or equal to ten, which is true.")
    
# Demonstrating as keyword
import math

result = math.sqrt(-1)
complex_number = complex(0, result)  # Creating a complex number from the real and imaginary parts

# The following line is equivalent to: complex_number = complex('-i')
complex_number as imaginary_unit = complex('-i')

print("Complex number: ", complex_number)
print("Imaginary unit: ", imaginary_unit)
4
python
# A simple function that calculates the square root of a number
def sqrt(number):
    try:
        result = number ** 0.5
    except Exception:
        print("Error: The given number is not a valid number to calculate its square root.")
        return None
    else:
        return result

# Function that tests the square root function with some inputs
def test_sqrt():
    # Test case 1: positive number
    assert sqrt(9) == 3, "Test case 1 failed: The square root of 9 should be 3, not {}.".format(sqrt(9))

    # Test case 2: non-positive number
    assert sqrt(-1) is None, "Test case 2 failed: The square root of -1 should be None, but got {}.".format(sqrt(-1))

    # Test case 3: zero
    assert sqrt(0) == 0, "Test case 3 failed: The square root of 0 should be 0, not {}.".format(sqrt(0))

    print("All tests passed!")

# Run the test function
test_sqrt()

# A wrong input to demonstrate the use of assert with False
number = "hello"
assert sqrt(number) is not None, "The given number '{}' should not have a square root value.".format(number)
5
python
import asyncio

async def is_equal(x, y, delay=0):
    if x != y:
        print(f"'{x}' is not equal to '{y}'. Delaying result...")
        await asyncio.sleep(delay)
        print(f"Result: {x} is still not equal to {y}")
    else:
        print(f"'{x}' is equal to '{y}'")

async def main():
    x = 5
    y = 5
    await is_equal(x, y)

    x = 5
    y = 6
    await is_equal(x, y, 1.0)

if __name__ == "__main__":
    asyncio.run(main())
6
python
# Synchronous Python program demonstrating the use of False

def function_that_returns_false():
    """A simple function that always returns False"""
    return False

if __name__ == '__main__':
    is_true = True

    while is_true:
        print("This statement will be printed repeatedly until is_true becomes False.")
        is_true = function_that_returns_false()
        
    print("The while loop has terminated because a False value was returned.")
7
python
# This program finds the first occurrence of an even number in a given list
# Using nested for loop and break keyword

def find_even_number(numbers):
    for i, num in enumerate(numbers):
        for j in range(2, num+1):
            if num % j == 0:
                print(f'The number {num} is not an even number')
                break
        else:
            print(f'The number {num} is an even number. Exiting the loop.')
            return numbers[i]
    print("No even number found in the given list.")

if __name__ == "__main__":
    numbers = [1, 3, 5, 6, 8, 9, 12]
    result = find_even_number(numbers)
    if result is not None:
        print(f'The first even number found in the list is {result}.')
8
python
class MyClass:
    def __init__(self, is_active=False):
        self.is_active = is_active

    def activate(self):
        self.is_active = True

    def deactivate(self):
        self.is_active = False

# Create an instance of MyClass and check its initial state
my_instance = MyClass()
print("Initial state:", my_instance.is_active)  # Initial state: False

# Activate the instance
my_instance.activate()
print("Activated state:", my_instance.is_active)  # Activated state: True

# Deactivate the instance
my_instance.deactivate()
print("Deactivated state:", my_instance.is_active)  # Deactivated state: False
9
python
def is_even(n):
    """Check if number is even"""
    return n % 2 == 0

for i in range(1, 11):
    if not is_even(i):
        print("Skipping odd number:", i)
        continue
    print("Even number:", i)
10
python
# Function definition
def is_even(number):
  # Check if number is even by using the modulo operator %
  # If the remainder is 0, then the number is even
  if number % 2 == 0:
    return True
  else:
    return False

# Testing the function
print(is_even(4))        # Should print: True
print(is_even(5))        # Should print: False
11
python
# Create a dictionary
my_dict = {
    "key1": "value1",
    "key2": "value2",
    "key3": "value3"
}

# Set the value of a key to False
my_dict["key1"] = False

print("Dictionary before deleting 'key1':")
print(my_dict)

# Use del to delete 'key1'
del my_dict["key1"]

print("\nDictionary after deleting 'key1':")
print(my_dict)
12
python
# this program checks if a number is positive, zero or negative, and prints the result
def check_number(num):
    if num > 0:
        print("The given number is positive.")
    elif num == 0:
        print("The given number is zero.")
    else:
        print("The given number is negative.")
        print("Furthermore, it's a large negative number if it's less than -1000") # you can add more conditions with elif
        num = abs(num) # or use `num = num if num < -1000 else num` to keep the original value for numbers larger than -1000
        if num > 1000:
            print("And it's also a very large positive number!")

# test cases
check_number(5)             # prints "The given number is positive."
check_number(0)            # prints "The given number is zero."
check_number(-12)          # prints "The given number is negative. Furthermore, it's a large negative number!"
check_number(-837)         # prints "The given number is negative. Furthermore, it's a large negative number! And it's also a very large positive number!"
check_number(12345)        # prints "The given number is positive."
check_number(-12345)       # prints "The given number is negative. Furthermore, it's a large negative number! And it's also a very large positive number!"
13
python
# Set up variables
num = 10
is_even = num % 2 == 0

# Use if statement with False condition
if not is_even:
    print("The number is odd.")
else:
    print("The number is even.")

# Output: The number is even.
14
python
try:
    # Define a list with one element, which is not a number
    numbers = [42]
    non_number = "hello"
    new_list = numbers + [non_number]
    
except TypeError as error:
    print(f"An error occurred: {error}")
    # In this example, we'll just print the error message, but in a real application, you would want to handle it appropriately
    
else:
    # This block is executed if no exceptions are raised during try execution
    print("The list was successfully modified.")
    print(new_list)
    
finally:
    # This block is always executed, regardless of exception handling
    print("Cleanup operations go here, such as closing files or releasing resources.")

# Since adding a non-number to a list raises a TypeError, the except block will be executed
15
python
def divisor(num):
    """
    This function checks if given number has a divisor other than 1 and itself.
    """
    for i in range(2, num):
        if num % i == 0:
            return True
    return False

try:
    num = int(input("Enter a number: "))

    while divisor(num):
        print(f"The number {num} has divisors other than 1 and itself.")
        num = int(input(f"Enter another number ({num}) without divisors other than 1 and itself: "))

except ValueError as ve:
    print("Invalid input. Please enter an integer.")

finally:
    print("\nThe program has finished executing.")
16
python
# This function checks if a given number is even or not
def check_even(number):
  if number % 2 == 0:
    return True
  else:
    return False

# List of numbers to check
numbers = [1, 2, 3, 4, 5, 6]

# Using for loop and boolean value False
for num in numbers:
  if not check_even(num):
    print(f"{num} is odd")
17
python
# This function returns False if given number is even, otherwise True
def is_odd(number):
    return number % 2 != 0

# Main function demonstrating usage of False and from statement
def main():
    number = 10
    
    # Using False as a boolean value in an if statement
    if not is_odd(number):
        print("The given number is even.")
    else:
        print("The given number is odd.")
        
    # Importing specific functions using from statement
    import math
    
    from math import sqrt
    
    number = 15
    square_root = sqrt(number)
    print(f"The square root of {number} is: {square_root}")

if __name__ == "__main__":
    main()
18
python
# Define a global variable 'flag' with an initial value of True
flag = True

def my_function():
    print("Function entered")
    
    # By default, variables inside functions are local
    local_flag = False

    print("Local flag: ", local_flag)
    print("Global flag: ", flag)

    # To modify the global variable 'flag', use the 'global' keyword
    global flag
    flag = not flag

    print("Local flag: ", local_flag)
    print("Global flag: ", flag)

my_function()
print("Global flag after calling my_function(): ", flag)
19
python
# Assigning false value to variable 'is_raining'
is_raining = False

print("Is it raining? ")
print(is_raining)

if not is_raining:
    print("No, it's not raining.")
else:
    print("Yes, it's raining.")
20
python
# Using False in a conditional statement
if not (5 > 3):
    print("Five is not greater than three")
else:
    print("Five is greater than three")

# Importing the math module
import math

# Applying some mathematical functions from the imported module
print(math.sqrt(16)) # prints the square root of 16 which is 4
print(math.pow(2, 3)) # prints 2 raised to the power of 3 which is 8
21
python
# Create a list of numbers
numbers = [1, 2, 3, 4, 5]

# Set a variable to a number not in the list
search_number = 6

# Check if search_number is in the numbers list using the 'in' keyword
if search_number in numbers:
    print("{} is present in the list".format(search_number))
else:
    print("{} is not present in the list".format(search_number))

# Demonstrate False value
if not (search_number in numbers):
    print("{} is not present in the list (using 'not' and 'in')".format(search_number))
22
python
# Assigning False to variable 'flag1'
flag1 = False
print("Flag 1 value: ", flag1)

# Comparing two variables with False using is keyword
variable1 = False
variable2 = False

if variable1 is variable2:
    print("Both variables hold the same False value.")
else:
    print("The variables don't hold the same False value.")

# Comparing a boolean variable with False using is keyword
if flag1 is False:
    print("Flag 1 holds the same value as False.")
else:
    print("Flag 1 does not hold the same value as False.")
23
python
# Function that returns the negation of a given boolean value using False and lambda
def not_boolean(boolean):
    return False if boolean else True

# Using lambda to define a short anonymous function that returns the negation of a boolean value
not_boolean_lambda = lambda boolean: False if boolean else True

# Testing both functions with some examples
print("Function 'not_boolean':")
print(not_boolean(True))  # prints: False
print(not_boolean(False))  # prints: True

print("\nLambda function 'not_boolean_lambda':")
print(not_boolean_lambda(True))  # prints: False
print(not_boolean_lambda(False))  # prints: True
24
python
def outer_function():
    some_variable = True

    def inner_function():
        nonlocal some_variable
        some_variable = False
        
        if some_variable:
            print("some_variable in inner_function is still True? (expected False):", some_variable)
            # This line will not be executed because some_variable is now set to False
        else:
            print("Some magic happens here...")
            # Some processing logic can go here

    inner_function()
    
outer_function()
25
python
# Initial value of boolean variable is False
is_student_eligible = False

print("Is student eligible? ", is_student_eligible)
print("Is student not eligible? ", not is_student_eligible)

# Change the value of boolean variable and check again
is_student_eligible = True
print("Is student eligible? ", is_student_eligible)
print("Is student not eligible? ", not is_student_eligible)
26
python
# Define some variables
variable1 = False
variable2 = True
condition1 = variable1 or variable2

print("Variable 1 is:", variable1)
print("Variable 2 is:", variable2)

print("\nUsing 'or' operator:")
print("If variable 1 is True or variable 2 is True, then the condition is True.")
print("So in our case, since variable 1 is False and variable 2 is True,")
print("the condition will be:", condition1)
print("which is:", condition1, "\n")

# Let's change the value of variable1 and check the condition again
variable1 = True
condition1 = variable1 or variable2

print("\nAfter changing variable 1 to True:")
print("Variable 1 is now:", variable1)
print("Variable 2 is:", variable2)
print("So the new condition is:", condition1, "\n")
27
python
# This is an example of using False as a condition in if statement
def is_positive(number):
    if number < 0:
        return False
    else:
        return True

# Testing the function with some values
print(is_positive(5)) # Output: True
print(is_positive(-3)) # Output: False

# This is an example of using pass statement as a placeholder
def my_empty_function():
    pass

# Calling the empty function
my_empty_function()
28
python
def divide(dividend, divisor):
    try:
        result = dividend / divisor
    except ZeroDivisionError as e:
        print("Error: Cannot divide by zero.")
        raise
    else:
        if result.is_integer():
            print(f"Result: {result} (This is an integer)")
            return int(result)
        else:
            print(f"Result: {result}")
            return result

# Calling the divide function with valid inputs
print("Result of dividing 10 by 3 is:")
print(divide(10, 3))

# Calling the divide function with invalid input (zero divisor)
try:
    print("Result of dividing 10 by 0 is:")
    divide(10, 0)
except ZeroDivisionError as e:
    print(e)
else:
    print("This should not be printed.")

# Demonstrating the use of False
def greater_than_five(number):
    if number > 5:
        return True
    else:
        raise ValueError("Number is not greater than five.")

if greater_than_five(4):
    print("Number is indeed greater than five.")
else:
    print("Number is not greater than five.")
29
python
def is_negative(num):
    if num < 0:
        return False
    else:
        return None

# Testing the function
print(is_negative(-5))   # prints: False
print(is_negative(5))    # prints: None
print(is_negative(-1))   # prints: False
print(is_negative(0))    # prints: None
print(is_negative(3))    # prints: None
30
python
def divide_by_zero(num):
    result = False
    try:
        result = num / 0
    except ZeroDivisionError:
        print("Error: Division by zero is not allowed.")
     finally:
        return result

# Testing the function
print(divide_by_zero(10)) # Prints: Error: Division by zero is not allowed.
print(divide_by_zero(2 / 3)) # Prints: Result: 0.6666666666666667
31
python
# Initialize a variable with a value that is initially considered true for the loop condition
my_number = 10

# Use while loop to continue executing the block as long as my_number is greater than zero (which is considered true)
while my_number > 0:
    print(my_number)

    # Decrease the value of my_number by one at each iteration
    my_number -= 1

# Now, my_number has become false (zero), and the loop ends
print("The number is no longer greater than zero, so the loop finishes.")
32
python
class MyContextManager:
    def __init__(self):
        self.value = "Initial value"

    def __enter__(self):
        print(f"Entering context manager with value: {self.value}")
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        if exc_type is not None:
            print(f"An exception occurred: {exc_val}.")
        else:
            print("Exiting context manager with value:", self.value)

if __name__ == "__main__":
    # Using False in an assignment and comparison
    a = False
    b = 0
    if not a:
        print("False is considered as an empty or false value.")
    elif b > 5:
        print(f"Number {b} is greater than 5.")
    else:
        print("The conditions are not met.")

    # Using with statement for context manager
    with MyContextManager() as cm:
        cm.value = "New value"
        print("Before exiting context manager, the value is:", cm.value)
33
python
def my_generator(start):
    if start < 0:
        yield False
        return

    for num in range(2, int(start**0.5) + 1):
        if start % num == 0:
            yield False
            break

    yield start

for prime in my_generator(13):
    print(prime)
34
python
# This variable will have a value that is deliberately set to False
is_sunny = False

# Let's assume the temperature is -15 degrees Celsius
temperature = -15

def get_message():
 if not is_sunny:
 message = "It's a rainy day. Sadly, I can't go out."
 else:
 message = f"The temperature today is {temperature} degrees Celsius. Let's go out and enjoy!"
 return message

# Get the message based on our conditions
print(get_message()))

# Now let's print the absolute value of the temperature
print("The absolute value of the temperature is:", abs(temperature))
35
python
# List of numbers to check if they are all greater than zero
numbers = [1, 2, 3, 4, 5]

# Using a for loop and an if statement to check each number individually
is_all_positive_individually = all(num > 0 for num in numbers)
print("All numbers are positive individually:", is_all_positive_individually)

# Directly using the all() function
is_all_positive_all = all(numbers)
print("All numbers are positive directly with all():", is_all_positive_all)

if not False:
    print("False is considered as false, so the following code does not execute")
    some_code()  # Some arbitrary code that doesn't get executed
36
python
# A list of boolean values
boolean_values = [False, True, False, True, False]

# Using False in a boolean expression
if False:
    print("This block will not be executed")
else:
    print("This block will be executed")

# Using any() function
def is_any_true(boolean_list):
    """
    This function uses the any() function to check if there's at least one True value in the given boolean list.
    """
    return any(bool(x) for x in boolean_list)

print("Any value in the list is true: ", is_any_true(boolean_values))
37
python
# Assigning False value
is_raining = False
print("Is it raining? ", is_raining)

# Printing ASCII characters
print("Printing some ASCII values:")
for i in range(123, 128): # printing special ASCII characters from 123 to 126 and 'DEL' (127)
    print(f"The ASCII value {i} represents the character: {chr(i)}")

# Comparing ASCII values using equality operator
char1 = 'A'
char2 = 'B'
print("Comparison of ASCII values:")
print(char1 == char2, "\n Char 1 is equal to char 2? ", False)
38
python
# Set a variable with a false boolean value
is_student = False
print("Is student is:", is_student)
print("Type of is_student is:", type(is_student))

# Convert an integer number to binary using bin() function
number = 5
binary_number = bin(number)[2:]
print("Binary representation of number 5 is:", binary_number)

# Check if boolean value is false and print corresponding binary representation
if not is_student:
    print("You are not a student")
    print("False in binary is:", bin(bool(not is_student))[2:])
else:
    print("You are a student")
39
python
# An assignment with a false value
var1 = 0

# Directly using False
var2 = False

# A list with no elements, an empty string or an empty tuple are considered false in Python
var3 = []
var4 = ""
var5 = ()

def is_even(num):
    """Check if number is even"""
    return num % 2 == 0

# Using bool() function to convert other types to boolean values
num1 = 5
num2 = -3
bool_num1 = bool(num1)
bool_num2 = bool(num2)

print("Values:")
print("var1:", var1)
print("False:", False)
print("var2:", var2)
print("var3:", bool(var3))
print("var4:", bool(var4))
print("var5:", bool(var5))
print("\nNumbers:")
print("num1:", num1, "\t->", bool_num1)
print("num2:", num2, "\t->", bool_num2)
\
# Applying bool() function to other objects like lists and strings
bool_list = bool([0])
bool_empty_list = bool([])
bool_str1 = bool("Hello")
bool_empty_str = bool("")
print("\nLists and Strings:")
print("Non-empty list [0]:", bool_list)
print("Empty list:", bool_empty_list)
print("String 'Hello':", bool_str1)
print("Empty string:", bool_empty_str)

# Using False as an assignment value or in conditional statements
if not is_even(num1):
    print(num1, "is odd.")
else:
    print(num1, "is even.")
40
python
# Let's define a boolean variable 'flag' with initial value as False
flag = False

print("Boolean Value: ", flag)

# Now let's create a bytearray and initialize it with some values
my_bytearray = bytearray([1, 2, 3, 4, 5])
print("Bytearray: ", my_bytearray)

# We can change the value of a boolean variable by assigning it to True
flag = True
print("Boolean Value after assignment to True: ", flag)

# We can also change the value of a bytearray by indexing and assigning a new value
my_bytearray[0] = 10
print("Bytearray after changing first element: ", my_bytearray)

# And we can compare two boolean values or bytearrays using '=' or '==' operator
bool_value1 = True
bool_value2 = False
print("Comparison of two boolean values: ", bool_value1 == bool_value2)

bytearray1 = bytearray([1, 2, 3])
bytearray2 = bytearray([1, 2, 3])
print("Comparison of two bytearrays: ", bytearray1 == bytearray2)

# But comparing bytearrays with '=' operator checks if they are same object in memory, not their values
bytearray1_same_memory = bytearray1
print("Comparison of bytearray and itself: ", bytearray1 == bytearray1_same_memory)

# Instead use 'bytes' or '==' operator for comparing bytearrays based on their contents.
print("Comparison of bytearrays using 'bytes' or '==' operator: ", bytes(bytearray1) == bytes(bytearray2))
41
python
# Assigning False value to a boolean variable
boolean_variable = False

# Converting a string to bytes
string_value = "Hello, World!"
bytes_value = string_value.encode()

# Comparing two boolean values using False
if not boolean_variable:
    print("Boolean variable is set to False")

# Printing the length and type of bytes value
print(f"Length of bytes value: {len(bytes_value)}")
print(f"Type of bytes value: {type(bytes_value)}")
42
python
# Define some functions
def func1():
    print("Function 1 called")

def func2():
    print("Function 2 called")

# False is a built-in constant representing false value. It's equivalent to the boolean value 0.
false_value = False

# callable() is a built-in function that returns True if an object is callable or False otherwise.
def is_callable(obj):
    return callable(obj)

# Demonstrate the use of False
if false_value:
    print("False is not true")
else:
    print("False is indeed false")

# Demonstrate the use of callable()
functions = [func1, func2]
for func in functions:
    if is_callable(func):
        func()
43
python
# This variable is set to False
is_active = False

if not is_active:
    print("User is inactive.")

# Demonstrating the use of chr() function
character = ord('A') # get the ASCII value of character 'A' using ord() function
print(chr(character)) # print the character corresponding to the given ASCII code using chr() function
44
python
class MyClass:
    # Define a class variable
    my_variable = 0

    @classmethod
    def set_my_variable(cls, value):
        """
        Set the class variable 'my_variable'
        :param value: The new value for 'my_variable'
        """
        if value < 0:
            print("Error: Value must be non-negative")
            return False
        cls.my_variable = value

    @classmethod
    def get_my_variable(cls):
        """
        Get the current value of 'my_variable'
        :return: The current value of 'my_variable'
        """
        return cls.my_variable
45
python
# False example
x = 0
if x:
    print("x is truthy (non-zero)")
else:
    print("x is falsy (zero or None)")
print(not x) # prints "True"
46
python
# Demonstrating False
print("Demonstrating False:")
boolean_value = False
if boolean_value:
    print("This should not be printed because Boolean value is False.")
else:
    print("This will be printed as the Boolean value is False.")

# Demonstrating complex numbers
print("\nDemonstrating complex numbers:")
real_part = 5.0
imaginary_part = 3.0j
complex_number = complex(real_part, imaginary_part)
print("Complex number: ", complex_number)
print("Real part: ", complex_number.real)
print("Imaginary part: ", complex_number.imag)
print("Conjugate: ", complex_number.conjugate())
print("Abs value: ", abs(complex_number))
print("Arg value: ", arg(complex_number))
47
python
class MyClass:
    def __init__(self, name, age):
        self.name = name
        self.age = age

# Create an instance of MyClass
my_instance = MyClass("John Doe", 30)

print(f"Name: {my_instance.name}")
print(f"Age: {my_instance.age}")

# Set some additional attributes using False (as a sentinel value)
my_instance.__dict__["is_student"] = False
my_instance.__dict__["is_employed"] = False

print(f"Is Student: {my_instance.is_student}")
print(f"Is Employed: {my_instance.is_employed}")

# Delete attributes using delattr
delattr(my_instance, "is_student")
delattr(my_instance, "is_employed")

print("After deleting attributes:")
for key in my_instance.__dict__.keys():
    print(f"{key}: {my_instance.__dict__[key]}")
48
python
# Define a dictionary for storing answers and their corresponding correct values
answers = {
    "What is the smallest number in the set {0, 1, 5, 7, 9}?": False,
    "What is the result of adding 2 and 3?": (2, 3, 5),
    "Which number is odd among these {4, 6, 9}?": False,
    "What is the sum of 7 and 3?": 10,
    "Which number is even among these {1, 4, 8}?": True
}

# Function to check user's answer and return result
def check_answer(question, user_answer):
    correct_answer = answers[question]
    if type(correct_answer) is bool:
        if user_answer == correct_answer:
            print("Correct!")
        else:
            print("Incorrect.")
    elif type(correct_answer) is list:
        if user_answer in correct_answer:
            print("Correct!")
        else:
            print("Incorrect.")
    else:
        if user_answer == correct_answer:
            print(f"Correct! The answer is {correct_answer}")
        else:
            print(f"Incorrect. The answer is {correct_answer}")

# Quiz the user with questions and check their answers
questions = [
    "What is the smallest number in the set {0, 1, 5, 7, 9}?",
    "What is the result of adding 2 and 3?",
    "Which number is odd among these {4, 6, 9}?",
    "What is the sum of 7 and 3?",
    "Which number is even among these {1, 4, 8}?"
]

for i in range(len(questions)):
    print(f"Question {i+1}: {questions[i]}")
    user_answer = input("Your answer: ")
    check_answer(questions[i], user_answer)
49
python
class MyClass:
    def __init__(self, name, age):
        self.name = name
        self.age = age
        self.is_student = True

    def greet(self):
        print(f"Hello, {self.name}!")

my_obj = MyClass("John Doe", 25)

# Check if is_student is False for my_obj
if not my_obj.is_student:
    print("This object is not a student.")
else:
    print("This object is a student.")

# Print all the attributes and methods of my_obj using dir()
print(dir(my_obj))
50
python
# This is a simple program that calculates the quotient and remainder of a division operation using divmod() function
def main():
    # Set up some input values
    dividend = 15
    divisor = 4

    # Perform the division using divmod() function
    (quotient, remainder) = divmod(dividend, divisor)

    # Print the result with a message
    print(f'The quotient of {dividend} divided by {divisor} is: {quotient}')
    print(f'The remainder of {dividend} divided by {divisor} is: {remainder}')

    # Demonstrate False value
    boolean_value = False
    if boolean_value:
        print('This should not be printed because the boolean value is False')
    else:
        print('This will be printed because the boolean value is False')
        print('However, the condition in the if statement is never executed since the value is already known to be False')
        print('So, it is more common to use an if statement with a conditional expression that can evaluate to True or False')

if __name__ == '__main__':
    main()
51
python
# List of some values
data = [1, "apple", 3.14, "banana", 5]

# Using a for loop with enumerate() to iterate over the list and check if each element is false
for index, value in enumerate(data):
    if not value:
        print(f"The item at index {index} is false: {value}")
    else:
        print(f"The item at index {index} is truthful: {value}")
52
python
# Define a dictionary with keys having strings representing false values
false_values = {
    "zero": "0",
    "empty_list": "[],",
    "empty_tuple": "(),"
}

def check_false(value):
    """
    Check if the given value is false.

    :param value: A value to be checked for falseness.
    :return: True if the value is false, False otherwise.
    """
    return value == False or eval(value)

# Check false values using check_false function
for key, value in false_values.items():
    print(f"Is '{key}' false? - {check_false(value)}")
53
python
# Simple usage of False
if not some_condition:
    print("This condition is False")
else:
    print("This condition is True")

some_condition = False
54
python
# A list of tuples representing numbers and their boolean values based on a condition
numbers = [(2, True), (0, False), (5, True), (-3, False), (1, True)]

# The condition for filtering the elements. In this example, we keep only the numbers greater than zero.
def is_positive_number(number):
    return number[0] > 0

# Filter the list based on the given condition using filter() function and False as default value
positive_numbers = filter(is_positive_number, numbers)

# Convert the filter object to a list to store the results
positive_numbers = list(positive_numbers)

print("List of original numbers: ", numbers)
print("Filtered positive numbers: ", positive_numbers)
55
python
# Assigning false value to a variable
false_value = False
print("False value: ", false_value)

# Checking if false value is equal to another false value
another_false_value = False
if false_value == another_false_value:
    print("Both are False")
else:
    print("At least one of them is not False")

# Assigning a float value to a variable
float_value = 3.14159265
print("Float value: ", float_value)

# Checking if false value is equal to a float value
if false_value == float_value:
    print("False and Float are Equal")
else:
    print("False and Float are not Equal")
56
python
# Define a variable with a false value
is_raining = False

# Use if statement with False condition
if not is_raining:
    print("It's sunny today. Let's go for a picnic!")
else:
    print("It's raining today. Let's stay at home.")

# Use format() with a false condition in the template string
message = f"The weather is {not is_raining and 'sunny' or 'rainy'}. "
message += "Let's do {0 if not is_raining else 'not'} go for a walk."

print(format(message, locals()))
57
python
# Define an empty set using frozenset
my_set = frozenset()

# Demonstrate that frozenset is immutable by trying to add an element
try:
    my_set.add(42)
except TypeError as e:
    print("Error:", e)
    
print("my_set is a frozenset: ", isinstance(my_set, frozenset))
print("my_set is empty: ", len(my_set) == 0)

# Define a boolean value False
bool_value = False

# Compare the two using equality operator (==)
if my_set == frozenset() and bool_value is False:
    print("Both my_set and False have the same value as an empty set and False respectively.")
else:
    print("Oops! Something went wrong!")
58
python
class MyClass:
    def __init__(self):
        self.bool_attribute = False
        self.another_false_attribute = False
        self.third_attribute = False

# Create an instance of MyClass
my_instance = MyClass()

# A dictionary to map attribute names to their values
attributes_dict = {
    'bool_attribute': True,  # Change the value for demonstration purposes
    'another_false_attribute': False,
    'third_attribute': None
}

# Use getattr() function to retrieve the attributes of an instance based on their names from the dictionary
for attribute_name, attribute_value in attributes_dict.items():
    setattr(my_instance, attribute_name, attribute_value)  # Set the attributes if needed
    print(f"The value of {attribute_name} is: {getattr(my_instance, attribute_name)}")

# Checking some false values in the instance
print("Is bool_attribute False? ", not getattr(my_instance, 'bool_attribute'))  # This will print True because the value of bool_attribute was changed to True earlier
print("Is another_false_attribute False? ", getattr(my_instance, 'another_false_attribute'))  # This will print False as it is defined in the class and not changed
59
python
# Assigning a global variable 'flag' initially set to False
flag = False

def my_function():
    # Changing the value of the global 'flag' inside the function
    flag = True

# Checking and printing the initial value of 'flag'
if not flag:  # Using False as a comparison value
    print("Flag is initially set to False")
else:
    print("Flag is initially set to True")
    
# Calling my_function() and checking the updated value of 'flag'
my_function()
if not flag:
    print("Flag remains False after function call")
else:
    print("Flag becomes True after function call")

# Accessing the global 'flag' using globals() dictionary
print(globals()['flag'])
60
python
# Define a custom class named MyClass
class MyClass:
    def __init__(self, value=0):
        self.value = value

# Create an instance of MyClass
my_instance = MyClass(5)

# Using hasattr() to check if 'MyInstance' has an attribute named 'some_attribute' (which it doesn't)
if not hasattr(my_instance, 'some_attribute'):
    print("The instance 'my_instance' does not have the 'some_attribute'.")
    # Assign a new attribute to the instance if the condition is true
    my_instance.some_attribute = 10
    print(f"Assigned new attribute 'some_attribute' with value: {my_instance.some_attribute}")
else:
    print("The instance 'my_instance' already has the 'some_attribute'.")

# Printing the values of attributes of 'my_instance' to verify the changes
print(f"The value of 'value' attribute is: {my_instance.value}")
print(f"The value of 'some_attribute' attribute is: {my_instance.some_attribute}")
61
python
# Demonstrating False value
def is_even(num):
    """ returns True if number is even, otherwise False"""
    return num % 2 == 0

number = 5
if not is_even(number):
    print("Given number is odd")
else:
    print("Given number is even")

# Demonstrating use of hash() function
def my_hash(string):
    """ A simple hash function that converts a string to an integer"""
    total = 0
    for char in string:
        total += ord(char)
    return total % 1024

text = "Python"
print("Original Hash: ", hash(text))
print("Custom Hash: ", my_hash(text))
62
python
# This is a simple program that checks if a number is even or odd using a boolean variable

def is_even(number):
    # Initialize the flag with False value
    is_even = False
    
    # Check if number is even
    if number % 2 == 0:
        is_even = True
        
    return is_even

# Check some numbers and print the result
print("Is 10 an even number? ", is_even(10))
print("Is 5 an even number? ", is_even(5))
print("Is 3 an odd number? ", not is_even(3))

# Using help() function to get information about a built-in function or module
print("\nUsing help():")
help(abs) # Prints the documentation for the abs() function
63
python
# Define a boolean variable
boolean_value = False

# Print the boolean value
print("Boolean value: ", boolean_value)

# Convert the Boolean value to its corresponding integer value (0 for False, 1 for True)
integer_value = int(boolean_value)

# Convert the integer value to hexadecimal format using the 'hex()' function
hexadecimal_value = hex(integer_value)[2:] # Hexadecimal representation starts with '0x' which is removed here

# Print the hexadecimal value
print("Hexadecimal value: ", hexadecimal_value)
64
python
# Demonstrating False value
bool_value = False
if not bool_value:
    print("The boolean value is False")
else:
    print("The boolean value is True")

# Demonstrating id() function
any_variable = 10
print(f"The ID of the variable 'any_variable' is {id(any_variable)}")
another_variable = any_variable
print(f"The ID of the variable 'another_variable' is {id(another_variable)}")

# Both variables are the same object, so their ids are equal
print("Are 'any_variable' and 'another_variable' the same? ", id(any_variable) == id(another_variable))

# Changing the value of 'another_variable'
another_variable = 20
print(f"The ID of the variable 'another_variable' is now {id(another_variable)}")
print("Are 'any_variable' and 'another_variable' the same? ", id(any_variable) == id(another_variable))
65
python
# This variable is initialized with a False value
should_quit = False

while not should_quit:
    user_answer = input("Do you want to quit? (y/n): ")
    
    # Convert user answer to lowercase and check if it equals 'y'
    if user_answer.lower() == 'y':
        should_quit = True
        
# Program ends here
66
python
# Assigning different values to my_variable
my_variable = 5  # An integer value
my_variable = "Hello"  # A string value
my_variable = False  # A boolean value

print("Value of my_variable: ", my_variable)

if (type(my_variable) == int and my_variable == 0) or my_variable is False:
    print("my_variable is either an int equal to zero or a boolean False.")
else:
    print("my_variable is not an int equal to zero or a boolean False.")
67
python
# Define a custom class
class MyNumber:
    def __init__(self, value):
        self.value = value

# Function that checks if a given argument is False or an instance of MyNumber class
def check_arg(arg):
    if arg is False or isinstance(arg, MyNumber):
        print("Argument is either False or an instance of MyNumber")
    else:
        print("Argument is not False and not an instance of MyNumber")

# Test cases
check_arg(False)                             # True is a boolean value, but False is a special value, so it's considered as a falsy value
check_arg(0)                                # Zero is a number, but it's not an instance of MyNumber
check_arg(MyNumber(5))                       # An instance of MyNumber
check_arg("Hello")                           # A string is neither False nor an instance of MyNumber
check_arg([1, 2, 3])                         # A list is neither False nor an instance of MyNumber
check_arg({"key": "value"})                   # A dictionary is neither False nor an instance of MyNumber
check_arg(1j)                                # Complex numbers are not instances of MyNumber
68
python
# Define some base and derived classes
class BaseClass:
    pass

class DerivedClass(BaseClass):
    pass

# Using False
x = 10
y = "hello"
z = False
print("x is false:", x is False)
print("y is false:", y is False)
print("z is false:", z)

# Using issubclass()
print("Is DerivedClass a BaseClass?", issubclass(DerivedClass, BaseClass))
69
python
# Custom Iterable Class - 'MyNumbers'
class MyNumbers:
    def __init__(self, start, end):
        self.start = start
        self.end = end
        self.index = start - 1

    def __iter__(self):
        return self

    def __next__(self):
        if self.index >= self.end:
            raise StopIteration
        result = self.index + 1
        self.index += 1
        return result

if __name__ == "__main__":
    nums = MyNumbers(1, 5)  # Create an instance of 'MyNumbers' class with range 1 to 5

    for number in iter(nums):
        print(number)  # Print each number from the iterable
        if number == 4:
            nums.__next__()  # Manually call next() method to skip number 4 (even though it's falsey, 'False' is still used for comparison)
            print("Skipped number 4")

# Output:
# 1
# Skipped number 4
# 5
70
python
# An empty list as an example of a collection that has a length of 0
my_list = []

# Check if my_list is empty (has a length of 0) using len() and a boolean comparison with False
if len(my_list) == 0:
    print("The list is empty.")
else:
    # If the list has an element, print its first element
    print("The first element of the list is:", my_list[0])

# Use False directly in a boolean expression
if not my_list:
    print("The list is empty using boolean negation.")
else:
    print("The list has an element.")
71
python
# Initialize an empty list called 'my_list'
my_list = []

# Demonstrate assigning False to a variable 'is_finished'
is_finished = False

# Add some elements to the list 'my_list'
my_list.append(1)
my_list.append(2)
my_list.append(3)

# Display the current state of the variables and the list
print("The variable is_finished is:", is_finished)
print("My list currently looks like this: ", my_list)

# Now let's assume that some tasks have been finished,
# so we set 'is_finished' to True
is_finished = True

# We can check the condition of the variable and use it to control accessing elements in the list
if is_finished:
    print("List items are:", my_list[0], my_list[1])
else:
    print("Tasks are not finished yet")
72
python
def print_if_false(condition):
    if condition is False:
        print("The condition is false")

# Define some variables
name = "Alice"
age = 25
is_student = False

print("Before function call:")
print(f"Name: {name}")
print(f"Age: {age}")
print(f"Is student: {is_student}")

# Call the print_if_false function with the is_student variable as an argument
print("Function call:")
print_if_false(is_student)

print("After function call:")
print(f"Name: {name}")
print(f"Age: {age}")
print(f"Is student: {is_student}")

# Print the locals dictionary to check its contents
print("Locals dictionary:")
locals_dict = locals()
for key, value in locals_dict.items():
    print(f"{key}: {value}")
73
python
# Create a list of False values
false_list = [False] * 5
print("Original list of False values: ", false_list)

# Define a function that negates a boolean value
def negate(value):
    return not value

# Use map to apply the negate function to each element in false_list
negative_list = list(map(negate, false_list))
print("List of negated False values: ", negative_list)
74
python
# Define some values
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
false_value = False

# Use max with a list of numbers and a sentinel value less than any number in the list
largest_number = max(numbers)
print("The largest number from the given list is:", largest_number)

# Use max with two numbers and `False` as a sentinel value, which will return the first number as it's false for all comparison purposes
comparison = max(10, False)
print("The maximum of 10 and False is:", comparison)

# Comparing False to numbers and using max to find the largest number among given numbers
largest_among_false_and_numbers = max([False, *numbers])
print("The largest number among False and given numbers is:", largest_among_false_and_numbers)
75
python
import numpy as np

# Creating a boolean value 'False'
boolean_value = False
print("Boolean value: ", boolean_value)

# Creating a NumPy array and setting some values to False using mask
arr = np.array([1, 2, 3, 4, 5], dtype=bool)
arr[0] = False
arr[2] = False
print("NumPy array: ", arr)

# Using memoryview for efficient access to contiguous arrays of data
data = np.array([1, 2, 3, 4, 5], dtype=np.float32)
memview = memoryview(data)

# Accessing elements using memoryview is faster than creating a new array copy
print("Element at index 0 using memoryview: ", memview[0])
print("Element at index 0 using numpy array: ", np.array(data)[0])

# Slice memoryview
slice_start = 2
slice_stop = 4
memview_slice = memview[slice_start:slice_stop]
print("Sliced memoryview: ", memview_slice)
print("Sliced numpy array: ", np.array(data)[slice_start:slice_stop])
76
python
# A list of numbers
numbers = [5, 10, 3, 8, False, 2]

# Find the minimum number in the list (ignoring False)
min_number = min(numbers)

print("Minimum number: ", min_number)
77
python
# Using False as a comparison result
def is_even(num):
    """Return True if number is even, else False"""
    return num % 2 == 0

num = 5
if not is_even(num):
    print("Number is odd.")
else:
    print("Number is even.")

# Using next() as a method of list iterators
def count_elements(iterable, element):
    """Count occurrences of given element in an iterable"""
    counter = 0
    for item in iterable:
        if item == element:
            counter += 1
    return counter

numbers = [1, 2, 3, 2, 1, 2]
element = 2
count = count_elements(numbers, element)
print("Element '{}' occurs {} times in the list.".format(element, count))

iterator = iter(numbers)
next_number = next(iterator)
print("First number in the list is: {}".format(next_number))

# In this example, using False and next() together
while next_number != element:
    if not isinstance(next(iterator), int):
        raise TypeError("Expected an integer, but got a different type.")
    next_number = next(iterator)
print("Found '{}' in the list.".format(element))
78
python
class MyObject:
    def __init__(self, value):
        self.value = value

# Creating instances of MyObject
obj1 = MyObject(True)
obj2 = MyObject(False)

# Demonstrating False and object comparison
print(type(False))       # <class 'bool'>
print(type(obj1))       # <class '__main__.MyObject'>
print(False == obj1.value)   # False
print(False is obj1)    # False

# Comparing two objects with different values
print(obj1 == obj2)    # False
print(obj1 is obj2)    # False
79
python
x = 0
if x < 0:
    print("Negative number")
else:
    print("Non-negative number")

# Output: Non-negative number (because 0 is considered non-negative)

if not x:
    print("Zero or False")
else:
    print("Something other than Zero or False")

# Output: Zero or False
80
python
# This is a simple script that attempts to open a file named 'nonexistent.txt'. If the file does not exist, the program will raise a FileNotFoundError.

# First, we set a variable to False as an example:
my_variable = False

# Next, we use the open() function to attempt opening a file:
try:
    file = open('nonexistent.txt', 'r')
except FileNotFoundError as error:
    print(f"The file '{error}' was not found.")
    
# Since we set my_variable to False at the beginning, the following conditional statement will be skipped:
if my_variable:
    print("my_variable is True")
else:
    print("my_variable is False")
81
python
# This variable is assigned with the boolean value False
is_sunny = False

# The ord() function returns the Unicode code point of a character.
char = 'A'
codepoint = ord(char)

print("Is it sunny outside? ", is_sunny)
print("Unicode code point for character 'A':", codepoint)
82
python
# Assigning False to a variable
my_bool_value = False

print("Is my_bool_value is True? ", bool(my_bool_value))  # Output: False

# Using pow() function
base = 2.0
exponent = 3
result = pow(base, exponent)

print("Result of base raised to the power of exponent: ", result)  # Output: 8.0 (2.0^3)
83
python
# Assigning False to a variable
my_boolean = False

# Using False in an if statement
if my_boolean:
    print("This condition is True")
else:
    print("This condition is False")

# Printing False directly
print(False)

# Using False as an argument to the print() function
print("The Boolean value False is:", False)
84
python
# Define a boolean variable
is_active = False

if not is_active:
    print("System is inactive")
else:
    print("System is active")
85
python
# Define a function that checks if a number is even or odd using a flag variable 'is_even'
def check_even_odd(num):
    is_even = False  # Initially assume the number is odd
    
    # Check if the number is even or odd based on its remainder when divided by 2
    if num % 2 == 0:
        is_even = True
        
    return is_even, num

# Use the function to check for a few numbers and print the results
for i in range(5):
    even_odd = check_even_odd(i)
    print(f"{i} is {'' if even_odd[0] else 'odd'} and its square is {i**2}")
86
python
# Using False
boolean_value = False
print("Boolean value: ", boolean_value)
print("Negation of boolean value: ", not boolean_value)

# Using repr()
any_value = 123
print("Value: ", any_value)
print("Representation of the value using repr(): ", repr(any_value))

# False and repr() together
boolean_repr = repr(False)
print("Representation of False using repr(): ", boolean_repr)
87
python
# A list to demonstrate with
my_list = [1, 2, 3, 4, 5]

# Using False as a value
if not my_list:
    print("The list is empty")
else:
    print("The list has some elements")
    
# Using reversed() function
print("Original list:", my_list)
my_reverse_iter = reversed(my_list)

# Using False with an iterator (reversed list)
if not next(my_reverse_iter, False):
    print("The reversed list is empty")
else:
    print("First element of the reversed list:", next(my_reverse_iter))

print("Reversed list:")
for i in reversed(my_list):
    print(i)
88
python
# Define a decimal number with more digits than needed
decimal_number = 3.14159265358979323846

# Check if the number 0 is equal to the decimal number (-0 and 0 are considered equal in Python)
if 0.0 == decimal_number:
    print("Decental number is equal to zero (False due to type checking)")
else:
    # Round the decimal number to two decimal places using round function
    rounded_number = round(decimal_number, 2)
    print(f"Rounded decimal number to two decimal places: {rounded_number}")

# Use False as a boolean value in if statement
if not (decimal_number > 3):
    print("Decental number is less or equal than 3")
else:
    print("Decental number is greater than 3")
89
python
# Create an empty set
my_set = set()

# Add some elements to the set
my_set.add(1)
my_set.add(2)
my_set.add(3)

print("Elements in the set: ", my_set)

# Check if an element is in the set using 'in' keyword
if 2 in my_set:
    print("2 is present in the set")
else:
    print("2 is not present in the set")

# Remove an element from the set
my_set.remove(2)

print("Elements in the set after removing 2: ", my_set)

# Check if an empty set is equal to False
if not my_set:
    print("An empty set is equivalent to False")
else:
    print("An empty set is not equivalent to False")
90
python
class MyClass:
    def __init__(self, name):
        self.is_enabled = True
        self.name = name

def toggle_enable(obj):
    obj.is_enabled = not obj.is_enabled

if __name__ == "__main__":
    my_instance = MyClass("Example")
    print(f"Name: {my_instance.name}")
    print(f"Is enabled: {my_instance.is_enabled}")

    toggle_enable(my_instance)
    print(f"Is enabled after toggle: {my_instance.is_enabled}")

    # Demonstrating setattr usage
    other_instance = MyClass("Another example")
    attribute_name = "new_attribute"

    setattr(other_instance, attribute_name, False)
    print(f"{other_instance.name} has {attribute_name}: {getattr(other_instance, attribute_name)}")
91
python
# Define a list
my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]

# Using False as the slice step to get all elements except for every second element
odd_numbers = my_list[::-2 if False else 1]

print("List with every second number removed: ", odd_numbers)

# Using slicing to extract a portion of the list
start = 0
stop = 3
step = 1
slice_part = my_list[start:stop:step]

print("First three elements: ", slice_part)
92
python
# List of items to be sorted
unsorted_list = [5, 2, 7, 1, 4, 3, 8, False]

# Using sorted function with default sorting (ascending order)
sorted_list = sorted(unsorted_list)
print("Sorted list in ascending order:")
print(sorted_list)

# Using sorted function with reverse=True for descending order
reverse_sorted_list = sorted(unsorted_list, reverse=True)
print("Sorted list in descending order:")
print(reverse_sorted_list)

# Checking False value
if False:
    print("This statement will not be executed as False is a false value.")
else:
    print("This statement will be executed as False is a false value and the if condition is not met.")
93
python
class MyClass:
    # A boolean value that is always set to False
    my_constant = False

    @staticmethod
    def static_function():
        """A simple static method"""
        print("This is a static method")

if __name__ == "__main__":
    # You cannot call an instance method on an uninitialized class
    # But you can call a static method directly on the class
    MyClass.static_function()

    # Attempt to access a non-existent instance method will result in an error
    # MyClass().my_non_existent_method()  # TypeError: 'MyClass' object has no attribute 'my_non_existent_method'
94
python
# Define a boolean variable 'is_rainning' with an initial value of False
is_raining = False

# Print the value of is_raining in its boolean form
print("Is it raining? ", is_raining)

# Now let's change the value of 'is_raining' and see the impact
is_raining = True

# Print the value of 'is_raining' again, this time with a string representation using str() function
print("Is it raining? ", str(is_raining))

# Another example: an empty list is considered as False in boolean context
my_list = []
print("Is my_list empty? ", str(bool(my_list)))

# Adding an element to the list changes its truth value and string representation
my_list.append(1)
print("Is my_list empty now? ", str(bool(my_list)))
95
python
# This function takes an iterable (like a list or tuple) as an argument,
# and returns the sum of all elements in that iterable.
def sum_of_numbers(numbers):
    return sum(numbers)

# List of numbers
numbers = [1, 2, 3, 4, 5]

# Use False as an argument to check if the list is empty
sum_of_positives = sum_of_numbers(numbers) if numbers else 0

print("Sum of all numbers: ", sum_of_positives)
96
python
# A boolean variable 'is_even' set to False initially
is_even = False

# Check if a number is even by checking its remainder when divided by 2
number = 5
if number % 2 == 0:
    is_even = True

print(f"Number {number} is even: {is_even}")
97
python
# Define a tuple with some values
my_tuple = (1, "apple", 3.14, True)

# Use False value in a conditional statement
if not my_tuple[2]:  # checking if the second element is False (false is considered as 0 in Python)
    print("The second element is False or 0")
else:
    print("The second element is not False or 0")

# Use False value to check if a tuple is empty
if not my_tuple:
    print("The tuple is empty")
else:
    print("The tuple has some elements")

# Use False as default value for a function
def greet(name=""):
    if not name:
        name = "Anonymous"
    print("Hello, " + name)

greet()  # prints "Hello, Anonymous"
greet("Alice")  # prints "Hello, Alice"
98
python
# Define a custom class with a boolean value as an attribute
class MyClass:
    def __init__(self, is_active=False):
        self.is_active = is_active

# Create instances of MyClass with different boolean values
instance1 = MyClass()
instance2 = MyClass(True)

# Check the type and value of the boolean attribute for each instance
print(f"Type of instance1.is_active: {type(instance1.is_active)}")
print(f"Value of instance1.is_active: {instance1.is_active}")
print(f"Type of False: {type(False)}")
print(f"Value of False: {False}")

# Comparing False with an attribute value using == operator
print(f"Comparing instance1.is_active with False: {instance1.is_active == False}")
99
python
# Define some variables
var1 = 10
var2 = "Hello"

# Check if a variable is defined and its value is false
if not var1 or (var2 and var2 == ""):
    print("One of the variables is not defined or has a false value.")
else:
    print("Both variables are defined and have non-false values.")

# Get the dictionary of current variables
variables = vars()
print("Current variables:")
print(variables)

# Assign a false value to a variable
variables["var3"] = False
print("Updated variable with a false value:")
print(variables)
100
python
# List of tuples with two elements each, representing pairs of numbers
numbers_list = [(1, 2), (3, 4), (5, 6), (7, 8)]

# Use zip() to iterate over the pairs in numbers_list in parallel
pair_iterator = zip(numbers_list)

# Iterate through each pair using next() and unpacking
try:
    while True:
        # Get the next pair from the iterator, or raise a StopIteration if there are no more pairs
        pair = next(pair_iterator)
        
        # Unpack the pair into two separate variables, x and y
        x, y = pair
        
        print("x:", x)
        print("y:", y)

        # Perform a comparison with False, this will eventually return False when there are no more pairs left
        if not (x + y):
            break
except StopIteration:
    print("No pair found where x and y add up to zero")
101
python
import os

# Set a variable to False
is_morning = False

print("Is it morning?", is_morning)

# Use os.path.exists() to check if a file exists and print a message accordingly
file_path = "example.txt"
if not os.path.exists(file_path):
    print(f"The file '{file_path}' does not exist.")
else:
    print(f"The file '{file_path}' exists.")

# Use an if statement with False to check if a condition is not met
if not is_morning:
    print("It's not morning yet. Please wait a bit longer.")
else:
    print("Good morning! Let's start the day.")
102
python
import sys

# This assignment sets a variable with a false value
is_morning = False

print("Good morning! (unless it is not, in which case it is good evening or good night)")
if not is_morning:
    print("It's not morning yet.")
    sys.exit()  # Exit the program if it's not morning

# Perform tasks for a morning routine
print("Making coffee...")
print("Boiling water...")
print("Grinding beans...")
print("Brewing coffee...")
print("Preparing toast...")
print("Toasting bread...")
print("Buttering toast...")
print("Coffee is ready!")
print("Enjoy your breakfast!")
103
python
import math

# Assigning false value
is_rainy = False
print("Is it raining? ", is_rainy)

# Perform some mathematical operations using math module
# Square root of number 121
num = 121
sqrt = math.sqrt(num)
print("Square root of", num, "is: ", sqrt)

# Calculate sine, cosine and tangent values for angle 45 degrees
angle_in_radians = math.pi/4
sin_val = math.sin(angle_in_radians)
cos_val = math.cos(angle_in_radians)
tan_val = math.tan(angle_in_radians)
print("Sine value: ", sin_val, "Cosine value: ", cos_val, "Tangent value: ", tan_val)
104
python
import random

threshold = False  # Set threshold to False
number = random.random()  # Generate a random number between 0 and 1

if number > threshold:
    print("The random number is greater than the threshold.")
else:
    print("The random number is not greater than the threshold or is equal to it.")
105
python
import datetime

# Boolean value: False
is_rainy = False
print("Is it raining? ", is_rainy)

# DateTime: current date and time
now = datetime.datetime.now()
print("Current date and time: ", now)

# Check if today is weekend (Saturday or Sunday)
is_weekend = now.weekday() in [5, 6]
print("Is today a weekend? ", is_weekend)

# DateTime: create a specific date and time
my_birthday = datetime.datetime(1990, 3, 21, 12, 30)
print("My birthday: ", my_birthday)

# Check if today is my birthday
is_my_birthday = now == my_birthday
print("Is today my birthday? ", is_my_birthday)
106
python
import time

def is_even(number):
    """Return True if number is even, False otherwise."""
    return number % 2 == 0

def main():
    # Get user input for a number
    try:
        number = int(input("Enter a number: "))
    except ValueError:
        print("Invalid input. Please enter an integer.")
        return

    if is_even(number):
        print(f"{number} is even.")
    else:
        print(f"{number} is odd.")
        start = time.time()  # record the starting time
        for i in range(1000000):
            i * 2  # an idle loop to delay execution a bit
        elapsed = time.time() - start  # calculate the elapsed time
        print(f"Square of {number} is {number ** 2}, and it took {elapsed} seconds.")

if __name__ == "__main__":
    main()
107
python
import json

# Define an empty dictionary
data = {}

# Set a key with a False value
data['key_with_false'] = False

# Check if 'key_with_false' is present and its value is False
if 'key_with_false' in data and data['key_with_false'] is False:
    print("The value of 'key_with_false' is False")
else:
    print("The value of 'key_with_false' is not False or not present in the dictionary")

# Convert the dictionary to a JSON string
json_string = json.dumps(data)

# Print the JSON string
print("\nJSON representation of the dictionary:")
print(json_string)

# Try parsing the JSON string back into a dictionary
try:
    parsed_data = json.loads(json_string)
except json.JSONDecodeError as e:
    print(f"\nFailed to parse JSON: {e}")
else:
    # Check if 'key_with_false' still has the same value
    if 'key_with_false' in parsed_data and parsed_data['key_with_false'] is False:
        print("The value of 'key_with_false' in the parsed dictionary is also False")
    else:
        print("The value of 'key_with_false' in the parsed dictionary is different from the original one")
108
python
import csv

# Assume we have a CSV file named "data.csv" in the same directory as this script
file_path = "data.csv"

# Initialize an empty list to store our data
data = []

try:
    # Open the CSV file with 'r' mode, which stands for read-only
    with open(file_path, newline="") as csvfile:
        reader = csv.reader(csvfile)
        
        # Check if there are any rows in the CSV file (i.e., if it is empty)
        header = next(reader, False)
        data = list(reader) if header else data

except FileNotFoundError:
    print("File not found!")

if len(data) == 0:
    print("CSV file is empty.")
else:
    print("CSV file contains the following data:")
    for row in data:
        print(row)

# Close the 'False' statement, which was opened implicitly when using 'try'
finally:
    # Close the CSV file (even if there was an error)
    with open(file_path, "r", newline="") as csvfile:
        csvfile.close()
109
python
import sqlite3

# Create a new SQLite database connection and cursor
def create_connection():
    conn = None
    try:
        conn = sqlite3.connect('example.db')
    except sqlite3.Error as e:
        print(e)
    return conn

def create_table(conn):
    cursor = conn.cursor()
    table_query = """CREATE TABLE IF NOT EXISTS users (
                        id INTEGER PRIMARY KEY,
                        name TEXT NOT NULL,
                        is_active BOOLEAN NOT NULL);"""
    cursor.execute(table_query)

def insert_data(conn):
    cursor = conn.cursor()
    data = [(1, 'John Doe', True),
            (2, 'Jane Doe', False)]
    for row in data:
        query = """INSERT INTO users VALUES (?, ?, ?)"""
        cursor.execute(query, row)

def query_data(conn):
    cursor = conn.cursor()
    query = "SELECT id, name, is_active FROM users WHERE is_active = ?"
    False_value = False
    cursor.execute(query, (False_value,))
    rows = cursor.fetchall()

    for row in rows:
        print(f"ID: {row[0]}, Name: {row[1]}, is_active: {row[2]}")

if __name__ == '__main__':
    connection = create_connection()
    if connection is not None:
        create_table(connection)
        insert_data(connection)
        query_data(connection)
        connection.commit()
        connection.close()
110
python
# Demonstrating False as a boolean value

x = 5
y = 10
z = "not a number"

if x < y:
    print("x is less than y")
elif x > y:
    print("x is greater than y")
else:
    print("x is equal to y")

# false statement
if not(x < y):
    print("x is not less than y (which is False)")
111
python
import requests

# Set the URL to send a request to (this URL does not exist)
url = "http://nonexistent.url/doesnotexist"

# Send the GET request and assign the response to a variable
response = requests.get(url)

# Check if the status code of the response is 200 OK (which would mean the URL exists and the request was successful)
if response.status_code == 200:
    print("The URL exists and we received a successful response")
else:
    print(f"The URL {url} does not exist or the request failed with status code {response.status_code}")

# The following line will always be executed, regardless of the result of the previous if statement
print("Program completed")

# Since we know the URL does not exist, we expect a False response from the if statement
# This is just to demonstrate that False can be used in Python like any other boolean value
if response.status_code != 200:
    print("The condition is False")
112
python
import urllib.request

# Set up a false condition
is_sunny = False

# Define a function to fetch weather data from a URL using urllib
def get_weather_data(location):
    url = f"http://weatherapi-com.github.io/ApiExamples/local/YOUR_API_KEY.json?q={location}"
    response = urllib.request.urlopen(url)
    data = response.read()
    return data

# If it's sunny, print a message saying so; otherwise, fetch weather data using urllib
if is_sunny:
    print("It's sunny today!")
else:
    location = "New York"  # You can change this to any location you want
    weather_data = get_weather_data(location)
    print(f"Weather data for {location}:")
    print(weather_data.decode())
113
python
import pickle

# Demonstrating False value
bool_values = [True, False]
print("Boolean values: ", bool_values)

# Demonstrating pickle module with a dictionary containing a boolean value
my_dict = {
    "name": "John Doe",
    "is_student": False
}

print("\nMy dictionary: ", my_dict)

# Serializing (pickling) the dictionary using pickle
with open("my_dict.pkl", "wb") as file:
    pickle.dump(my_dict, file)

print("\nDictionary pickled successfully.")

# Deserializing (unpickling) the dictionary from pickle
with open("my_dict.pkl", "rb") as file:
    loaded_dict = pickle.load(file)

print("\nLoaded dictionary: ", loaded_dict)
114
python
import subprocess

# Setting up the command to be executed (a non-existent command for demonstration)
command = "non_existent_command"

try:
    # Using subprocess.check_call() to execute the command, with stdout and stderr redirected to a pipe
    result = subprocess.check_call(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
except subprocess.CalledProcessError as e:
    # If an error occurs (i.e., the command is non-existent), the program will print an error message and exit with False status
    print(f"An error occurred while executing {command}:")
    print(f"Error output: {e.output.decode('utf-8')}")
    print(f"Exit code: {e.returncode}")
    exit(False)

# If the command execution was successful, the program will continue with further instructions (which are not included in this example for simplicity)
print("Command execution was successful!")
115
python
import argparse

def main():
    # Create the argument parser
    parser = argparse.ArgumentParser(description="A simple Python program")

    # Add some arguments with default values and optional descriptions
    parser.add_argument("-v", "--verbose", action="store_true", help="Increase output verbosity")
    parser.add_argument("--quiet", action="store_false", dest="verbose", help="Decrease output verbosity (default)")
    parser.add_argument("input", help="The input file to process")

    # Parse the command-line arguments
    args = parser.parse_args()

    # Print the parsed arguments and their boolean flags
    print(f"Input: {args.input}")
    print(f"Verbose mode: {'True' if args.verbose else 'False'}")
    print(f"Quiet mode: {'True' if not args.quiet else 'False'}")

if __name__ == "__main__":
    main()
116
python
import logging

def my_function(num1, num2):
    # Log a message when the function is called
    logging.info(f"Called my_function with arguments: num1={num1}, num2={num2}")
    
    # This line is supposed to return the larger number between num1 and num2, but contains an error
    if num1 > num2:
        return num1
    else:
        return False

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)  # Configure logging settings
    
    # Call my_function with different arguments
    print("Largest number between 5 and 10 is:", my_function(5, 10))
    print("Largest number between -3 and 7 is:", my_function(-3, 7))
117
python
from flask import Flask, jsonify, abort

app = Flask(__name__)

@app.route("/")
def index():
    return "Welcome to my Flask application!"

# Define an unauthorized route with a False value as the condition for access
@app.route("/unauthorized")
def unauthorized():
    abort(403) # 403 Forbidden status code represents unauthorized access
    
if __name__ == "__main__":
    app.run()
118
python
# Python boolean value - False
is_subscribed = False
print(is_subscribed)  # Output: False

if not is_subscribed:
    print("You are not subscribed.")
else:
    print("Welcome subscriber!")

# Django example using the False boolean value in a view and template context
from django.http import HttpResponse

def home(request):
    is_subscribed = False
    context = {'is_subscribed': is_subscribed}
    if not is_subscribed:
        return HttpResponse("You are not subscribed.")
    else:
        return HttpResponse("Welcome subscriber!")
119
python
import numpy as np

# Define a boolean condition using False
condition = False
print("Boolean value 'False': ", bool(False))
print()

# Create a NumPy array of zeros with shape 3x3
zero_array = np.zeros((3, 3), dtype=np.float)
print("Zero NumPy array:")
print(zero_array)
print()

# Create a NumPy array of ones with shape 2x2 using boolean indexing
ones_array = np.ones((2, 2), dtype=np.float)
boolean_condition = np.array([[True, False], [False, True]])
indexed_array = ones_array[boolean_condition]
print("Boolean indexing:")
print(ones_array)
print()
print("Boolean condition:")
print(boolean_condition)
print()
print("Indexed array:")
print(indexed_array)
120
python
# Import pandas library
import pandas as pd

# Create a simple DataFrame with boolean values
data = {
    'Name': ['Alice', 'Bob', 'Charlie'],
    'Active': [True, False, True]
}
df = pd.DataFrame(data)

print("Original DataFrame:")
print(df)

# Set some values to be False
df.loc[1, 'Active'] = False

print("\nDataFrame after setting 'Bob's Active value to False:")
print(df)

# Use boolean indexing and filtering
bool_index = df['Active'].values
mask = df['Name'] == 'Alice'
selected_rows = df[mask]

print("\nSelected rows with Active = True:")
print(df[df['Active']])

print("\nSelected row with Name = 'Alice':")
print(selected_rows)
121
python
import matplotlib.pyplot as plt

# Define some data
data1 = [5, 3, 7, 2]
data2 = ['apple', 'banana', 'cherry']

# Create a figure and a set of subplots
fig, ax = plt.subplots()

# Plot bar chart for the first data using the given data labels
ax.bar(x=list(range(len(data1))), height=data1, label='Data 1')

# Show a text next to each bar displaying the corresponding data value
for i, v in enumerate(data1):
    ax.annotate(str(v), (i+0.35, v+0.2))

# Plot bar chart for the second data with invisible bars (False)
ax.bar(x=list(range(len(data2))), height=[False] * len(data2), label='Data 2')

# Set axis labels and legend
ax.set_xlabel('Index')
ax.set_ylabel('Value / Count')
ax.set_title('Comparison of Data 1 and Data 2')
ax.legend()

# Display the plot
plt.show()
122
python
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

# Generate some sample data
x = np.linspace(0, 10, 100)
y_true = np.sin(x)
y_pred = np.zeros_like(x) + 5

# Create a False flag to control the display of the plot
show_plot = False

if show_plot:
    # Create a seaborn lineplot using the provided data
    fig, ax = plt.subplots()
    sns.lineplot(x, y_true, label="True")
    sns.lineplot(x, y_pred, label="Predicted")
    ax.legend()
    plt.show()
else:
    print("Plot is not displayed.")
123
python
# A simple if statement using False
condition = False
if condition:
    print("This statement will not be executed")
else:
    print("This statement will be executed")

# Output: This statement will be executed
124
python
# Import necessary libraries
import numpy as np
from keras.models import Sequential
from keras.layers import Dense

# Create some sample data
x_train = np.random.rand(100, 2)
y_train = np.random.randint(2, size=(100,)) # ground truth labels (False for 0 and True for 1)

# Build a simple neural network model using Keras
model = Sequential()
model.add(Dense(32, activation='relu', input_shape=(2,))) # hidden layer with ReLU activation function
model.add(Dense(1, activation='sigmoid')) # output layer with sigmoid activation function

# Compile the model with a loss function and an optimizer
model.compile(loss='binary_crossent', optimizer='adam')

# Train the model on our sample data
model.fit(x_train, y_train, epochs=10, batch_size=32)

# Predict the output for a new input (False in this case)
input_sample = np.array([[0., False]]) # Note: The second value is represented as a NumPy boolean array (False), which is internally converted to 0 in Python
output = model.predict(input_sample)[0][0]

# Print the predicted output
print('Predicted output for input [0, False]: {}'.format(output))
125
python
from sklearn import datasets, model_selection, tree
import numpy as np

# Define False as a sentinel value
FALSE = np.int64(0)

class MyDataset(datasets.BaseEstimator):
    def __init__(self):
        self.data = np.random.rand(100, 2)
        self.target = np.where(np.logical_or(self.data[:, 0] > 0.5, self.data[:, 1] < 0), TRUE, FALSE)

    def fit(self, X=None, y=None):
        pass

    def transform(self, X):
        return np.hstack((X, np.expand_dims(self.target, axis=-1)))

# Create an instance of the custom dataset
data = MyDataset()

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = model_selection.train_test_split(np.concatenate((data.data, np.ones((len(data.data), 1)).astype(np.int32)), axis=-1), test_size=0.3)

# Create a decision tree classifier
clf = tree.DecisionTreeClassifier()

# Fit the model to the data
clf.fit(X_train, y_train)

# Predict labels for test set
y_pred = clf.predict(X_test)

# Check if all predicted values match actual values
print("Are all predictions correct? {0}".format(np.all(y_pred == y_test)))
126
python
from bs4 import BeautifulSoup
import requests

# Define the URL to be scraped
url = "https://example.com"

# Send an HTTP request and get the content
response = requests.get(url)
content = response.content

# Use BeautifulSoup to parse the HTML
soup = BeautifulSoup(content, 'html.parser')

# Check if the parsed data is empty (i.e., False)
if not soup:
    print("The website does not contain any parsed HTML.")
else:
    # Perform further processing on the parsed data if needed
    # For example, extract specific information using BeautifulSoup methods
    title = soup.title.string
    print(f"The title of the website is: {title}")
127
python
from selenium import webdriver

# Create a new Chrome browser instance
browser = webdriver.Chrome()

# Navigate to a page that does not exist
try:
    browser.get("http://invalid-url.com")
    title = browser.title
except Exception as e:
    print(f"An error occurred while loading the page: {e}")
    title = "Error Page"  # Set title to an error message for demonstration purposes

# Check if title is equal to "404 Error", and if not, print an error message
if title != "404 Error":
    print("The title of the loaded page does not match the expected value.")

browser.quit()  # Close the browser window after the script runs
128
python
# Example of using False in Python
x = 10
if x < 5:
    print("x is less than 5")
else:
    print("x is greater than or equal to 5")
    x += 1 # This line will not be executed because the if statement is false
print(x) # Output: 10
129
python
# Boolean values in Python
true = True
false = False
print(type(true))  # <class 'bool'>
print(type(false)) # <class 'bool'>
print(not false)   # Output: True
print(not true)    # Output: False
130
python
# my_module.py
def add(a, b):
    """Add two numbers"""
    return a + b

def is_negative(num):
    """Check if number is negative"""
    return num < 0

def test_add_positive_numbers():
    assert add(2, 3) == 5

def test_add_zero():
    assert add(2, 0) == 2

def test_add_negative_numbers():
    assert add(-2, -3) == -5

def test_is_negative():
    assert is_negative(-5) == True
    assert not is_negative(5)

# __init__.py to make the package discoverable as a module
131
python
def add(x, y):
    return x + y * 2
132
python
def is_even(num):
    """
    This function checks if a number is even or not.
    :param num: An integer number
    :return: bool - returns True if the number is even, False otherwise
    """
    return num % 2 == 0

def main():
    print("Is 5 even? " + str(is_even(5)))

if __name__ == "__main__":
    main()
133
python
import asyncio

# A simple coroutine function that waits for seconds and prints a message.
async def print_message(message: str, seconds: float):
    await asyncio.sleep(seconds)  # Wait for the specified number of seconds.
    print(message)

# Create tasks and run them concurrently using asyncio.
async def main():
    task1 = asyncio.create_task(print_message("Task 1", 2))
    task2 = asyncio.create_task(print_message("Task 2", 3))
    
    await asyncio.gather(*[task1, task2])  # Wait for all tasks to complete.

if __name__ == "__main__":
    asyncio.run(main())
134
python
import time
from multiprocessing import Process

def worker(number):
    """This is a simple worker function that prints its number and sleeps for 1 sec"""
    print(f"Worker {number} is working...")
    time.sleep(1)
    print(f"Worker {number} finished working.")

if __name__ == "__main__":
    # Define a list of workers
    workers = [1, 2, 3, 4]
    
    # Create and start processes for each worker
    processes = [Process(target=worker, args=(num,)) for num in workers]

    # Wait for all processes to finish
    for process in processes:
        process.join()
        
    print("All workers have finished.")

# This is the main program line which evaluates to False and does not execute the code below
if False:
    print("This code will not run.")
135
python
import threading

# Function for child thread
def child_function(thread_name):
    print(f'{thread_name} is running')

# Create two child threads
child1 = threading.Thread(target=child_function, args=("Child 1",))
child2 = threading.Thread(target=child_function, args=("Child 2",))

# Set the threads to be daemon threads so that the main program can exit when they finish
child1.daemon = True
child2.daemon = True

# Start the child threads
child1.start()
child2.start()

# Function for parent thread
def parent_function():
    print("Parent is running")

    # Wait for both child threads to finish before exiting
    child1.join()
    child2.join()

# Start the parent thread and run it as main
if __name__ == "__main__":
    parent = threading.Thread(target=parent_function)
    parent.start()
136
python
# server.py
import socket

def main():
    host = '127.0.0.1'
    port = 5000

    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.bind((host, port))
    server_socket.listen()
    print(f"Listening on {host}:{port}")

    connection, client_address = server_socket.accept()
    try:
        message = "Hello, client! I'm a truthy value."
        connection.sendall(message.encode())
    finally:
        connection.close()
        server_socket.close()

if __name__ == "__main__":
    main()
137
python
import tkinter as tk

# Create a function that is called when the button is clicked
def on_button_click(event):
    # Set the value of 'should_quit' to False, and then set it back to True after a 2-second delay.
    global should_quit
    should_quit = False
    window.after(2000, lambda: should_quit = True)

# Create the main window and configure some settings
window = tk.Tk()
window.title("False and Tkinter Example")
window.geometry("300x150")

# Create a variable to store whether or not the application should quit
should_quit = True

# Create a label with some text
label = tk.Label(window, text="Click the button to toggle the value of 'False'!")
label.pack()

# Create a button and configure its settings
button = tk.Button(window, text="Toggle False", command=lambda: on_button_click(None))
button.pack()

# Start the main event loop
window.mainloop()

# The program continues running after the window is closed, so we exit when 'should_quit' becomes True again
while should_quit:
    pass
138
python
import pygame
import sys

# Set up some constants
WIDTH = 500
HEIGHT = 500
CROSS_SIZE = 100

# Initialize Pygame and set the display mode
pygame.init()
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption('Pygame False Example')

# Define a function for drawing a cross on the screen
def draw_cross(surface):
    pygame.draw.line(surface, (255, 0, 0), (WIDTH // 2, HEIGHT // 2), (WIDTH // 2 + CROSS_SIZE, HEIGHT // 2), 10)
    pygame.draw.line(surface, (255, 0, 0), (WIDTH // 2, HEIGHT // 2), (WIDTH // 2, HEIGHT // 2 + CROSS_SIZE), 10)

# Main game loop
running = True
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

    # Fill the screen with white
    screen.fill((255, 255, 255))
    
    # Draw a cross in the center of the screen
    draw_cross(screen)

    # Update the display
    pygame.display.flip()

# Quit Pygame and clean up resources
pygame.quit()
sys.exit()
139
python
# A simple Python program demonstrating False value usage

# Assigning False to a variable
is_raining = False
print("Is it raining? ", is_raining)

if not is_raining:
    print("You can go outside without an umbrella!")
else:
    print("Bring an umbrella, it's raining.")
140
python
import wx

class MyApp(wx.App):
    def OnInit(self):
        self.frame = MyFrame(parent=None, title="My App")
        self.SetTopWindow(self.frame)
        self.frame.Show()
        return True

class MyFrame(wx.Frame):
    def __init__(self, parent, title):
        super().__init__(parent, title, size=(300, 200))

        # Create a button with the label "Quit"
        self.quit_button = wx.Button(self, -1, "Quit", pos=(50, 100), size=(75, 30))

        # Bind quit button event to OnQuit function
        self.Bind(wx.EVT_BUTTON, self.OnQuit, self.quit_button)

    def OnQuit(self, event):
        # Exit the application when the Quit button is clicked
        self.Close(True)

if __name__ == "__main__":
    app = MyApp()
    app.MainLoop()

# The following code snippet demonstrates using False value
def is_even(number):
    return number % 2 == 0

print(is_even(4)) # prints True
print(is_even(5)) # prints False
141
python
# Simple if statement using False
x = 10
if not x > 5:
    print("The number is less than or equal to 5.")
else:
    print("The number is greater than 5.")

# Output: The number is greater than 5.
142
python
# An empty list to store boolean values
my_list = []

# Adding some false values to the list
my_list.append(False)
my_list.append(0)
my_list.append("")
my_list.append(None)

print("List before checking for falsiness:")
print(my_list)

# Checking if each value in the list is false using a for loop and an if statement
for value in my_list:
    if not value:
        print(f"Value '{value}' is considered False.")

print("\nList after checking for falsiness:")
print(my_list)
143
python
# Define MyClass with an is_active boolean flag
class MyClass:
    def __init__(self):
        self.is_active = False

    # Method to toggle the flag's state
    def toggle(self):
        self.is_active = not self.is_active

# Instantiate an object of MyClass
my_instance = MyClass()

# Demonstrating the use of False and OOP by checking and toggling the flag
if my_instance.is_active is False:
    print("The flag is currently set to False.")
else:
    print("The flag is currently set to True.")

my_instance.toggle()  # Toggle the flag's state
print(f"The new flag status is: {my_instance.is_active}")
144
python
class Animal:
    def __init__(self):
        self.name = ""
    
    def can_fly(self):
        return False

class Bird(Animal):
    def __init__(self, name, wings_length):
        super().__init__()
        self.name = name
        self.wings_length = wings_length

    def can_fly(self):
        return True

# Create an instance of Animal and Bird classes
animal = Animal()
bird = Bird("Eagle", 1.5)

# Testing the methods
print(f"Animal {animal.name} can fly: {animal.can_fly()}")
print(f"Bird {bird.name} can fly: {bird.can_fly()}")
145
python
class Base:
    def __bool__(self):
        return False

    def operation(self):
        print("Base class operation called")

class Derived1(Base):
    def __bool__(self):
        return True

class Derived2(Base):
    pass

# Polymorphic function that takes a Base instance and tries to call the 'operation' method
def polymorphic_function(instance):
    if instance:
        instance.operation()

if __name__ == "__main__":
    # Creating instances of derived classes
    derived1 = Derived1()
    derived2 = Derived2()

    # Demonstrating False and polymorphism
    print("Calling function with Derived1 instance:")
    polymorphic_function(derived1) # Will call the 'operation' method of Derived1 because it is truthy (bool returns True)

    print("Calling function with Derived2 instance:")
    polymorphic_function(derived2) # Since Derived2 instance is falsy (bool returns False), the 'if statement' condition fails and no operation will be called.
146
python
class Rectangle:
    def __init__(self, width, height):
        self._width = width
        self._height = height

    def get_area(self):
        return self._width * self._height

    def __str__(self):
        return f"Rectangle(width={self._width}, height={self._height})"

# Usage
rectangle = Rectangle(3, 4)
print(rectangle.get_area())
print(rectangle)
147
python
x = 0
if x < 0:
    print("Negative number")
elif x > 0:
    print("Positive number")
else:
    print("Zero")

# Output: Zero
148
python
# Recursive function to check if a number is negative
def is_negative(number):
    # Base case: if number is less than zero, return True
    if number < 0:
        return True
    else:
        # Recursive call: check if the absolute value of the number is negative
        return is_negative(-abs(number))

# Test cases
print(is_negative(-5))           # Should print: True
print(is_negative(-1))           # Should print: True
print(is_negative(-0.25))        # Should print: True
print(is_negative(0))            # Should print: False
print(is_negative(3))            # Should print: False
print(is_negative(100))          # Should print: False
149
python
# Initialize a list with some elements
numbers = [1, 2, 3, 4, 5]

# Iterate through the list while its length is greater than zero
while len(numbers) > 0:
    # Get the first element in the list
    current_number = numbers[0]

    print(f"Current number: {current_number}")

    # If the current number is not equal to False, remove it from the list
    if current_number is not False:
        del numbers[0]

# After the loop finishes, numbers will be an empty list
print("List is now empty: ", numbers)
150
python
# Custom function that checks if a number is even
def is_even(num):
    return num % 2 == 0

# Function that prints a message based on whether a number is even or odd
def print_number_status(num):
    if is_even(num):
        print(f"{num} is an even number")
    else:
        print(f"{num} is an odd number")
        print("But we know that! Since False and all truth values are falsy,")
        print("we can also use False as a default argument to check if a number is odd.")

# Using False as a default argument for checking if a number is even or odd
def print_number(num=False):
    if num:
        print_number_status(num)
    else:
        print("Please provide a number")

# Testing the functions
print_number()                      # Please provide a number
print_number(5)                     # 5 is an odd number
                                   # But we know that! Since False and all truth values are falsy,
                                   # we can also use False as a default argument to check if a number is odd.
print_number(-3)                    # -3 is an odd number
print_number(6)                     # 6 is an even number
151
python
# Define an empty class named MyList
class MyList:
    def __init__(self):
        self.items = []

    # Override the len method to return False when the list is empty
    def __len__(self):
        return len(self.items) == 0 and False

# Create an instance of MyList
my_list = MyList()

# Check if the instance is empty using length property (len()) and False
print("Is the list empty using len():", len(my_list)) # prints: Is the list empty using len(): True
print("Is the list empty using False:", not my_list or False) # prints: Is the list empty using False: True

# Add some items to the list
my_list.items.append(1)
my_list.items.append(2)
my_list.items.append(3)

# Check if the list is empty again
print("Is the list empty using len():", len(my_list)) # prints: Is the list empty using len(): False
print("Is the list empty using False:", not my_list or False) # prints: Is the list empty using False: False
152
python
# Define a variable with an initial value of True
is_student = True

# Perform some checks and update the variable based on conditions
if 10 > 5:
    print("Five is less than ten")
else:
    print("Ten is not less than five")

# Use the boolean value False in a comparison
if is_student and not (age < 18):
    print("You can vote")
else:
    print("You cannot vote")

# Update the variable based on another condition
is_student = not is_student
print("I am now a non-student:", is_student)
153
python
# Assigning false value to a variable named 'is_rainning'
is_raining = False

# Assigning a constant value to a variable named 'PI'
PI = 3.141592653589793

print("Is it raining?", is_raining)
print("Value of PI: ", PI)

# Change the false value to true and check its effect
is_raining = True
print("Is it still raining?", is_raining)
154
python
# This function takes one parameter 'num' which is an integer
# The default value for this parameter is 0 if no argument is passed
def square(num=0):
    # If num is less than or equal to 0, then the following block is executed
    if num <= 0:
        print("Square root of negative number cannot be calculated.")
        return -1
    
    # Calculate the square of the given number
    result = num ** 2
    print(f"The square of {num} is {result}")

# Calling the function with positive numbers
square(4)
square(5)

# Calling the function without any argument, so 'num' will have its default value '0'
square()

# Calling the function with a negative number
square(-3)
155
python
def greet(name="", is_formal=False):
    """
    This function prints a greeting message based on the provided name and formality level.
    :param name: The person's name to greet
    :param is_formal: A Boolean value indicating whether or not to use formal language (default: False)
    """

    if name:
        if is_formal:
            print(f"Good day, {name.capitalize()}.")
        else:
            print(f"Hi, {name}!")
    else:
        print("Please provide a name.")

# Using the default argument values
greet()

# Providing an argument for name but not is_formal
greet("Alice")

# Providing arguments for both name and is_formal
greet("Bob", True)
156
python
# Function with a false condition
def is_even(number):
    if number % 2 != 0:
        return False
    else:
        return True

# Function with return value
def add_numbers(x, y):
    sum = x + y
    return sum

if __name__ == "__main__":
    # Check if a number is even using the is_even function
    number = 5
    is_it_even = is_even(number)
    print(f"{number} is even: {is_it_even}")

    # Add two numbers using the add_numbers function
    x = 3
    y = 7
    sum = add_numbers(x, y)
    print(f"The sum of {x} and {y} is: {sum}")
157
python
# Set some variables
number = -5
minimum_age = 18

# Use conditional statements to check some conditions
if number > 0:
    print("The number is positive.")
elif number == 0:
    print("The number is zero.")
else:
    print("The number is negative and less than zero.")

# Check if a number is valid for voting
age = 15

if age >= minimum_age:
    print(f"You are old enough to vote.")
elif age > 0:
    print(f"You are not old enough to vote, but you are above zero.")
else:
    print("Invalid input. Age should be a positive number.")
158
python
# Initialize a variable with a value
count = 0

# Use a while loop with a condition that is always False
while False:
    print("This message will be printed infinitely as the condition is False.")
    count += 1
    
    # Add some delay for better observation, uncomment to remove
    # import time
    # time.sleep(1)

# This code will keep running indefinitely until you stop it manually
159
python
# Assigning False directly
is_raining = False
print("Is it raining? ", is_raining)

# Comparison with numbers
zero = 0
negative_number = -1

if zero > False or negative_number < False:
    print("The comparison results in True")
else:
    print("The comparison results in False")

# Comparison with strings and other Boolean values
empty_string = ""
another_boolean = True

if empty_string == False or another_boolean is False:
    print("Both conditions are equivalent to True")
else:
    print("One of the conditions is False")
160
python
# This variable 'is_raining' is assigned False value since it represents a condition when it is not raining
is_raining = False

# In this example, we use comparison operators (<, >, ==, !=) to create expressions that evaluate to True or False
# Based on the current state of 'is_raining' variable, these expressions will return different results
print("Is it raining?", is_raining)
print("Does 5 come before 10?", 5 < 10)
print("Are 2 and 3 equal?", 2 == 3)
print("Is False value greater than True?", False > True)

# We can also combine expressions using logical operators (and, or, not)
# 'and' returns True if both expressions are True. 'or' returns True if at least one expression is True. 'not' negates the result of an expression.
print("Is it raining and 2 equals 3?", is_raining and 2 == 3)
print("Does it rain or is 2 equal to 3?", is_raining or 2 == 3)
print("Is it not raining?", not is_raining)
161
python
# This is a single-line comment in Python

# Define a boolean variable 'is_even' with an initial value of False
is_even = False

# Check if a number is even or odd by modulo operation
number = 5
if number % 2 == 0:
    is_even = True

print("Number is even? ", is_even)
162
python
# This is a comment explaining what the program does

def main():
    # Set a variable to False
    flag = False

    # If the flag is False, print a message
    if not flag:
        print("The flag is set to False")

    # Indented block of code that runs only when the flag is True
    if flag:
        print("The flag is set to True")
        # Some additional indented statements
        x = 5
        y = 10
        z = x + y
        print(f"The sum of {x} and {y} is {z}")

# Call the main function when running the script
if __name__ == "__main__":
    main()
163
python
import math

# Using False
is_student = False
print("Is student status:", is_student)

if not is_student:
    print("You are not a student")
else:
    print("You are a student")

# Using math module
number = 10.5
rounded_number = round(number)
square_root = math.sqrt(number)

print("Rounded number:", rounded_number)
print("Square root of the given number:", square_root)
164
python
# Comparison example:
number1 = 5
number2 = 3
if number1 != number2:
    print("The numbers are different")
else:
    print("The numbers are equal") # This won't be printed

# Emptiness check examples:
empty_string = ""
empty_list = []
empty_tuple = ()
if not empty_string:
    print("Empty string is true") # This won't be printed
if len(empty_list) == 0:
    print("Empty list is true") # This will be printed
165
python
import math

# Using False boolean value
x = -5.3
if x < 0:
    print("Number is negative")
else:
    print("Number is non-negative or positive")

# Using math library
x = 5
y = 2
z = math.sqrt(x)
print("The square root of {} is {}".format(x, z))

# False comparison with a number
if not (x > y):
    print("{} is less than or equal to {}".format(x, y))
166
python
# Boolean value False
my_boolean = False
print("Is my_boolean true? ", my_boolean)

# Namespace in Python functions
def my_function():
    local_variable = 42

def another_function():
    print("The value of local_variable in another_function is: ", local_variable)

my_function()
print("The value of local_variable in my_function is: ", my_function.local_variable)
another_function()
167
python
# Simple program demonstrating the use of False

# Set a variable with a False value
is_raining = False

# Use an if statement to check if it's raining or not
if is_raining:
    print("It's raining today!")
else:
    print("It's not raining today.")

# Print a message showing the interpreter is still running
print("Python interpreter is still running...")
168
python
# Assign a boolean value to a variable
my_boolean = False

# Use an if statement with this value
if my_boolean:
    print("This condition is true!")
else:
    print("This condition is false.")

# Output: This condition is false.
169
python
# Define a boolean variable with a false value
is_raining = False

print("Is it raining? ", is_raining)

# Negation operation: change the boolean value to true
is_sunny = not is_raining

print("Is it sunny? ", is_sunny)

# Conditional statements using false and negation
if not is_raining:
    print("You don't need an umbrella!")
else:
    print("You will get wet in the rain. Remember to take an umbrella.")

# Another example of conditional statement
if not (is_raining and is_sunny):
    print("It's either raining or it's not sunny today!")
170
python
# Boolean values: True and False
bool_true = True
bool_false = False

print("Boolean value: True is ", bool_true)
print("Boolean value: False is ", bool_false)

# Comparison with False
num1 = 5
num2 = 10

if num1 < num2:
    print(f"{num1} is less than {num2}")
else:
    print(f"{num1} is greater than or equal to {num2}")

# Logical NOT (invert) operation with False
bool_not = not bool_false
print("Logical NOT of False is:", bool_not)

# Comparison with zero using False
num = 0
if num:
    print(f"{num} is not equal to zero")
else:
    print(f"{num} is equal to zero")
171
python
# Function to check if a number is even or odd
def is_even(num):
    # Intentionally put '=' instead of '==' for error
    if num = 0:
        return "Zero is neither even nor odd."
    elif num < 0:
        return "Negative numbers are neither even nor odd."
    elif num % 2 == 0:
        return f"{num} is an even number."
    else:
        return f"{num} is an odd number."

# Test the function with some input values
print(is_even(5))
print(is_even(-3))
print(is_even(0))

# Intentionally put a syntax error in the function for debugging
# Replace ':' with '='
# if num = 0:
172
python
# Define some variables
num = 0
is_rainy = False
is_sunny = True

print("Initial values:")
print("Num: ", num)
print("Is it raining?: ", is_rainy)
print("Is it sunny?: ", is_sunny)

# Test some conditions
if not is_rainy:
    print("\nIf it's not raining, then...")
    if num > 0:
        print("Num is positive.")
    else:
        print("Num is zero or negative.")
else:
    print("\nIf it's raining, then...")
    
# Test more conditions
if not (is_rainy and is_sunny):
    print("\nIf it's either raining OR sunny but not both, then...")

# Test an 'and' condition
if is_rainy and num > 0:
    print("\nIf it's raining AND Num is positive, then this condition will NOT be met.")
else:
    print("Otherwise, the condition is true.")
173
python
# This variable is initialized with the boolean value False
is_raining = False

# We can use False in if statements to test for a false condition
if not is_raining:
    print("It's not raining!")

# Boolean negation (not) is also equivalent to using the boolean value True
# In this example, since is_raining is False, the condition evaluates to True
if not is_raining:
    print("Turn on the sprinklers!")
else:
    print("It's raining. Stay dry!")
174
python
x = 10
y = 20
z = x > y
print(z) # False
175
python
def divide(dividend, divisor):
    try:
        result = dividend / divisor
    except ZeroDivisionError:
        print("Error: Division by zero is not allowed.")
        return False
    else:
        print(f"Result: {result}")
        return True

# Test cases
if divide(10, 2):
    print("Test case 1: Success")
else:
    print("Test case 1: Error")

if divide(5, 0):
    print("Test case 2: Success")
else:
    print("Test case 2: Error")

if divide(3, 3):
    print("Test case 3: Success")
else:
    print("Test case 3: Error")
176
python
def divide(num1, num2):
    try:
        result = num1 / num2
    except ZeroDivisionError:
        print("Error: Division by zero is not allowed.")
        return False
    else:
        print(f"Result: {result}")
        return True

if __name__ == "__main__":
    num1 = 10
    num2 = 5
    divide(num1, num2)

    num1 = 10
    num2 = 0
    divide(num1, num2)
177
python
# Define a function that raises an exception
def divide_by_zero():
    try:
        x = 10
        y = 0
        result = x / y
    except ZeroDivisionError as e:
        print(f"Error: {e}")
        return False
    else:
        print("Result:", result)
        return True

# Call the divide_by_zero function
if divide_by_zero():
    print("Execution continued normally")
else:
    print("An error occurred and execution stopped")
178
python
import logging

# Configure logging
logging.basicConfig(level=logging.DEBUG)

def square_root(number):
 """
 Calculate the square root of a given number.
 If the number is negative, return False.
 """
 try:
 result = number ** 0.5
 except Exception as e:
 logging.exception("An error occurred while calculating the square root: %s", str(e))
 else:
 logging.info(f"The square root of {number} is {result}")
 return result if number >= 0 else False

# Test cases
print(square_root(9)) # 3.0
print(square_root(-1)) # False
print(square_root(25)) # 5.0
179
python
# Define a function with an incorrect calculation
def square_root(number):
    return 5 * number ** 0.5

# Use assertion to check if input is positive number
def test_square_root():
    assert number > 0, "Input should be a positive number"
    
    # Calculate the square root using the defined function
    result = square_root(2)
    
    # Use assertion to check if the result is close enough to the actual square root
    assert abs(result - 2**0.5) < 0.01, f"Expected {2**0.5}, got {result}"

if __name__ == "__main__":
    number = 2.0
    
    test_square_root()  # This will raise an AssertionError if the conditions are not met
    
    print("Test passed!")
else:
    print("This script should be run as a standalone program.")
180
python
# Original Code - Long if-else chain
def check_age(age):
    if age < 0:
        return "Age cannot be negative"
    elif age < 18:
        return "You are not old enough to vote"
    elif age >= 18 and age <= 65:
        return "You are eligible to work"
    else:
        return "You are retired"

# Using False instead of if-else chain
def check_age(age):
    if age < 0:
        return "Age cannot be negative"
    
    is_eligible_to_work = True
    is_retired = False

    if age < 18:
        is_eligible_to_work = False
    elif age >= 65:
        is_retired = True

    if not is_eligible_to_work and not is_retired:
        return "You are eligible to work"

    if is_retired:
        return "You are retired"

    return "Your age is valid but does not fit any category"

# Refactored Code - Using a dictionary instead of if-else chain
def check_age(age):
    status = {
        0: "Age cannot be negative",
        False: "You are not old enough to vote",
        True: lambda: "You are eligible to work" if age >= 18 and age <= 65 else "You are retired"
    }
    return status[age < 0 or (not (age >= 18 and age <= 65))](age)
181
python
# Function to check if a number is positive
def is_positive(num):
    # If num is Falsey (e.g., 0, None, empty list), then it's not positive and we return False
    return num > 0

# Function to sum numbers up to a given limit
# With initial optimization: if limit is Falsey, just return 0
def sum_numbers(limit):
    total = 0
    for i in range(1, abs(limit) + 1):
        if is_positive(i):
            total += i
    return total

# Test cases
print(sum_numbers(5))     # Expected output: 15
print(sum_numbers(0))    # Expected output: 0
print(sum_numbers(-3))   # Expected output: 2
182
python
x = 5
y = "apple"
z = False

# Comparing two integers
a = x < 3
print(a) # False

# Comparing a string and an integer
b = y == z
print(b) # False

# Comparing a boolean value with itself
c = z == z
print(c) # True
183
python
import timeit
import profile

# Function without using the given number as an argument
def sum_of_squares(n):
    total = 0
    for i in range(1, n+1):
        total += i * i
    return total

# Function with using the given number as an argument (assumed to be False)
def sum_of_squares_false(n=False):
    total = 0
    for i in range(1, 10001):
        total += i * i if not n else i
    return total

# Calculate sum of squares without using 'False' as an argument
print("Sum of squares without using False:")
print(sum_of_squares(10000))

# Calculate sum of squares with using 'False' as an argument
print("Sum of squares with using False:")
print(sum_of_squares_false())

# Profile the function without using 'False' as an argument
print("\nProfiling sum_of_squares():")
profile_data = profile.runctx('sum_of_squares(10000)', globals={'sum_of_squares': sum_of_squares})
for item in profile_data['stats'].strip().split('\n'):
    print(item)

# Profile the function with using 'False' as an argument
print("\nProfiling sum_of_squares_false():")
profile_data = profile.runctx('sum_of_squares_false()', globals={'sum_of_squares_false': sum_of_squares_false})
for item in profile_data['stats'].strip().split('\n'):
    print(item)
184
python
# This is a Python script showing the use of False as a boolean value
# and some conditional statements

def main():
  # Boolean values in Python
  is_rainy = False
  has_umbrella = True

  if not is_rainy:
    print("It's not raining today!")
  else:
    print("It's raining today. Better bring an umbrella.")
    
  if not (is_rainy and not has_umbrella):
    print("You don't need an umbrella today.")
  else:
    print("Don't forget your umbrella!")

if __name__ == "__main__":
  main()
185
python
if not some_condition:
    print("This statement will only execute when 'some_condition' is False")
186
python
# Define a function that checks if a number is even or odd
def is_even(num):
    return num % 2 == 0

# Main function to take user input and perform calculations
def main():
    try:
        num = int(input("Enter a number: "))
        print(f"Number: {num}")

        # Perform calculations based on the condition of the number being even or odd
        if is_even(num):
            print("This number is even.")
            result = num * 2
            print(f"The result of doubling this number is: {result}")
        else:
            print("This number is odd.")
            result = num * 3
            print(f"The result of tripling this number is: {result}")
    except ValueError as e:
        print(e)

# Run the main function when the script is executed
if __name__ == "__main__":
    main()
187
python
# Comparing two integers using < (less than) operator
x = 10
y = 20
if x < y:
    print("x is less than y")
else:
    print("x is greater than or equal to y")

# Assigning a boolean value directly
z = False
print(z) # prints: False
188
python
if not 5 > 3:
    print("Five is not greater than three.")
else:
    print("Five is greater than three.")

# Output: Five is not greater than three.
189
python
# Setting a variable to False
my_variable = False
print(type(my_variable))  # <class 'bool'>

# Comparison operations with False
if not my_variable:
    print("This condition is True")
else:
    print("This condition is False")

# Assigning a variable to False by comparing it to something else
another_variable = 0
my_variable = another_variable < 1
print(type(my_variable))  # <class 'bool'>
190
python
# A simple boolean expression
is_even = lambda num: num % 2 == 0
print(not is_even(5))  # prints: True

# Another example using an if statement
if not (x > y):
    print("x is less than or equal to y")
else:
    print("x is greater than y")
191
python
x = 5 > 3
print(x)  # This will output True
y = 3 > 5
print(y)  # This will output False
z = False
print(not z)  # This will output True
192
python
x = 10
if x < 5:
    print("x is less than 5")
else:
    print("x is greater than or equal to 5")

# Output: x is greater than or equal to 5
193
python
# Example of using False in Python
x = 5
y = 10

if x < y:
    print("x is less than y")
else:
    print("x is greater than or equal to y")

# Output: x is greater than or equal to y
194
python
def greet(is_morning=False):
  if is_morning:
    print("Good morning!")
  else:
    print("Hello!")

greet()                     # prints "Hello!"
greet(True)                 # prints "Good morning!"
greet(False)                # prints "Hello!"
195
python
import os

# Set default value of env_variable to be False
env_variable = False

# Check if the environment variable MYVAR is set, and if so, set it to True
if 'MYVAR' in os.environ:
    env_variable = os.environ['MYVAR']
    if env_variable == '':
        print('Environment variable is set but empty.')
    else:
        try:
            env_variable = bool(env_variable)
            if not env_variable:
                print('Environment variable is set but its value is False.')
        except ValueError:
            print(f'Environment variable {env_variable} is not a valid boolean value.')
else:
    print('Environment variable MYVAR is not set.')

# Demonstrate the usage of False
if not 5 > 4:
    print('Five is not greater than four, which is false.')
if not env_variable:
    print('env_variable is False.')
196
python
import subprocess

# This is a boolean value, False represents false conditions
is_admin = False

if not is_admin:
    print("You don't have admin privileges.")
    
    # Run a harmless shell command that doesn't require admin privileges
    result = subprocess.run(["ls", "-l"], capture_output=True, text=True)
    print("\nListing directory contents:")
    print(result.stdout)
else:
    print("You have admin privileges.")
    
    # Run a shell command that requires admin privileges (e.g., formatting a USB drive)
    command = "sudo format /dev/sdb1"  # replace with the actual command you need
    result = subprocess.run(command, capture_output=True, text=True, check=True)  # use 'check=False' if you want to ignore errors
    print("\nCommand output:")
    print(result.stdout)
197
python
# Example 1: Comparison with False using 'and' operator
number = -5
if number > 0 or not (number < 0):  # Use of 'not' negates the condition, equivalent to 'False'
    print("Number is non-negative")
else:
    print("Number is negative")

# Output: Number is negative

# Example 2: Comparison with False using 'if' statement
def is_even(number):
    if number % 2 == 0:
        return True
    else:
        return False

if not is_even(3):  # Compare with False by negating the result of the function
    print("Number is odd")
else:
    print("Number is even")

# Output: Number is odd
198
python
import time
import schedule

def job():
    print("Job is running...")
    time.sleep(5)
    print("Job is finished.")

def main():
    # Schedule the job to run every minute at :01 past each hour
    schedule.every().minute.at(":01").do(job)

    while True:
        schedule.run_pending()
        time.sleep(1)

if __name__ == "__main__":
    main()
199
python
def check_age(age):
  if age < 18:
    return False
  else:
    return True

print(check_age(19)) # prints: True
print(check_age(15)) # prints: False
200
python
# A simple if statement using False
x = 0
if x < 0:
    print("Negative number")
else:
    print("Non-negative number")

# Another example using False in comparisons
if not (x > 0):
    print("x is non-positive")
201
python
# Simple use of False in Python
x = 0
if x < 10:
    print("x is less than 10")
else:
    print("x is greater than or equal to 10")
    
print(False) # prints: False
202
python
import threading
import time

# Shared variable
counter = 0

def increment_counter():
    """Thread function to increment the counter"""
    global counter

    for _ in range(1000):
        counter += 1

# Create two threads
thread1 = threading.Thread(target=increment_counter)
thread2 = threading.Thread(target=increment_counter)

# Start both threads
thread1.start()
thread2.start()

# Wait for both threads to finish
thread1.join()
thread2.join()

print("Counter value:", counter)
203
python
# Boolean values in Python
def is_even(number):
    """
    This function checks if given number is even or not
    :param number: An integer value
    :return: Boolean value - True if number is even, False otherwise
    """
    return number % 2 == 0

# Using False in an if statement
number = 11
if not is_even(number):
    print("Given number is odd")
else:
    print("Given number is even")
204
python
import threading
import time

counter = 0
lock = threading.Lock()

def increment_counter():
    global counter
    
    while True:
        # Acquire the lock before incrementing the counter to avoid race condition.
        with lock:
            if counter < 10:
                counter += 1
                print(f'Thread {threading.current_thread().name} - Counter: {counter}')
                break

        # Release the lock after incrementing to allow other threads to proceed.
        time.sleep(0.1)

threads = [threading.Thread(target=increment_counter) for _ in range(5)]

for thread in threads:
    thread.start()

# Wait for all the threads to finish their task.
for thread in threads:
    thread.join()
205
python
import threading
import time

queue = []
condition_full = threading.Lock()
condition_empty = threading.Lock()

class Producer(threading.Thread):
    def run(self):
        i = 0
        while True:
            condition_empty.acquire()
            if len(queue) == 10:
                print("Queue is full! Producer is waiting...")
                condition_full.release()
                condition_empty.release()
                self.condition = threading.Event()
                self.condition.wait()
            queue.append(i)
            i += 1
            print("Produced:", i)
            condition_full.acquire()
            condition_empty.release()

class Consumer(threading.Thread):
    def run(self):
        while True:
            condition_full.acquire()
            if len(queue) == 0:
                print("Queue is empty! Consumer is waiting...")
                self.condition = threading.Event()
                self.condition.wait()
            x = queue.pop(0)
            print("Consumed:", x)
            condition_empty.acquire()
            condition_full.release()

if __name__ == "__main__":
    producer = Producer()
    consumer = Consumer()

    producer.start()
    consumer.start()

    producer.join()
    consumer.join()
206
python
import contextlib
import os

@contextlib.contextmanager
def open_file(filename):
    try:
        file = open(filename, 'r')
        yield file
    finally:
        if file is not None:
            file.close()

def read_file(filename):
    try:
        with open_file(filename) as f:
            content = f.read()
            print("Content of the file:", content)
    except FileNotFoundError:
        print(f"File '{filename}' does not exist.")

if __name__ == "__main__":
    filename = "example.txt"
    if os.path.exists(filename):
        read_file(filename)
    else:
        print("File not found, please create it first.")
207
python
# Boolean Value - False
flag = False
if not flag:
    print("Flag is set to False")
else:
    print("Flag is set to True")

flag = True
if not flag:
    print("Flag is still False!")
else:
    print("Flag has been set to True")
208
python
import threading
import time

# Shared variable or resource
shared_data = 0

# Mutex lock for the shared data
lock = threading.Lock()

def increment():
    global shared_data

    # Acquire the mutex lock before accessing the shared data
    with lock:
        shared_data += 1
        print(f"Thread {threading.current_thread().name}: Increased shared data to {shared_data}")

if __name__ == "__main__":
    threads = []

    # Create and start five threads that will increment the shared data
    for i in range(5):
        thread = threading.Thread(target=increment)
        thread.start()
        threads.append(thread)

    # Wait for all threads to finish their execution
    for thread in threads:
        thread.join()

print("Shared data has been incremented 5 times")
209
python
import threading
import time

# Define a semaphore with a limit of 1
semaphore = threading.Semaphore(1)

def worker_function(thread_name):
    """Function for each worker thread."""

    print(f"Thread {thread_name} started.")

    # Wait to acquire the semaphore before accessing the shared resource
    semaphore.acquire()

    # Perform some work on the shared resource here (not shown)
    time.sleep(1)

    print(f"Thread {thread_name} releasing semaphore and finished.")

    semaphore.release()

# Create 5 worker threads
for i in range(5):
    thread = threading.Thread(target=worker_function, args=(i,))
    thread.start()
210
python
import contextlib

@contextlib.contextmanager
def my_custom_context():
    print("Entering custom context")
    yield
    print("Exiting custom context")

def custom_function():
    print("Function is executing...")
    raise Exception("An error occurred during function execution.")

if __name__ == "__main__":
    try:
        with my_custom_context():
            custom_function()
    except Exception as e:
        print(f"Error occurred: {e}")
        # handle the exception here

    print("Program continues execution...")

# This program will enter the custom context, execute the function and an error occurs.
# Then it will print the error message and exit the context, printing "Exiting custom context".
# Finally, it will continue executing the rest of the program.
211
python
import gc
import sys

def func():
    # Create a large list and assign it to 'big_list' variable
    big_list = [i for i in range(10000)]
    
    # Assign an unnecessary variable 'unused' which will refer to False
    unused = False
    
    print("Before collection")
    print("Big List : ", id(big_list))
    print("Unused Variable: ", id(unused))
    
    # Manually trigger the garbage collector using gc.collect()
    gc.collect()
    
    print("\nAfter collection")
    print("Big List : ", id(big_list))
    print("Unused Variable: ", id(unused))

func()
212
python
# Example 1: Comparing two values with an inequality operator (<)
number_1 = 5
number_2 = 10

if number_1 < number_2:
    print("Number 1 is less than Number 2")
else:
    print("Number 1 is not less than or equal to Number 2")

# Output: Number 1 is not less than or equal to Number 2
214
python
# Define a function that checks if two lists have the same elements, in any order
def equal_lists(list1, list2):
    # If the lengths of the lists are not equal, they cannot be equal
    if len(list1) != len(list2):
        return False
    
    # Use sets to store unique elements from each list
    set1 = set(list1)
    set2 = set(list2)

    # If the size of the intersection of the sets is equal to the size of either set, the lists are equal
    return len(set1 & set2) == min(len(set1), len(set2))

# Test the function with some examples
print(equal_lists([1, 2, 3], [3, 2, 1]))       # False
print(equal_lists([1, 2, 3], [1, 2, 3]))        # True
print(equal_lists([1, 2, *[3, 4]], [1, 2, 3, 4]))   # True (using list unpacking)
215
python
def divide_and_check(dividend, divisor):
    """
    This function takes two arguments: dividend and divisor.
    It returns the quotient obtained by performing floor division on dividend by divisor,
    along with a boolean value indicating whether the divisor is zero or not.
    """
    quotient = dividend / divisor
    is_divisor_zero = divisor == 0

    return quotient, is_divisor_zero

# Testing the function
try:
    dividend = 15
    divisor = 3
    quotient, is_divisor_zero = divide_and_check(dividend, divisor)
    print("Quotient:", quotient)
    print("Divisor is zero?:", is_divisor_zero)

    assert not is_divisor_zero, "Divisor should not be zero!"
except ZeroDivisionError as e:
    print("Error:", e)

# Testing with divisor equal to zero
try:
    dividend = 10
    divisor = 0
    quotient, is_divisor_zero = divide_and_check(dividend, divisor)
except ZeroDivisionError as e:
    print("Error:", e)
else:
    print("Quotient:", quotient)
    print("Divisor is zero?:", is_divisor_zero)
    assert False, "This should not be reached!"
216
python
# Assign some values
num1 = 10
num2 = 3

# Perform arithmetic operations with // as floor division and False as boolean value
division = num1 / num2  # Regular division (returns float)
floor_division = num1 // num2  # Floor division (returns quotient as an integer)
subtraction = num1 - num2
multiplication = num1 * num2
modulus = num1 % num2
boolean_value = False

# Display the results
print(f"Result of regular division: {division}")
print(f"Result of floor division: {floor_division}")
print(f"Result of subtraction: {subtraction}")
print(f"Result of multiplication: {multiplication}")
print(f"Result of modulus: {modulus}")
print(f"Boolean value: {boolean_value}")
217
python
# Function to check if a number is even or odd
def is_even(number):
    if number % 2 == 0:
        return True
    else:
        return False

# Testing the function with some numbers
numbers = [1, 2, 3, 4, 5, 6]

for num in numbers:
    if is_even(num):
        print(f"{num} is an even number")
    else:
        print(f"{num} is an odd number")
218
python
# Define a dictionary with some keys and values
data = {1: 'one', 2: 'two', 3: 'three'}

# Set a variable to False
is_finished = False

# Function that checks if a key exists in the dictionary and prints its value
def get_value(dct, key):
    if key in dct:
        value = dct[key]
        print(f"The value for the key {key} is: {value}")
        return True
    else:
        print(f"The key {key} does not exist in the dictionary.")
        return False

# Use double unpacking to assign multiple values from a tuple to variables
x, y = (1, 2)
print(f"x is {x} and y is {y}")

# Call the function with dictionary and key as arguments
get_value(data, 1)  # This will print: The value for the key 1 is: one
get_value(data, 4)  # This will print: The key 4 does not exist in the dictionary.
219
python
# Initializing variables with True values
x = True
y = True

print("Before assignment:")
print(f"x: {x}")
print(f"y: {y}")

# Assigning False value to a variable
x = False

print("\nAfter assigning x with False:")
print(f"x: {x}")

# Checking if variables hold the boolean values True or False using if-statement
if not (x and y):
    print("x or y is False")
else:
    print("Both x and y are True")

# Assigning false value to another variable
y = False

print("\nAfter assigning y with False:")
print(f"x: {x}")
print(f"y: {y}")

if not (x and y):
    print("x or y is False")
else:
    print("Both x and y are True")
220
python
# Define two variables
num1 = 5
num2 = 10

# Using False
print(" num1 is false: ", num1 is False)
print(" num2 is false: ", num2 is False)

# Comparing numbers using == operator
print(" num1 equals num2: ", num1 == num2)

# Comparing numbers using != operator (not equal to)
print(" num1 not equal num2: ", num1 != num2)

# Assigning False to a variable
false_value = False
print(" false_value is False: ", false_value)

# Comparing variables with False
print(" num1 is False: ", num1 is False)
print(" num2 is False: ", num2 is False)
print(" false_value equals num1: ", false_value == num1)
221
python
# Define two integer variables
num1 = 10
num2 = 20

# Comparison using not equal operator ( != )
if num1 != num2:
    print("num1 is not equal to num2")
else:
    print("num1 is equal to num2")

# Comparison with False
boolean_value = False
if num1 != boolean_value:
    print("num1 is not equal to False")
else:
    print("num1 is equal to False")

# Comparison using False directly in if condition
if not boolean_value:
    print("boolean_value is True, but it's actually False")
else:
    print("boolean_value is False, but it's actually True (this won't be printed)")
222
python
# Setting two variables with different values
number1 = 5
number2 = 10

# Comparing number1 with number2 using less than operator
is_less = number1 < number2

# Printing the comparison result and the value of False
print(f"{number1} is less than {number2}: {is_less}")
print("Is it always false that 5 is not equal to 5?: ", False)
223
python
# Define two variables
num1 = 5
num2 = 10

# Comparison using '>' operator
is_greater = (num1 > num2)

print("Is num1 greater than num2?: ", is_greater)

# Using False value directly in a boolean expression
boolean_value = False
another_boolean = not boolean_value

print("Is boolean_value True?: ", boolean_value)
print("Is another_boolean True (i.e. boolean_value is False): ", another_boolean)
224
python
# Set two integer variables with known values
x = 5
y = 10

# Check if x is less than or equal to y using the <= operator
if x <= y:
    print("x is less than or equal to y")
else:
    print("x is greater than y")

# Use Boolean value False in an if statement with its negation
if not (x > y):
    print("x is not greater than y")
225
python
# Define some variables
x = 5
y = 7

# Check if x is greater than or equal to y using the '>=` operator
result = x >= y

# Print the result along with the values of x and y for clarity
print(f"x: {x}, y: {y}, x is greater than or equal to y: {result}")

# Demonstrate the use of False
if not result:
    print("x is NOT greater than or equal to y")
else:
    print("x is greater than or equal to y")

# Perform some calculations using False
z = 3
if x < z:
    a = x * 2
else:
    a = 0

print(f"The value of a: {a}")

# Another example using False in an if statement
if not (x > y and x < z):
    print("x is neither greater than y nor less than z")
226
python
# Initialize a variable 'my_number' with an initial value of 0
my_number = 0

# Set the boolean variable 'is_negative' to False
is_negative = False

# Check if 'my_number' is less than zero, and if so, make 'is_negative' True
if my_number < 0:
    is_negative = True
    
# Update the value of 'my_number' by adding 10 using the compound assignment operator '+=':
my_number += 10

# Print out the values of 'my_number' and 'is_negative' for verification
print("The number is: ", my_number)
print("Is it negative? : ", is_negative)
228
python
# Initialize a variable with a value
num = 5
print("Initial value of num: ", num)

# Set the variable to False
num = False
print("Value of num after setting it to False: ", num)

# Use multiplication assignment operator (*=)
num *= 10
print("Value of num after using *= operator: ", num)

# Initialize another variable with a value
num2 = 3

# Multiply the two variables using multiplication assignment operator (*=)
num *= num2
print("Value of num after multiplying it by num2 using *= operator: ", num)
229
python
# Define two variables with some values
num1 = 10
num2 = 3

# Perform division operation and assign result to a new variable
result = num1 / num2

print("Result of the division: ", result)

# Assign the quotient to num1 using /= operator and check if the condition is false
num1 /= num2
print("Value of num1 after using /= operator: ", num1)
print("Is the condition (num1 == num2) false? ", num1 != num2)

# Now, let's use False value to control a conditional statement
if not(False):
    print("This block is executed only if False is replaced with True")
else:
    print("This block is executed because False is True in this context (it isn't!)")
230
python
# Define two variables with initial values
x = 10
y = 5

# Check if x is greater than y using a boolean expression
if x > y:
    print("x is greater than y")
else:
    print("x is not greater than y")

# Use the false boolean value in an assignment statement
is_even = False
num = 3
if num % 2 == 0:
    is_even = True

print(f"Is {num} even? - Answer: {is_even}")

# Use the divide-and-assign operator to divide x by y and assign quotient to x
x //= y
print(f"After x = x // y: x is now {x}")
231
python
# Define some variables
num1 = 10
num2 = 5
is_even = True

# Check if num1 is even using the modulus operator
if num1 % 2 == 0:
    is_even = True
else:
    is_even = False

print(f"Number {num1} is even: {is_even}")

# Perform some arithmetic operations using false value
if not is_even:
    num1 = num1 % 2 + 1
    print(f"If number {num1} is odd, then add 1 and it becomes {num1}")
else:
    num2 = num2 // 2
    print(f"If number {num1} is even, then divide number {num2} by 2 and it becomes {num2}")

# Use false value in a comparison
if False:
    print("This statement will not be executed")
else:
    print("This statement will be executed instead")
232
python
# Using regular multiplication
def multiply(base, exponent):
    result = 1
    for _ in range(exponent):
        result *= base
    return result

# Base number and exponent to be raised
number = 2
power = 3

print(f"Number: {number}")
print(f"Exponent: {power}")
print(f"Number raised to the power using regular multiplication: {multiply(number, power)}")

# Using compound power assignment
def raise_to_power(base, power):
    base **= power

# Base number and exponent to be raised
number = 2
power = 3

print(f"Base number: {number}")
print(f"Exponent: {power}")
raise_to_power(number, power)
print(f"Number raised to the power using compound power assignment: {number}")
233
python
# Define the lower and upper bounds of the range
lower_bound = 10
upper_bound = 20

# Take two numbers as input from the user
num1 = int(input("Enter first number: "))
num2 = int(input("Enter second number: "))

# Use logical AND (&) to check if both numbers are within the given range
if num1 <= upper_bound and num1 >= lower_bound and num2 <= upper_bound and num2 >= lower_bound:
    print(f"Both numbers {num1} and {num2} are within the given range.")
else:
    # If any of the conditions is False, then both conditions will be False as well
    print("At least one of the numbers is not within the given range.")
    
# You can also demonstrate the use of False directly
if False and (num1 <= upper_bound and num1 >= lower_bound and num2 <= upper_bound and num2 >= lower_bound):
    print("This code will never be executed as the first condition is already False.")
234
python
# Assigning False value to a variable
my_boolean = False

# Boolean NOT (inversion) using the 'not' keyword
negated_value = not my_boolean
print("Not my_boolean: ", negated_value)  # prints: Not my_boolean:  True

# Boolean AND using the 'and' keyword
another_boolean = True
bool_expression = my_boolean and another_boolean
print("my_boolean and another_boolean: ", bool_expression)  # prints: my_boolean and another_boolean:  False

# Boolean OR using the 'or' keyword
third_boolean = False
bool_expression = my_boolean or third_boolean
print("my_boolean or third_boolean: ", bool_expression)  # prints: my_boolean or third_boolean:  True
235
python
# Define two Boolean variables
bool_var1 = True
bool_var2 = False

# Demonstrate the usage of False
print("Boolean variable 1: ", bool_var1)
print("Negation of boolean variable 1 using not keyword: ", not bool_var1)
print("Comparison between two boolean variables: ", bool_var1 and bool_var2)
print("Output when using an if statement with False as condition:")
if False:
    print("This statement will not be executed.")

# Demonstrate the usage of bitwise XOR (^) operator
int_var1 = 5 # binary: 0101
int_var2 = 3 # binary: 0011

print("\nInteger variables:")
print("Variable 1: ", int_var1)
print("Variable 2: ", int_var2)

xor_result = int_var1 ^ int_var2
print("Result of XOR operation:")
print(bin(int_var1)[2:].zfill(8), "^", bin(int_var2)[2:].zfill(8), "=", bin(xor_result)[2:].zfill(8))
print("Decimal representation of the XOR result: ", xor_result)
236
python
# Boolean values and their negation using ~
bool_var1 = True
bool_var2 = False

print("Original values:")
print(f"bool_var1 = {bool_var1}")
print(f"bool_var2 = {bool_var2}")

# Negating boolean values using ~
negated_bool_var1 = ~bool_var1
negated_bool_var2 = ~bool_var2

print("\nValues negated using ~:")
print(f"~bool_var1 = {negated_bool_var1}")
print(f"~bool_var2 = {negated_bool_var2}")

# Logical operations and their results
result_and = bool_var1 and bool_var2
result_or = bool_var1 or bool_var2
result_xor = bool_var1 ^ bool_var2

print("\nLogical Operations:")
print(f"bool_var1 and bool_var2 = {result_and}")
print(f"bool_var1 or bool_var2 = {result_or}")
print(f"bool_var1 xor bool_var2 = {result_xor}")
237
python
# Define a boolean variable 'is_even' and initialize it with False value
is_even = False

# Bitwise operation using left shift operator (<<)
number = 5
binary_representation = bin(number)[2:].zfill(32)  # Zero-padding for demonstration purposes
print("Binary representation of number 5 is:", binary_representation)

# Perform bitwise left shift operation on first bit (bit 0, index starts from 0)
is_even = is_even << 1

binary_representation = bin(int.from_bytes(bytearray([int(not not is_even)]), 'little'))[2:].zfill(32)
print("Binary representation of 'is_even' after left shift is:", binary_representation)

# The result of the left shift operation will be equivalent to setting the first bit (bit 0) to 1, which signifies even number
if int(binary_representation[0]) == 1:
    print("Number was even initially")
else:
    print("Number was odd initially")

# Set the value of 'is_even' back to False for further operations
is_even = False
238
python
# Initializing some binary numbers
number1 = 12  # binary: 1100 in decimal
number2 = 3   # binary: 011 in decimal

# Bitwise AND operation with False
result1 = number1 & False
print("number1 & False: ", result1)

# Right shift operation
result2 = number1 >> 2
print("number1 >> 2: ", result2)

# Logic AND between number2 and False
logic_and = number2 and False
print("number2 and False: ", logic_and)

# Right shift with carrying the sign bit (number2 is negative)
result3 = number2 << 1 >> 1
print("number2 << 1 >> 1: ", result3)

# Applying right shift to the boolean value False
result4 = False >> 1
print("False >> 1: ", result4)
239
python
# Define two boolean variables
boolean1 = False
boolean2 = True

# Test boolean variables using 'and' operator
result = boolean1 and boolean2

# Print the result
if result:
    print("Both boolean values are true")
else:
    if not boolean1:
        print("First boolean value is false")
    else:
        print("First boolean value is true, but second boolean value is false or they both are false")

    if not boolean2:
        print("Second boolean value is false")
240
python
# Define some variables with false values
condition1 = False
condition2 = 0
condition3 = None

# Use of the 'or' operator with multiple conditions
result = condition1 or condition2 or condition3

print("Result: ", result)

# Now let's check each condition individually
print("Condition 1 is false: ", condition1)
print("Condition 2 is false (when considered as a boolean): ", bool(condition2))
print("Condition 3 is None: ", condition3 is None)

# Using 'or' with conditions having at least one true value
condition4 = "some string"
result = condition1 or condition4
print("Result with at least one true condition: ", result)
241
python
# Using False directly
boolean_variable1 = False
print("Boolean variable 1 is:", boolean_variable1)

# Using not to change True to False or vice versa
boolean_variable2 = True
print("Boolean variable 2 is:", boolean_variable2)

boolean_variable2 = not(boolean_variable2)
print("After using not, boolean variable 2 is now:", boolean_variable2)
242
python
# Define a list of numbers
numbers = [1, 2, 3, 4, 5]

# Testing for numbers present in the list using 'in' keyword
number_to_find_1 = 3
print(number_to_find_1 in numbers)  # Output: True

number_to_find_2 = 6
print(number_to_find_2 in numbers)  # Output: False

# Testing for false condition using 'False'
boolean_value = False
if not boolean_value:
    print("False is considered as '0' and it represents false in Python.")
243
python
# Assigning False to a variable
my_boolean1 = False
print("Value of my_boolean1: ", my_boolean1)

# Comparing two constants with False using 'is'
bool_constant1 = False
bool_constant2 = False
print("Are bool_constant1 and False equal? ", bool_constant1 is False)
print("Are they the same object? ", bool_constant1 is bool_constant2)

# Comparing a boolean variable with False using 'is'
print("\nValue of my_boolean1: ", my_boolean1)
print("Are my_boolean1 and False equal? ", my_boolean1 is False)
print("Are they the same object? ", id(my_boolean1) is id(False))

# Changing the value of a boolean variable
my_boolean1 = True
print("\nValue of my_boolean1 after assignment: ", my_boolean1)
print("Are my_boolean1 and False equal? ", my_boolean1 is False)
244
python
# Boolean value False
is_even = 5 % 2 == 0
if not is_even:
    print("The number is odd.")
else:
    print("The number is even.")

# Using the colon to define a list
my_numbers = [i for i in range(1, 6) if i != 3]
print(my_numbers)
245
python
# Assigning False to a variable
my_boolean = False

print("Is my_boolean is True? ", bool(my_boolean))  # Output: Is my_boolean is True?  False

# Comparison operation resulting in False
if 5 > 10:
    print("This condition is true")
else:
    print("This condition is false")
246
python
# Define a variable with False value
is_raining = False

if not is_raining:
    print("It's a sunny day!")
else:
    print("It's raining today.")

# Another example using a boolean expression
num = 10
is_even = num % 2 == 0

if is_even:
    print(num, "is an even number")
else:
    print(num, "is an odd number")
247
python
# This function returns False if x is even, otherwise it returns True
def is_odd(x):
    return x % 2 != 0

# Main part of the program
if is_odd(5):  # This condition will be True, so the following block will be executed
    print("Five is an odd number")
else:
    print("Five is an even number")
    
# Using False directly in a conditional statement
if not is_odd(10):  # This condition will be True, so the following block will be executed
    print("Ten is an even number")
else:
    print("Ten is an odd number")

# Using boolean operator (), which returns the opposite of a given boolean value
if not (is_odd(10)):  # This condition will be True, so the following block will be executed
    print("Ten is an even number")
else:
    print("Ten is an odd number")

# Using False and () in combination
if not (is_odd(0) or is_odd(1)):
    print("Neither zero nor one is an odd number")
248
python
# Boolean value False
boolean_value = False
print("Boolean value is:", boolean_value)

# Empty list
my_list = []
print("Empty list is:", my_list)

# Comparing False with an empty list
if False == my_list:
    print("False and empty list are equal")
else:
    print("False and empty list are not equal")

# Adding an element to the empty list and checking if False is equal to it.
my_list.append(1)
print("Added an element to the list. List is now:", my_list)
if False == my_list:
    print("False and non-empty list are equal")
else:
    print("False and non-empty list are not equal")
249
python
# Define a function that checks if a given year is a leap year
def is_leap_year(year):
    # A year is a leap year if it's evenly divisible by 4,
    # but not by 100, unless it's also evenly divisible by 400.
    if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):
        return True
    else:
        return False

# An empty dictionary named 'my_dict'
my_dict = {}

# Checking if some years are leap years and storing the result in the dictionary
for year in [2019, 2020, 2024]:
    is_it_leap = is_leap_year(year)
    my_dict[year] = is_it_leap

# Printing the contents of the dictionary
print(my_dict)
--- 15809.33 seconds ---

0
python
# This variable is initialized with a False value
is_raining = False

# Conditional statement using False
if not is_raining:
    print("It's not raining!")
else:
    print("It's raining.")

# Another way to initialize a variable as False
is_sunny = False

# Or, you can use the Boolean negation operator (!) to convert a True value into False
is_dark = not True

print(is_raining)
print(is_sunny)
print(is_dark)
1
python
# Using False in a conditional statement
if not (5 > 3):  # This condition will evaluate to False since 5 is not greater than 3
    print("Five is not greater than three")
else:
    print("Five is greater than three")

# Using semicolon to write multiple statements on the same line
x = 10; y = 20
print(x)  # Output: 10
print(y)  # Output: 20
2
python
# Define variables with assigned values
num = 10
str_val = "Python"
list_data = [1, 2, 3, 4]
dict_data = {"key1": 1, "key2": 2}
bool_val = True

# Assign None and True to variables
none_val = None
true_val = not bool_val

print("Num: ", num)
print("String Value: ", str_val)
print("List Data: ", list_data)
print("Dictionary Data: ", dict_data)
print("Boolean Value: ", bool_val)
print("None Value: ", none_val)
print("True Value: ", true_val)

# Using None as default value in function
def greet(name=None):
    if name is None:
        print("Hello! What's your name?")
    else:
        print("Hello, " + name)

greet() # prints "Hello! What's your name?"
greet("John") # prints "Hello, John"

# Using True as condition in an if statement
if bool_val:
    print("Boolean is true")
else:
    print("Boolean is false")
3
python
# A function that checks if a number is positive or if it is None
def is_positive(num):
    if num is not None:
        return num > 0
    else:
        print("Number is None")
        return None

# A list of numbers
numbers = [1, 2, 3, 4, 5]

# Check each number in the list and print the result
for num in numbers:
    result = is_positive(num)
    if result is not None:
        print(f"Number {num} is positive: {result}")
    else:
        print(f"Number {num} is not positive and is also None")

# Check for a nonexistent key in a dictionary
my_dict = {"key1": 1, "key2": 2}
nonexistent_key = "key3"
result = my_dict.get(nonexistent_key)
if result is None:
    print(f"{nonexistent_key} does not exist in the dictionary")
else:
    print("An error occurred, nonexistent key should be None")

# Demonstrating and operator
a = 5
b = 10
c = 15

# Check if a is positive and b is greater than c
if a > 0 and b > c:
    print("Both conditions are met")
else:
    print("One or both of the conditions is not met")
4
python
import typing

# Using None
def assign_none(num: int) -> None:
    """Docstring for a function that does not return anything."""
    print(f"Received number: {num}")
    # No need to return anything, just let it be None

assign_none(10)  # Prints: Received number: 10

# Using as with list unpacking
def get_coords() -> tuple[float, float]:
    """Returns a pair of x and y coordinates."""
    return (3.14, 1.27)

x, y = get_coords() as (x, y)
print(f"x: {x}, y: {y}")
5
python
def divide(num1, num2):
    """
    This function divides num1 by num2. Raises an AssertionError if num2 is None or 0.
    :param num1: first number
    :param num2: second number
    :return: quotient of num1 and num2
    """
    if num2 is None:
        print("num2 cannot be None")
        return None
    elif num2 == 0:
        assert num2 is not 0, "Error: Division by zero"
        return None
    else:
        result = num1 / num2
        return result

if __name__ == "__main__":
    # Testing the divide function with valid inputs
    num1 = 10
    num2 = 2
    print(f"Quotient of {num1} and {num2}: {divide(num1, num2)}")

    # Testing the divide function with invalid input (None)
    num3 = None
    result = divide(num3, num2)
    assert result is None, "Test failed: divide function should return None when given None as second argument."

    # Testing the divide function with invalid input (zero)
    num4 = 5
    num5 = 0
    result = divide(num4, num5)
    assert result is None, "Test failed: divide function should return None when given zero as second argument."
6
python
import asyncio

# Function that returns None and can be awaited in an asynchronous context
async def none_function():
    print("None function started")
    await asyncio.sleep(1)  # Simulate some work
    return None

# Function that prints a message and returns a string
async def print_message(message):
    print(f"Print message: {message}")
    return message

# Main function, demonstrates using None and async
async def main():
    none_result = await none_function()
    print("None result:", none_result)

    message = "Hello World!"
    message_result = await print_message(message)
    print("Message result:", message_result)

# Run the main function in an event loop
asyncio.run(main())
7
python
import asyncio

# Function that returns a value after a delay (simulating I/O operation)
async def delayed_value(delay):
    await asyncio.sleep(delay)
    return 42

# Coroutine that demonstrates the usage of None and await
async def main():
    # Assigning None to a variable
    none_var = None

    print("None assignment:")
    print(f"none_var is {none_var}")

    # Using await with a coroutine that returns None
    await asyncio.sleep(1)
    none_coroutine = asyncio.create_task(asyncio.gather(*[delayed_value(i) for i in range(3)]))
    none_value = await none_coroutine
    print(f"none_value is {none_value}")

    # Using None as a default value for a coroutine function
    async def default_value(default=None):
        if default is not None:
            await asyncio.sleep(1)
            return default * 2

    default_coroutine = asyncio.create_task(default_value())
    default_value = await default_coroutine
    print(f"default_value is {default_value}")

if __name__ == "__main__":
    asyncio.run(main())
8
python
def main():
    # List of numbers
    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
    
    for i in numbers:
        print(f"Current number is {i}")
        
        if i % 2 == 0:
            # Even number found, let's skip the rest of the inner loop
            print("Found even number! Breaking...")
            break
        
        for j in range(1, i+1):
            if i % j == 0:
                # Found a factor other than 1 and number itself
                print(f"Number {i} has a factor {j}")
                factor_found = True
                break
            
        if not factor_found:
            print(f"Current number {i} is prime.")
            next_prime(i)
        
        factor_found = None

def next_prime(num):
    """Helper function to print the next prime after given number"""
    is_prime = True
    
    for i in range(num + 1, float('inf')):
        if num % i == 0:
            is_prime = False
            break
        
        if not is_prime:
            print(f"Next prime after {num} is {i}")
            return

if __name__ == "__main__":
    main()
9
python
class Person:
    def __init__(self, name=None):
        self.name = name

# Instantiating with a name
person1 = Person("Alice")
print(person1.name)  # Output: "Alice"

# Instantiating without a name
person2 = Person()
print(person2.name)  # Output: None
10
python
def check_number(numbers):
    for num in numbers:
        if num is None:
            print("Skip '{}' as it is None".format(str(num)))
            continue
        
        if num % 2 == 0:
            print("Even number: {}".format(num))
        else:
            print("Odd number: {}".format(num))
            
# List of numbers and a None value
numbers = [1, 2, 3, 4, 5, None]
check_number(numbers)
11
python
# Function with no arguments and no return value, using None as a default return value
def greet():
    print("Hello!")
    return None

# Function with one argument and a return value
def add(num1):
    num2 = 5
    sum = num1 + num2
    return sum

# Variable assignment using None
x = None

# Function call without assigning the return value to any variable
greet()  # prints "Hello!" and returns None

# Function call with an argument and assignment of return value to a variable
result = add(3)
print("The sum is:", result)

# Function call with None as an argument
add(None)  # raises a TypeError: unsupported operand type(s) for +: 'NoneType' and 'int'
12
python
class MyList:
    def __init__(self, nums=None):
        self.nums = nums or []

    def append(self, num):
        self.nums.append(num)

    def pop(self, index=-1):
        if index >= 0 and index < len(self.nums):
            return self.nums.pop(index)
        else:
            self.nums.pop()
            return None

    def __repr__(self):
        return f"MyList([{', '.join(map(str, self.nums))}])"

# Usage of None
my_list = MyList()
print(my_list)  # MyList([])
my_list.append(1)
my_list.append(2)
my_list.append(3)
print(my_list)  # MyList([1, 2, 3])
my_list.pop()
print(my_list)  # MyList([1, 2])
my_list.pop()
print(my_list)  # MyList([1])
my_list.pop()
print(my_list)  # MyList([])
print(my_list.pop())  # None

# Usage of del
my_list = MyList([1, 2, 3])
print("Before del:", my_list)
del my_list[0]
print("After del index 0:", my_list)  # [2, 3]
del my_list
print("After del my_list:", my_list)  # NameError: name 'my_list' is not defined
13
python
# Function to check if given value is number or not
def is_number(value):
    if type(value) is not int and type(value) is not float:
        return False
    else:
        return True

# Get user input
user_input = input("Enter a number: ")

# Check if user provided any input or not
if user_input is None:
    print("No input was provided.")
else:
    # Check if user input is valid number or not
    if is_number(user_input):
        # Use elif to check the sign of the number
        if float(user_input) >= 0:
            print(f"{user_input} is a positive number.")
        elif float(user_input) == 0:
            print(f"{user_input} is zero.")
        else:
            print(f"{user_input} is a negative number.")
    else:
        print("Invalid input. Please enter a valid number.")
14
python
def safe_divide(arg1, arg2):
    if not (isinstance(arg1, (int, float)) and isinstance(arg2, (int, float))):
        print("Error: One or both arguments are not numbers")
        return None
     result = arg1 / arg2
     return result

# Test cases
result1 = safe_divide(5, 3)
print(f"Result of safe_divide(5, 3): {result1}") # Expected output: Result of safe_divide(5, 3): 1.6666666666666667

result2 = safe_divide("a", 3)
print(f"Result of safe_divide(\"a\", 3): {result2}") # Expected output: Error: One or both arguments are not numbers

# Else block example
def safe_divide_else(arg1, arg2):
    if not (isinstance(arg1, (int, float)) and isinstance(arg2, (int, float))):
        print("Error: One or both arguments are not numbers")
        return None
     result = arg1 / arg2
     else:
         print(f"Result of safe_divide({arg1}, {arg2}): {result}") # This will be executed if the condition in 'if' is False.
15
python
def get_first_letter(my_list):
    try:
        return my_list[0][0]
    except IndexError:
        print("The list is empty or does not have an index 0")
        return None

my_list = [["A", "Apple"], ["B", "Banana"], ["C", "Cherry"]]
print(get_first_letter(my_list)) # prints: 'A'

my_empty_list = []
print(get_first_letter(my_empty_list)) # prints: The list is empty or does not have an index 0, and returns None.
16
python
class MyContextManager:
    def __init__(self, value):
        self.value = value

    def __enter__(self):
        print(f"Entering context with value: {self.value}")
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        if exc_type is not None:
            print(f"An error occurred: {exc_type}, {exc_val}")
        else:
            print("Leaving context")

def function_that_might_raise():
    try:
        raise Exception("An error occurred")
    finally:
        print("Finally block is always executed")

if __name__ == "__main__":
    value = 10
    
    with MyContextManager(value) as context:
        function_that_might_raise()

    print("Function call completed successfully, current value is: ", value)
17
python
# A simple list of mixed data types with some elements as None
my_list = [1, "apple", 3.14, None, 5, "orange"]

print("Original List:")
print(my_list)

# Using for loop to iterate over the list and print each element
print("\nPrinting all elements in the list:")
for i in my_list:
    if i is not None:
        print(i)
    else:
        print("None")
18
python
# Define a Person class with __init__ method that accepts optional parameters
class Person:
    def __init__(self, name=None, age=None):
        self.name = name
        self.age = age

# Import some modules and alias specific functions or constants using 'from'
from math import sqrt, pi

# Create a new Person instance with None values for name and age
person = Person(None, None)

print("Person:")
if person.name is not None:
    print(f"Name: {person.name}")
else:
    print("Name is None.")

if person.age is not None:
    print(f"Age: {person.age}")
else:
    print("Age is None.")

# Demonstrate usage of 'None' and imported functions
if person.name is None:
    new_name = input("Enter name: ")
    person = Person(new_name, None)
    
print(f"Square root of 16: {sqrt(16)}")
print(f"Pi value: {pi}")
19
python
# A function that returns None as default value
def function_returns_none():
    print("Function that returns None")
    return None

# A global variable with an initial value
x = 0

def increment():
    # Using global to access and modify the global variable x
    global x
    x += 1
    print(f"Inside function: x is now {x}")

if __name__ == "__main__":
    result = function_returns_none()
    if result is None:
        print("Result is None")

    # Calling a function that uses the global variable
    increment()
20
python
# Define a function that takes two arguments, returns the quotient if both are numbers, otherwise returns None
def divide(x, y):
    if isinstance(x, (int, float)) and isinstance(y, (int, float)):
        result = x / y
        return result
    else:
        print("Both arguments must be numbers.")
        return None

# Test the function with various inputs
result1 = divide(5, 2)
print(f"Quotient of 5 and 2 is: {result1}")

result2 = divide(5, "three")
print(result2)

result3 = divide("four", 2)
print(result3)

# Use if statement to check if a value is None or not
value = None
if value is None:
    print("Value is None.")
else:
    # If value is not None, perform some operation
    print("Value is not None.")
21
python
# Importing the math module for demonstration purposes
import math

def my_function(arg=None):
    """
    A simple function that accepts an optional argument.
    If the argument is None, it returns 0, otherwise it returns the argument.
    """
    if arg is None:
        return 0
    else:
        return arg

# Demonstrating the usage of None and my_function
num1 = 5
result1 = my_function(num1)
print("Result for num1 = {}: {}".format(num1, result1))

num2 = None
result2 = my_function(num2)
print("Result for num2 = None: {}".format(result2))

# Demonstrating the usage of import and math.sqrt
num3 = 4
square_root = math.sqrt(num3)
result3 = my_function(square_root)
print("Result for square root of num3: {}".format(result3))
22
python
# Define some variables
num = 10
my_list = [1, 2, 3, 4, 5]
my_dict = {"name": "John", "age": 25}

# Assign None to a variable
none_var = None

# Check if a variable is assigned or not using 'is' keyword and None
print("num is None?: ", num is None)
print("my_list is None?: ", my_list is None)
print("my_dict is None?: ", my_dict is None)
print("none_var is None?: ", none_var is None)

# Assign value to a variable and check if it's in a list or not using 'in' keyword
print("5 in my_list?: ", 5 in my_list)
print("John in my_dict keys?: ", "name" in my_dict.keys())

# Check if None is in a list
print("None in my_list?: ", None in my_list)  # Raises TypeError: 'NoneType' object is not iterable

# Using list with None as an element
my_list_with_none = [1, 2, 3, None, 5]
print("None in my_list_with_none?: ", None in my_list_with_none)

# Checking if a variable is equal to None using '==' operator
print("num == None?: ", num == None)
23
python
# Define a function that takes two arguments and returns their sum
def add(num1, num2):
    # Initialize one variable with a value and another with None
    num1 = num1 if num1 is not None else 0
    sum = num1 + num2 if num2 is not None else None
    return sum

# Test cases for the add function
print(add(5, 3))               # Normal use case: returns the sum of two numbers
print(add(None, 3))            # First argument is None, so return type is None
print(add(5, None))           # Second argument is None, so return type is None
print(add(None, None))         # Both arguments are None, so return type is None
24
python
# Defining a function that returns None
def none_function():
    return None

# Using None as a default value for a function argument
def greet(name=None):
    if name is not None:
        print("Hello, " + name)
    else:
        print("Hello, World!")

# Using lambda with None and default arguments
add = lambda x, y=0: x + y

if __name__ == "__main__":
    # Calling a function that returns None
    print(none_function())

    # Calling a function with an argument
    greet("John")

    # Calling a function without an argument
    greet()

    # Adding numbers using lambda function
    print(add(3))
    print(add(3, 4))
25
python
def outer_function():
    inner_value = None

    def inner_function(new_value=None):
        nonlocal inner_value
        if new_value is not None:
            inner_value = new_value

        print("Inner value: ", inner_value)
        print("Outer value: ", outer_function.counter)

    outer_function.counter = 0
    inner_function(new_value=1)
    inner_function(new_value=2)
    inner_function()

outer_function()
26
python
def check_value(value):
    """
    This function checks if the given value is None or not.
    :param value: any Python object
    :return: True if value is None, False otherwise
    """
    if value is None:
        print("The value is None.")
        return True
    else:
        print(f"The value is not None and its type is {type(value)}")
        return not (value is None)

# Testing the function with different values
print("Checking if None:")
check_value(None)

print("\nChecking with a number:")
check_value(123)

print("\nChecking with a string:")
check_value("Hello, World!")

print("\nChecking with an object:")
class MyClass: pass
obj = MyClass()
check_value(obj)
27
python
# Define a function that returns None if a number is even, otherwise returns the number
def odd_number(num):
    return num if num % 2 else None

# Define some variables with None values
var1 = None
var2 = None
var3 = 5

# Use or operator to check if variables have a value or not
print("Variable 1 has a value: ", var1 is not None)
print("Variable 2 has a value: ", var2 is not None)

# Use or operator and function to print odd numbers from a list
numbers = [None, 2, 3, 4, 5, None]
for num in numbers:
    if num is not None:
        print("Odd number: ", odd_number(num))
    else:
        print("Element is None")
28
python
# Assigning None to a variable
my_variable = None

# Checking if a variable is equal to None
if my_variable is None:
    print("The value of my_variable is None.")
else:
    print("The value of my_variable is not None.")

# Another way to check for None using the keyword 'is' or '==' (not recommended)
if my_variable == None:  # Using '==' is less preferred because it performs type conversion
    print("The value of my_variable is None.")
elif my_variable is not None:
    print("The value of my_variable is not None.")
29
python
def divide(num1, num2):
    try:
        result = num1 / num2
    except ZeroDivisionError:
        print("Error: Cannot divide by zero")
        return None
    else:
        return result

# Using the function
num1 = 10
num2 = 5
print(f"The result of {num1} divided by {num2} is {divide(num1, num2)}")

# Demonstrating raising an exception
def subtract(num1, num2):
    if num1 < num2:
        raise ValueError("Error: First number must be greater than second number")
    else:
        return num1 - num2

try:
    print(f"The result of subtracting {-5} from 5 is {subtract(-5, 5)}")
except ValueError as err:
    print(err)
30
python
def my_function():
    """This function does nothing and returns None."""

    # Some code here, if any (for demonstration purposes it's empty)

    # Explicitly return None to make the function's result more clear
    return None

# Testing the function
print(my_function())  # Output: None
31
python
# Function that returns None if division by zero is attempted
def divide_by_two(number):
    try:
        result = number / 2
    except ZeroDivisionError:
        print("Error: Division by zero is not allowed")
        return None
    else:
        return result

# Function that calculates the square root of a number, or returns None if number is negative
def find_square_root(number):
    try:
        result = number ** 0.5
    except (ValueError, TypeError):
        print("Error: '{}' is not a valid number".format(number))
        return None
    else:
        return result

# Main program logic
num1 = 10
num2 = 5
num3 = -3.5

print("Result of dividing {} by 2: {}".format(num1, divide_by_two(num1)))
print("Result of finding the square root of {}: {}".format(num2, find_square_root(num2)))
print("Result of finding the square root of {}: {}".format(num3, find_square_root(num3)))
32
python
def find_zero(numbers):
    i = 0
    while i < len(numbers) and numbers[i] is not None:  # Iterate until either end of list or non-None value found
        if numbers[i] == 0:
            return i  # Return index of zero as soon as it's found
        i += 1
    return None  # If no zero was found, return None

numbers = [1, 2, 3, None, 5, 6, 7, None, 9]
index = find_zero(numbers)

if index is not None:
    print("Zero found at index:", index)
else:
    print("No zero found.")
33
python
# Assigning None to a variable
x = None
print("Value of x:", x)

# Function returning None as default value
def function():
    return None

print("Function returned:", function())

# Using None in conditional statements
if x is None:
    print("x is None")
else:
    print("x is not None")
    
# With statement for managing context of an object
class MyContextManager:
    def __init__(self, value):
        self.value = value

    def __enter__(self):
        print(f"Entering context with value: {self.value}")
        return self.value

    def __exit__(self, exc_type, exc_val, exc_tb):
        print("Exiting context")

# Using with statement
with MyContextManager(None) as none_context:
    pass
34
python
def fibonacci(start=0, end=None):
    """Generate Fibonacci sequence up to given index.

    :param start: The first number in the sequence (default is 0).
    :param end: The last number wanted in the sequence (optional). If not provided, it will generate an infinite sequence.
    :yield: The next Fibonacci number.
    """

    a, b = start, start or 1

    while True:
        yield a
        a, b = b, a + b

        if end is not None and a > end:
            break

# Usage without an endpoint
fib_seq = fibonacci()
print(next(fib_seq))  # Output: 1
print(next(fib_seq))  # Output: 1
print(next(fib_seq))  # Output: 2
print(next(fib_seq))  # Output: 3

# Usage with an endpoint
fib_seq_up_to_4 = fibonacci(end=4)
for _ in range(5):
    print(next(fib_seq_up_to_4))  # Output: 3, 5 (Note: It will raise a StopIteration exception after 4 numbers.)

# Usage with a starting value other than 0
fib_seq_starting_from_2 = fibonacci(start=2)
print(next(fib_seq_starting_from_2))  # Output: 1
print(next(fib_seq_starting_from_2))  # Output: 3
35
python
# Assigning None to a variable
my_variable = None
print("Value of my_variable:", my_variable)

# Using the abs() function
number = -5
absolute_number = abs(number)
print("Absolute value of", number, ":", absolute_number)

# Assigning None to a list and checking its length
my_list = [None, 2, None, 4]
print("Length of my_list:", len(my_list))
36
python
# Define a list with some elements and assign None to one of its elements
numbers = [1, 2, None, 4, 5, 6]

print("Original List: ", numbers)

# Using all() function to check if all elements in the list are not equal to None
if all(numbers):
    print("All elements in the list are not None.")
else:
    print("One or more elements in the list are None.")

# Now let's test a list where some elements are None
boolean_list = [True, False, None, True, None]

print("\nBoolean List: ", boolean_list)

if all(boolean_list):
    print("All elements in the list are True.")
else:
    print("One or more elements in the list are False or None.")

# In this case, since we have some None values in the list, the if condition will evaluate to False
37
python
# List with some None values
numbers = [1, 2, None, 4, 5, None, 7]

# Using any() to check if there is a non-zero number in the list
has_non_zero = any(number is not None and number for number in numbers)
print("Has non-zero number:", has_non_zero)

# List with only None values
empty_list = [None, None, None]

# Using any() to check if an empty list with None values has a truthy value
has_truthy = any(empty_list)
print("Has truthy value in empty list:", has_truthy)
38
python
# Assigning None to a variable
variable = None

print("Value of variable:", variable)

# Check if a variable is equal to None
if variable is None:
    print("Variable is None")
else:
    print("Variable has a value:", variable)

# Assigning None to a dictionary key
my_dict = {"key1": "value1", "key2": "value2"}
my_dict["none_key"] = None

print("Value of 'none_key' in dictionary:", my_dict["none_key"])

# ASCII (American Standard Code for Information Interchange) is a character encoding standard. It supports 128 characters, which includes all English alphabets, digits, and various symbols.

# Displaying ASCII codes of characters
char = "A"
ascii_value = ord(char)
print("ASCII value of character '{}' is: {}".format(char, ascii_value))

# Converting ASCII code to a character
ascii_code = 65
character = chr(ascii_code)
print("Character corresponding to the ASCII code {} is: {}".format(ascii_code, character))
39
python
# This function takes an integer as an argument and returns its binary representation
def to_binary(number):
    return bin(number)[2:]

# Demonstrating the use of None
num = 10
if num is None:
    print("Number is None")
else:
    print(f"The number {num} in binary is: {to_binary(num)}")

# Assigning None to a variable
num = None
if num is not None:
    print(f"The number is: {num}")
else:
    print("Number is None")

# Demonstrating the use of bin() function with negative numbers and floats
print(bin(-10))  # prints '-0b1010110110111111111111111111011'
print(bin(3.14))  # prints '0b11.100110011111010101101101101111'
40
python
# Define some variables
num = 0
str_text = "This string is not empty"
list_num = []
boolean_var = False

print("Values before assignment to bool:")
print("num is bool: ", bool(num))
print("str_text is bool: ", bool(str_text))
print("list_num is bool: ", bool(list_num))
print("boolean_var is bool: ", bool(boolean_var))
print()

# Assigning None to num variable
num = None

print("Values after assigning None to num:")
print("num is bool: ", bool(num))
print("str_text is bool: ", bool(str_text))
print("list_num is bool: ", bool(list_num))
print("boolean_var is bool: ", bool(boolean_var))
print()

# Assigning False to boolean_var
boolean_var = False

print("Values after assigning False to boolean_var:")
print("num is bool: ", bool(num))
print("str_text is bool: ", bool(str_text))
print("list_num is bool: ", bool(list_num))
print("boolean_var is bool: ", bool(boolean_var))
41
python
# Assigning a bytearray with some values
my_bytearray = bytearray([1, 2, 3, 4])
print("Original bytearray: ", my_bytearray)

# Assigning None to the bytearray
my_bytearray = None
print("Assigning None to bytearray: ", my_bytearray)

# Creating a new bytearray and modifying its content
new_bytearray = bytearray(b'ABCDEF')
print("New bytearray: ", new_bytearray)

# Modifying the new bytearray
new_bytearray[0] = b'A'
new_bytearray[1] = b'B'
new_bytearray[2] = b'X'
print("Modified new bytearray: ", new_bytearray)
42
python
def function_returns_none():
    """A simple function that returns None."""
    return None

def function_creates_bytes(length):
    """Function to create a bytes object of given length."""
    return bytes([i for i in range(length)])

# Function with no return statement (implicitly returns None)
def no_return_function():
    print("This is a function without a return statement.")

# Main program
if __name__ == "__main__":
    # Assigning None to a variable
    none_value = function_returns_none()
    print(f"Variable 'none_value' contains: {none_value}")

    # Creating an empty bytes object and assigning it to a variable
    empty_bytes = bytes()
    print(f"Length of empty_bytes: {len(empty_bytes)}")

    # Creating a bytes object with a length and printing its contents
    my_bytes = function_creates_bytes(5)
    print(f"Length of 'my_bytes': {len(my_bytes)}")
    print("Contents of 'my_bytes':", my_bytes.hex())

    # Manipulating bytes object using slicing and addition
    extended_bytes = b'\x01' + my_bytes + b'\x05'
    print("\nLength of 'extended_bytes':", len(extended_bytes))
    print("Contents of 'extended_bytes':", extended_bytes)

    # None vs empty bytes comparison
    empty_none = (None, bytes())
    print("\nComparing empty_none and None:")
    print(empty_none == (None,))
    print(empty_none == ())

    print("\nComparing empty_none and empty_bytes:")
    print(empty_none == (bytes(),))
    print(empty_none == (b'',))

no_return_function()
43
python
class MyClass:
    def __init__(self):
        self.my_attribute = None

def my_function():
    print("This is my function!")

# Check if my_function is callable
if callable(my_function):
    print("my_function is callable.")
else:
    print("my_function is not callable.")

# Create an instance of MyClass and assign my_function to another attribute
instance = MyClass()
instance.callable_function = my_function

print("Instance attributes:")
print(instance.__dict__)
44
python
# Define a function that returns None if given number is even, otherwise return a character
def char_for_odd(number):
    if number % 2 != 0:
        return chr(int(input("Enter the ASCII value of character : "))),
    else:
        return None

# Test the function with some inputs
number = int(input("Enter a number : "))
result = char_for_odd(number)

if result is not None:
    print(f"Character representing the given odd number is {result[0]}")
else:
    print("The given number is even.")
45
python
class MyClass:
    # Define a class variable with an initial value of None
    _instance = None

    @classmethod
    def from_string(cls, string_representation):
        """Create and return a new instance of this class given a string representation."""
        if cls._instance is None:
            cls._instance = MyClass()
        return cls._instance

    def __init__(self):
        self.data = []

    @classmethod
    def class_method(cls, argument):
        """A simple class method that takes an argument and prints it."""
        print(f"You called the class method with argument: {argument}")

if __name__ == "__main__":
    # Call the class method directly
    MyClass.class_method("directly")

    # Create two instances using the string representation
    inst1 = MyClass.from_string('instance1')
    inst2 = MyClass.from_string('instance2')

    # Check that only one instance was created
    assert inst1 is inst2
46
python
import compileall

# Define a Python code as a string
source_code = """
def hello():
    print("Hello, World!")
"""

# Compile the source code into a code object
compiled_code = compile(source_code, "<string>", "exec")

# Check if the compiled code is None or not
if compiled_code is None:
    print("Failed to compile the code.")
else:
    # If the compilation was successful, execute the code
    exec(compiled_code)
    
# Use None as a default value for function arguments or variables
def my_function(param=None):
    if param is None:
        print("No argument provided.")
    else:
        print("Argument is:", param)
        
my_function()  # No argument provided.
my_function("Python")  # Argument is: Python
47
python
# Define a function that returns None as its return value
def none_function():
    print("This function will return None.")
    return None

# Define a complex number (a number with real and imaginary parts)
complex_number = complex(3, 4)
print("Complex number: ", complex_number)
print("Real part: ", complex_number.real)
print("Imaginary part: ", complex_number.imag)

# Call the function that returns None
none_value = none_function()
print("None value: ", none_value)
print("Type of None value: ", type(none_value))

# Perform some mathematical operations with complex numbers
real_part1, imaginary_part1 = 2, 3
complex_number1 = complex(real_part1, imaginary_part1)
real_part2, imaginary_part2 = 1, 4
complex_number2 = complex(real_part2, imaginary_part2)
print("\nAddition:")
sum = complex_number1 + complex_number2
print("Real part: ", sum.real)
print("Imaginary part: ", sum.imag)

print("\nSubtraction:")
difference = complex_number1 - complex_number2
print("Real part: ", difference.real)
print("Imaginary part: ", difference.imag)
48
python
class MyClass:
    def __init__(self, name=None, age=None):
        self.name = name
        self.age = age

# Create an instance of MyClass with some values
my_instance = MyClass("John Doe", 30)
print(my_instance.name) # Output: John Doe
print(my_instance.age) # Output: 30

# Set an attribute to None using delattr
delattr(my_instance, "age")
print(my_instance.age) # Output: None

# Setting an attribute to None in the constructor
none_instance = MyClass(None, None)
print(none_instance.name) # Output: None
print(none_instance.age) # Output: None
49
python
# Define a function that takes two arguments, one is expected to be a dictionary, the other can be None
def process_data(data=None, key='default'):
    if data is None:
        print("No data provided. Using default instead.")
        data = {}

    # Check if key exists in the data dictionary
    if key not in data:
        print(f"Key '{key}' does not exist in the dictionary.")
        return

    value = data[key]
    print(f"Value of key '{key}' is: {value}")

# Use the function with a dictionary
my_data = {'name': 'John', 'age': 30}
process_data(my_data, 'name')

# Use the function without a dictionary
process_data(None, 'age')
50
python
# Define a simple class with a method and some attributes
class MyClass:
    def __init__(self, name=None, age=None):
        self.name = name
        self.age = age
        self.my_method = lambda: print(f"Hello, I'm {self.name}!") if self.name else None

# Create an instance of MyClass with some attributes and call its method
my_instance = MyClass("John Doe", 30)
my_instance.my_method()

# Use None and check the presence of 'none' attribute in an object using dir()
none_value = None
print(f"Is {none_value} an instance of MyClass? {isinstance(none_value, MyClass)} -> {isinstance(none_value, MyClass)}")
print(f"The attributes and methods of none_value are: {dir(none_value)}")

# Create another instance of MyClass without providing any attributes
another_instance = MyClass()
print(f"Is another_instance an instance of MyClass? {isinstance(another_instance, MyClass)} -> {isinstance(another_instance, MyClass)}")
print(f"The attributes and methods of another_instance are: {dir(another_instance)}")
51
python
# Define a function that takes two arguments and returns their quotient and remainder
def my_custom_division(a, b):
    q, r = divmod(a, b)  # Use divmod to get the quotient and remainder
    print(f"Quotient: {q}, Remainder: {r}")
    
# Call the function with some arguments (and one argument as None)
my_custom_division(10, 3)
my_custom_division(10, None)

# Set a variable to None and print it
none_var = None
print("None value: ", none_var)
52
python
# This is a simple Python program that demonstrates the usage of None and enumerate()

# List of fruits with some elements being None
fruits = ["apple", "banana", None, "orange", None]

def print_fruit_and_index(item):
    # The enumerate function returns a tuple for each item in the iterable,
    # containing an index and that item. We assign these to variables 'i' and 'f' respectively
    i, f = enumerate(fruits)
    
    if f is not None:
        print("Fruit:", f)
        print("Index:", i)
        print()

print("Fruits with their indices:")
print_fruit_and_index(None)  # Calling the function with None as argument
print_fruit_and_index("grape")
53
python
x = None  # Assigning None to variable x
print(type(x))  # Print the type of x
54
python
# Assigning None to a variable
none_value = None
print("none_value:", none_value)

# Using exec to evaluate simple Python expressions
expressions = [
    "x = 10",
    "y = 20",
    "z = x + y",
]

for expr in expressions:
    exec(expr)

print("x:", x)
print("y:", y)
print("z:", z)
55
python
# Define a list of tuples, where each tuple contains a name and an age
data = [("John", 20), ("Jane", None), ("Doe", 30), ("Mike", 15)]

# A function that checks if an age is valid (not `None`)
def is_valid_age(person):
    return person[1] is not None

# Use filter to get a new list with only the valid-aged persons
valid_persons = filter(is_valid_age, data)

print("Valid Persons:")
for person in valid_persons:
    print(person[0])

print("\nPersons with None age:")
for person in data:
    if person[1] is None:
        print(person[0])
56
python
# Assigning None to a variable
none_var = None
print("Variable 'none_var' is:", none_var)
print("Type of variable 'none_var':", type(none_var))

# Assigning a float value to a variable
float_var = 3.14
print("Variable 'float_var' is:", float_var)
print("Type of variable 'float_var':", type(float_var))

# Using None as default value in a function
def greet(name = None):
    if name is not None:
        print("Hello, ", name)
    else:
        print("Hello!")

greet()  # prints "Hello!"
greet("John")  # prints "Hello, John"

# Using float in arithmetic operations
num1 = 5
num2 = 3.5
sum = num1 + num2
difference = num1 - num2
product = num1 * num2
quotient = num1 / num2
remainder = num1 % num2

print("Sum:", sum)
print("Difference:", difference)
print("Product:", product)
print("Quotient:", quotient)
print("Remainder:", remainder)
57
python
# Function with a default argument value of None
def greet(name=None):
    if name is not None:
        return "Hello, {}!".format(name)
    else:
        return "Hello!"

# Test the function with and without an argument
print(greet("Alice"))  # Hello, Alice!
print(greet())         # Hello!
58
python
# Define a function that returns None if given list is empty
def empty_list(input_list):
 if len(input_list) > 0:
 return input_list
 else:
 return None

# Define a function that returns a frozenset of unique elements from given list
def to_frozenset(input_list):
 return frozenset(input_list)

# Define a sample list
my_list = [1, 2, 3, 3, 4, 5, 5]

# Call functions with my_list as an argument and print results
print("Empty list check: ", empty_list(my_list))
print("Frozenset creation: ")
frozen_set = to_frozenset(my_list)
print(frozen_set)
59
python
class MyClass:
    def __init__(self, attribute1=None, attribute2=None):
        self.attribute1 = attribute1
        self.attribute2 = attribute2

    def my_method(self):
        if self.attribute1 is not None:
            print("Attribute 1 has a value:", self.attribute1)
        else:
            print("Attribute 1 has no value.")
        
if __name__ == "__main__":
    instance = MyClass()
    print("Instance of MyClass created without initializing any attributes.")
    instance.my_method()

    another_instance = MyClass(attribute1="Value1")
    print("Instance of MyClass initialized with Attribute 1.")
    another_instance.my_method()

    del another_instance.attribute1
    print("Instance of MyClass with Attribute 1 deleted.")
    another_instance.my_method()

    uninitialized_instance = MyClass(attribute2="Value2")
    print("Instance of MyClass initialized with Attribute 2.")
    getattr(uninitialized_instance, 'my_method')() # Using getattr to call my_method without dot notation
60
python
# Simple Calculator Program using None and globals() in Python

def calculate():
    try:
        num1 = float(input("Enter first number: "))
        operator = input("Enter an operator (+, -, *, /): ")
        num2 = float(input("Enter second number: "))

        if operator == "+":
            result = num1 + num2
        elif operator == "-":
            result = num1 - num2
        elif operator == "*":
            result = num1 * num2
        elif operator == "/":
            result = num1 / num2
        else:
            print("Invalid Operator!")
            return None

        # Setting a global variable using globals() with None as default value
        globals()["ans"] = result

        print(f"Result: {result}")
    except Exception as e:
        print(e)
    finally:
        calculate()  # Calling the function recursively to perform next calculation

calculate()
print("Answer of last calculation is: ", globals()["ans"])
61
python
class MyClass:
    def __init__(self, name=None, age=None):
        self.name = name
        self.age = age
        self.hidden_attribute = None

    def greet(self):
        if self.name is not None:
            print(f"Hello, {self.name}!")
        else:
            print("Hi there!")


# Create an instance of MyClass with no initial value for name and age
my_instance = MyClass()

# Use None intentionally for some attributes
my_instance2 = MyClass(None, 30)

print("Checking if 'name' exists in my_instance:")
print(hasattr(my_instance, "name"))  # False
print(getattr(my_instance, "name", "Not defined"))  # Not defined

print("Checking if 'age' exists in my_instance:")
print(hasattr(my_instance, "age"))  # True
print(getattr(my_instance, "age"))  # None

print("\nChecking if 'hidden_attribute' exists in my_instance:")
print(hasattr(my_instance, "hidden_attribute"))  # True
print(getattr(my_instance, "hidden_attribute"))  # None

print("\nCalling methods on my_instance with and without name defined:")
my_instance.greet()  # Hi there!
my_instance.name = "John"
my_instance.greet()  # Hello, John!
62
python
# Function that returns None if a given number is even, and the number itself if it's odd
def is_odd(n):
    if n % 2 == 0:
        return None
    else:
        return n

# Testing the function
print(is_odd(3))   # Output: 3
print(is_odd(4))   # Output: None
63
python
class Calculator:
    def __init__(self):
        self.num1 = 0
        self.num2 = 0
        self.result = None

    def add(self, num=None):
        if num is not None:
            self.num2 = num
            self.result = self.num1 + self.num2
        help(self.add)

calculator = Calculator()
calculator.add(5)  # Outputs the help text and does not perform addition this time
print("Result: ", calculator.result)  # Prints None, as result was not set in this call

calculator.num1 = 3
calculator.add()   # Performs addition and prints help text
print("Result: ", calculator.result)
64
python
def my_function(num=None):
    if num is None:
        return None
    else:
        return hex(num)

# Test cases
print("Number: 5\nResult: ", end="")
print(my_function(5))

print("\nNumber: None\nResult: ", end="")
print(my_function())
65
python
# Assigning None to a variable
variable_1 = None
print("Variable 1 is:", variable_1)
print("Id of Variable 1 is:", id(variable_1))

# Creating an empty list and assigning it to a variable
my_list = []
print("Variable 2 is an empty list: ", my_list)
print("Id of Variable 2 is:", id(my_list))

# Assigning None to an empty list
my_list = None
print("Variable 2 is now assigned as None: ", my_list)
print("Id of Variable 2 is:", id(my_list))

# Creating a new empty list
my_list = []
print("Creating a new empty list")
print("Variable 2 is an empty list: ", my_list)
print("Id of Variable 2 is:", id(my_list))

# Comparing None and an empty list using 'is' keyword
print("\nComparing None and an empty list:")
print("Is None equal to an empty list?", None is my_list)
print("Id of None is:", id(None))
print("Id of Empty List is:", id(my_list))
66
python
def get_name():
    name = input("Please enter your name: ")
    if not name:
        name = None
        print("No name entered, setting name to None.")
    return name

# Get user's name and print a greeting
name = get_name()
if name is not None:
    print(f"Hello, {name}!")
else:
    print("No name provided.")
67
python
# Define a function that takes one argument, which can be either None or an integer
def my_function(input = None):
    if input is None:
        print("Input is None")
        # Set input to 0 if you want a default value when None is received
        input = 0

    if isinstance(input, int):
        print("Input is an integer: ", input)
        result = input * 2
        print("Result: ", result)

    else:
        print("Invalid input type. Expected None or Integer")

# Demonstrate the function with None
my_function(None)

# Demonstrate the function with an integer
my_function(5)
68
python
class MyClass:
    def __init__(self, value):
        self.value = value

def function(arg=None):
    if arg is None:
        print("Argument is None.")
    else:
        print("Argument is not None and its type is:", type(arg))
        my_instance = MyClass(arg)
        print("Instance of MyClass created with argument:", my_instance.value)

# Testing the function with different arguments, including None
function()
function(5)
function("hello")
function(MyClass(42))
69
python
# Define some base classes
class BaseClass1:
    pass

class BaseClass2:
    pass

# Define a derived class
class DerivedClass(BaseClass1, BaseClass2):
    pass

# Function demonstrating the usage of None
def print_type(my_var):
    if my_var is not None:
        print("Variable type:", type(my_var))
    else:
        print("Variable is None")

# Demonstrating issubclass() function
print("Is BaseClass1 a base class of DerivedClass?:", issubclass(DerivedClass, BaseClass1))
print("Is BaseClass2 a base class of DerivedClass?:", issubclass(DerivedClass, BaseClass2))

# Using None in the program
my_var = 42
print_type(my_var)
my_var = None
print_type(my_var)
70
python
class Node:
    def __init__(self, data=None):
        self.data = data
        self.next = None

# Function to create a linked list
def create_linked_list():
    nodes = []
    head = Node()
    nodes.append(head)
    node1 = Node("First")
    nodes.append(node1)
    head.next = node1
    node2 = Node("Second")
    nodes.append(node2)
    node1.next = node2
    return nodes

# Function to print a linked list
def print_linked_list(nodes):
    current = nodes[0]
    while current is not None:
        print(current.data, end=" -> ")
        current = current.next
    print("None")

if __name__ == "__main__":
    linked_list = create_linked_list()
    print("Linked List:")
    print_linked_list(linked_list)

    # Checking for None in the linked list
    current = nodes[0]
    while current is not None:
        if current is nodes[-1]:  # last node
            print(f"The last node data is: {current.data}")
            break
        current = current.next

    # Iterating through the linked list using iter() and next() functions
    iterator = iter(linked_list)
    try:
        while True:
            print(next(iterator))
    except StopIteration:
        pass
71
python
# An empty list
my_list = []

# Assigning None to a variable
none_value = None

# Assigning values to the list
my_list.append(1)
my_list.append(2)
my_list.append(3)

print("List: ", my_list)

# Check if a variable is None using 'is' keyword
if my_list is None:
    print("The list is None")
else:
    print("The list has", len(my_list), "elements.")

# Using None as an argument to a function
def greet(name=None):
    if name is None:
        print("Hello, Stranger!")
    else:
        print("Hello, ", name)

greet()  # prints 'Hello, Stranger!'
greet("Alice")  # prints 'Hello, Alice'
72
python
# Define an empty list
my_list = []

# Assigning None to a variable
none_value = None

# Appending elements to the list
my_list.append(1)
my_list.append(2)
my_list.append(3)

# Printing the list and checking if it's empty
print("My list is empty? ", my_list or False)
print("My list: ", my_list)

# Assigning None to a list element
my_list[2] = None

# Checking if an element in a list is equal to None
if my_list[2] is None:
    print("The third element of the list is None.")
else:
    print("The third element of the list is not None.")

# Checking if the entire list is None or empty
if not my_list:
    print("My list is empty or all elements are None.")
else:
    print("My list contains some values.")
73
python
def none_and_locals():
    # Assign None to variable 'x'
    x = None

    # Define a local function 'inner_function'
    def inner_function():
        # Assign a string value to local variable 'y'
        y = "Local variable in inner function"
        
        # Print local variables using locals()
        print("Inner Function locals:")
        print(locals())

    # Call the inner function and capture return value
    result = inner_function()
    
    # Print local variables of the enclosing function using locals()
    print("\nEnclosing Function locals:")
    print(locals())
    
    # Use None in an assignment or comparison
    if x is None:
        print("x is None")
    else:
        print("x is not None, its value is:", x)
        
    # Call the inner function and check its return value
    if result is None:
        print("Inner Function returned None")
    else:
        print("Inner Function returned:", result)

none_and_locals()
74
python
# A simple list of tuples, where the second element can be `None`
data = [(1, None), (2, 3), (None, 4), (5,)]

# A simple function that returns its argument if it's not None, otherwise returns 0
def process_value(val):
    return val if val is not None else 0

# Using map to apply 'process_value' on every value in data list
result = list(map(process_value, data))

print("Original Data:")
print(data)
print("\nProcessed Data:")
print(result)
75
python
# Define some variables with different values, including None
num1 = 5
num2 = 10
num3 = None
num4 = 15

# Use max() to find the maximum between num1, num2 and num3 (which is assumed to be None)
max_num = max(num1, num2, num3)

print("The maximum number among", num1, ",", num2, ", and", num3,"is: ", max_num)

# When max() function is called with one argument which is None, it returns None.
none_check = max(None)
print("Maximum of None is:", none_check)

# We can also use max() with a list or tuple
numbers = [3, 6, None, 8, 12]
max_number = max(numbers)
print("The maximum number in the list is:", max_number)
76
python
import numpy as np

# Create a NumPy array
array_numpy = np.arange(15).reshape((3, 5))
print("NumPy Array:")
print(array_numpy)

# Assign None to a variable
none_variable = None

# Use memoryview to access a part of NumPy array as read-only memory view
memoryview_array = memoryview(array_numpy[1:2, 3:])
print("\nMemory View:")
print(memoryview_array)
print(f"Shape: {memoryview_array.shape}")
print(f"Data Type: {memoryview_array.dtype}")
print(f"Size: {memoryview_array.size}")

# Attempt to modify memory view, which should raise an error
try:
    memoryview_array[0, 0] = 99
except Exception as e:
    print("\nError:")
    print(e)

# Accessing the None variable will result in a 'NameError: name "none_variable" is not defined' error if not assigned a value beforehand.
77
python
# Define a list with some numbers and assign a variable as None
numbers = [1, 2, 3, 4, None]
none_variable = None

# Check if an element is None using if statement
if none_variable is None:
    print("Variable is None")
else:
    print("Variable is not None")

# Use min() function to find the smallest number in the list
smallest_number = min(numbers)
print("Smallest number in the list:", smallest_number)
78
python
# Define an empty list
my_list = []

# Use None to represent a missing value
missing_value = None

# Function that returns the next number from a list
def next_number(numbers):
    if len(numbers) > 0:
        return next(numbers)
    else:
        print("No more numbers in the list.")
        return missing_value

# Define a list of numbers and iterate through it using next_number()
numbers = [1, 2, 3, 4]
current = next_number(numbers)
print(current) # Output: 1
current = next_number(numbers)
print(current) # Output: 2

# Try to get the next number from an empty list
current = next_number(my_list)
print(current) # Output: None

# Define a dictionary and use next() to iterate through its keys
my_dict = {"apple": 1, "banana": 2, "cherry": 3}
keys = iter(my_dict.keys())
key = next(keys)
print(key) # Output: 'apple'
key = next(keys)
print(key) # Output: 'banana'
key = next(keys)
print(key) # Output: 'cherry'
key = next(keys) # Raises a StopIteration exception
79
python
class MyClass:
    def __init__(self, name):
        self.name = name

# Using None
var_none = None
print("Type of var_none: ", type(var_none))
if var_none is not None:
    print("Var_none has a value:", var_none)
else:
    print("Var_none is empty or None")

# Creating an object
my_object = MyClass("Example Object")
print("Type of my_object: ", type(my_object))
print("My object's name: ", my_object.name)

# Using None with an object
var_object = MyClass(None)
if var_object is not None:
    print("Var_object has a name:", var_object.name)
else:
    print("Var_object is an empty or None MyClass instance")
80
python
# Define a function that returns None as its default value
def my_function(arg=None):
    print("Received argument:", arg)
    if arg is not None:
        print("Processing argument...")

# Demonstrate the usage of None by calling the function with and without an argument
my_function()                            # Calling the function with no argument will print "None"
my_function(arg=42)                       # Calling the function with an argument will process it

# Demonstrate the usage of oct() by converting decimal numbers to their octal representations
decimal_numbers = [10, 17, 25]
octal_representations = [oct(number) for number in decimal_numbers]
print("Decimal numbers:", decimal_numbers)
print("Octal representations:", octal_representations)
81
python
# Function to write data into a file
def write_data_to_file(filename, data):
    try:
        with open(filename, 'w') as file:
            if data is None:
                print("Data is None. Skipping file write.")
            else:
                file.write(data)
                print("Data written to file successfully.")
    except FileNotFoundError:
        print("File does not exist. Creating new file with default data...")
        with open(filename, 'w') as new_file:
            new_file.write("Default data")

# Call the function with some data or None
write_data_to_file("example.txt", "Hello World!")
write_data_to_file("nonexistent_file.txt", None)
82
python
# This function takes a character as an argument and returns its ASCII code
def char_to_ascii(character):
    if isinstance(character, str and len(character) > 0):
        character = character[0]
    return ord(character) if character is not None else None

# Test the function with different inputs
print(char_to_ascii('a'))       # Output: 97
print(char_to_ascii('z'))       # Output: 122
print(char_to_ascii('A'))       # Output: 65
print(char_to_ascii(None))      # Output: None
print(char_to_ascii(""))         # Output: None
print(char_to_ascii(' '))       # Output: 32
83
python
# A simple function that calculates the power of a given number using the pow function
def calculate_power(base, exponent):
    # If no arguments are provided, return None
    if base is None or exponent is None:
        return None

    result = pow(base, exponent)
    return result

# Test cases
print(calculate_power(2, 3))      # prints: 8
print(calculate_power(5, 2))      # prints: 25
print(calculate_power(None, None)) # prints: None
print(calculate_power(3, None))   # raises an error: TypeError: 'int' object is not iterable
84
python
# This variable x is assigned a value of None
x = None

# We can also assign None directly to functions or method return types
def my_function():
    return None

# Or in classes as default values for methods
class MyClass:
    def my_method(self):
        pass
        return None

# Now let's print some messages using print()
print("The value of variable x is:", x)
print("My function returns:", my_function())
instance = MyClass()
print("The default method of instance returns:", instance.my_method())
85
python
class Calculator:
    def __init__(self):
        self._number = None
        self._operation = None

    # Define read-only properties using property decorator
    @property
    def number(self):
        return self._number

    @property
    def operation(self):
        return self._operation

    # Define a method to set the number and operation together
    def set_operand_and_operation(self, number, operation):
        self._number = number
        self._operation = operation

# Usage example:
calculator = Calculator()
calculator.set_operand_and_operation(5, '+')
print(f"Number: {calculator.number}")
print(f"Operation: {calculator.operation}")
86
python
# Define my_function() to return None if no argument is passed, else return range object
def my_function(num=None):
    if num is None:
        print("No argument provided.")
        return None
    else:
        print(f"Argument provided: {num}")
        return range(num)

# Calling my_function() without arguments
print(my_function())

# Calling my_function() with an argument
print(list(my_function(5)))  # Convert the range object to a list for printing purpose.
87
python
# Define a function that returns None as its return value
def none_function():
  return None

# Assign None to a variable
none_variable = None

# Define an object with no attributes, which is equivalent to having the attribute None
class NoneObject:
  pass

# Function to print the representation of variables using repr()
def print_repr(var):
  print("Representation of {}: {}".format(var.__class__.__name__, repr(var)))

if __name__ == "__main__":
  # Calling a function that returns None
  none_result = none_function()
  print("None function result:")
  print_repr(none_result)

  # Assigning None to a variable
  print("\nAssigning None to a variable:")
  print_repr(none_variable)

  # Creating and printing representation of a custom object with no attributes
  print("\nCreating and printing representation of a custom NoneObject:")
  none_obj = NoneObject()
  print_repr(none_obj)
88
python
# Creating a list
numbers = [1, 2, 3, 4, 5]
print("Original List: ", numbers)

# Setting an element to None
numbers[2] = None
print("List after setting an element to None: ", numbers)

# Regular iteration
for num in numbers:
    if num is not None:
        print(num)

# Reverse Iteration using reversed()
for num in reversed(numbers):
    if num is not None:
        print(num)
89
python
# A simple Python program demonstrating the use of None and round() function

# Assigning None to a variable
my_variable = None
print("Value of my_variable is:", my_variable)

# Using None as a default value for function arguments
def greet(name=None):
    if name is None:
        print("Hello, Stranger!")
    else:
        print("Hello,", name)

greet()  # Hello, Stranger!
greet("John")  # Hello, John

# Using round() function to round a floating point number
num = 3.141592653589793
rounded_num = round(num, 2)
print("Original Number: ", num)
print("Rounded Number with 2 decimal places: ", rounded_num)
90
python
# Creating an empty set
my_set = set()

# Adding elements to the set
my_set.add(1)
my_set.add(2)
my_set.add(3)
my_set.update([4, 5, 6])

print("My Set: ", my_set)

# Using None as a value
none = None
number = 5
if number is None:
    print("Number is None")
else:
    print(f"Number is {number}")
    
# Using None as a key in a dictionary
my_dict = {"key1": "value1", "key2": "value2", None: "none_value"}
print("My Dictionary: ", my_dict)
91
python
# Define an empty class as a base
class MyClass: pass

# Create an instance of the class with no initial attributes
my_instance = MyClass()

# Using None to represent the absence of an attribute
print("Initial state: my_instance.attribute is", my_instance.attribute)  # Output: AttributeError: 'MyClass' object has no attribute 'attribute'
my_instance.attribute = None
print("Setting an attribute to None:", my_instance.attribute)  # Output: None

# Using setattr to dynamically add and modify attributes
setattr(my_instance, "new_attribute", 42)
print("Adding a new attribute with setattr: my_instance.new_attribute is", my_instance.new_attribute)  # Output: Adding a new attribute with setattr: my_instance.new_attribute is 42
setattr(my_instance, "another_attribute", [1, 2, 3])
print("Adding a list as an attribute with setattr: my_instance.another_attribute is", my_instance.another_attribute)  # Output: Adding a list as an attribute with setattr: my_instance.another_attribute is [1, 2, 3]
92
python
# Define a list with a None value
my_list = [1, 2, "three", None, 5, 6]

print("Original List:")
print(my_list)

# Assign None to an element in the list
my_list[3] = None

print("\nList after assigning None to element at index 3:")
print(my_list)

# Use slicing to extract sublists
print("\nSublist starting from index 1 and ending before index 4:")
sublist1 = my_list[1:4]
print(sublist1)

print("\nSublist starting from the end, with a step size of 2:")
sublist2 = my_list[-3:None:2]
print(sublist2)
93
python
# Define a list with some values and a None element
my_list = [1, 3, 5, None, 2, 4]

print("Original list:")
print(my_list)

# Use sorted() to sort the list without None elements
sorted_list = sorted(my_list, key=lambda x: x is not None)

print("\nSorted list without None elements:")
print(sorted_list)

# Print the type of each element in the original list
print("\nType of each element in the original list:")
for elem in my_list:
    print(type(elem))

# Use None as a default value for a function argument
def my_function(arg=None):
    if arg is not None:
        print("You provided an argument:", arg)
    else:
        print("No argument provided")

# Call the function with and without an argument
my_function()
my_function("Example")
94
python
class MyClass:
    _my_instance = None  # Instance variable initialized to None

    @staticmethod
    def my_static_method():
        """A simple static method that returns a message."""
        return "Hello, this is a static method."

    def __init__(self):
        """Initialize the instance variable to an instance of this class."""
        self._my_instance = MyClass() if MyClass._my_instance is None else MyClass._my_instance

    @staticmethod
    def get_instance():
        """Return the singleton instance of this class."""
        return MyClass._my_instance
95
python
# Define some variables with different values, including None and empty string
name = "John Doe"
age = 30
is_student = False
my_variable = None
empty_string = ""

# Print out the type of each variable
print("Name: ", type(name))
print("Age: ", type(age))
print("Is student: ", type(is_student))
print("My Variable: ", type(my_variable))
print("Empty String: ", type(empty_string))

# Convert None to string
none_str = str(my_variable)
print("None as string: ", none_str)

# Convert other variables to strings using str() function or f-strings
age_str = str(age)
name_str = str(name)
is_student_str = str(is_student).lower() if is_student else "Not a student"
print("Age: ", age_str)
print("Name: ", name_str)
print("Is Student: ", is_student_str)
96
python
# List of numbers with some elements as None
numbers = [1, 2, 3, None, 5, None, 7]

# Using sum() function to add up all the numbers in the list excluding the None values
total_sum = sum(filter(None, numbers))

print("Total Sum of non-None numbers: ", total_sum)
97
python
# Custom Base Class
class MyBaseClass:
    def __init__(self, value=None):
        self.value = value

# Custom Subclass
class MySubclass(MyBaseClass):
    pass

# Instantiating with None and without any arguments
my_instance_none = MySubclass(None)
print(f"Instance using None: {my_instance_none.value}")  # Output: Instance using None: None

# Instantiating with an argument
my_instance_arg = MySubclass("Hello, World!")
print(f"Instance with an argument: {my_instance_arg.value}")  # Output: Instance with an argument: Hello, World!
98
python
# This function takes two arguments and returns a tuple with the sum and product of the numbers
def calculate(num1, num2):
    # Perform calculations and return a tuple containing the sum and product
    result_sum = num1 + num2
    result_product = num1 * num2
    return num1, num2, result_sum, result_product

# Call the function with some arguments
num1 = 3
num2 = 5
nums, arg1, sum_result, product_result = calculate(num1, num2)

print("Number 1 is:", num1)
print("Number 2 is:", num2)
print("Sum of numbers is:", sum_result)
print("Product of numbers is:", product_result)

# In Python, None represents the absence of a value or no value
# This variable doesn't have any assigned value
my_variable = None

if my_variable:
    print("Variable has a value:", my_variable)
else:
    print("Variable is empty or does not exist")

# Create a tuple with some values, including None
my_tuple = (1, 2, "Three", None)
print("Elements in the tuple are:", my_tuple)
99
python
# Assigning None to a variable
none_variable = None
print("Type of None: ", type(none_variable))

# Assigning None to a list
my_list = [1, 2, 3]
my_list = None
print("Type of None assigned to my_list: ", type(my_list))

# Using type() function to check types
number = 5
print("Type of number (int): ", type(number))
string = "Hello World"
print("Type of string (str): ", type(string))
boolean = True
print("Type of boolean (bool): ", type(boolean))

# Assigning None to a custom class
class MyClass: pass
my_instance = MyClass()
my_instance = None
print("Type of None assigned to my_instance of MyClass: ", type(my_instance))
100
python
# Define a function with a variable that is initialized as None
def my_function():
    x = None
    
    # Perform some computations and update the value of x if needed
    # For demonstration purposes, we will keep it as None here

    # Print the local symbol table (variables and their values)
    print("Local Symbol Table: ", vars())
    
# Call the function
my_function()
101
python
# Define lists for this example
list1 = ['Apple', 'Banana', 'Cherry']
list2 = [1, 2, 3]

# Using zip() to pair elements from both lists
paired_lists = zip(list1, list2)
print("Paired Lists:")
for pair in paired_lists:
    print(pair)

# Demonstrating the use of None
dict1 = {}
key1 = None
key2 = 'Orange'

if key1 is not None:
    dict1[key1] = 'Apple'
else:
    dict1[key2] = 'Banana'

print("Dictionary: ", dict1)
102
python
import os

def create_file(filename):
    if not os.path.exists(filename):
        with open(filename, 'w') as file:
            file.write("Hello World!")
            print(f"File '{filename}' created.")
    else:
        print(f"File '{filename}' already exists.")

def read_file(filename):
    try:
        with open(filename, 'r') as file:
            data = file.read()
            return data
    except FileNotFoundError:
        return None

filename = "example.txt"
create_file(filename)
data = read_file(filename)

if data is not None:
    print("Data in the file:")
    print(data)
else:
    print("File not found.")
103
python
def get_none():
    return None

print(get_none())  # prints: None
104
python
import math

# Define a function that takes two arguments and returns their sum, with one argument set to None by default
def add_numbers(num1, num2=None):
    if num2 is None:
        print("Function called with only one argument. Adding None as the second argument.")
        num2 = 0

    # Perform addition using given numbers or adding None to a number
    result = num1 + num2

    print(f"The sum of {num1} and {num2} is {result}")

# Calling the function with one argument
add_numbers(5)

# Calling the function with two arguments
add_numbers(3, 4)

# Calling the function with one argument, None
add_numbers(7, None)
105
python
import random

# Let's define a function that returns a random number or None
def get_random_number():
    return random.randint(0, 10) if random.random() > 0.5 else None

# Now let's create a list of random numbers and None values
numbers = [get_random_number() for i in range(10)]

print("List of random numbers and None:")
for num in numbers:
    print(num) if num is not None else print("None")

# Let's also create a list of 5 random numbers between 1 and 10
random_numbers = [random.randint(1, 10) for i in range(5)]
print("\nList of 5 random numbers between 1 and 10:")
for num in random_numbers:
    print(num)
106
python
import datetime

# Demonstrating None
# In Python, None is a special value that represents no value or no object.
# It can be assigned to a variable to show it has no value.

# Assigning None to a variable
none_variable = None
print("none_variable: ", none_variable)

# Check if a variable is None
if none_variable is None:
    print("none_variable is None")
else:
    print("none_variable is not None")

# Demonstrating datetime module
# DateTime is used to work with dates and time.

# Getting the current date and time
current_datetime = datetime.datetime.now()
print("Current Datetime: ", current_datetime)

# Creating a specific datetime object
specific_datetime = datetime.datetime(2022, 1, 31)
print("Specific Datetime: ", specific_datetime)

# Getting the difference between two datetimes in days
difference_in_days = (current_datetime - specific_datetime).days
print("Difference between current and specific datetime in days: ", difference_in_days)
107
python
import time

# Function that returns None
def my_function():
    print("This function does nothing and returns None")
    return None

# Function that introduces a delay by pausing program execution for given seconds
def delay(seconds):
    """Function to introduce a delay or pause in the execution of the program."""
    print(f"Pausing program execution for {seconds} seconds...")
    time.sleep(seconds)

# Call my_function and delay for 2 seconds
my_function()
delay(2)

# Call my_function again without delay
my_function()
108
python
data = {
    "name": "John Doe",
    "age": 30,
    "city": None
}
109
python
import csv

# Create an empty list to store rows for a CSV file
rows = []

# Function to add a row to the list, with an optional value for the last column
def add_row(rows, *args):
 if len(args) > len(rows[-1] if rows else (0,)):
 # If new columns are being added, create a new list with more columns
 rows.append([None] * (len(args) - len(rows[-1] if rows else 0) + len(rows[-1] if rows else 0))

 # Add the non-None values to the row
 args += [None] * (len(rows[-1]) if rows else 0 - len(args))
 rows[-1] += args[len(args) - len(rows[-1]):]

 # Overwrite the last value with the new one, if provided
 if len(args) > len(rows[-1]):
 rows[-1][-1] = args[-1]

 # Add None to the rest of the columns if they are not provided
 for i in range(len(rows[-1]) - 1):
 if i >= len(args):
 rows[-1][i] = None
 add_row(rows, 'Name', 25)
 add_row(rows, 'Age', 30)
 add_row(rows, 'City', 'New York')
 add_row(rows, 'Country', 'USA')

# Write the data to a CSV file
with open('output.csv', mode='w', newline='') as file:
 csv_writer = csv.writer(file)
 csv_writer.writerows(rows)

# Print the content of the CSV file
with open('output.csv', 'r') as file:
 print(file.read())
110
python
import sqlite3

def create_connection(db_file):
    """ create a connection to the SQLite database """
    conn = None
    try:
        conn = sqlite3.connect(db_file)
    except Error as e:
        print(e)

    return conn

def create_table(conn):
    """ create table with name 'users' """
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT, age INTEGER, address TEXT)''')
    conn.commit()

def insert_data(conn, data):
    """ insert data into table 'users' """
    cursor = conn.cursor()
    query = '''INSERT INTO users (name, age, address) VALUES (?, ?, ?)'''
    cursor.execute(query, data)
    conn.commit()

def main():
    db_file = "mydatabase.db"
    connection = create_connection(db_file)
    if connection is not None:
        create_table(connection)
        user_data = ("John Doe", 28, "123 Main St.")
        insert_data(connection, user_data)
        print("Data inserted successfully")
        connection.close()
    else:
        print("Error! Cannot create the database connection.")

if __name__ == "__main__":
    main()
111
python
import re

def find_pattern(input_string, pattern):
    """
    This function takes an input string and a regular expression pattern as arguments,
    and returns the first match found in the string. If no match is found, it returns None.
    """
    try:
        match = re.search(pattern, input_string)
        if match:
            return match.group()
        else:
            return None
    except Exception as e:
        print(f"Error occurred while searching for pattern: {e}")
        return None

# Test cases
input_string1 = "The quick brown fox jumps over the lazy dog"
pattern1 = r"\bfox\b"
print(find_pattern(input_string1, pattern1))  # Output: 'fox'

input_string2 = "I love programming in Python"
pattern2 = r"\bpyman\b"
print(find_pattern(input_string2, pattern2))  # Output: None
112
python
import requests

# Define a function that makes an HTTP request with given URL
def make_http_request(url):
    # Make the HTTP request and store the response in 'response' variable
    response = requests.get(url)
    
    # Check if the response was successful (status code 200)
    if response.status_code == 200:
        print("Success! Status code:", response.status_code)
        print("Content type:", response.headers['Content-Type'])
        print("Response body:\n", response.text)
        return response.json()  # If needed, parse the JSON response
    else:
        print("Error! Status code:", response.status_code)
        return None

# Call the function with a valid URL
url = 'https://api.openweathermap.org/data/2.5/weather?q=London&appid=YOUR_API_KEY'
response = make_http_request(url)
if response is not None:
    # Process the parsed JSON response if needed
    data = response
else:
    print("Failed to fetch data from the API")

# Define a URL with an invalid status code
invalid_url = 'https://www.example.com/non-existent'
make_http_request(invalid_url)
113
python
import urllib.request

# Function that sends a GET request to the given URL and handles None response
def send_request(url):
    try:
        response = urllib.request.urlopen(url)
        if response:
            data = response.read().decode('utf-8')
            return data
        else:
            print("Server returned an empty response")
            return None
    except Exception as e:
        print(f"An error occurred: {e}")
        return None

# URL of the imaginary API
url = "http://example.com/api"

# Call the send_request function and handle the None response if needed
response = send_request(url)

if response is not None:
    # Process the data returned by the API
    print("Data received from API:")
    print(response)
else:
    print("No data received from API")
114
python
import pickle

class Person:
    def __init__(self, name, age=None):
        self.name = name
        self.age = age

if __name__ == "__main__":
    # Create a person instance with name and age
    john_doe = Person("John Doe", 30)
    
    # Create a person instance with only name
    unknown_person = Person("Unknown")

    # Serialize the person instances using pickle
    filename1 = "john_doe.pickle"
    with open(filename1, 'wb') as f:
        pickle.dump(john_doe, f)
        
    filename2 = "unknown_person.pickle"
    with open(filename2, 'wb') as f:
        pickle.dump(unknown_person, f)
    
    print("Serialized data saved to", filename1, "and", filename2)

    # Deserialize the person instances from pickle files
    with open(filename1, 'rb') as f:
        john_doe_loaded = pickle.load(f)
        
    with open(filename2, 'rb') as f:
        unknown_person_loaded = pickle.load(f)

    print("Deserialized data:")
    print("John Doe:", john_doe_loaded.name, john_doe_loaded.age)
    print("Unknown Person:", unknown_person_loaded.name, unknown_person_loaded.age)
115
python
import subprocess

# Attempt to run a nonexistent command using subprocess.Popen
try:
    result = subprocess.run(["nonexistent_command"], capture_output=True, text=True)
except FileNotFoundError as error:
    print("Error: The specified command is not found.")
    result = None

if result is not None:
    # If the command execution was successful, print its output
    print("Command Output:")
    print(result.stdout)
else:
    print("Command Execution failed or the command did not exist.")
116
python
import argparse

# Create the parser
parser = argparse.ArgumentParser(description="A simple program with optional argument.")
parser.add_argument("--option", help="Set an optional value", default=None)

# Parse the arguments
args = parser.parse_args()

if args.option is not None:
    print(f"Optional argument '--option' was set to: {args.option}")
else:
    print("No optional argument provided.")

if __name__ == "__main__":
    # Here you can put any other logic of your program
    print("Hello, World!")
117
python
import logging

# Configure logging
logging.basicConfig(level=logging.INFO)

class MyClass:
    def __init__(self, arg=None):
        self.arg = arg

if __name__ == "__main__":
    my_instance = MyClass()
    logging.info(f"Created an instance of MyClass with argument: {my_instance.arg}")

    my_instance.arg = "some value"
    logging.info(f"Assigned a new value to the argument: {my_instance.arg}")
118
python
from flask import Flask, jsonify, request

app = Flask(__name__)

@app.route('/none', methods=['GET'])
def none_endpoint():
    # This endpoint just returns 'None' when called
    return jsonify(data=None)

@app.route('/echo', methods=['POST'])
def echo_endpoint():
    # Get the request data, if any, and return it back
    data = request.get_json() or None
    return jsonify(data=data)

if __name__ == '__main__':
    app.run(debug=True)
119
python
from django.http import HttpResponse

def my_view(request):
    # This variable will not be assigned a value
    # and it will have the value of None
    my_variable = None

    if request.method == 'POST':
        # Here you can assign a value to `my_variable`
        # for example, when form data is submitted
        my_variable = request.POST.get('mykey')

    if my_variable is not None:
        return HttpResponse(f"Received value: {my_variable}")

    return HttpResponse("No value received")
120
python
import numpy as np

def create_numpy_array(input):
    """
    Create a NumPy array if input is not None, otherwise return None.
    """
    if input is not None:
        # Create a NumPy array of zeros with the given shape
        array = np.zeros((3, 3))
        print("Created a NumPy array of shape (3, 3):")
        print(array)
        return array
    else:
        print("Input is None.")
        return None

# Test the function with a None value and a valid argument
test_none = None
print(f"Testing with None: {create_numpy_array(test_none)}")

# Test the function with a valid argument (list)
test_list = [1, 2, 3]
test_array = create_numpy_array(test_list)
print(f"Testing with list: {test_array.shape if test_array is not None else 'None'}")

# Test the function with a valid argument (tuple)
test_tuple = (1, 2, 3)
test_numpy_array = create_numpy_array(test_tuple)
print(f"Testing with tuple: {test_numpy_array.shape if test_numpy_array is not None else 'None'}")
121
python
# Importing required libraries
import pandas as pd

# Creating an empty DataFrame with given columns
data = {
    'Name': [None, "John", None],
    'Age': [None, 25, None],
    'City': ["New York", None, "Chicago"]
}

df = pd.DataFrame(data)

# Displaying the DataFrame
print("Original DataFrame:")
print(df)

# Setting specific values to be None
df.loc[0, 'Name'] = None
df.loc[1, 'Age'] = None

# Displaying the updated DataFrame
print("\nUpdated DataFrame:")
print(df)
122
python
import numpy as np
import matplotlib.pyplot as plt

# Create some data for the plot
x = np.linspace(0, 10, 100)
y_data1 = np.sin(x)
y_data2 = np.cos(x)

# Define a dictionary with one key having None value and another key having numerical value
my_dict = {'key1': None, 'key2': y_data2}

# Create a figure and axes
fig, ax = plt.subplots()

# Plot the first dataset
ax.plot(x, y_data1, label='sin(x)')

# Demonstrate using None in the dictionary as a placeholder
if my_dict.get('key1'):  # Check if 'key1' has a value before plotting
    ax.plot(x, my_dict['key1'], linestyle='--', label='None Value')

# Label and title for the plot
ax.legend()
ax.set_title('Line Plot using Matplotlib and None')
plt.show()
123
python
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

# Using None as a value in Python
data = {}
data['name'] = ['John', 'Jane', 'Mike', None]
data['age'] = [25, 30, np.nan, 45]

print("Data:")
print(data)

# Using Seaborn library for data visualization
np.random.seed(123)
x = np.random.randn(100)
y = np.where(np.isnan(x), None, x**2)

sns.scatterplot(x, y)
plt.title("Scatterplot with None values")
plt.show()

# Handle None values in seaborn plot
sns.boxplot(data=data, x='name', y='age')
plt.title("Boxplot handling None values")
plt.show()
124
python
import tensorflow as tf

# Create placeholders with shape (None,) for input data and labels
input_placeholder = tf.placeholder(tf.float32, shape=(None, 784))
label_placeholder = tf.placeholder(tf.int32, shape=(None,))

# Create a variable for the weights and biases of the neural network
weights = tf.Variable(tf.zeros((784, 10)))
biases = tf.Variable(tf.zeros([10]))

# Define the logits (predictions) using the input data and current weights/biases
logits = tf.matmul(input_placeholder, weights) + biases

# Define loss function (cross-entropy) and training operation
loss = tf.reduce_mean(tf.nn.sparse_softmax_cross_entropy_with_logits(labels=label_placeholder, logits=logits))
training_op = tf.train.GradientDescentOptimizer(0.5).minimize(loss)

# Define the prediction operation
predictions = tf.argmax(logits, axis=1)

# Simulate a batch of data (input images and corresponding labels)
batch = tf.constant([[...], [...]], shape=(2, 784))
labels_batch = tf.constant([[0], [5]])

# Run the session and make predictions on this batch
with tf.Session() as sess:
    # Initialize variables
    sess.run(tf.global_variables_initializer())

    # Train the model using placeholders (None) for input data
    _ = sess.run(training_op, feed_dict={input_placeholder: None, label_placeholder: None})

    # Make predictions on the batch data
    predicted_labels = sess.run(predictions, feed_dict={input_placeholder: batch})

print(predicted_labels)  # Output: [0, 5]
125
python
# This example shows how to use None as a default value for function arguments

def my_function(arg1=None, arg2=None):
    """This function demonstrates the use of None as a default value for function arguments."""
    if arg1 is None:
        print("Argument 'arg1' was not provided.")
    else:
        print("Argument 'arg1' has the value:", arg1)

    if arg2 is None:
        print("Argument 'arg2' was not provided.")
    else:
        print("Argument 'arg2' has the value:", arg2)

# Call the function with no arguments
my_function()

# Call the function with one argument
my_function("value1")

# Call the function with two arguments
my_function("value1", "value2")
126
python
# Importing necessary libraries
from sklearn import datasets, linear_model
import numpy as np

# Define a function that takes X and y as arguments and returns None if they are not provided
def train_model(X=None, y=None):
    if X is None or y is None:
        print("Error: X and y must be provided for training the model.")
        return None

    # Creating a linear regression model object
    regressor = linear_model.LinearRegression()

    # Training the model with X and y data
    regressor.fit(X, y)

    return regressor

# Defining some sample data
X = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])
y = np.array([5, 6, 7, 8])

# Training the model with provided X and y data
model = train_model(X, y)

# Check if the model is not None
if model is not None:
    # Making predictions using the trained model
    print("Predictions using the trained model:\n")
    print(model.predict(np.array([[6], [7]])))
else:
    print("Error: Model could not be trained.")
127
python
from bs4 import BeautifulSoup, NullSentinel
import requests

# Define a function to get HTML content of a URL using requests library
def get_html(url):
    try:
        response = requests.get(url)
        html_content = response.text
        return html_content
    except Exception as e:
        print(f"Error occurred while fetching HTML content: {e}")
        return None

# Define a function to parse the given HTML using BeautifulSoup
def parse_html(html_content):
    if html_content is not None:
        soup = BeautifulSoup(html_content, 'html.parser')
        # Use None as a placeholder for elements that may be missing in the HTML
        title = soup.title or BeautifulSoup(None)
        link = soup.find('link', href=True) or (None, None)
        return title.text, link[0]['href'] if link else ("Title and Link not found", None)
    else:
        return "HTML content is empty or unavailable.", None

# Call the functions with a sample URL
html_content = get_html("https://example.com")
title, link = parse_html(html_content)
print(f"Website title: {title}")
print(f"Link: {link}")
128
python
from selenium import webdriver

def find_element_by_css(driver, css_selector):
    try:
        return driver.find_element_by_css_name(css_selector)
    except Exception as e:
        print(f"No element found with CSS selector: {css_selector}. Error: {e}")
        return None

def main():
    # Initialize the Chrome driver
    driver = webdriver.Chrome()
    
    # Navigate to a webpage
    driver.get("https://www.google.com")

    # Find the search box element and enter a search query
    search_box = find_element_by_css(driver, "name='q'")
    if search_box is not None:
        search_box.send_keys("Selenium Python")
        search_button = find_element_by_css(driver, "name='btnK'")
        if search_button is not None:
            search_button.click()
        else:
            print("Search button not found!")
    else:
        print("Search box not found!")
    
    # Quit the Chrome driver
    driver.quit()

if __name__ == "__main__":
    main()
129
python
import torch
import torch.nn as nn
import torch.optim as optim

# Define a simple neural network architecture
class SimpleNN(nn.Module):
    def __init__(self):
        super(SimpleNN, self).__init__()
        self.fc1 = nn.Linear(1, 4)
        self.fc2 = nn.Linear(4, 1)
        self.sigmoid = nn.Sigmoid()

    def forward(self, x):
        x = torch.relu(self.fc1(x))
        x = self.sigmoid(self.fc2(x))
        return x

# Generate some random data for training and testing the network
data = torch.randn(1000, 1)
labels = torch.bernoulli(torch.randn(1000, 1))

# Set up the neural network, loss function and optimizer
model = SimpleNN()
criterion = nn.BCELoss()  # Binary Cross Entropy Loss
optimizer = optim.SGD(model.parameters(), lr=0.01)

# Train the model
num_epochs = 25
for epoch in range(num_epochs):
    for i, (inputs, labels) in enumerate(zip(data.tensor().T, labels)):
        # Forward pass
        outputs = model(inputs.view(-1, 1))
        loss = criterion(outputs, labels.view(-1, 1))

        # Backward and optimization
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()

    print(f'Epoch [{epoch+1}/{num_epochs}], Loss: {loss.item():.4f}')

# Testing the model on some None data
test_data = torch.tensor([[None]], dtype=torch.float)
outputs = model(test_data)
print('Prediction for None input:', outputs.item())
130
python
from sqlalchemy import create_engine, Column, Integer, String, Float, Null
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker

# Define Base class for SQLAlchemy models
Base = declarative_base()

class Person(Base):
    __tablename__ = "persons"

    id = Column(Integer, primary_key=True)
    name = Column(String)
    age = Column(Integer)
    height = Column(Float)
    salary = Column(Float)

    def __repr__(self):
        return f"<Person(id={self.id}, name='{self.name}', age={self.age}, height={self.height}, salary={self.salary})>"

# Initialize engine and create table if not exists
engine = create_engine("sqlite:///test.db", echo=True)
Base.metadata.create_all(engine)

Session = sessionmaker(bind=engine)
session = Session()

# CRUD operations: Create
new_person = Person(name="John Doe", age=30, height=175.0, salary=None)
session.add(new_person)
session.commit()

# Read
persons = session.query(Person).all()
print("Persons in the database:")
for person in persons:
    print(person)

# Update
person = session.query(Person).filter(Person.name == "John Doe").first()
if person:
    person.salary = 50000.0
    session.commit()
else:
    print("No such person found")

# Delete
person = session.query(Person).filter(Person.id == 1).first()
if person:
    session.delete(person)
    session.commit()
else:
    print("No such person found")

session.close()
131
python
# filename: my_function.py
def get_default_list(input_list=None):
    if input_list is None or len(input_list) == 0:
        return None
    else:
        return input_list
132
python
class MyClass:
    def __init__(self):
        self.value = None

    def my_method(self):
        if some_condition():  # Replace this with your condition
            return "Hello World"
        else:
            self.value = None
            return None
133
python
class Calculator:
    def divide(self, numerator, denominator):
        if denominator == 0:
            return None
        else:
            result = numerator / denominator
            return result

# Tests using pytest
def test_calculator_division():
    calc = Calculator()
    
    assert calc.divide(4, 2) == 2.0
    assert calc.divide(-5, 3) == -1.6666666666667
    assert calc.divide(10, 5) == 2.0
    assert calc.divide(1, 0) is None
    assert calc.divide(0, 2) is None
134
python
import asyncio
import aiohttp

async def fetch(session, url):
    try:
        async with session.get(url) as response:
            if response.status in (200, 301, 302):
                return await response.text()
            else:
                print(f"Error {response.status}: URL {url} not found or returned an error")
                return None
    except Exception as e:
        print(f"An error occurred while fetching from {url}: {str(e)}")
        return None

async def main():
    async with aiohttp.ClientSession() as session:
        urls = [
            "http://google.com",
            "http://example.com/nonexistent_page",
            "https://www.python.org",
            "http://invalid_url"
        ]
        tasks = []
        for url in urls:
            tasks.append(asyncio.create_task(fetch(session, url)))
        
        results = await asyncio.gather(*tasks)

        print("\nResults:")
        for i, result in enumerate(results):
            if result is not None:
                print(f"URL [{urls[i]}]: {result}")
            else:
                print(f"URL [{urls[i]}] returned None.")

if __name__ == "__main__":
    asyncio.run(main())
135
python
import multiprocessing

def sum_list(my_list):
    """Function to sum elements in a list."""
    result = 0
    for num in my_list:
        result += num
    return result

if __name__ == '__main__':
    list_a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    list_b = [11, 12, 13, 14, 15, 16, 17, 18, 19, 20]

    # Using multiprocessing to create separate processes
    process_a = multiprocessing.Process(target=sum_list, args=(list_a,))
    process_b = multiprocessing.Process(target=sum_list, args=(list_b,))

    # Start the processes
    process_a.start()
    process_b.start()

    # Wait for both processes to finish
    process_a.join()
    process_b.join()

    result_a = process_a.exitcode  # None in this case, but we can use it as a flag
    result_b = process_b.returnvalue

    print(f'The sum of list A is: {result_b}')
    print(f'The sum of list B is: {result_b + result_a}')
136
python
import queue
import threading

def producer(queue):
    num = 0
    while True:
        queue.put(num)  # Produce some data and put it into the queue
        print("Produced item: ", num)
        num += 1
        if num >= 5:  # If we produced 5 items, stop producing
            break

def consumer(queue, result):
    while not queue.empty():  # While there are items in the queue
        data = queue.get()  # Get the next item from the queue
        print("Consumed item: ", data)
        if data is None:  # If we consumed a `None` value, stop consuming
            break
        result.append(data)

if __name__ == "__main__":
    queue = queue.Queue()
    result = []
    producer_thread = threading.Thread(target=producer, args=(queue,))
    consumer_thread = threading.Thread(target=consumer, args=(queue, result))

    producer_thread.start()
    consumer_thread.start()

    # Wait for both threads to finish
    producer_thread.join()
    consumer_thread.join()

    print("Final result: ", result)

    # Signal the consumer thread to stop consuming by putting a `None` value into the queue
    queue.put(None)
137
python
import socket

def main():
    host = '127.0.0.1'  # Standard loopback interface address (localhost)
    port = 12345        # Port to listen on

    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        print(f"Server started at {host}:{port}")
        s.bind((host, port))
        s.listen()
        conn, addr = s.accept()
        with conn:
            print(f'Connected by {addr}')
            while True:
                data = input("Enter a message or type 'q' to quit: ")
                if data == 'q':
                    break
                conn.sendall(data.encode())
                response = conn.recv(1024)
                print(f"Received from client: {response.decode()}")

if __name__ == "__main__":
    main()
138
python
import tkinter as tk

def main():
    # Create the root window
    root = tk.Tk()

    # Assign None to some variables
    var_entry = None
    button = None

    def button_clicked():
        if var_entry is not None:
            print("Entry value: ", var_entry.get())

    # Create a Label and Entry widget
    label = tk.Label(root, text="Enter some text here:")
    label.pack()
    var_entry = tk.StringVar()
    entry = tk.Entry(root, textvariable=var_entry)
    entry.pack()

    # Create a Button widget
    button = tk.Button(root, text="Click me!", command=button_clicked)
    button.pack()

    # Run the Tkinter event loop
    root.mainloop()

if __name__ == "__main__":
    main()
139
python
# Import required modules
import pygame
import sys

# Initialize Pygame
pygame.init()

# Set up some constants
WIDTH, HEIGHT = 500, 500
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)

def draw_text(surface, text, pos, color=WHITE):
    """This function will draw text on the given surface."""
    font = pygame.font.Font(None, 32)
    text_surface = font.render(text, False, color)
    rect = text_surface.get_rect()
    rect.topleft = pos
    surface.blit(text_surface, rect)

def main():
    # Set up the display
    screen = pygame.display.set_mode((WIDTH, HEIGHT))
    pygame.display.set_caption("None and Pygame example")

    # Main game loop
    running = True
    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False

        screen.fill(BLACK)

        # Draw some text using the draw_text function with None as a default color
        draw_text(screen, "Hello World!", (50, 50))
        draw_text(screen, "None is a placeholder value in Python", (50, 100), None)

        pygame.display.flip()

    pygame.quit()
    sys.exit()

if __name__ == "__main__":
    main()
140
python
from sys import argv, exit
from PyQt5.QtWidgets import QApplication, QLabel, QPushButton, QVBoxLayout, QWidget

class MyApp(QWidget):
    def __init__(self, title="PyQt with None"):
        super().__init__()

        self.title = title
        self.init_ui()

    def init_ui(self):
        layout = QVBoxLayout()

        self.label = QLabel("No button clicked yet")
        layout.addWidget(self.label)

        self.button = QPushButton("Click me!")
        self.button.clicked.connect(self.on_button_clicked)
        layout.addWidget(self.button)

        self.setLayout(layout)
        self.setWindowTitle(self.title)
        self.show()

    def on_button_clicked(self):
        if self.label.text() == "No button clicked yet":
            self.label.setText("Button clicked!")
        else:
            self.label.setText("No button clicked yet")

if __name__ == "__main__":
    app = QApplication(argv)
    
    my_app = MyApp()
    my_app.exec_()
141
python
import wx

class MyApp(wx.App):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

    def OnInit(self):
        self.frame = MyFrame(None)
        self.SetTopWindow(self.frame)
        self.frame.Show()
        return True

class MyFrame(wx.Frame):
    def __init__(self, parent):
        super().__init__(parent=parent, title="My Frame", size=(300, 200))

        # Create a button with the label "Click Me" and bind it to an event handler
        self.button = wx.Button(self, label="Click Me")
        self.Bind(wx.EVT_BUTTON, self.OnButtonClicked, self.button)

        # Create a sizer to arrange the button in the frame
        box_sizer = wx.BoxSizer(wx.VERTICAL)
        box_sizer.Add(self.button, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL)

        # Set the sizer for the frame
        self.SetSizer(box_sizer)

    def OnButtonClicked(self, event):
        # When the button is clicked, print a message to the console and reset the button label
        print("Button clicked!")
        self.button.SetLabel("Clicked!")

if __name__ == "__main__":
    app = MyApp()
    app.MainLoop()
142
python
# Function that takes an optional parameter with default value as None
def greet(name=None):
    if name is not None:
        print("Hello, " + name)
    else:
        print("Hello, World!")
        
# Calling the function without any argument
greet()
# Output: Hello, World!

# Calling the function with an argument
greet("Alice")
# Output: Hello, Alice
143
python
# Function to represent a simple calculator with addition, subtraction, and division operations
def calculator(num1, num2, operation):
    if operation == 'add':
        result = num1 + num2
    elif operation == 'subtract':
        result = num1 - num2
    elif operation == 'divide':
        # Check for division by zero to avoid TypeError: unsupported operand type(s) for /: 'NoneType' and 'int'
        if num2 is not None:
            result = num1 / num2
        else:
            print("Cannot divide by zero")
            return None
    else:
        print("Invalid operation")
        return None

    # Return the result wrapped in a list to maintain consistency with other returns (None and numbers)
    return [result]

# Testing the calculator function
if __name__ == "__main__":
    num1 = 5
    num2 = 3
    operation = 'add'
    print(calculator(num1, num2, operation))  # Output: [8]

    num1 = 6
    num2 = None
    operation = 'divide'
    print(calculator(num1, num2, operation))  # Output: ['Cannot divide by zero'] or None if using Python <3.9 (NoneType objects cannot be returned from an expression)

    num1 = 8
    num2 = 4
    operation = 'subtract'
    print(calculator(num1, num2, operation))  # Output: [-4]
144
python
# Define a class called "Person"
class Person:
    def __init__(self, name, age=None):
        self.name = name
        self.age = age

    # Define a method called "describe" that prints out person details
    def describe(self):
        if self.age is not None:
            print(f"Name: {self.name}, Age: {self.age}")
        else:
            print(f"Name: {self.name}")

# Create instances of the "Person" class with and without age
person1 = Person("Alice")
person2 = Person("Bob", 30)

# Call the "describe" method for each person instance
person1.describe()  # Output: Name: Alice
person2.describe()  # Output: Name: Bob, Age: 30
145
python
class Vehicle:
    def __init__(self, color=None, wheels=4):
        self.color = color
        self.wheels = wheels

    def start(self):
        print(f"Starting a {self.color} vehicle...")

    def stop(self):
        print("Stopping the vehicle.")

class Car(Vehicle):
    def __init__(self, color=None, wheels=4, num_doors=4):
        super().__init__(color, wheels)
        self.num_doors = num_doors

my_car = Car("red")
print(my_car.color)  # Output: red
print(my_car.wheels)  # Output: 4
print(my_car.num_doors)  # Output: 4

my_car.start()  # Output: Starting a red vehicle...
my_car.stop()   # Output: Stopping the vehicle.
146
python
# Base Class
class Shape:
    def area(self):
        pass

# Derived Classes
class Circle(Shape):
    def __init__(self, radius):
        self.radius = radius

    def area(self):
        return pi * (self.radius ** 2)

class Rectangle(Shape):
    def __init__(self, width, height):
        self.width = width
        self.height = height

    def area(self):
        return self.width * self.height

# Function to calculate the area of a given shape
def calculate_area(shape):
    return shape.area() if callable(shape.area) else None

# Test Cases
circle = Circle(5)
rectangle = Rectangle(4, 6)
shapes = [circle, rectangle]

for shape in shapes:
    area = calculate_area(shape)
    if area is not None:
        print(f'The area of the {type(shape).__name__} is: {area}')
147
python
class Calculator:
    def __init__(self):
        self._number_one = None
        self._number_two = None
        self._result = None

    def set_numbers(self, number_one, number_two):
        if number_one is not None and number_two is not None:
            self._number_one = number_one
            self._number_two = number_two
        else:
            print("Both number_one and number_two must be provided.")

    def add(self):
        if self._number_one is not None and self._number_two is not None:
            self._result = self._number_one + self._number_two
        else:
            print("Error: Both numbers must be set before adding them.")

    def get_result(self):
        return self._result

# Usage
calculator = Calculator()
calculator.set_numbers(3, 4)
calculator.add()
print("Result:", calculator.get_result())  # Output: Result: 7
148
python
class Calculator:
    def __init__(self):
        self._num1 = None
        self._num2 = None
        self._operation = None

    def add(self, num1, num2):
        if isinstance(num1, (int, float)) and isinstance(num2, (int, float)):
            self._num1 = num1
            self._num2 = num2
            self._operation = "addition"
            return self._calculate()

    def subtract(self, num1, num2):
        if isinstance(num1, (int, float)) and isinstance(num2, (int, float)):
            self._num1 = num1
            self._num2 = num2
            self._operation = "subtraction"
            return self._calculate()

    def multiply(self, num1, num2):
        if isinstance(num1, (int, float)) and isinstance(num2, (int, float)):
            self._num1 = num1
            self._num2 = num2
            self._operation = "multiplication"
            return self._calculate()

    def divide(self, num1, num2):
        if isinstance(num1, (int, float)) and isinstance(num2, (int, float)):
            if num2 != 0:
                self._num1 = num1
                self._num2 = num2
                self._operation = "division"
                return self._calculate()
        print("Error: Division by zero is not allowed")
        self._num1 = None
        self._num2 = None
        self._operation = None

    def _calculate(self):
        if self._num1 is None or self._num2 is None or self._operation is None:
            print("Error: Missing valid inputs")
            self._num1 = None
            self._num2 = None
            self._operation = None
        else:
            result = getattr(self, self._operation)(self._num1, self._num2)
            print(f"Result: {result}")

if __name__ == "__main__":
    calc = Calculator()

    # Valid inputs with an addition operation
    calc.add(5, 3)

    # Valid inputs with a subtraction operation
    calc.subtract(10, 4)

    # Valid inputs with a multiplication operation
    calc.multiply(2, 6)

    # Valid inputs with a division operation
    calc.divide(8, 2)

    # Invalid input: non-numeric value for the first number in division
    calc.divide("hello", 5)

    # Invalid input: zero as the second number in subtraction or division
    calc.subtract(10, 0)
    calc.divide(10, 0)
149
python
class Graph:
    def __init__(self, vertices):
        self.V = vertices
        self.graph = [[0 for i in range(vertices)] for j in range(vertices)]

    def add_edge(self, i, j):
        self.graph[i].append(j)
        self.graph[j].append(i)

def dfs(graph, start_vertex, visited=None):
    if visited is None:
        visited = [False] * graph.V

    visited[start_vertex] = True
    print("Visited vertex", start_vertex)

    for i in graph.graph[start_vertex]:
        if not visited[i]:
            dfs(graph, i, visited)

if __name__ == "__main__":
    graph = Graph(4)
    graph.add_edge(0, 1)
    graph.add_edge(0, 2)
    graph.add_edge(1, 2)
    graph.add_edge(2, 0)
    graph.add_edge(2, 3)
    graph.add_edge(3, 3)

    print("Starting DFS from vertex 0")
    dfs(graph, 0)
150
python
# Define a list with some elements and some None values
my_list = [1, 2, 3, None, 5, None, 7, 8, None]

print("Original List:")
print(my_list)

# Iterate through the list using a for loop
print("\nIterating through the list:")
for element in my_list:
    if element is not None:
        print(element)
151
python
# Define a function 'my_function' that can return None
def my_function(parameter=None):
    """
    This is a simple Python function that can accept an optional parameter and returns None.
    :param parameter: An optional parameter (default is None)
    :return: None or the given parameter if it is not None
    """
    if parameter is not None:
        return parameter
    else:
        return None

# Call 'my_function' with different arguments
result1 = my_function(42)
print(f"Result 1: {result1}")

result2 = my_function()
print(f"Result 2: {result2}")
152
python
class MyClass:
    # A class property with default value as None
    property = None

    def __init__(self, value=None):
        self.value = value

    # Custom method to set the class property
    @classmethod
    def set_class_property(cls, value):
        cls.property = value

# Creating an instance of MyClass with no initial value
instance1 = MyClass()
print("Instance 1 value: ", instance1.value)
print("Instance 1 class property: ", MyClass.property)

# Setting class property using custom method
MyClass.set_class_property("new_value")

# Creating another instance of MyClass with initial value
instance2 = MyClass("initial_value")
print("Instance 2 value: ", instance2.value)
print("Instance 2 class property: ", MyClass.property)
153
python
# Assigning None to a variable
none_value = None
print("Variable 'none_value' is:", none_value)

# Assigning other values to variables
age = 25
name = "John Doe"
is_student = True

# Check if a variable has no value or not using 'is' keyword
print("Variable 'age' is None?:", age is None)
print("Variable 'name' is None?:", name is None)
print("Variable 'is_student' is None?:", is_student is None)

# Updating a variable with None
if condition:
    age = None

# Checking if a variable is None or not using 'is' keyword
print("Variable 'age' is None?:", age is None)
154
python
# Define a constant called MAX_LIMIT with value 100
MAX_LIMIT = 100

def function_with_none():
    """
    This function demonstrates the use of None.
    """
    # Assigning None to a variable
    none_value = None

    print("None Type: ", type(none_value))

    # Function with a parameter that can accept None
    def another_function(param):
        if param is None:
            print("Parameter is None")
        else:
            print("Parameter has a value:", param)

    # Calling another function with None and non-None values
    another_function(None)
    another_function("Hello World")

# Calling the function_with_none()
function_with_none()
155
python
def greet(name=None):
    """
    This function greets the given name. If no name is provided, it will print a generic greeting.
    :param name: The name of the person to greet
    :return: None
    """
    if name is not None:
         print(f"Hello {name}!")
     else:
         print("Hello there!")

# Let's test this function with some input values and also with no argument provided
greet("John Doe")
greet()
greet("Jane Doe")
156
python
def greet(name=None):
    if name is None:
        print("Hello, you haven't provided a name")
        name = input("Please enter your name: ")
        print(f"Hi {name}! Nice to meet you.")
    else:
        print(f"Hello, {name}!")

# Call the function with an argument
greet("Alice")

# Call the function without an argument
greet()
157
python
def divide(numerator, denominator):
    """
    This function takes two arguments, numerator and denominator.
    If denominator is zero, it returns None. Else, it performs division and returns the result.
    """

    if denominator == 0:
        print("Error! Cannot divide by zero.")
        return None

    result = numerator / denominator
    return result

# Testing the function
num1 = 10
denom1 = 2
result1 = divide(num1, denom1)
print("The result of {} divided by {} is:{}".format(num1, denom1, result1))

num2 = 5
denom2 = 0
result2 = divide(num2, denom2)
print("The result of {} divided by {} is:{}".format(num2, denom2, result2))
158
python
# Define a function that takes two arguments, returns the greater number or sets to None if both are equal
def max_number(num1, num2):
    if num1 >= num2:
        return num1
    else:
        return num2
        
# Assign values to variables with some being set to None
num1 = 5
num2 = None

# Use conditional statement and check if 'num2' is None, if yes then assign default value of zero
if num2 is None:
    num2 = 0

# Get maximum number using the defined function
max_num = max_number(num1, num2)

print("Maximum number: ", max_num)
159
python
# Initialize some variables with None value
data = None
numbers = None

print("Initial values:")
print("Data:", data)
print("Numbers:", numbers)

# Using a for loop to iterate over an empty list and assign None to each element
numbers = []
for i in range(5):
    numbers.append(None)

print("\nAssigned None to each element of the list:")
print("Numbers:", numbers)

# Using a for loop with data variable and checking if it is None
data = 10
print("\nData now has a value, let's check if the variable 'data' is None:")
for i in range(3):
    if data is None:
        print("Data is still None!")
        break
    print("Data is not None.")

# Now set Data to None again and checking if it is equal to any number
print("\nChecking 'data' against numbers using 'is':")
for num in [1, 2, 3, 4]:
    if data is num:
        print(f"Data is the same as number {num}!")
        break
    print(f"Data is not the same as number {num}.")

print("\nChecking 'data' against numbers using '==':")
for num in [1, 2, 3, 4]:
    if data == num:
        print(f"Data is equal to number {num}!")
        break
    print(f"Data is not equal to number {num}.")
160
python
# Function to calculate the square of a number, with None as default argument
def square(number=None):
    if number is None:
        print("Please provide a number")
        return
    result = number * number
    print("The square of", number, "is:", result)

# Calling the function with no argument
square()

# Calling the function with an argument
square(5)

# Assigning None to a variable and checking it with if statement
num = None
if num is None:
    print("Number is not assigned")
else:
    print("Number is:", num)
161
python
# Assigning None to variables
var1 = None
var2 = 42

# Expression with comparison using None
if var1 is None:
    print("Variable 1 is assigned None")
else:
    print("Variable 1 is not None, it has the value:", var1)

# Expression with arithmetic operation and None
result = 5 * var2 if var2 is not None else None
print("The result of expression is:", result)
162
python
# This is a comment, anything following the '#' symbol is ignored by the interpreter

# Assigning None to a variable
none_value = None

# Print statement showing the value of the variable 'none_value'
print("The value of none_value is:", none_value)

# Define a function that returns None
def my_function():
 return None

# Call the function and print the result
result = my_function()
print("The result of calling my_function() is:", result)
163
python
# This function takes no argument and returns None
def my_function():
    print("This function does nothing and returns None")
    return None

# This is the main function where we call my_function()
def main():
    result = my_function()
    if result is None:
        print("Function returned None")
    else:
        print("Function returned something other than None")
        print("Result is:", result)

# Call the main function
if __name__ == "__main__":
    main()
164
python
# Assigning None to a variable
my_variable = None
print(type(my_variable))  # <class 'NoneType'>

# Function returning None
def greet():
    print("Hello, World!")
    
# Call the function without return value
greet()
print(greet)  # <function greet at 0x7f98d3b6c120>
print(type(greet))  # <class 'function'>
print(type(greet()) is None)  # True
165
python
# my_package/mymodule.py
def none_function():
    """
    A simple function that returns None.
    """
    return None
166
python
import numpy as np

# Function with None as default value
def divide(a, b=None):
    """
    Divide two numbers a and b. If b is not provided, the function returns None.
    :param a: A number for dividend.
    :param b: A number for divisor (default: None).
    :return: Result of division or None if b is not provided.
    """
    if b is not None:
        result = np.divide(a, b)
        return result
    else:
        print("Function received no divisor. Returning None.")
        return None

# Test the divide function with some inputs
print(divide(5))
print(divide(10, 3))
print(divide(4, None))
167
python
# Define a simple function that returns None
def my_function():
    print("This function will return None.")
    return None

# Define a dictionary as a namespace for our custom objects
custom_namespace = {
    "my_variable": 42,
    "another_function": lambda: "Hello, World!"
}

# Call the function and assign its result to a variable
result = my_function()
print("The result of my_function is:", result)

# Access the custom namespace and use its contents
print("Value of my_variable in the custom namespace:", custom_namespace["my_variable"])
print("Another function in the custom namespace returns:", custom_namespace["another_function"]())
168
python
# Assigning None to a variable
none_value = None
print("Value of none_value: ", none_value)

# Check if a variable is None
my_variable = 42
print("Value of my_variable: ", my_variable)
print("Is my_variable equal to None? ", my_variable is None)

# Assigning None to a dictionary value
none_dictionary = {"key": None}
print("Value of none_dictionary: ", none_dictionary)
print("Value of none_dictionary['key']: ", none_dictionary['key'])

# Interpreter part (Python shell or REPL)
"""
You can also explore the use of `None` and Python interpreter in the interactive mode. Here's an example:

>>> x = None
>>> print(x)
None

>>> y = 5
>>> print(y)
5

>>> print(y is None)
False
"""
169
python
# Assigning None to a variable
x = None
print("Value of x:", x)

# Function returning None
def return_none():
    return None

result = return_none()
print("Value of result:", result)

# Using None in conditional statements
if x is None:
    print("x is equal to None")
else:
    print("x is not equal to None")
170
python
# Assigning None to a variable
none_value = None
print("Value of none_value is:", none_value)

# Using if condition with None
def get_data():
    data = None
    if data is not None:
        print("Data is available")
        return data
    else:
        print("No data available")
        return None

print("Getting data from the function:")
my_data = get_data()
if my_data is not None:
    print("My data is:", my_data)
else:
    print("No data received")

# Using list with None as an element
numbers = [1, 2, None, 4, 5]
print("List of numbers:", numbers)

# Using tuples with None as an element
tuple_values = (1, "Two", None)
print("Tuple values:", tuple_values)
171
python
# Function that returns the square root of a number if it's positive, and None otherwise
def compute_square_root(number):
    if number < 0:
        print("Error: Cannot compute square root of negative number")
        return None
    else:
        return number ** 0.5

# Function that tries to find the square root of a number and prints it out
def print_square_root(number):
    result = compute_square_root(number)
    if result is not None:
        print(f"The square root of {number} is {result}")

# Testing cases
print("Computing square root of 4:")
print_square_root(4)

print("\nComputing square root of -1:")
print_square_root(-1)
172
python
def add(x, y=None):
    if y is None:
        print("Please provide a number for the second argument.")
        return None
    else:
        result = x + y
        return result

# Using the function with valid arguments
print(add(3, 5)) # Output: 8

# Using the function with an invalid argument (None)
print(add(3)) # Output: Please provide a number for the second argument. None

# Debugging the code using pdb module
import pdb

def add_with_debug(x, y=None):
    if y is None:
        print("Please provide a number for the second argument.")
         pdb.set_trace() # Set breakpoint here
        return None
    else:
        result = x + y
        return result

add_with_debug(3) # When you run this code, it will stop at the line with pdb.set_trace() and open an interactive console where you can inspect variables and step through the code.
173
python
# Define a function that tries to get some data (may return None)
def get_data():
    try:
        data = [1, 2, 3, 4]
        return data
    except Exception:
        print("Error occurred while fetching data!")
        return None

# Test the function and check if it returns None
def main():
    data = get_data()
    
    # Check if data is not None before performing further operations on it
    if data is not None:
        print("Data fetched successfully:", data)
        process_data(data)
    else:
        print("No data was returned.")

# Sample function to process data (for the sake of this example)
def process_data(data):
    for element in data:
        print("Element: ", element)

if __name__ == "__main__":
    main()
174
python
# Function to calculate the square root of a number using Newtons method.
# This function may return None if the given number is negative or if it fails to converge.

import math

def sqrt(number):
    """
    Calculate the square root of a given number using Newtons method.
    
    Parameters:
    number (float): The number for which to calculate the square root.
    
    Returns:
    float: The square root of the given number.
    None: If the number is negative or if the calculation fails to converge.
    """

    # Check if number is negative and return None if it is.
    if number < 0:
        return None

    # Initial guess for the square root.
    guess = number / 2.0

    while abs(guess * (1.0 - guess) - number) > 0.000001:
        guess = (guess + number / guess) / 2.0

    return guess

# Test the function
print(sqrt(9))       # Expected output: 3.0
print(sqrt(4))       # Expected output: 2.0
print(sqrt(16))      # Expected output: 4.0
print(sqrt(-1))      # Expected output: None
175
python
# Define a function that returns None if given argument is empty
def get_first_element(iterable):
    """
    This function returns the first element in the iterable. If the iterable is empty, it returns None.
    """
    if len(iterable) > 0:
        return iterable[0]
    else:
        return None

# Test the function with some examples
print(get_first_element([1, 2, 3]))   # Output: 1
print(get_first_element([]))         # Output: None
print(get_first_element("hello"))    # Output: h
print(get_first_element([None]))     # Output: None
176
python
def calculator(num1, num2, operation):
    """
    Function to perform basic arithmetic operations using given numbers and an operation.

    Args:
        num1 (float or int): First number.
        num2 (float or int): Second number.
        operation (str): Operation to be performed ('add', 'subtract', 'multiply', 'divide').

    Returns:
        result (float or int): The result of the arithmetic operation.
        exception_message (str): An error message in case of an error, otherwise None.
    """

    try:
        if operation == 'add':
            result = num1 + num2
        elif operation == 'subtract':
            result = num1 - num2
        elif operation == 'multiply':
            result = num1 * num2
        elif operation == 'divide':
            if num2 != 0:
                result = num1 / num2
                return result, None
            else:
                exception_message = "Error! Division by zero is not allowed."
                raise ZeroDivisionError(exception_message)
        else:
            exception_message = f"Invalid operation '{operation}'. Supported operations are 'add', 'subtract', 'multiply' and 'divide'."
            raise ValueError(exception_message)
    except Exception as e:
        print("An error occurred:", e)
        result = None
        exception_message = str(e)

# Example usage:
num1 = 5.0
num2 = 3.0
operation = 'divide'
result, exception_message = calculator(num1, num2, operation)

if result is None:
    print("An error occurred:", exception_message)
else:
    print("Result:", result)
177
python
def divide(num1, num2):
    try:
        result = num1 / num2
    except ZeroDivisionError:
        print("Error: Division by zero is not allowed.")
        return None
    else:
        return result

# Test the divide function with valid input
x = 10
y = 5
print(f"Result: {divide(x, y)}")

# Test the divide function with an error input
try:
    print(f"Result: {divide(3, 0)}")
except Exception as e:
    print("Error:", e)
178
python
# Function to divide two numbers with exception handling
def divide(num1, num2):
    try:
        result = num1 / num2
    except ZeroDivisionError as e:
        print("Error:", e)
        result = None
    else:
        print("Result:", result)

# Call the function with valid and invalid inputs
divide(10, 5)
divide(10, 0)
179
python
import logging

# Configure logging
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)
formatter = logging.Formatter("%(asctime)s - %(levelname)s - %(message)s")
file_handler = logging.FileHandler("app.log")
file_handler.setFormatter(formatter)
console_handler = logging.StreamHandler()
console_handler.setFormatter(formatter)
logger.addHandler(file_handler)
logger.addHandler(console_handler)

class MyClass:
    def __init__(self):
        self.data = None

    def method(self):
        """A simple method that returns None"""
        return None

if __name__ == "__main__":
    my_instance = MyClass()
    result = my_instance.method()
    
    logger.debug("Instance initialized")
    logger.info("Method called, returned None")
    if result is not None:
        logger.warning(f"Unexpected non-None value: {result}")

logger.info("Program ended successfully")
180
python
def double(number):
    """
    This function takes one argument and returns the double of that number.
    If the input is None, an AssertionError is raised.
    """
    if number is None:
        assert number is not None, "Input can't be None"
        raise AssertionError("Input can't be None")
     return number * 2

# Testing the function with valid and invalid inputs
print(double(3))               # Output: 6
print(double(None))             # Raises an AssertionError with message "Input can't be None"
181
python
def add_numbers(a, b):
    if isinstance(a, (int, float)):
        result = a
        if isinstance(b, (int, float)):
            result = result + b
            return result
        else:
            print("Error! Second argument must be a number.")
            return None
    else:
        print("Error! First argument must be a number.")
        return None
182
python
# Function to calculate the square root of a number (with and without optimization)
def sqrt_none(number):
    if number < 0:
        return None  # If number is negative, return None
    else:
        import math
        return math.sqrt(number)

# Function to calculate the square root of a number with caching optimization
cache = {}

def sqrt_cache(number):
    if number < 0:
        return None  # If number is negative, return None
    elif number in cache:
        return cache[number]
    else:
        result = math.sqrt(number)
        cache[number] = result
        return result

if __name__ == "__main__":
    numbers = [25.0, 4.0, -1.0, 36.0, 16.0]
    for number in numbers:
        print(f"Square root of {number} is:")
        square_root = sqrt_none(number)
        if square_root is not None:
            print(square_root)
        else:
            print("Error: negative number detected.")

        square_root = sqrt_cache(number)
        if square_root is None:
            print("Error: negative number detected in cache function too.")
        else:
            print(f"Cached result: {square_root}")
183
python
# Function to compute the square root of a number (or return None if the number is negative)
def sqrt(number):
    if number < 0:
        return None
    else:
        import math
        return math.sqrt(number)

# Test some numbers
print(sqrt(4))       # Output: 2.0
print(sqrt(9))       # Output: 3.0
print(sqrt(-1))      # Output: None
184
python
import timeit

# A simple function that performs some computation (for the sake of this example)
def square_root(n):
    import math
    return math.sqrt(n)

# A version of the function that returns None instead of performing computation
def none_square_root(n):
    pass

# Measure the time it takes to call each function using timeit
print("Function returning 'None':")
none_time = timeit.timeit(lambda: none_square_root(10), number=10000)
print(f"Time taken: {none_time} seconds")

print("\nFunction performing computation:")
comp_time = timeit.timeit(lambda: square_root(10), number=10000)
print(f"Time taken: {comp_time} seconds")

# Compare the results
if none_time > comp_time:
    print("The 'None' version of the function is slower!")
else:
    print("The 'None' version of the function is faster!")
    print("This is a rare case, in general None should not make the code slower.")
185
python
# Define a function that returns None if an even number is not provided
def divide_by_two(number):
    if number % 2 == 0:
        result = number / 2
    else:
        print("Error: Invalid even number provided.")
        return None
    return result

# Test the function with some inputs
print(divide_by_two(4))   # Output: 2.0
print(divide_by_two(5))   # Error: Invalid even number provided.
print(divide_by_two(None)) # None
186
python
# Assigning None to a variable
none_value = None
print(type(none_value))

# Function returning None
def return_none():
    return None

print(return_none())
187
python
# Function with a dependency
def calculate_square_root(number):
    if number < 0:
        print("Error: Negative numbers don't have real square roots")
        return None
    import math
    result = math.sqrt(number)
    return result

# Function with dependency on calculate_square_root
def find_distance(x1, y1, x2, y2):
    dx = abs(x1 - x2)
    dy = abs(y1 - y2)

    sqrt_dx = calculate_square_root(dx)
    sqrt_dy = calculate_square_root(dy)

    distance = sqrt_dx + sqrt_dy

    return distance

if __name__ == "__main__":
    print("Find the distance between (2, 3) and (6, 8)")
    x1, y1 = 2, 3
    x2, y2 = 6, 8

    result = find_distance(x1, y1, x2, y2)

    if result is not None:
        print(f"The distance between ({x1}, {y1}) and ({x2}, {y2}) is: {result}")
    else:
        print("Error occurred while calculating the square roots")
188
python
# Assigning None to a variable
my_variable = None
print(type(my_variable))  # Output: <class 'NoneType'>

# Check if a variable is equal to None
another_variable = None
if another_variable is None:
    print("Another variable has no value.")

# Function that returns None as default value
def my_function(input_value=None):
    print("Input Value: ", input_value)
    if input_value is None:
        return None
    # Some code here...
189
python
# Define a variable with None value
none_value = None
print(none_value)

# Function returning None as default value
def greet():
    return None
print(greet())

# Using None as an argument for a function
def print_if_not_none(data=None):
    if data is not None:
        print("Data:", data)
print_if_not_none()
190
python
class Student:
    def __init__(self, name=None, grade=None):
        self.name = name
        self.grade = grade

student1 = Student("John Doe")
student2 = Student(name="Jane Smith", grade=95)

print(student1.grade)  # Output: None
print(student2.grade)  # Output: 95
191
python
# Example demonstrating the use of None

def is_none(value):
    """
    Check if given value is equal to None
    :param value: Any Python object
    :return: Boolean value
    """
    return value is None

def main():
    # Assigning None to a variable
    my_variable = None

    print("my_variable is None? ", is_none(my_variable))

    # Assigning other values
    another_variable = 42
    third_variable = "Hello, World!"

    print("another_variable is None? ", is_none(another_variable))
    print("third_variable is None? ", is_none(third_variable))

if __name__ == "__main__":
    main()
192
python
# A simple Python program demonstrating the use of None
def greet(name=None):
    if name is None:
        print("Hello, Stranger!")
    else:
        print(f"Hello, {name}!")

greet() # prints "Hello, Stranger!"
greet("John Doe") # prints "Hello, John Doe!"
193
python
# app.py
def divide(x, y):
    """Divides x by y."""
    if y is None:
        return None
    else:
        result = x / y
        return result

if __name__ == "__main__":
    num1 = 10
    num2 = 5
    print(f"Result of {num1} divided by {num2}: {divide(num1, num2)}")

    # Demonstrate None as a return value
    print("Function called with y=None: ", divide(num1, None))
194
python
# my_module.py
def my_function(arg=None):
    """This is a simple function that accepts an optional argument."""
    if arg is not None:
        print("You provided an argument:", arg)
    else:
        print("No argument provided.")
195
python
# Assigning None to a variable
x = None
print(x)  # Output: None

# Using None as a default value for function arguments
def print_value(value=None):
    if value is not None:
        print(value)

# Call the function with and without an argument
print_value()
print_value("Hello, World!")
196
python
import os

# Using None
my_variable = None
print("Value of my_variable is:", my_variable)
if my_variable is not None:
    print("My variable has a value: ", my_variable)
else:
    print("My variable does not have a value.")

# Setting and getting environment variables
my_env_var = os.getenv('MYENVVAR')
print("\nValue of MYENVVAR environment variable is:", my_env_var)

if my_env_var is None:
    print("MYENVVAR environment variable does not have a value.")
else:
    print("MYENVVAR environment variable has the value: ", my_env_var)

# Setting an environment variable (for demo purpose, temporary change for this script session)
os.environ['ANOTHERENVVAR'] = 'AnotherValue'
another_env_var = os.getenv('ANOTHERENVVAR')
print("\nValue of ANOTHERENVVAR environment variable is:", another_env_var)
197
python
import subprocess

# Using None
# In Python, None is a special value used to represent the absence of a value or a variable which has not been initialized.

# Example 1: Assigning None to a variable
none_value = None
print("None value type:", type(none_value))
if none_value is None:
    print("None value is set.")

# Example 2: Using None as an argument or return value from a function
def greet(name=None):
    if name is None:
        print("Hello, World!")
    else:
        print(f"Hello, {name}!")

greet() # Hello, World!
greet("John") # Hello, John!

# Interacting with the Shell using subprocess
def run_command(command):
    process = subprocess.Popen(command, stdout=subprocess.PIPE, shell=True)
    output, error = process.communicate()
    if error:
        print("Error occurred:", error.decode())
    else:
        print("Output of command '{}': {}".format(command, output.decode()))

# Example 1: Running a command and capturing its output
run_command("echo Hello, World!")

# Example 2: Running a command with arguments
run_command("ls -l /usr/bin/")
198
python
# Define a function with an optional argument, default value is None
def greet(name=None):
    if name is not None:
        print(f"Hello, {name}!")
    else:
        print("Hello there!")

# Call the function with a name argument
greet("Alice")

# Call the function without an argument (it will use the default value of None)
greet()
199
python
import time
import schedule

def job():
    print("Job executed at: ", time.ctime())

# Schedule the job to run every 1 minute
schedule.every(1).minutes.do(job)

while True:
    schedule.run_pending()
    time.sleep(1)
200
python
def process_data(data):
    """
    A hypothetical data processing function that takes a single argument,
    a list of items, and returns the sum of the squares of its elements.
    """
    return [x ** 2 for x in data]

def my_batch(input_data, batch_size):
    """
    A simple batch processing function that takes an input list and batch size,
    processes the data in batches, and returns a list of results.
    """
    results = []
    for i in range(0, len(input_data), batch_size):
        batch = input_data[i:i+batch_size] if i + batch_size <= len(input_data) else input_data[i:]
        if batch:
            result = process_data(batch)
            results.append(result)
        else:
            # Simulating the end of the data, setting the result to None
            results.append(None)
    return results

input_data = [1, 2, 3, 4, 5, 6, 7, 8, 9]
batch_size = 3
output = my_batch(input_data, batch_size)

for i, batch in enumerate(output):
    if batch is None:
        print("End of data reached. No output for this batch.")
    else:
        print(f"Batch {i}: Output: {batch}")
201
python
# An example function that may or may not return a value
def divide(x, y):
    try:
        result = x / y
    except ZeroDivisionError:
        print("Error: Division by zero.")
        return None
    else:
        return result

x = 10
y = 2
result = divide(x, y)

if result is not None:
    print(f"Result: {result}")
else:
    print("No result.")
202
python
def factorial(n, check_even=None):
    """Calculate the factorial of a number and optionally check if it's even or odd"""
    if n < 0:
        raise ValueError("Number must be non-negative")

    result = 1
    for i in range(1, n + 1):
        result *= i

    if check_even is not None:
        return result, bool(check_even) if check_even else "even" if result % 2 == 0 else "odd"

    return result

# Test cases
print(factorial(5))              # Output: 120
print(factorial(4, True))         # Output: (120, True)
print(factorial(3, False))        # Output: (6, 'odd')
print(factorial(-2))             # Raises ValueError: Number must be non-negative
print(factorial())               # Output: None
203
python
import threading

# Function that will be run in a new thread
def worker(arg=None):
    if arg is not None:
        print("Thread received argument:", arg)
    else:
        print("Thread does not have an argument")

# Create a new thread and start the function
thread = threading.Thread(target=worker, args=(None,))
thread.start()

# Function that runs in the main thread
def main():
    arg = "Hello from main thread"
    print("Main thread has an argument:", arg)
    # Start worker thread with an argument
    thread2 = threading.Thread(target=worker, args=(arg,))
    thread2.start()

if __name__ == "__main__":
    main()
204
python
# Assigning None to a variable
my_variable = None
print("Value of my_variable:", my_variable)

# Check if a variable is equal to None
another_variable = "Some value"
if another_variable is None:
    print("another_variable is None")
else:
    print("another_variable has a value:", another_variable)

# Function that returns None as default value
def my_function():
    pass

# Calling the function and storing its result in a variable
result = my_function()
print("Value of result:", result)
205
python
import threading

class SharedData:
    def __init__(self):
        self._value = None
        self._lock = threading.Lock()

data = SharedData()
206
python
def my_function():
    # some code here
    return None
207
python
# Open a file with None as an initial value for the file object
file = None
try:
    # Open the file in read mode
    file = open('example.txt', 'r')

    # Read the contents of the file and print them
    contents = file.read()
    print(f'File Contents:\n{contents}')
finally:
    if file is not None:  # If file object was created
        file.close()     # Close the file before exiting
208
python
import threading
import time

# Define a shared counter that will be accessed by multiple threads
counter = 0

# Create a lock for synchronization
lock = threading.Lock()

def increment_counter(name):
    """Increments the counter."""
    
    # Loop for 100 times to simulate some work being done
    for _ in range(100):
        pass

    # Acquire the lock before accessing the shared counter
    with lock:
        global counter
        counter += 1
        print(f"{name} incremented the counter to {counter}")

# Create two threads and start them
thread_a = threading.Thread(target=increment_counter, args=("Thread A",))
thread_b = threading.Thread(target=increment_counter, args=("Thread B",))

# Start both threads
thread_a.start()
thread_b.start()

# Wait for both threads to finish their work
thread_a.join()
thread_b.join()
209
python
x = None  # Assigning None to a variable
print(type(None))  # Print the type of None (which is <class 'NoneType'>).
210
python
# Assigning None to a variable
x = None
print(x)

# Checking if a variable is equal to None
if my_variable is None:
  print("my_variable is not assigned a value.")
else:
  print("my_variable has a value:", my_variable)
211
python
import os
import contextlib

@contextlib.contextmanager
def open_file(filename):
    try:
        file = open(filename, 'r')
        yield file
    finally:
        if file is not None:
            file.close()

def print_file_content(filename):
    with open_file(filename) as f:
        content = f.read()
        print(f"The content of the file '{filename}' is:")
        print(content)

if __name__ == "__main__":
    filename = "example.txt"
    if os.path.exists(filename):
        print_file_content(filename)
    else:
        print(f"File '{filename}' does not exist.")
212
python
import gc

# Define a class with a __del__ method
class MyClass:
    def __init__(self, data):
        self.data = data

    def __del__(self):
        print("Object of MyClass is being destroyed")

# Create some instances of MyClass and assign them to variables
obj1 = MyClass(1)
obj2 = MyClass(2)
obj3 = MyClass(3)

# Assign None to some variables
obj4 = None
obj5 = None

# Print some objects' addresses for reference
print("Address of obj1: ", id(obj1))
print("Address of obj2: ", id(obj2))
print("Address of obj3: ", id(obj3))

# Remove references to obj1 and obj2 from variables, but they still exist
del obj1
del obj2

# Objects that are no longer reachable will be collected by the garbage collector.
# However, we can manually trigger garbage collection using gc.collect()
gc.collect()

# After garbage collection, all objects that were no longer reachable should be destroyed
print("Address of obj1 after GC: ", id(obj1))  # Should print None
print("Address of obj2 after GC: ", id(obj2))  # Should print None
213
python
class MyClass:
    def __init__(self, data=None):
        self.data = data
        
# Function to allocate large list
def create_large_list(size):
    return [i for i in range(size)]

# Function to measure memory usage with sys.getsizeof()
import sys

def measure_memory(obj):
    return sys.getsizeof(obj)

# Program entry point
if __name__ == "__main__":
    instance = MyClass()  # Creating an instance of MyClass with default value None

    print("Memory usage of None: ", measure_memory(None))
    print("Memory usage of empty class instance: ", measure_memory(instance))

    large_list = create_large_list(10000)  # Allocating a large list

    print("Memory usage of large list: ", measure_memory(large_list))

    del large_list  # Deallocating the large list

    print("Memory usage of empty class instance after Garbage Collection: ", measure_memory(instance))
215
python
# Function definition with optional parameter, using default value as None
def my_function(param1, param2=None):
    if param2 is not None:
        print("Received parameter2:", param2)

# Function call with one argument
my_function("Argument 1")

# Function call with two arguments
my_function("Argument 1", "Argument 2")

# Using * to unpack a tuple or list as function arguments
args = (None, "Argument X")
my_function(*args)
216
python
# Assigning None value to a variable
none_value = None

print("Value of none_value:", none_value)
print("Type of none_value:", type(none_value))

# Performing arithmetic division using the / operator
number1 = 10
number2 = 5
result = number1 / number2

print("Result of {} divided by {} is: {}".format(number1, number2, result))
217
python
# Assigning None to a variable
my_variable = None

# Checking if a variable is None
if my_variable is None:
    print("The value is None")
else:
    print("The value is not None")

# Using None as a return type from a function
def my_function():
    return None

result = my_function()
print(result)
218
python
# Define a function that calculates the quotient and remainder using division and modulus operators
def calculate_quotient_remainder(dividend, divisor):
    quotient = dividend // divisor
    remainder = dividend % divisor
    return quotient, remainder

# Perform calculations with some inputs and handle cases where divisor is zero or divisor is None
try:
    # Calculate quotient and remainder for a valid division
    num1 = 15
    num2 = 3
    quotient, remainder = calculate_quotient_remainder(num1, num2)
    print(f"Quotient: {quotient}, Remainder: {remainder}")

    # Calculate quotient and remainder for a division by zero
    num1 = 15
    num2 = 0
    quotient, remainder = calculate_quotient_remainder(num1, num2)
    print(f"Quotient: {quotient}, Remainder: {remainder}")

    # Calculate quotient and remainder for a division with None divisor
    num1 = 15
    num2 = None
    if num2 is not None:
        quotient, remainder = calculate_quotient_remainder(num1, num2)
        print(f"Quotient: {quotient}, Remainder: {remainder}")
    else:
        print("Error: Division by None")
except ZeroDivisionError as e:
    print(e)
219
python
# Function with an optional None argument
def greet(name=None):
    if name is not None:
        print("Hello, " + name)
    else:
        print("Hello")

# Function using ** for unpacking a dictionary into keyword arguments
def process_settings(settings):
    key1, value1 = settings.items()[0]
    key2, value2 = settings.items()[1:]

    print(f"Key 1: {key1}, Value 1: {value1}")
    print(f"Key 2: {key2}, Value 2: {value2}")

# Test cases
settings_1 = {"key1": "John", "key2": "Doe"}
greet()                       # Output: Hello
greet("Alice")                 # Output: Hello, Alice
process_settings(settings_1)  # Output: Key 1: key1, Value 1: John
                             #        Key 2: key2, Value 2: Doe

none_dict = {None: "default_value"}
greet()                       # Output: Hello
process_settings(none_dict)   # Output: Key 1: None, Value 1: default_value
220
python
class MyClass:
    def my_method(self):
        """
        This method returns None by default.
        """
        return None

def main():
    # Create an instance of MyClass
    obj = MyClass()

    # Call the my_method() and assign the result to a variable 'result'
    result = obj.my_method()

    # Print out the type of 'result'
    print(type(result))

if __name__ == "__main__":
    main()
221
python
# Define some variables
var1 = 42
var2 = "forty-two"
var3 = None

# Assigning None to a variable
print("Assigning None to a variable:")
var4 = None
print("Type of var4: ", type(var4))

# Checking for None
print("\nChecking if a variable is None:")
if var3 is None:
    print("var3 is None.")
else:
    print("var3 is not None.")

# Comparing with None using 'is' keyword
print("\nComparing with None using 'is':")
if var4 is None:
    print("var4 is None.")
else:
    print("var4 is not None and has value:", var4)

# Comparing with None using '==' operator
print("\nComparing with None using '==' operator:")
if var4 == None:
    print("None and None are equal.")
elif var4 is None:
    print("Variable is None, but comparison failed.")
else:
    print("var4 has a value:", var4)

# Assigning values and checking for equality using '==' operator
print("\nAssigning values and checking for equality using '==' operator:")
var5 = 42
if var1 == var5:
    print("var1 and var5 are equal.")
else:
    print("var1 and var5 are not equal.")
222
python
# Define a function that returns None if given number is not perfect square
def is_perfect_square(n):
    if n < 0:
        return None
    i = 1
    while i * i <= n:
        if n % i ** 2 == 0:
            return True
        i += 1
    return None

# Test cases
num1 = 16
num2 = 25
num3 = -3

# Use the is_perfect_square function and check for None and not equal to 0
if is_perfect_square(num1) is not None:
    print(f"{num1} is a perfect square.")
elif is_perfect_square(num1) == 0:
    print(f"{num1} is not a perfect square and is_perfect_square() returned 0 which indicates an error.")
else:
    print(f"{num1} is not a perfect square.")

print("----------------------")

if is_perfect_square(num2) is not None:
    print(f"{num2} is a perfect square.")
elif is_perfect_square(num2) == 0:
    print(f"{num2} is not a perfect square and is_perfect_square() returned 0 which indicates an error.")
else:
    print(f"{num2} is not a perfect square and is_perfect_square() returned {is_perfect_square(num2)} which is None.")

print("----------------------")

if is_perfect_square(num3) is not None:
    print(f"{num3} is a perfect square.")
elif is_perfect_square(num3) == 0:
    print(f"{num3} is not a perfect square and is_perfect_square() returned 0 which indicates an error.")
else:
    print(f"{num3} is not a perfect square.")
223
python
# Assigning None to a variable
variable = None
print(variable)  # Output: None

# Check if a variable is equal to None using 'is' keyword
if variable is None:
    print("Variable has no value")
else:
    print("Variable has some value")
224
python
# Define some variables
num1 = 5
num2 = None
num3 = 10

# Comparison using the '>' operator
if num1 > num2:
    print("num1 is greater than num2")
else:
    print("num1 is not greater than num2 or num2 is greater than num1")

# Comparing with None using 'is' and 'is not' keywords
if num3 is not None:
    print("num3 has a value, it is not None")
else:
    print("num3 does not have a value, it is equal to None")
225
python
# This function checks if a given number is less than or equal to 0, and if not, sets the default value to None
def check_number(num):
    if num <= 0:
        return 0
    else:
        return None

# Test cases
print(check_number(5)) # None
print(check_number(-1)) # 0
print(check_number(3)) # None
226
python
# Define a compare function that takes two arguments
def compare(arg1, arg2):
    # Compare arg1 and arg2 using the >= operator
    if (arg1 is not None) and (arg2 is not None):
        return str(arg1) + " is greater than or equal to " + str(arg2) + " (" + str(arg1) + " >= " + str(arg2) + ")"
    elif arg1 is None:
        return str(arg1) + " is None"
    elif arg2 is None:
        return str(arg2) + " is None"
    else:
        return "Both are None"

# Call the compare function with various arguments
print(compare(3, 3))         # prints "3 is equal to 3 (3 = 3)"
print(compare(5, 3))         # prints "5 is greater than 3 (5 > 3)"
print(compare(None, None))    # prints "Both are None"
print(compare(None, 3))      # prints "None is less than 3 (None < 3)"
227
python
# Function to increment a given value if it is not None
def increment_if_not_none(value):
    if value is not None:
        value += 1
    return value

# Demonstration of using None and compound assignment operator +=
x = None
y = 5

print("Before function call:")
print("x =", x)
print("y =", y)

x = increment_if_not_none(x)
print("After first function call (with None):")
print("x =", x)
print("y =", y)

y = increment_if_not_none(y)
print("After second function call (with a number):")
print("x =", x)
print("y =", y)
229
python
# Define a function to calculate the product
def calculate_product(num1, num2, multiplier=None):
    # Initialize product to 1
    product = 1
    
    if multiplier is not None:
        product *= multiplier
    
    product *= num1 * num2
    
    return product

# Take user input and assign it to variables
num1 = float(input("Enter first number: "))
num2 = float(input("Enter second number: "))
multiplier = None  # Initialize multiplier as None

# Ask user if they want to use a multiplier
answer = "yes"
while answer in ["yes", "y"]:
    multiplier = float(input("Do you want to use a multiplier? If yes, enter it: "))
    answer = input("Do you want to calculate another product? If yes, enter 'yes' or 'y': ")

# Calculate the product with or without multiplier
result = calculate_product(num1, num2, multiplier)
print(f"The product of {num1} and {num2}, multiplied by {multiplier if multiplier else ''}, is: {result}")
230
python
def divide_numbers(num1, num2):
    try:
        result = num1 / num2
    except ZeroDivisionError:
        print("Cannot divide by zero!")
        return None

    print(f"Result of division: {result}")

    # Using the division assignment operator to update 'num1' with the result of the division.
    num1 /= num2

    print(f"Num1 after division assignment: {num1}")

# Calling the function with some numbers as arguments
divide_numbers(10, 3)
divide_numbers(5, 2)
divide_numbers(4, 0)
231
python
# A simple calculator program that demonstrates the use of None and //=

class Calculator:
    def __init__(self, dividend=None):
        self.dividend = dividend if dividend is not None else 0
        self.divisor = 1

    def divide(self, divisor):
        self.divisor = divisor
        quotient = self.dividend // self.divisor
        self.dividend = quotient

# Usage example:
calculator = Calculator(10)
calculator.divide(3)
print(f'Quotient is {calculator.dividend}') # Quotient is 3

calculator.divide(None)
print(f'Quotient after division by None: {calculator.dividend}') # Quotient after division by None: 0
232
python
# Define a calculator function that returns quotient, remainder and checks for division by zero
def calc_division(dividend, divisor):
    if divisor != 0:
        quotient = dividend // divisor
        remainder = dividend % divisor
        return quotient, remainder
    else:
        print("Error: Division by zero")
        return None, None

# Main function to test the calculator function with different inputs
if __name__ == "__main__":
    num1 = 15
    num2 = 3

    # Call the calculator function and store the result in a variable
    result = calc_division(num1, num2)

    if result is not None:
        print("Quotient:", result[0])
        print("Remainder:", result[1])

    num1 = 7
    num2 = 0

    # Call the calculator function with divisor as zero and check for None return
    result = calc_division(num1, num2)

    if result is None:
        print("No quotient or remainder obtained due to division by zero")
    else:
        print("Error in input. Quotient and Remainder not calculated.")
233
python
# Define a function that takes an argument and sets it to None if no argument is provided
def set_to_none(arg=None):
    print("Original arg:", arg)
    if arg is None:
        arg = None
    else:
        arg = 42
        print("Argument assigned a new value: ", arg)

    print("Function argument after the function call: ", arg)

# Call the function with an argument
set_to_none(3)
print()

# Call the function without an argument
set_to_none()
234
python
# Define a function that takes two arguments and returns their bitwise AND if they're not None, otherwise returns None
def bitwise_and(num1, num2):
    if num1 is not None and num2 is not None:
        return num1 & num2
    else:
        return None

# Define some variables that will be used as inputs to the function
num1 = 5  # binary: 101
num2 = 3  # binary: 011
num3 = None
num4 = 7  # binary: 0111

# Call the bitwise_and() function with different combinations of inputs
result1 = bitwise_and(num1, num2)
print("num1 = {} and num2 = {}, their bitwise AND is: {}".format(num1, num2, result1))  # Output: 0

result2 = bitwise_and(num1, num3)
print("num1 = {} and num3 = None, their bitwise AND is: {}".format(num1, num3, result2))  # Output: None

result3 = bitwise_and(None, num2)
print("None and num2 = {}, their bitwise AND is: {}".format(num2, result3))  # Output: None

result4 = bitwise_and(num1, num4)
print("num1 = {} and num4 = {}, their bitwise AND is: {}".format(num1, num4, result4))  # Output: 0
235
python
def div(x, y):
    if y == 0:
        return None
    else:
        return x / y

print(div(5, 2))  # Output: 2.5
print(div(5, 0))  # Output: None
236
python
x = None
print(type(x))  # Output: <class 'NoneType'>
237
python
# Function to apply bitwise NOT operation on a given number and return original number and result
def not_operator(num):
    result = ~num  # Bitwise NOT operation
    print(f'Original Number: {num}')
    print(f'Result (Bitwise NOT): {result}\n')
    return num, result

# Test cases for the function
if __name__ == "__main__":
    # Test case 1: Positive number
    test_num_1 = 5
    original_num, result = not_operator(test_num_1)

    # Test case 2: Negative number
    test_num_2 = -3
    original_num, result = not_operator(test_num_2)

    # Test case 3: None type
    test_num_3 = None
    print(f"Test case for None: {test_num_3}")
    if test_num_3 is not None:
        original_num, result = not_operator(test_num_3)
        print(f'Result (for None): {result}')
238
python
# Defining a function that returns None
def return_none():
    """This function simply returns None"""
    return None

# Assigning None to a variable
my_variable = None

# Calling a function that returns None and assigning the result to a variable
result = return_none()

# Printing some messages to demonstrate the use of None
print("Variable 'my_variable' is:", my_variable)
print("Function 'return_none' returned:", result)

# Check if a variable is equal to None using the is keyword
print("Is my_variable equal to None?", my_variable is None)
239
python
# Assigning None to a variable
my_variable = None

# Check if a variable is equal to None
if my_variable is None:
    print("My variable has no value.")
else:
    print("My variable has a value:", my_variable)
240
python
# Assigning None to a variable
number = None

# Checking if number is not equal to None using and operator
if number is not None and type(number) is not list:
    print("Number is not None and it's not a list")
else:
    print("Number is either None or it's a list")

# Assigning a value to the variable number
number = 5

# Using and operator for logical conditions
if number > 0 and number < 10:
    print("Number is between 0 and 10")
241
python
# Definition of a function that checks if a number is positive, zero or None
def check_number(num):
    if num is None:
        print("Number is None")
    elif num > 0:
        print("Number is positive")
    else:
        print("Number is non-positive")

# Definition of some variables with None value
num1 = None
num2 = -5
num3 = 0

# Using or operator to check if num1 is None or num2 is negative
if num1 is None or num2 < 0:
    print("Either the number is None or it's non-positive")

# Calling the function with different arguments
check_number(num1)
check_number(num2)
check_number(num3)

# Using or operator to check if a variable is None or a condition is True
if not num1 and (num2 < 0 or num3 > 5):
    print("Both conditions are true")
242
python
# Assigning None to a variable
my_variable = None
print("Value of my_variable: ", my_variable)
print("Is my_variable equal to None?: ", my_variable is None)
print("Is my_variable truthy? : ", bool(my_variable))

# Assigning a value to a variable
some_value = 10
print("\nValue of some_value: ", some_value)
print("Is some_value equal to None?: ", some_value is None)
print("Is some_value truthy? : ", bool(some_value))

# Using not with a boolean value
boolean_value = True
print("\nValue of boolean_value: ", boolean_value)
print("Negating boolean_value using not: ", not boolean_value)
243
python
# Assigning None to a variable
x = None
print("Value of x is:", x)

# Checking if None is in a list or not
my_list = [1, 2, 3, 4, None]
if None in my_list:
    print("None is present in the list")
else:
    print("None is not present in the list")

# Checking if variable is equal to None using is keyword and in keyword
if x is None or None in [x]:
    print("Variable x is None")
else:
    print("Variable x has some value")
244
python
# Function that returns None if the given number is even, else returns the number squared
def is_even(num):
    """
    This function checks if a given number is even or not.
    If the number is even, it returns None. Else it returns the number squared.
    """
    if num % 2 == 0:
        return None
    else:
        return num ** 2

# Testing the function
num = int(input("Enter a number: "))
result = is_even(num)

if result is not None:
    print(f"Square of given number is {result}")
else:
    print("Given number is even")
245
python
# Assigning None to a variable
my_variable = None
print("Value of my_variable: ", my_variable)

# Functions can return None as well
def divide(numerator, denominator):
    if denominator == 0:
        return None
    else:
        result = numerator / denominator
        return result

print("Divide 5 by 2: ", divide(5, 2))
print("Divide 5 by 0: ", divide(5, 0))

# Using None as a placeholder in a dictionary
my_dict = {"key1": 1, "key2": None}
print("Dictionary: ", my_dict)

# Checking if a variable is equal to None
if my_variable is None:
    print("my_variable is None")
else:
    print("my_variable is not None and has the value:", my_variable)
246
python
# Assigning None to a variable
my_variable = None
print(my_variable)  # Output: None

# Function returning None
def my_function():
    return None

result = my_function()
print(result)  # Output: None

# Dictionaries may have keys without values, which is represented by None
my_dict = {"key1": "value1", "key2": None}
print(my_dict)  # Output: {'key1': 'value1', 'key2': None}

# Lists can also contain None values
my_list = [1, 2, 3, None]
print(my_list)  # Output: [1, 2, 3, None]
247
python
# Function that returns None
def my_function():
    print("This function does not return anything.")
    return None

# Variable with no value assigned
my_variable = None

# Call the function and assign the returned None to a variable
result = my_function()
print(type(result))  # Output: <class 'NoneType'>
248
python
# Define a function that takes one argument which is optional and has a default value of None
def greet(name=None):
    if name is not None:
        print("Hello, " + name)
    else:
        print("Hello!")

# Call the greet function without an argument, it will print "Hello!"
greet()

# Call the greet function with an argument, it will print "Hello, <argument>"
greet("Alice")

# Assign None to a variable
none_var = None
print(none_var)  # prints: None

# Using () (parentheses) in Python is used for different purposes such as function calls, tuples, etc. Here's an example of using () with a tuple:

# Define a tuple using ()
numbers = (1, 2, 3, 4, 5)
print(type(numbers))  # prints: <class 'tuple'>

# Accessing elements in a tuple using index and ()
print(numbers[0])  # prints: 1
print(numbers[-1])  # prints: 5
249
python
# Define a function that takes an argument, but it can be left empty (None)
def greet(name=None):
    if name is not None:
        print("Hello, " + name)
    else:
        print("Hello")

# Create an empty list
my_list = []

# Use None and a list in the same data structure (a dictionary)
my_data = {
    "name": "John Doe",
    "age": 30,
    "city": None,
    "hobbies": my_list
}

# Demonstrate the use of the function and the dictionary
greet()
print(my_data)

# Add elements to the list
my_list.append("reading")
my_list.append("swimming")

# Again, demonstrate the use of the function and the dictionary
greet(name="John Doe")
print(my_data)
250
python
# This function takes an argument, but it doesn't need to have a value passed to it.
def print_message(message=None):
    if message is not None:
        print(message)
    else:
        print("No message provided.")

# Create an empty dictionary
my_dict = {}

# Add some key-value pairs to the dictionary
my_dict["key1"] = "value1"
my_dict["key2"] = 42
my_dict["key3"] = None

print("Dictionary: ", my_dict)

# Access values using keys
print("Value of key1: ", my_dict["key1"])
print("Value of key2: ", my_dict["key2"])
print("Value of key3: ", my_dict["key3"])

# Try to access a non-existent key
try:
    print("Value of key4: ", my_dict["key4"])
except KeyError as e:
    print(f"KeyError: {e}")

# Call the function with a message
print_message("Hello, world!")
# Call the function without a message
print_message()
251
python
# Define a function that takes one argument which can be optional
def greet(name=None):
    if name is None:
        print("Hello! What's your name?")
        name = input("Your name: ")
    print(f"Hello, {name}!")

# Call the function with no argument to see it asking for a name
greet()

# Or call the function with an argument to greet directly
greet("Alice")
252
python
# Function to calculate the square of a number or return None if no argument is given
def square(number=None):
    if number is None:
        return None
    else:
        result = number * number
        return result

# Using semicolon to place multiple statements on the same line (not recommended for readability)
x = 5; y = 10
print(f"Value of x: {x}")
print(f"Value of y: {y}")

# Function call examples
print("Square of 4: ", square(4)) # Should print "Square of 4: 16"
print("Square of None: ", square()) # Should print "Square of None: None"
253
python
# Define two boolean variables
variable1 = True
variable2 = True

# Use the 'and' operator to check if both variables are True
result = variable1 and variable2

# Print the result
if result:
    print("Both variables are True")
else:
    print("At least one of the variables is False")
254
python
# Creating a dictionary with keys as boolean values
boolean_dict = {True: "true value", False: "false value"}

# Assigning values using normal assignment statement
value1 = boolean_dict[True]
print("Value 1 is:", value1)

# Assigning values using 'as' keyword for better readability and avoiding booleans
value2, name = boolean_dict.items()
value2 as true_value
name as false_value

print("Value 2 (true value) is:", true_value)
print("Value 2 (false value) is:", false_value)
255
python
def validate_input(user_input):
    """
    Validate user input is an integer within a specified range.
    :param user_input: The input provided by the user.
    :return: None if valid, raises AssertionError if not.
    """

    # Set minimum and maximum values
    min_value = 1
    max_value = 5

    try:
        # Convert user input to an integer
        num = int(user_input)

        # Check if the number is within the specified range
        if num >= min_value and num <= max_value:
            print("Input is valid.")
            return
        else:
            print(f"Input should be between {min_value} and {max_value}.")

        # Raise an AssertionError if the number is not valid
        assert num >= min_value and num <= max_value, "Invalid input. Number should be between {} and {}.".format(min_value, max_value)
    except ValueError:
        print("Invalid input. Please provide a valid integer.")

# Get user input
user_input = input("Enter an integer between 1 and 5: ")

# Validate user input
validate_input(user_input)
256
python
import asyncio
import aiohttp

async def send_request(url):
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            data = await response.text()
            return data

async def main():
    urls = ["https://example.com", "https://example.org", "https://example.net"]

    tasks = [send_request(url) for url in urls]

    responses = await asyncio.gather(*tasks)

    print("Responses:")
    for i, response in enumerate(responses):
        print(f"URL {i+1}: {response}")

if __name__ == "__main__":
    asyncio.run(main())
257
python
import asyncio

# A simple function that returns a Promise (future) that resolves after given delay.
async def sleep(seconds):
    await asyncio.sleep(seconds)
    return "Slept for {} seconds.".format(int(seconds))

# An asynchronous coroutine function that prints "Hello, World!" and then waits for 3 seconds.
async def main():
    print("Hello, World!")
    await sleep(3)
    print("Done.")

# Run the coroutine using asyncio's `run()` function.
if __name__ == "__main__":
    try:
        # The event loop will run the coroutine and wait for it to complete.
        asyncio.run(main())
    except KeyboardInterrupt:
        print("Exiting gracefully...")
258
python
for i in range(1, 6):
    if i % 2 == 0:  # check if the current number is even (0 is left over when divided by 2)
        print(f"Found even number: {i}")
        break     # exit the loop once an even number is found
    else:
        print(f"Current number: {i}, which is odd")
259
python
# Define a custom class named 'Person' with two attributes: name and age
class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    # A method to check if a person is eligible to vote (18 years or older)
    def is_eligible_to_vote(self):
        return self.age >= 18

# Create instances of 'Person' class with given names and ages
person1 = Person("John Doe", 25)
person2 = Person("Jane Smith", 30)

# Check if each person is eligible to vote or not using 'is_eligible_to_vote()' method
print(f"{person1.name} is eligible to vote: {person1.is_eligible_to_vote()}")  # False
print(f"{person2.name} is eligible to vote: {person2.is_eligible_to_vote()}")  # True

# Using 'True' boolean value in Python
# You can compare variables or expressions to return a boolean (True/False) value
print(5 > 3)       # Output: True
print("apple" < "banana")   # Output: False
260
python
# This program goes through numbers from 0 to 9, and prints only even numbers

for i in range(10):
    if i % 2 != 0:  # Check if current number is odd
        continue   # If it's odd, jump to the next iteration of the loop
    print(i)      # If it's even, print it
261
python
# This is a comment - anything after the '#' symbol is ignored by the interpreter

# Assigning the boolean value 'True' to a variable
is_rainy = True

print("Is it rainy? ", is_rainy)

def is_even(number):
    """
    This function takes an integer as an argument and returns 'True' if the number is even, otherwise returns 'False'.
    """

    # The 'if' statement checks if the condition inside the parentheses is True or False
    if number % 2 == 0:
        return True
    else:
        return False

number = int(input("Enter a number: "))
result = is_even(number)
print(f"{number} is even? {result}")
262
python
# Initializing a list called numbers
numbers = [10, 20, 30, 40, 50]

# Printing the initial state of the list
print("Initial State of List:")
print(numbers)

# Removing an element from the list using del keyword
index_to_remove = 2
del numbers[index_to_remove]

# Printing the updated state of the list
print("\nUpdated State of List after deletion:")
print(numbers)

# Using True to check if an element is present or not in the list
element_to_check = 40
if 40 in numbers:
    print(f"\nThe element {element_to_check} is present in the updated list.")
else:
    print(f"\nThe element {element_to_check} is not present in the updated list.")

# Using True to check if an empty list or tuple is empty
my_list = []
my_tuple = ()

print("\nChecking if lists and tuples are empty using True:")
print(f"\nList is empty? {bool(my_list)}")
print(f"\nTuple is empty? {bool(my_tuple)}")
263
python
# This program checks if a given number is in the range of 1 to 10 (inclusive)

number = int(input("Enter a number between 1 and 10: "))

if number < 1:
    print("Number is less than 1")
elif number > 10:
    print("Number is greater than 10")
elif number == 10:
    print("Number is exactly equal to 10")
else:
    print("Number is between 1 and 10, but not equal to 10")
264
python
# This program checks if a given number is even or odd

number = 5

if number % 2 == 0:  # Check if number is even
    print("The given number is even.")
else:
    print("The given number is odd.")
265
python
# Function to check if a number is even or odd
def check_even_odd(number):
    try:
        # Check if the number is even
        if number % 2 == 0:
            result = "Even"
        else:
            result = "Odd"
     except Exception as e:
         print("An error occurred:", e)
         result = "Unknown"
     finally:
         # This will always be executed
         print(f"The number {number} is {result}")

# Test cases
check_even_odd(5)
check_even_odd(6)
check_even_odd("Hello")
266
python
import os

def my_function():
    try:
        # This will raise an exception as 'myfile.txt' may not exist
        file = open('myfile.txt', 'r')
        data = file.read()
        print(data)
    except FileNotFoundError:
        # This block is executed when FileNotFoundError exception occurs
        print("File not found, creating a new one...")
        if not os.path.exists('myfile.txt'):
            with open('myfile.txt', 'w') as file:
                file.write("This is a new file.")
        else:
            print("The file already exists!")
    finally:
        # This block is executed regardless of the exception or successful execution
        if file is not None:
            file.close()
            print("File closed.")

my_function()
267
python
# This function checks if a given number is positive, and prints its square if it is
def print_square_if_positive(number):
 if number > 0:
 print(number ** 2)
 else:
 print("Number is not positive")

# Using for loop to iterate over a list of numbers
numbers = [1, -3, 4, -5, 7]
for num in numbers:
 if True:  # This condition always evaluates to True
 print_square_if_positive(num)
268
python
# Define some variables with Boolean values
is_sunny = True
is_raining = False

print("Is it sunny?", is_sunny)
print("Is it raining?", is_raining)

# Perform some conditions and operations using these variables
if is_sunny:
    print("It's a nice day!")
elif is_raining:
    print("Please bring an umbrella.")
else:
    print("The weather is uncertain today.")
269
python
# Function to set a global variable
def set_global(val):
    global x
    x = val

# Function that uses a global variable
def print_x():
    global x
    print("The value of x is:", x)

# Initialize an empty list as a local variable with the same name as the global one
x = []

# Set the global variable in the function set_global
set_global(True)

# Print the local variable (which remains unchanged)
print("The value of the local x is:", x)

# Print the global variable
print_x()
270
python
# Set a variable to False
is_rainy = False

# Check if it's raining or not using if statement
if not is_rainy:
    print("It's not raining today!")
else:
    print("It's raining today. Please bring an umbrella.")
271
python
# This is a simple Python script that checks if a given number is even or odd using an if statement with the Boolean value 'True'

# Function to check if a number is even or odd
def is_even(number):
    if number % 2 == 0:
        return True
    else:
        return False

# Importing a module (math in this case) for mathematical functions
import math

# Taking user input
num = int(input("Enter a number: "))

# Using if statement and Boolean value 'True'
if is_even(num):
    print(f"The number {num} is even.")
else:
    print(f"The number {num} is odd.")

# Using imported math module
square = math.pow(num, 2)
print(f"The square of the entered number is {square}")
272
python
# Define a list
numbers = [1, 2, 3, 4, 5]

# Use True in a conditional statement
if True:
    print("This statement will always be executed")

# Use the 'in' keyword to check if an element is present in a list
if 3 in numbers:
    print("The number 3 is present in the list")
else:
    print("The number 3 is not present in the list")
273
python
# Demonstrating True as a Boolean Value
x = 10
y = 20
z = x

print("Condition 1:")
if x > 5:
    print(f"{x} is greater than 5. So, the condition is true.")
else:
    print(f"{x} is less than or equal to 5. So, the condition is false.")
print("But, {0} is a truth value and it evaluates as true.".format(True))

# Demonstrating is operator
a = [1, 2, 3]
b = [1, 2, 3]
c = a

print("Condition 2:")
if id(a) == id(b):
    print("a and b are the same object in memory. So, this condition is true.")
elif id(a) is id(c):
    print("a and c are the same object in memory. So, this condition is true.")
else:
    print("None of a, b or c are the same objects in memory. So, these conditions are false.")
274
python
# This is a simple function that returns the larger of two numbers using lambda and True
def larger_number(num1, num2):
    # Using lambda to create a small anonymous function that returns the larger number
    is_larger = lambda: num1 if num1 > num2 else num2
    
    # Using True to call the lambda function
    return is_larger()

# Testing the larger_number function with some numbers
print(larger_number(5, 3))         # Output: 5
print(larger_number(-1, 5))       # Output: 5
print(larger_number(0, -1))       # Output: 0
275
python
def outer_function(x, y):
    def inner_function():
        nonlocal x, y  # Declare that x and y are nonlocal variables
        x += 1
        y *= 2

    inner_function()
    print("After inner function call: x =", x, "and y =", y)

outer_function(x=3, y=4)
276
python
# Define a boolean variable
is_student = True

# Print the original value
print("Original value: ", is_student)

# Negate the boolean value using 'not'
is_student_not = not is_student

# Print the negated value
print("Negated value: ", is_student_not)
277
python
# Define some variables
a = 10
b = 20
c = False

# Using True as a boolean value
if True:
    print("True is true")

# Using or operator to check if any of the conditions are true
if c or (a > b):
    print("Condition 1 is true or Condition 2 is true")
else:
    print("Both conditions are false")

# Checking multiple conditions using or operator
if not c and (a > b):
    print("Condition 1 is false and Condition 2 is true")
278
python
# This is an example of using the constant value 'True'
def is_positive(number):
 if number > 0:
 return True
 else:
 return False

print(is_positive(5))  # prints: True
print(is_positive(-3))  # prints: False

# This is an example of using the 'pass' statement
def my_empty_function():
 pass

my_empty_function()  # Does nothing, but no error is raised.
279
python
def divide(numerator, denominator):
    """
    This function takes two arguments, numerator and denominator, and returns their quotient.
    Raises ZeroDivisionError if the denominator is zero.
    """

    if denominator == 0:
        raise ZeroDivisionError("Cannot divide by zero")
    
    return numerator / denominator

try:
    result = divide(5, 2)
    print("Result:", result)
except ZeroDivisionError as e:
    print("Error:", e.args[0])

# Let's check division by zero
result = divide(1, 0)
280
python
def is_positive(number):
    """
    This function checks if a given number is positive, and returns True if it is, otherwise False.
    :param number: an integer or float
    :return: Boolean value (True or False)
    """

    # Check if the given number is greater than zero
    if number > 0:
        result = True
    else:
        result = False
    
    # Return the result
    return result

# Test some numbers
print(is_positive(5))      # Expected output: True
print(is_positive(-3))      # Expected output: False
print(is_positive(0))      # Expected output: False
281
python
def is_valid_input(input):
    is_number = True
    try:
        num = float(input)
    except ValueError:
        print("Invalid input! Please enter a valid number.")
        is_number = False
     finally:
        return is_number

while True:
    user_input = input("Enter a number or type 'q' to quit: ")
    if user_input.lower() == 'q':
        break

    is_valid = is_valid_input(user_input)

    if not is_valid:
        continue

    print(f"You entered the number: {user_input}")
282
python
# Initialize a variable with a value that can be changed to False
is_alive = True

print("This program is about a life cycle.")

while is_alive:
    # Ask the user if they want to continue the game (or in this case, the program)
    user_answer = input("Do you want to continue? (y/n): ")

    # Convert the user's answer to lowercase and check for 'y' or 'n'
    if user_answer.lower() == 'y':
        print("Great! Let's continue.")
    elif user_answer.lower() == 'n':
        print("Okay, exiting the program...")
        is_alive = False
    else:
        print("Invalid input. Please enter y or n.")
283
python
import time
from contextlib import contextmanager

# A simple counter class as a context manager
@contextmanager
def timer(title):
    start = time.time()
    yield
    end = time.time()
    print(f"{title}: {end - start} seconds")

def print_hello():
    print("Hello")

if __name__ == "__main__":
    with timer("Printing Hello 10 times"):
        for _ in range(10):
            print_hello()
284
python
def infinite_sequence(start):
    current = start
    while True:
        yield current
        current += 1

# Create a generator with starting value 0
generator = infinite_sequence(0)

# Get first few values from the generator
print(next(generator))  # Output: 0
print(next(generator))  # Output: 1
print(next(generator))  # Output: 2

# Consume some more values (but not all of them)
for _ in range(5):
    print(next(generator))
285
python
# This variable will have a value of False
boolean_variable = False

# The 'not' operator can be used to negate the boolean value
negated_boolean = not boolean_variable
print("The negated boolean value is:", negated_boolean)

# The 'abs()' function is used to get the absolute value of a number
number = -5
absolute_value = abs(number)
print("The absolute value of", number, "is:", absolute_value)

# We can combine these concepts and create more complex expressions
# For example, let's check if a given number is positive or not
number = 3
if number < 0:
    print(number, "is negative")
else:
    print(number, "is positive or zero")
    
# Now we will use the negated boolean and absolute value to make it negative
number = -abs(number)
print("The number with its absolute value made positive and then negated is:", number)
286
python
# Boolean value 'True'
bool_value = True
print("Boolean value 'True': ", bool_value)

# List of boolean values and 'all' function
boolean_list = [True, True, False]
print("\nList of boolean values: ", boolean_list)

result = all(boolean_list)
print("'all' function result: ", result)

# If all the boolean values are True, 'all' will return True
if all(boolean_list):
    print("All boolean values in the list are True")
else:
    print("There's a False value among boolean values")
287
python
# A list of boolean values
boolean_list = [False, True, False, True, False]

# Using any() to check if there is at least one True value in the list
if any(value for value in boolean_list if value):
    print("At least one element in the list is True")
else:
    print("All elements in the list are False")

# Directly using True to compare with an iterable (in this case, a list)
if True in boolean_list:
    print("True is present in the list")
else:
    print("True is not present in the list")
288
python
# This function checks if a given character is ASCII or not
def is_ascii(char):
    try:
        char_value = ord(char)
        return True
    except ValueError:
        return False

# Main function
if __name__ == "__main__":
    char = 'A'  # This is an ASCII character
    is_it_ascii = is_ascii(char)

    if is_it_ascii:
        print(f"{'char'} is an ASCII character.")
        print(f"ASCII value of '{char}': {ord(char)}")
    else:
        print(f"{'char'} is not an ASCII character.")

# Checking with non-ASCII character
non_ascii_char = '\u0304'  # Unicode Combining Grave Accent
is_it_ascii_nonascii = is_ascii(non_ascii_char)

if not is_it_ascii_nonascii:
    print(f"{'non_ascii_char'} is not an ASCII character.")
289
python
# Demonstrating use of True and bin() function

# Boolean expression with True value
is_even = La = 4
if is_even:
    print("The number is even")
else:
    print("The number is odd")

# Convert an integer to binary using bin() function
decimal_number = 10
binary_number = bin(decimal_number)[2:]  # Remove the '0b' prefix
print(f"Binary representation of {decimal_number} is: {binary_number}")
290
python
# Assigning boolean values to variables directly
boolean_variable_1 = True
boolean_variable_2 = False

print("boolean_variable_1 is:", boolean_variable_1)
print("boolean_variable_2 is:", boolean_variable_2)

# Boolean expressions using comparison and logical operators
number_1 = 10
number_2 = 5

# Comparison operators (<, >, <=, >=, ==, !=)
is_number_1_greater_than_number_2 = number_1 > number_2
print("Is number_1 greater than number_2? - ", is_number_1_greater_than_number_2)

# Logical operators (and, or, not)
is_number_1_greater_than_or_equal_to_zero = number_1 >= 0
is_number_2_positive = number_2 > 0

is_both_numbers_positive = is_number_1_greater_than_or_equal_to_zero and is_number_2_positive
print("Are both numbers positive? - ", is_both_numbers_positive)
291
python
# Define a boolean variable 'is_positive' with True value
is_positive = True

# Print the value of boolean variable
print("Boolean variable value: ", is_positive)

# Create a bytearray object with some integer values
byte_array = bytearray([1, 2, 3, 4, 5])

# Print the bytearray object
print("Bytearray object: ", byte_array)

# Change the second element of bytearray to -5 (equivalent to ascii value -5 in decimal)
byte_array[1] = -5

# Print the updated bytearray object
print("Updated Bytearray object: ", byte_array)
292
python
# Using True
is_student_allowed = True
if is_student_allowed:
    print("Student is allowed to attend the class.")
else:
    print("Student is not allowed to attend the class.")

# Using bytes
message = b"Hello, World!"
print(type(message))
print(message)
print(len(message))

# Converting True to bytes and appending it to message
is_allowed_access = True
message_with_permission = b"\x01" + bytearray([int(i) for i in [int(str(x)[0]) for x in list(str(bool(is_allowed_access)))][::-1]) if i else b'\x00' ] 
print("Message with permission: ", message_with_permission)
293
python
# A simple function
def square(number):
    return number * number

# A lambda function that also squares a number
square_lambda = lambda number: number * number

# Check if a function is callable
def check_callable(function):
    return callable(function) and type(function) != types.FunctionType

# Test the functions and checks
print("Checking square function: ", check_callable(square))  # True
print("Checking square function with wrong type check: ", check_callable(square))  # TypeError: <function __main__.square at 0x7f8c361b2a40> is not callable

print("Checking lambda function: ", check_callable(square_lambda))  # True
print("Checking True value: ", check_callable(True))  # False
print("Checking callable with string: ", check_callable('Hello World'))  # False

# Call the functions
print("Square of 5 using function: ", square(5))  # 25
print("Square of 5 using lambda: ", square_lambda(5))  # 25
294
python
# This variable is assigned the boolean value 'true' which is represented as 'True' in Python
is_sunny = True

# The chr() function is used to convert an integer Unicode code point to a character.
# In this example, we use it to print the character representation of the ASCII value 65, which is 'A'.
print("Is it sunny outside? ", is_sunny)
print("The character representation of code point 65 is: ", chr(65))
295
python
class Number:
    def __init__(self, num=0):
        self.num = num

    # A class method that checks if the given number is even or not
    @classmethod
    def is_even(cls, num):
        return cls.__is_even(abs(num))

    @staticmethod
    def __is_even(num):
        """A static utility method to check if a given number is even or not"""
        return num % 2 == 0

if __name__ == "__main__":
    num1 = Number()
    num2 = Number(5)
    num3 = Number(-6)

    print(f"Number {num1.num} is even: {Number.is_even(num1)}")  # True by default
    print(f"Number {num2.num} is even: {Number.is_even(num2)}")  # False
    print(f"Number {num3.num} is even: {Number.is_even(num3)}")  # True (negative numbers are also even if their last digit is)
296
python
if condition:
    print("This statement is executed if condition is True.")
else:
    print("This statement is executed if condition is False.")

# Example using True directly:
if True:
    print("This statement is always printed since True is always True.")
297
python
# Demonstrating the usage of boolean value 'True'
# and complex numbers in Python

# Boolean expression
bool_expression = (5 > 3) or (7 < 9)
print("Boolean expression: ", bool_expression)

# Complex numbers
num1 = 3 + 4j
num2 = 1 + 2j
complex_num1 = complex(num1)
complex_num2 = complex(num2)

# Basic arithmetic operations on complex numbers
addition = complex_num1 + complex_num2
subtraction = complex_num1 - complex_num2
multiplication = complex_num1 * complex_num2
division = complex_num1 / complex_num2

print("Complex number addition: ", addition)
print("Complex number subtraction: ", subtraction)
print("Complex number multiplication: ", multiplication)
print("Complex number division: ", division)
298
python
import sys

class MyClass:
    def __init__(self, attr1=True, attr2='default'):
        self.attr1 = attr1
        self.attr2 = attr2

    def print_attributes(self):
        print(f'Attr1: {self.attr1}')
        print(f'Attr2: {self.attr2}')

# Instantiate the class and print initial attributes
my_instance = MyClass()
my_instance.print_attributes()

# Demonstrating the usage of True
another_instance = MyClass(False)
another_instance.print_attributes()

# Now let's delete an attribute (attr1) from 'my_instance' using delattr()
sys.modules.builtins.delattr(my_instance, 'attr1')

# Print the modified attributes of 'my_instance'
my_instance.print_attributes()
299
python
# Define an empty dictionary
my_dict = {}

# Set some key-value pairs in the dictionary
my_dict["key1"] = "value1"
my_dict["key2"] = "value2"

# Check if the dictionary is empty
if len(my_dict) == 0:
    print("The dictionary is empty.")
else:
    print("The dictionary is not empty.")

# Use a key to check if it exists in the dictionary and get its value
key = "key1"
value = my_dict.get(key, True)
print(f"The value for key '{key}' is {value}.")

if key in my_dict:
    print("Key exists in the dictionary")
else:
    print("Key does not exist in the dictionary")

# Modify a value in the dictionary
my_dict["key1"] = "updated_value"
print(f"The new value for key '{key}' is {my_dict['key1']}.")
300
python
# Define a simple class with a few attributes
class SimpleClass:
    def __init__(self, num):
        self.num = num
        self.is_positive = True

# Create an instance of the class
my_instance = SimpleClass(5)

print("Is my_instance.is_positive true? ", my_instance.is_positive)
print()

# Use dir() to show the attributes and methods of my_instance
print("Attributes and methods of my_instance:")
print(dir(my_instance))
301
python
# This is a simple program that calculates the quotient and remainder of a division operation using divmod()
# It also uses a conditional statement to check if a number is positive or not using the True boolean value.

def main():
    # Define some numbers for demonstration purposes
    dividend = 10
    divisor = 3

    # Calculate quotient and remainder using divmod()
    q, r = divmod(dividend, divisor)

    # Print the results of the division operation
    print(f"The quotient is: {q}")
    print(f"The remainder is: {r}\n")

    # Check if dividend is positive or not using the True boolean value
    if dividend > 0:
        print("The number is positive.")
    else:
        print("The number is not positive.")

if __name__ == "__main__":
    main()
302
python
# This is a simple Python program that uses the 'enumerate()' function along with a loop, where a condition (True) is used to control the iteration.

# Define a list
numbers = [1, 2, 3, 4, 5]

# Use enumerate() to get the index and value of each element in the list
for index, value in enumerate(numbers):
    if value > 3:  # The condition (True) is met when the current number is greater than 3
        print(f"Index: {index}, Value: {value}")
303
python
# This is a simple Python program that demonstrates the use of True and eval()

# Using True
is_raining = False
if not is_raining:
    print("It's not raining today.")
else:
    print("It's raining today.")

print("------------------------")

# Using eval()
expression_string = "3 + 4 * 2"
result = eval(expression_string)
print(f"The result of the expression '{expression_string}' is {result}")

# It's important to note that using eval() can be dangerous if you are evaluating user input or untrusted code.
304
python
# Define the input data
input_data = 'x = 5\ny = 3\nz = x + y'

# Evaluate the input data as Python code using exec
exec input_data

# Print the results
print("x =", x)
print("y =", y)
print("z =", z)

# Perform some calculations using True as a placeholder
expression = 'x > y'
if eval(expression):
    print("x is greater than y")
else:
    print("x is not greater than y")
305
python
# Define a list of numbers
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]

# Use a lambda function with filter to keep only numbers greater than 5
filtered_numbers = filter(lambda x: x > 5, numbers)

# Convert the filter object to a list and assign it to a variable
filtered_numbers_list = list(filtered_numbers)

print("Numbers greater than 5:")
for num in filtered_numbers_list:
    print(num)

print("\nUsing True instead of lambda function:")
# Use filter with the constant True value to keep all elements
filtered_numbers_using_true = filter(True, numbers)

# Convert the filter object to a list and assign it to a variable
filtered_numbers_using_true_list = list(filtered_numbers_using_true)

print("All numbers:")
for num in numbers:
    print(num)

print("\nNumbers that remain after filtering with True:")
for num in filtered_numbers_using_true_list:
    print(num)
306
python
# Define a boolean variable 'is_raining' with a default value of False
is_raining = False

# Ask user if it's raining and update the value of 'is_raining' accordingly
user_input = input("Is it raining? (y/n): ")
if user_input.lower() == "y":
    is_raining = True

# Define a floating-point number 'temperature'
temperature = 25.5

# Print the value of 'is_raining' and 'temperature'
print(f"Is it raining? {is_raining}")
print(f"The current temperature is: {temperature} degrees Celsius")
307
python
# Define some variables
is_student = True
age = 25
name = "John Doe"

# Use format with boolean value
print("Is student: {}".format(is_student))

# Use format to display name and age
if is_student:
    print("Student's name is: {} and age is: {}".format(name, age))
else:
    print("This person is not a student.")
308
python
# Define a frozenset object
my_frozenset = frozenset([1, 2, 3])

# Comparing frozenset with True using equality operator (==)
if my_frozenset == True:
    print("Frozenset is equal to True")
else:
    print("Frozenset is not equal to True")

# Comparing frozenset with True using inequality operator (!= or !=)
if my_frozenset != True:
    print("Frozenset is not equal to True")
else:
    print("Frozenset is equal to True (this will never be true)")

# Comparing frozenset with True using less than operator (<)
if my_frozenset < True:
    print("Frozenset is less than True")
else:
    print("Frozenset is greater than or equal to True")

# Comparing frozenset with True using greater than operator (>)
if my_frozenset > True:
    print("Frozenset is greater than True")
else:
    print("Frozenset is less than or equal to True")

# Comparing frozenset with True using membership operator (in)
if True in my_frozenset:
    print("True is a member of the frozenset")
else:
    print("True is not a member of the frozenset")
309
python
# Define a custom class named MyClass
class MyClass:
    # Define some custom attributes
    def __init__(self, value=0):
        self.my_true = True
        self.my_false = False
        self.my_value = value

# Create an instance of the class
my_instance = MyClass(42)

# Accessing attributes using dot notation
print("Accessing attributes using dot notation:")
print(f"True value: {my_instance.my_true}")
print(f"False value: {my_instance.my_false}")
print(f"Value: {my_instance.my_value}")

# Accessing attributes using getattr()
print("Accessing attributes using getattr():")
for attr in ['my_true', 'my_false', 'my_value']:
    print(f"{attr}: {getattr(my_instance, attr)}")
310
python
# Define a function with a default argument set to False
def my_function(flag=False):
    print("Flag value before toggle: ", flag)
    flag = not flag  # Toggle the flag value using not operator
    print("Flag value after toggle: ", flag)
    print("Adding this value to global 'my_global'")
    globals()['my_global'] = flag

# Call the function without passing any argument, so it uses the default value of False
my_function()
print("Value of 'my_global' after first call: ", globals()['my_global'])

# Call the function again with an argument to set the flag value to True before toggling
my_function(True)
print("Value of 'my_global' after second call: ", globals()['my_global'])
311
python
# Define a simple class named MyClass
class MyClass:
    def __init__(self, value=0):
        self.my_attribute = value

# Create an instance of MyClass
my_instance = MyClass(10)

# Using True to check if a condition is met
if True:  # This condition always evaluates to True, so the following code will always execute
    print("The value of True is:", True)

# Using hasattr to check if an instance has a specific attribute
if hasattr(my_instance, 'my_attribute'):  # Check if my_instance has an attribute named 'my_attribute'
    print("The instance has the attribute 'my_attribute'", my_instance.my_attribute)
else:
    print("The instance does not have the attribute 'my_attribute'")
312
python
# Define some variables with True values
boolean_value_1 = True
boolean_value_2 = True
boolean_value_3 = True

print("Boolean values:")
print(boolean_value_1)
print(boolean_value_2)
print(boolean_value_3)

# Use hash function to get the hash value of some objects
string_value = "Hello, World!"
number_value = 42
list_value = [1, 2, 3]
dictionary_value = {"key": "value"}

print("\nHash values:")
print("String value:", hash(string_value))
print("Number value:", hash(number_value))
print("List value:", hash(list_value))
print("Dictionary value:", hash(dictionary_value))
313
python
# This is a simple Python script that uses the True boolean value and help function

# First, let's define a boolean variable using True
boolean_variable = True

print("Boolean variable value:", boolean_variable)

# Now let's check some conditions and print messages accordingly using if statement
if boolean_variable:
    print("The given boolean value is TRUE")
else:
    print("The given boolean value is FALSE")

# Next, we will use the help() function to learn about a Python built-in function (len())
help(len)
314
python
# This variable is assigned the Boolean value of True
boolean_value = True

# Print the value of the boolean variable using the print() function
print("Boolean value: ", boolean_value)

# Convert the Boolean value to its hexadecimal representation using the hex() function
hexadecimal_value = hex(bool(boolean_value))

# Print the hexadecimal representation of the boolean value using the print() function
print("Hexadecimal value: ", hexadecimal_value)

# This variable is assigned an integer value
integer_value = 10

# Convert the integer value to its hexadecimal representation using the hex() function
hexadecimal_integer = hex(integer_value)

# Print the hexadecimal representation of the integer value using the print() function
print("Hexadecimal value of integer: ", hexadecimal_integer)
315
python
# Define a function with a local variable
def my_function():
    x = 42
    print("The value of x inside my_function is:", x)

# Call the function and assign the result to a variable
result = my_function()

# Print the ID and truth value of various Python objects
print("ID of the function my_function: ", id(my_function))
print("Truth value of an empty list: ", True if [] else False)
print("Truth value of an empty tuple: ", True if () else False)
print("Truth value of an empty dictionary: ", True if {} else False)
print("ID and truth value of the function result:")
print("ID: ", id(result))
print("Truth value: ", bool(result))
316
python
# Set initial condition as False
is_adult = False

# Get user's age using input() function
user_age = int(input("Please enter your age: "))

# Check if user is an adult based on their age
if user_age >= 18:
    is_adult = True
    print("Welcome, you are an adult!")
else:
    print("Sorry, you are not old enough to enter.")

# Loop continues with True statement
while is_adult:
    # Add any other logic or processing here if needed
    print("You are considered an adult in our system.")
317
python
# Define a boolean variable with the value True
is_sunny = True
print("Is it sunny? ", is_sunny)

# Convert a boolean to an integer using the int() function
boolean_to_int = int(is_sunny)
print("Boolean value as an integer: ", boolean_to_int)

# Define an integer variable
temperature = 25
print("Temperature: ", temperature)

# Convert an integer to a boolean using the bool() function
integer_to_boolean = bool(temperature)
print("Integer value as a boolean: ", integer_to_boolean)

# Perform some comparisons and assign their results to boolean variables
is_warm = temperature > 20
is_freezing = temperature < 0
print("Is it warm? ", is_warm)
print("Is it freezing? ", is_freezing)
318
python
# Define a custom class named 'MyNumber'
class MyNumber:
    def __init__(self, value):
        self.value = value

# Function that checks if given argument is True or not
def is_boolean(arg):
    return isinstance(arg, bool) and arg

# Function that checks if given number is an instance of 'MyNumber' class
def is_my_number(num):
    return isinstance(num, MyNumber)

# Test cases
print("is_boolean(True) =", is_boolean(True))        # True
print("is_boolean(5) =", is_boolean(5))            # False
print()

print("is_my_number(MyNumber(3)) =", is_my_number(MyNumber(3)))      # True
print("is_my_number(3) =", is_my_number(3))          # False
319
python
# Define base class
class BaseClass:
    def __init__(self, value):
        self.value = value

    def print_value(self):
        print("Base Class Value:", self.value)

# Define derived classes
class DerivedClass1(BaseClass):
    pass

class DerivedClass2(BaseClass):
    pass

# Instantiate objects
obj_base = BaseClass(10)
obj_derived1 = DerivedClass1(5)
obj_derived2 = DerivedClass2(7)

# Check isinstance()
print("Is obj_derived1 an instance of BaseClass?", isinstance(obj_derived1, BaseClass))  # True
print("Is obj_base an instance of DerivedClass1?", isinstance(obj_base, DerivedClass1))  # False

# Check issubclass()
print("Is DerivedClass1 a subclass of BaseClass?", issubclass(DerivedClass1, BaseClass))  # True
print("Is DerivedClass2 a subclass of BaseClass?", issubclass(DerivedClass2, BaseClass))  # True
320
python
# Using True
boolean_value = True
if boolean_value:
    print("This statement will be executed because True is considered as a 'truthy' value.")

# Using iter()
list_data = [1, 2, 3, 4, 5]
iterator = iter(list_data)
next_element = next(iterator)
print("The first element of the list is:", next_element)

# Iterating through a list using a for loop and an iterator
for number in iter(list_data):
    print("Current number is:", number)
321
python
# An empty list as an example, can be replaced with any other iterable like strings, tuples or sets
my_list = []

# Using len() to find the length of my_list
length_of_my_list = len(my_list)
print("Length of my_list: ", length_of_my_list)

# Using True to check if a condition is met, here checking if my_list is empty or not
if not my_list:
    print("my_list is empty")
else:
    # If the list is not empty, print out its first element
    print("First element of my_list: ", my_list[0])
322
python
# Define a list of numbers
numbers = [1, 2, 3, 4, 5]

# Use a for loop to check if each number is greater than 3
# If it is, print the number and use the Boolean value True
for num in numbers:
    if num > 3:
        print(num, "is greater than 3. ", True)
    else:
        print(num, "is less than or equal to 3.")

# Use a variable to store a Boolean value
is_sunny = True

# Print the message based on the Boolean value
if is_sunny:
    print("It's sunny outside!")
else:
    print("It's not sunny outside :(")
323
python
def my_function():
    # Assign some values to local variables
    x = 10
    y = 20
    z = x + y

    # Set a local variable with the value True
    is_even = True if (x % 2 == 0) else False

    print("The number x is even: ", is_even)
    print("Values of local variables in this function:", locals())

# Call the function
my_function()
324
python
# A list of numbers that will be checked against a threshold (3 in this case)
numbers = [1, 2, 3, 4, 5]
threshold = 3

# A simple function that returns True if its input is greater than or equal to the threshold
def is_greater_than_threshold(num):
    return num >= threshold

# Use map() to apply the is_greater_than_threshold function on every element in the numbers list
result = map(is_greater_than_threshold, numbers)

# Convert the map object into a list of booleans (True or False based on each application of is_greater_than_threshold)
boolean_list = list(result)

print("Numbers greater than or equal to threshold:", boolean_list)
325
python
# Define some variables with boolean values and numbers
boolean_var1 = True
boolean_var2 = False
number_list = [3, 5, 1, 8, 2]

# Use max function with a list of numbers
max_number = max(number_list)
print("Maximum number: ", max_number)

# Compare two boolean values using <, >, <=, >= and use the 'or' operator
# to combine them with a number
result = (boolean_var1 > boolean_var2) or 5 > 3
print("Result of comparison: ", result)
326
python
import numpy as np

# Creating two NumPy arrays
array1 = np.random.rand(5, 5)
array2 = np.random.rand(5, 5) + 0.5

print("Array 1:")
print(array1)
print("\nArray 2:")
print(array2)

# Creating memoryviews from NumPy arrays
memview_array1 = np.ascontiguousarray(array1).tobytes()
memview_array2 = np.ascontiguousarray(array2).tobytes()
memoryview_arrays = [np.frombuffer(m, dtype=np.float32) for m in (memview_array1, memview_array2)]
memoryviews = [memoryview(m) for m in memoryview_arrays]

# Perform element-wise AND operation using memoryviews
result = np.bitwise_and(memoryviews[0], memoryviews[1])
result_memview = memoryview(result)

# Convert the result back to a NumPy array
np_result = np.frombuffer(result_memview, dtype=np.float32).reshape((5, 5))

print("\nResult:")
print(np_result)

# Perform the same operation using Boolean True values
boolean_arrays = [np.full((5, 5), True) for _ in range(2)]
boolean_results = np.bitwise_and(boolean_arrays[0], boolean_arrays[1]).astype(np.float32).reshape((5, 5))

print("\nResult using Boolean True values:")
print(boolean_results)
327
python
# Define some variables with different data types and values
numbers = [1, 5, -3, 8, 2]
number_one = 7
another_number = -1
boolean = True

# Use min() to find the smallest number in the list
smallest_number = min(numbers)
print("The smallest number in the list is:", smallest_number)

# Use a conditional statement and Boolean value
if number_one > another_number:
    print(f"{number_one} is greater than {another_number}")
else:
    print(f"{number_one} is not greater than {another_number}")
    
# Use min() to find the smallest of two numbers
smallest = min(number_one, another_number)
print("The smallest of", number_one, "and", another_number, "is:", smallest)
328
python
import itertools

def square(n):
    return n * n

numbers = [1, 2, 3, 4, 5]
even_numbers = filter(lambda x: x % 2 == 0, numbers)
squares = map(square, even_numbers)

print("Even numbers and their squares:")
for i, (even, square) in enumerate(itertools.zip(even_numbers, squares)):
    print(f"{even} -> {square}")

print("\nNext even number:")
next_even = next(filter(lambda x: x % 2 == 0, itertools.count(1)))
print(next_even)
329
python
class MyClass:
    def __init__(self, value):
        self.value = value

# Create an instance of MyClass with the value "10"
my_object = MyClass(10)

# Compare the instance with True using the 'and' operator
result = my_object.value > 5 and True

print("Result:", result)
330
python
# Boolean value True
x = 10 > 5
print("Boolean value (comparison):", x)
print("Type of variable x:", type(x))

# Using oct() with a decimal number
decimal_number = 17
binary_number = oct(decimal_number)[2:]
print("\nOctal value of 17 (decimal):", oct(decimal_number))
print("Type of variable binary_number:", type(binary_number))
print("Binary representation of the octal number: 0{0:03o}".format(decimal_number)[2:])

# Using oct() with an octal string
octal_string = "11"
decimal_number_from_octal = int(oct(octal_string), 8)
print("\nOctal value of '11' (octal string):", octal_string)
print("Decimal equivalent of the octal number:", decimal_number_from_octal)
331
python
# This script checks if a file exists and prints a message accordingly

# Define the file name
file_name = "example.txt"

# Check if the file exists and open it if it does
if open(file_name, mode="r"):
    print("File exists and can be opened.")
else:
    print("File does not exist or cannot be opened.")

# Perform some true/false statements as examples
is_even = 6 % 2 == 0
print(f"Is {6} an even number? -> {is_even}")

is_odd = 7 % 2 != 0
print(f"Is {7} an odd number? -> {is_odd}")
332
python
# This program shows how to use True value and ord() function

# Using True value
is_sunny = True
print("Is it sunny outside? ", is_sunny)

# Using ord() function
character = 'A'
value = ord(character)
print(f"The ASCII value of character {character} is: {value}")

# Another example using ord() with a string
text = "Hello, World!"
for char in text:
    print(f"The ASCII value of character {char} is: {ord(char)}")
333
python
# This function returns the nth Fibonacci number using recursion
def fibonacci(n):
    if n <= 0:
        print("Input should be positive integer.")
        return None
    elif n == 1:
        return 0
    elif n == 2:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)

# Main program
if __name__ == "__main__":
    base = 2.0
    exponent = 10
    result = pow(base, exponent)

    print("Result of {0} raised to the power of {1} is: {2}"
          .format(base, exponent, result))

    fib_num = int(input("Enter a positive integer to find the Fibonacci number: "))
    fib = fibonacci(fib_num)

    if fib is not None:
        print("The Fibonacci number at position {0} is: {1}"
              .format(fib_num, fib))
    else:
        print("Invalid input!")
334
python
# This variable is assigned with the boolean value True
is_sunny = True

# The print() function is used to output messages to the console
if is_sunny:
    print("The weather is sunny.")
else:
    print("The weather is not sunny.")

# Another example using a comparison operation and print()
x = 10
y = 20

if x < y:
    print("x is less than y")
else:
    print("x is greater than or equal to y")
335
python
class Counter:
    def __init__(self, value):
        self._value = value

    # Read-only property
    @property
    def is_even(self):
        return self._value % 2 == 0

# Instantiate a Counter object with an even number
counter_even = Counter(4)
print("Counter even: ", counter_even.is_even)  # Output: True

# Instantiate a Counter object with an odd number
counter_odd = Counter(3)
print("Counter odd: ", counter_odd.is_even)  # Output: False
336
python
# This function prints numbers from start to end-1 if end is given, or up to 10 if no arguments are passed
def print_numbers(start=0, end=None):
    if end is not None:
        for number in range(start, end+1):
            if number % 2 == 0:  # Print only even numbers if True is given as argument
                print(number)
    else:
        for number in range(0, 11):
            if not (number % 2):  # Print all numbers if no arguments are passed or False is given
                print(number)

# Demonstrating the usage of True and range
print("Printing even numbers from 0 to 5:")
print_numbers(start=0, end=6, condition=True)

print("\nPrinting all numbers from 0 to 10:")
print_numbers()
337
python
# Define a variable with a boolean value
is_sunny = True

# Print the boolean value directly
print("Is it sunny? ", is_sunny)

# Use repr() to get the string representation of a variable, including its type
print("Type and representation of is_sunny: ", repr(is_sunny))

# Define another variable with a string value
my_string = "Hello, World!"

# Print the string value directly
print("my_string: ", my_string)

# Use repr() to get the string representation of a variable, including its type and contents
print("Type and representation of my_string: ", repr(my_string))
338
python
# Define a list
my_list = [1, 2, 3, 4, 5]

# Check if the list is empty
if not my_list:
    print("List is empty")
else:
    # Print "List is not empty" and iterate through elements in reverse order
    print("List is not empty")
    for i in reversed(my_list):
        print(i)
339
python
# Define a floating-point number
number = 3.14159265

# Print the boolean value of the condition: "Number is greater than 3"
is_greater_than_three = number > 3
print("Is number greater than 3? ", is_greater_than_three)
print()

# Use round function to round the number to 2 decimal places
rounded_number = round(number, 2)
print("Number rounded to 2 decimal places: ", rounded_number)
340
python
# Define two sets with some common elements
set1 = {1, 2, 3, 4, 5}
set2 = {4, 5, 6, 7, 8}

# Check if set1 is a subset of set2 using the 'in' keyword and a boolean value (True or False)
if set1.issubset(set2):
    print("Set1 is a subset of Set2")
else:
    print("Set1 is not a subset of Set2")

# Use sets to find the union, difference, and intersection of two sets
union_sets = set1 | set2
print("Union of Set1 and Set2:", union_sets)

difference_set = set1.difference(set2)
print("Difference of Set1 and Set2:", difference_set)

intersection_set = set1 & set2
print("Intersection of Set1 and Set2:", intersection_set)
341
python
class MyClass:
    def __init__(self, name):
        self.is_active = False
        self.name = name

# Create an instance of MyClass
my_instance = MyClass("John Doe")

# Using True to set an attribute
setattr(my_instance, "is_active", True)

# Accessing the new attribute using getattr and printing the result
print(getattr(my_instance, "is_active"))  # Output: True
print(my_instance.is_active)             # Output: True
342
python
# Let's assume we have the following list
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]

# Using True as a slice index returns all elements starting from that index
even_numbers = numbers[::2]  # Equivalent to: numbers[0:5:2]
odd_numbers = numbers[1::2] # Equivalent to: numbers[1::2]

print("Even Numbers:")
print(even_numbers)
print("ODD Numbers:")
print(odd_numbers)

# Using True as a slice condition returns all elements that satisfy the given condition
filtered_numbers = [x for x in numbers if x > 5]
print("\nFiltered Numbers > 5:")
print(filtered_numbers)

# Filtering with True using list slicing
filtered_slice = numbers[numbers.index(5):]
print("\nFiltered Numbers greater than 5 using slice and index:")
print(filtered_slice)
343
python
# List of some numbers and strings
data = [3, 5, 1, 2, 7, 4, "apple", "banana", "orange"]

# Using True in a conditional statement
if True:
    print("This block will always be executed.")

# Sorting the data list using sorted() function
sorted_data = sorted(data)
print("Sorted data:")
print(sorted_data)

# Sorting data in place (modifying the original list) by setting the keyword argument 'inplace' to True
data.sort(key=lambda x: abs(x), reverse=True, inplace=True)
print("Sorted data in place:")
print(data)
344
python
class Calculator:
    # Define a constant value (can be replaced by True)
    IS_POSITIVE = True

    @staticmethod
    def add(num1, num2):
        """Static method to add two numbers"""
        return num1 + num2

    def __init__(self, value):
        """Initialize the class instance with a given value"""
        self.value = value

    def display_value(self):
        """Method to display the instance value"""
        print("Value: {}".format(self.value))

    @staticmethod
    def is_positive():
        """Static method to check if a given value is positive"""
        return Calculator.IS_POSITIVE

# Instantiate the class and test the functionality
calculator = Calculator(5)
calculator.display_value()

result = Calculator.add(3, 7)
print("Addition: {} + {} = {}".format(3, 7, result))

if Calculator.is_positive():
    print("Given number is positive")
else:
    print("Given number is not positive")
345
python
# Define a boolean variable with the value True
is_sunny = True

# Define a string variable with some text
weather = "Sunny" if is_sunny else "Rainy"

print("Is it sunny?", is_sunny)
print("What's the weather like?", weather)
346
python
# List of numbers
numbers = [1, 2, 3, 4, 5]

# Check if list is empty
if not numbers:
    print("The list is empty")
else:
    # Use sum function to add all elements in the list
    total_sum = sum(numbers)
    
    print(f"Sum of the numbers in the list: {total_sum}")
    
# Use True as a boolean value in if condition
if True:
    print("This statement is always true")
347
python
if some_condition:
    print("This condition is True")
else:
    print("This condition is False")

# Output: This condition is True (assuming 'some_condition' is True)
348
python
# Define a boolean variable 'is_student' and initialize it to True
is_student = True

# Define a tuple 'student_info' with some student data
student_info = ("John Doe", 19, "Computer Science")

# Function to check if the given person is a student or not
def is_student_check(person, student_info):
    return person == student_info[0] and isinstance(is_student, bool)

# Testing the function with some inputs
print("Is John Doe a student? ", is_student_check("John Doe", student_info)) # Output: Is John Doe a student?  True
print("Is Michael Jackson a student? ", is_student_check("Michael Jackson", student_info)) # Output: Is Michael Jackson a student?  False
349
python
# Define some variables
number = 10
text = "Hello, World!"
boolean_variable = True

print("Number:", number)
print("Text:", text)
print("Boolean variable:", boolean_variable)

# Print the type of each variable
print("Type of number:", type(number))
print("Type of text:", type(text))
print("Type of boolean_variable:", type(boolean_variable))

# Perform some checks and print the results as booleans
print("Is number equal to 10?:", number == 10)
print("Is text equal to \"Hello, World!\":", text == "Hello, World!")
print("Is boolean_variable equal to True:", boolean_variable is True)
350
python
# Define a dictionary with some boolean values
my_dict = {
    "is_morning": False,
    "is_raining": True,
    "has_coffee": False
}

# Print the initial state of the dictionary
print("Initial state:")
print(vars(my_dict))

# Change some values
my_dict["is_morning"] = True
my_dict["has_coffee"] = True

# Print the updated state of the dictionary
print("\nUpdated state:")
print(vars(my_dict))
351
python
# List of boolean values using True and False
booleans = [True, True, False, True, False]

# List of corresponding integers
numbers = [1, 2, 3, 4, 5]

# Using zip() to pair each boolean value with its corresponding integer
paired = zip(booleans, numbers)

# Printing the paired values using for loop
for pair in paired:
    print(f"Boolean Value: {pair[0]}")
    print(f"Corresponding Integer: {pair[1]}")
    print()
352
python
import os

# Set a variable to store a file path
file_path = "/path/to/your/file.txt"

# Check if the file exists using os.path.isfile()
if os.path.isfile(file_path):
    print("File exists")
    # Process the file if it exists (for example, read its content)
    with open(file_path, "r") as file:
        content = file.read()
        print("Content of the file: ", content)
else:
    print("File does not exist")

# Demonstrate using True and False in an if statement
if not os.path.isfile("/nonexistent/path"):
    print("The file does not exist and True is falsey when used as a condition")
353
python
import sys

def is_positive(n):
"""
Check if given number is positive.
"""
if n > 0:
    return True
else:
    return False

if __name__ == "__main__":
# Get command line arguments using sys.argv
num = int(sys.argv[1]) if len(sys.argv) > 1 else 0

if is_positive(num):
    print(f"{num} is a positive number.")
else:
    print(f"{num} is not a positive number.")

    # Print Python version using sys.version
print("Python version:", sys.version)
354
python
import math

# Boolean expression
if 5 > 3:
    boolean_expression = True
else:
    boolean_expression = False

print("Boolean expression:", boolean_expression)

# Basic mathematical operations with numbers
num1 = 5
num2 = 3

# Addition
addition = num1 + num2
print("Addition:", addition)

# Subtraction
subtraction = num1 - num2
print("Subtraction:", subtraction)

# Multiplication
multiplication = num1 * num2
print("Multiplication:", multiplication)

# Division
division = num1 / num2
print("Division:", division)

# Floor division
floordivision = num1 // num2
print("Floor division:", floordivision)

# Exponentiation using math module
exponentiation = math.pow(num1, num2)
print("Exponentiation:", exponentiation)
355
python
import random

def flip_coin():
    """
    Simulates flipping a coin by returning either True or False with equal probability.
    """
    return random.choice([True, False])

if __name__ == "__main__":
    num_trials = 10
    print(f"Flipping a coin {num_trials} times:")
    for _ in range(num_trials):
        result = flip_coin()
        print(result)
356
python
from datetime import datetime, timedelta

# Using True boolean value
is_student = True
print("Is student: ", is_student)

# Using datetime module
now = datetime.now()
print("\nCurrent date and time: ", now)

future_date = datetime(year=2023, month=10, day=31)
time_difference = future_date - now
print("\nNumber of days until October 31, 2023:", int(time_difference.days))

# Check if the future date is before or after the current date
if future_date < now:
    print("October 31, 2023 has already passed.")
else:
    print("October 31, 2023 is still in the future.")
357
python
import time

# Get the current time as a tuple of hours, minutes, seconds
current_time = time.localtime(time.time())
hour = current_time.hour

# Check if the hour is between 6 AM and 12 PM (noon) using boolean expression
is_morning = (hour >= 6) and (hour < 12)

if is_morning:
    print("Good morning!")
else:
    print("It's not morning.")
358
python
import json

# Create a Python dictionary
data = {
    "name": "John Doe",
    "is_student": True,
    "age": 25
}

print("Original Python Dictionary:")
print(data)

# Convert Python dictionary to JSON format
json_data = json.dumps(data)

print("\nJSON representation:")
print(json_data)

# Check if 'is_student' value is True
if data["is_student"]:
    print("\n'is_student' value is True.")
else:
    print("\n'is_student' value is False.")
359
python
import csv

# Replace 'filename.csv' with the actual path or name of your CSV file
filename = "filename.csv"

def is_non_empty_string(value):
"""
Helper function to check if a value is a non-empty string
"""
return isinstance(value, str) and len(value) > 0

with open(filename, newline='') as csvfile:
reader = csv.DictReader(csvfile)

print("First row of the CSV file as a dictionary with True values for non-empty columns:")
for row in itertools.islice(reader, 1):
column_values = {col: bool(is_non_empty_string(value)) for col, value in row.items()}
print(column_values)
break
360
python
import sqlite3

# Create a new SQLite database with the given name.
def create_connection(db_file):
 db = None
 try:
     db = sqlite3.connect(db_file)
 except sqlite3.Error as e:
     print(e)
 return db

# Create a table in the SQLite database with the given name and columns.
def create_table(db, table_name, columns):
 try:
     cursor = db.cursor()
     cursor.execute(f'CREATE TABLE IF NOT EXISTS {table_name} ({", ".join([f"{col[0]} {col[1]}" for col in columns])});')
 except sqlite3.Error as e:
     print(e)

# Insert a new row into the given table with the given key-value pairs.
def insert_into_table(db, table_name, data):
 try:
     cursor = db.cursor()
     keys, values = zip(*data.items())
     query = f'INSERT INTO {table_name} VALUES ({", ".join(["?" for _ in keys])});'
     cursor.execute(query, tuple(values))
     db.commit()
 except sqlite3.Error as e:
     print(e)

# Query the SQLite database and return all rows from the given table.
def query_table(db, table_name):
 try:
     cursor = db.cursor()
     cursor.execute(f"SELECT * FROM {table_name};")
     rows = cursor.fetchall()
     return rows
 except sqlite3.Error as e:
     print(e)
     return []

# Main function demonstrating the usage of True and sqlite3.
def main():
 db_file = "example.db"
 if not create_connection(db_file):
     return

 create_table(db_file, "my_table", [("id", "INTEGER PRIMARY KEY AUTOINCREMENT"), ("name", "TEXT")])

 data = [{"name": "Alice"}, {"name": "Bob"}]
 insert_into_table(db_file, "my_table", data)

 rows = query_table(db_file, "my_table")
 for row in rows:
     print(row)

 if True:  # Unreachable statement to demonstrate True's use.
     print("True is a boolean value representing truth.")

 create_connection(db_file).close()

if __name__ == "__main__":
 main()
361
python
import re

# Define a simple function that checks if a given string starts with "Python"
def check_string_startswith_python(string):
    return True if string.startswith('Python') else False

# Use re module to check if a string matches a regular expression pattern
def check_string_with_regex(string):
    pattern = r'^Python'
    return bool(re.match(pattern, string))

if __name__ == "__main__":
    strings = ['Python is awesome', 'Java is not Python', 'I love Python']

    for string in strings:
        print(f'String: {string}')
        print(f'check_string_startswith_python(): {check_string_startswith_python(string)}')
        print(f'check_string_with_regex(): {check_string_with_regex(string)}')
        print()
362
python
import requests

# Define the URL to be accessed
url = "https://www.google.com"

# Send an HTTP request using GET method and store the response in a variable
response = requests.get(url)

# Check if the request was successful (status code is 200)
if response.status_code == 200:
    print("Website is accessible")
else:
    print(f"Website {url} is not accessible, status code: {response.status_code}")

# Use True to check if a condition is met (in this case, the website is accessible)
if True:
    print("This condition is always true and will be executed")
363
python
import urllib.request

# Set up the URL and parameters for the HTTP request
url = "http://example.com"
params = {}  # empty dictionary if no parameters are needed
data = None  # leave data as None if no data is being sent

# If data is not None, then it should be bytes, and we need to construct the request body
if data is not None:
    data_str = data.decode('utf-8')  # convert data to string for urllib
    data = data_str.encode('utf-8')  # convert data back to bytes for urllib
    request = urllib.request.Request(url, data)
else:
    request = urllib.request.Request(url)

# Set up any headers or other request properties
request.add_header("User-Agent", "MyProgram/0.1")
if params:
    request.add_data(urllib.parse.urlencode(params).encode('utf-8'))

try:
    response = urllib.request.urlopen(request)  # send the request and get the response
    response_data = response.read()           # read the response data
    print("Response received:", response_data.decode('utf-8'))
except urllib.error.HTTPError as error:
    print("HTTP Error:", error.reason)
except Exception as e:
    print("General Error:", str(e))
finally:
    if response is not None:
        response.close()  # close the response connection

# Use True to check if the request was successful or not (based on HTTP status code)
if response.getcode() == 200:
    print("Request succeeded.")  # True statement
else:
    print("Request failed.")    # False statement
364
python
import pickle

# Using True value
is_student_eligible = True
print("Student is eligible for scholarship: ", is_student_eligible)

# Using pickle module to serialize and deserialize a dictionary
my_dict = {
    "name": "John Doe",
    "age": 25,
    "is_student": True
}

# Serializing the dictionary using pickle
with open("my_data.pickle", "wb") as file:
    pickle.dump(my_dict, file)

print("\nData serialized successfully.")

# Deserializing the data from the pickle file
with open("my_data.pickle", "rb") as file:
    deserialized_data = pickle.load(file)

print("\nDeserialized data: ", deserialized_data)
365
python
import subprocess

# This assignment sets a variable named 'status' to the True boolean value
status = True

print("Status before command execution: {}".format(status))

# Use the subprocess module to run the 'dir' command in the current system shell
result = subprocess.run(["dir"], capture_output=True, text=True)

# Assign the output of the command to a variable named 'output'
output = result.stdout

# Print the output of the command and change the value of the 'status' variable based on the exit code of the command
print("\nOutput of the command: {}".format(output))
if result.returncode == 0:
    status = True
else:
    status = False

print("Status after command execution: {}".format(status))
366
python
import argparse

def main():
    parser = argparse.ArgumentParser(description="A simple Python program using argparse.")
    parser.add_argument("-t", "--true", action="store_const", const=True, default=False, help="Print a message: 'True'")
    args = parser.parse_args()

    if args.true:
        print("The value of true is:", args.true)

if __name__ == "__main__":
    main()
367
python
import logging

# Configure logging
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')

def add(a, b):
 """This function adds two numbers"""
 result = a + b
 return result

if __name__ == '__main__':
 # Set some variables
 number1 = 5
 number2 = 3
 sum_expected = 8

 # Perform addition operation
 sum = add(number1, number2)

 # Log the input values and the expected output
 logging.info(f"Adding {number1} and {number2}")

 # Check if the result is as expected
 if sum == sum_expected:
 logging.info("Result is correct")
 else:
 logging.error("Result is not correct! Expected: {}, Got: {}".format(sum_expected, sum))

 # Log the result
 logging.info("Result: {}".format(sum))
368
python
# Import Flask module
from flask import Flask, jsonify, render_template_string

app = Flask(__name__)  # Create a new Flask web server instance

@app.route('/')  # Define the route for the root URL ("/")
def index():
    # Define a variable with a True value
    is_greeting_displayed = True
    
    # If the route is accessed, return the "Hello, World!" message
    if is_greeting_displayed:
        return render_template_string('Hello, World!')

# Run the Flask application
if __name__ == '__main__':
    app.run(debug=True)
369
python
# This is a simple Python script that demonstrates the use of True and False boolean values.

is_student = True
is_employed = False

if is_student:
    print("You are a student.")
else:
    print("You are not a student.")

if not is_employed:
    print("You are unemployed.")
else:
    print("You are employed.")
370
python
import numpy as np

# Using Python's built-in True boolean value
x = 10
y = 20
z = -5

if x > 0 and y > 0 and z > 0:
    print("All numbers are positive")
else:
    print("At least one number is not positive")

# Using NumPy array with only True values
np_array = np.full((3, 3), True)
print(np_array)

# Using NumPy to create an array of boolean values based on a condition
numbers = np.array([1, -2, 3, 0, 5])
boolean_values = numbers > 0
print(boolean_values)
371
python
# Import required libraries
import pandas as pd

# Create a sample data as a dictionary
data = {
    'Name': ['John', 'Anna', 'Peter', 'Linda'],
    'Age': [28, 24, 35, 32],
    'City': ['New York', 'Los Angeles', 'Chicago', 'Miami']
}

# Create a DataFrame from the data dictionary using pandas
df = pd.DataFrame(data)

# Filter the DataFrame based on Age > 30 using a boolean condition (True)
filtered_df = df[df['Age'] > 30]

# Display the filtered DataFrame
print(filtered_df)
372
python
import matplotlib.pyplot as plt

# Define some data as Python lists
x = list(range(1, 6))  # This creates a list from 1 to 5
y_true = [i ** 2 for i in x]  # Squares of the numbers from 1 to 5

# Create a figure and a set of subplots
fig, ax = plt.subplots()

# Plot the true data as red dots and the predicted data as blue line
ax.plot(x, y_true, 'ro', label='True Data')
ax.plot(x, [i ** 2.5 for i in x], 'b-', label='Predicted Data (False label)')

# Set labels and title
ax.set_xlabel('X data')
ax.set_ylabel('Y values')
ax.set_title('True vs Predicted Data (Squares vs 2.5 powers)')

# Show the legend
ax.legend()

# Display the plot
plt.show()
373
python
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

# Generate some random data with outliers
np.random.seed(0)  # for reproducibility
data = np.random.randn(100, 2)
outliers = np.random.choice(len(data), size=10, replace=False)
outliers_data = data[outliers] * 3
data = np.concatenate((data, outliers_data))

# Use NumPy's True to create a boolean mask for the outlier indices
is_outlier = np.isin(np.arange(len(data)), outliers)

# Create a scatter plot with Seaborn
plt.figure(figsize=(8, 6))
sns.scatterplot(x=data[:, 0], y=data[:, 1], hue=is_outlier, s=50, palette="Set3")

# Set axis labels and title
plt.xlabel("X")
plt.ylabel("Y")
plt.title("Scatter plot with outliers")

# Show the plot
plt.show()
374
python
import numpy as np
import tensorflow as tf

# Generate some random data for demonstration purposes.
np.random.seed(42)
x = np.random.randn(100, 3) * 5
y = np.round(np.random.randn(100, 1) + 2).astype('int8')

# Create a boolean mask from the first 50 samples
mask = np.zeros((x.shape[0],), dtype=bool)
mask[:50] = True

# Build and prepare the TensorFlow dataset.
ds = tf.data.Dataset.from_tensor_slices((x, y)).shuffle(buffer_size=len(x))
ds = ds.batch(32).prefetch(tf.data.AUTOTUNE_BUFFER_SIZE)

# Define and build the neural network model.
model = tf.keras.Sequential([
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Dense(1, activation='sigmoid')
])
model.compile(optimizer='adam', loss='binary_crossent', metrics=['accuracy'])

# Train the model using the TensorFlow dataset.
epochs = 10
history = model.fit(ds, epochs=epochs, verbose=0)

# Use the mask to evaluate the model performance on the first 50 samples (`True` values).
x_masked = x[mask]
y_masked = y[mask]
loss, accuracy = model.evaluate(tf.data.Dataset.from_tensor_slices((x_masked, y_masked)), verbose=0)
print(f"Model performance on the first 50 samples: loss={loss}, accuracy={accuracy}")
375
python
# Importing necessary libraries
import numpy as np
from keras.models import Sequential
from keras.layers import Dense

# Generate some random data for demonstration purposes
X = np.random.randn(100, 2) # 100 samples with 2 features each
y = np.rint(np.random.normal(size=100), 1) # 100 samples with binary labels (0 or 1)

# Define a simple feedforward neural network model
model = Sequential()
model.add(Dense(32, input_shape=(X.shape[1],), activation='relu')) # Hidden layer with 32 neurons and ReLU activation
model.add(Dense(1, activation='sigmoid')) # Output layer with sigmoid activation for binary classification

# Compile the model with a loss function and an optimizer
model.compile(loss='binary_crossent', optimizer='adam', metrics=['accuracy'])

# Train the model on our data
history = model.fit(X, y, epochs=100, batch_size=32, verbose=0)

# Now let's create some new data and make predictions
new_data = np.array([[True, True], [False, False]]) # New data with 2 binary features
predictions = model.predict(new_data) # Make predictions using our trained model
print("Predictions for new data: ", predictions) # Print the predictions
376
python
# Import necessary libraries
import numpy as np
from sklearn import model_selection
from sklearn.linear_model import LogisticRegression

# Create a boolean dataset using NumPy
data = np.array([[True, True], [False, False], [True, True], [False, False]])
labels = np.array([1, 1, 1, 0])

# Split the dataset into training and testing sets using Scikit-Learn's model_selection module
X_train, X_test, y_train, y_test = model_selection.train_test_split(data, labels, test_size=0.3, random_state=42)

# Create and fit a logistic regression model using Scikit-Learn's LogisticRegression class
model = LogisticRegression()
model.fit(X_train, y_train)

# Make predictions on the test dataset
predictions = model.predict(X_test)

# Print some information about the trained model and its performance
print("Model coefficients:")
print(model.coef_)
print("\nIntercept:")
print(model.intercept_)
print("\nTest set predictions:")
print(predictions)
print("\nTest set true labels:")
print(y_test)
print("\nTest set accuracy:")
print(np.mean(predictions == y_test))
377
python
# Import the necessary libraries
from bs4 import BeautifulSoup
import requests

# Make a request to the website
url = "https://example.com"
r = requests.get(url)

# Check if the request was successful (status code 200)
if r.status_code == 200:
    # Parse the HTML content of the page with BeautifulSoup
    soup = BeautifulSoup(r.text, "html.parser")
    
    # Use BeautifulSoup to find elements on the page
    title = soup.title
    print("Page title:", title)
    
    # Perform other actions based on your needs (e.g., extract data from specific HTML tags)
else:
    print(f"Request failed with status code {r.status_code}")
378
python
from selenium import webdriver

# Set up the webdriver
browser = webdriver.Chrome()

# Close the browser if it's already open (Boolean check)
if not browser.is_displayed():
    print("Browser is already open.")
else:
    print("Starting new browser instance...")

# Navigate to a website
url = "https://www.google.com"
browser.get(url)

# Perform some actions (Boolean checks and Selenium usage)
search_box = browser.find_element_by_name("q")
search_box.send_keys("Selenium Python", keys.SPACE)
search_button = browser.find_element_by_name("btnK")
search_button.click()

# Check if the search results are displayed (Boolean check)
if not browser.find_elements_by_xpath("//h3[@class='LC20lb']"):
    print("Search results not found.")
else:
    first_result = browser.find_element_by_xpath("//h3[@class='LC20lb']")
    print(f"First search result: {first_result.text}")

# Quit the browser instance
browser.quit()
379
python
import torch
import torch.nn as nn
import torch.optim as optim

# Define a simple 2-input XOR gate function
def xor(x):
    return torch.tensor([[1 if (i[0] and not i[1]) or (not i[0] and i[1]) else 0 for i in x]], dtype=torch.float32)

# Define a simple neural network for XOR gate using PyTorch
class SimpleNN(nn.Module):
    def __init__(self):
        super().__init__()
        self.fc1 = nn.Linear(2, 4)
        self.fc2 = nn.Linear(4, 1)
        self.sigmoid = nn.Sigmoid()

    def forward(self, x):
        x = torch.relu(self.fc1(x))
        x = self.sigmoid(self.fc2(x))
        return x

# Create a dataset for training the neural network
X = torch.tensor([[0, 0], [0, 1], [1, 0], [1, 1]], dtype=torch.float32)
Y = torch.tensor([[0], [1], [1], [0]], dtype=torch.float32)

# Create the neural network model and define the loss function and optimizer
model = SimpleNN()
criterion = nn.BCELoss()  # Binary Cross Entropy Loss
optimizer = optim.SGD(model.parameters(), lr=0.5)

# Train the model for 10 epochs
for epoch in range(1, 11):
    # Forward pass
    outputs = model(X)
    loss = criterion(outputs, Y)

    # Backward pass and optimization
    optimizer.zero_grad()
    loss.backward()
    optimizer.step()

    print('Epoch [{}/{}], Loss: {:.4f}'.format(epoch, 10, loss.item()))
380
python
from sqlalchemy import create_engine, Column, Integer, Boolean
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker

# Define Base class for SQLAlchemy ORM
Base = declarative_base()

class User(Base):
    __tablename__ = 'users'

    id = Column(Integer, primary_key=True)
    is_active = Column(Boolean, default=True)

# Create engine to connect to database
engine = create_engine('sqlite:///test.db', echo=False)

# Create table in the database if it doesn't exist
Base.metadata.create_all(engine)

# Define a session for interacting with the database
Session = sessionmaker(bind=engine)
session = Session()

# Add a new user to the database
new_user = User(id=1, is_active=True)
session.add(new_user)
session.commit()

# Update an existing user's status in the database
existing_user = session.query(User).filter_by(id=1).first()
if existing_user:
    existing_user.is_active = False
    session.commit()
else:
    print("User with id 1 not found")

# Fetch users from the database and check their statuses
users = session.query(User).all()
for user in users:
    print(f"User {user.id} is active: {user.is_active}")
381
python
def is_even(num):
    """
    Returns True if the given number is even, False otherwise.
    """
    return num % 2 == 0
382
python
# mymodule.py
def add_numbers(x, y):
    """Adds two numbers"""
    return x + y
383
python
# my_module.py

def is_positive(num):
    """Return True if the given number is positive."""
    return num > 0
384
python
import asyncio
import aiohttp

# Define a function to fetch data from a URL asynchronously
async def fetch(url):
    print(f"Fetching data from {url}")
    async with aiohttp.Client() as client:
        async with client.get(url) as response:
            data = await response.text()
            return data

# Define two URLs to fetch data from
urls = [
    "https://www.example1.com",
    "https://www.example2.com"
]

# Create a list of tasks to fetch data asynchronously
tasks = [asyncio.create_task(fetch(url)) for url in urls]

# Use asyncio's gather function to wait for all tasks to complete and collect their results
results = await asyncio.gather(*tasks)

# Print fetched data
for i, result in enumerate(results):
    print(f"\nData from URL {i+1}:")
    print(result)
385
python
import time
import multiprocessing as mp

def is_even(n):
    """Return True if number n is even."""
    return n % 2 == 0

def worker(task_queue, result_queue):
    """A worker process that checks for even numbers in a task queue."""
    while True:
        try:
            number = task_queue.get()
        except mp.queues.Empty:
            continue

        if is_even(number):
            result_queue.put(True)
        else:
            result_queue.put(False)

if __name__ == "__main__":
    # Set up queues and processes
    task_queue = mp.Queue()
    result_queue = mp.Queue()

    workers = 4  # Number of worker processes
    processes = [mp.Process(target=worker, args=(task_queue, result_queue)) for _ in range(workers)]

    for process in processes:
        process.start()

    # Generate and send tasks to the worker processes
    numbers = list(range(100))  # A list of numbers to check
    for number in numbers:
        task_queue.put(number)

    # Wait for all tasks to be processed
    for _ in range(len(numbers)):
        _ = result_queue.get()

    # Terminate the worker processes
    for process in processes:
        process.terminate()

# Print the results
print("Even numbers found:")
for number in numbers:
    if number % 2 == 0:
        print(number)
386
python
import threading
import time

def my_function(condition):
    while condition:
        print("Thread is running...")
        time.sleep(1)
        if not condition:
            break

condition = True

thread = threading.Thread(target=my_function, args=(condition,))
thread.start()

# Main thread work
print("Main thread is working...")
time.sleep(3)
condition = False

print("Setting condition to False in main thread.")
387
python
# Server.py
import socket

def start_server():
    host = ''
    port = 12345

    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    print("Socket created")

    try:
        s.bind((host, port))
    except socket.error as msg:
        print('Bind failed. Error Code :' + str(msg[0]) + ' Message :' + msg[1])
        sys.exit()

    print("Socket bind complete")
    print("Listening on", host, ":", port)
    s.listen(3)

    conn, addr = s.accept()
    print('Connected by', addr[0],':',addr[1])
    
    while True:
        data = conn.recv(1024).decode()
        if not data:
            break
        response = "True"
        conn.sendall(response.encode())
        
    print('Closed connection')
    s.close()

if __name__ == "__main__":
    start_server()
388
python
import tkinter as tk

# Create a Tk root window
root = tk.Tk()

# Set up a title and size for the window
root.title("Python Tkinter Example")
root.geometry("300x200")

# Define a function to handle the button click event
def button_clicked():
    message = "Hello, World!"
    label.config(text=message)

# Create a frame to hold the button and label
frame = tk.Frame(root)
frame.pack(pady=20)

# Create a button with the text "Click Me"
button = tk.Button(frame, text="Click Me", command=button_clicked)
button.pack(side=tk.LEFT)

# Create a label to display the message
label = tk.Label(frame, text="")
label.pack(side=tk.LEFT, padx=10)

# Start the Tk event loop
root.mainloop()
389
python
# Import required Pygame modules
import pygame
import sys

# Initialize Pygame
pygame.init()

# Set up some constants
WIDTH = 500
HEIGHT = 400
FPS = 60

# Create the game window
window = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption('Pygame Example')

# Set up the clock
clock = pygame.time.Clock()

# Create a variable to store whether or not the mouse button is pressed
mouse_pressed = False

# Main game loop
running = True
while running:
    # Get events
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        elif event.type == pygame.MOUSEBUTTONDOWN:
            mouse_pressed = True

    # Handle mouse press
    if mouse_pressed:
        message = "Mouse Button Down!"
        color = (255, 0, 0)
    else:
        message = "Click the Mouse Button"
        color = (0, 0, 255)

    # Fill the background with white
    window.fill((255, 255, 255))

    # Draw a text message on the screen
    large_text = pygame.font.SysFont(None, 70).render(message, True, color)
    window.blit(large_text, (100, 100))

    # Update the display
    pygame.display.flip()

    # Cap framerate
    clock.tick(FPS)

# Quit Pygame
pygame.quit()
sys.exit()
390
python
import sys
from PyQt5 import QtWidgets, QtGui, QtCore

class MyApp(QtWidgets.QMainWindow):
    def __init__(self):
        super().__init__()

        self.setWindowTitle("PyQt & True Example")

        self.central_widget = QtWidgets.QWidget(self)
        self.setCentralWidget(self.central_widget)

        layout = QtWidgets.QHBoxLayout(self.central_widget)

        self.button1 = QtWidgets.QPushButton("Button 1")
        self.button1.clicked.connect(lambda: print(f"Button 1 clicked: {self.button1.isChecked()}"))

        self.button2 = QtWidgets.QPushButton("Button 2")
        self.button2.clicked.connect(lambda: print(f"Button 2 clicked: {self.button2.isChecked()}"))

        layout.addWidget(self.button1)
        layout.addWidget(self.button2)

if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)

    window = MyApp()
    window.show()
    sys.exit(app.exec_())
391
python
import wx

class MyApp(wx.App):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        self.frame = MyFrame(None, title="My App")
        self.frame.Show()

        self.is_greetings_shown = True

    def OnInit(self):
        pass

class MyFrame(wx.Frame):
    def __init__(self, parent, title):
        super().__init__(parent=None, title=title, size=(300, 200))

        self.CreateStatusBar()

        self.button = wx.Button(self, label="Hide Greetings")
        self.button.Bind(wx.EVT_BUTTON, self.on_hide_greeting)
        self.button.Create(pos=(100, 50))

        self.status_text = "Hello World"

        if self.app.is_greetings_shown:
            self.ShowStatusBar()
            self.SetStatusText(self.status_text)

    def on_hide_greeting(self, event):
        self.app.is_greetings_shown = False
        self.HideStatusBar()
        self.Layout()

if __name__ == "__main__":
    app = MyApp(0)
    app.MainLoop()
392
python
# Conditional expression
if 5 > 3:
    print(True)

# Explicitly defined
my_bool = True
print(my_bool)
393
python
# Define a list of boolean values
boolean_list = [True, False, True, False, True]

# Print the original list
print("Original List:")
print(boolean_list)

# Using a for loop to iterate through each boolean value and print it along with its index
print("\nIterating through the list and printing each boolean value:")
for index, value in enumerate(boolean_list):
    print(f"Index: {index}, Value: {value}")

# Using a list comprehension to create a new list that contains only the True values
true_values = [value for value in boolean_list if value is True]

# Print the new list of True values
print("\nList of True values:")
print(true_values)

# Using the sum() function to count the number of True values in the original list
num_of_trues = sum(boolean_list)

# Print the number of True values in the original list
print(f"\nNumber of True values in the Original List: {num_of_trues}")
394
python
class Rectangle:
    def __init__(self, width, height):
        self.width = width
        self.height = height
        self.is_valid = True

    def area(self):
        return self.width * self.height

    def is_valid(self):
        """Return the validity status of the rectangle"""
        return self.is_valid

# Create some rectangles
r1 = Rectangle(2, 3)
r2 = Rectangle(-1, 5)

# Check if the first rectangle is valid
print(f"Rectangle r1 is valid: {r1.is_valid}")

# Set the validity of the second rectangle to False
r2.is_valid = False

# Check if the rectangles' validities
print("Rectangle r1 is valid:", r1.is_valid)
print("Rectangle r2 is valid:", r2.is_valid)
395
python
# Boolean expressions
x = 5 > 3 # Comparison operator, returns True
y = "apple" == "orange" # Equality operator, returns False
z = not x # Logical NOT operator, negates a boolean value

print(x) # Output: True
print(y) # Output: False
print(z) # Output: False when 'x' is True, otherwise True
396
python
class Animal:
    def __init__(self, name, is_mammal=True):
        self.name = name
        self.is_mammal = is_mammal

    def make_sound(self):
        if self.is_mammal:
            print("{} makes a sound!".format(self.name))
        else:
            raise TypeError("This is not a mammal.")

class Bird(Animal):
    def __init__(self, name):
        super().__init__(name, False)

class Dog(Animal):
    pass

animal1 = Animal("Lion")
animal1.make_sound() # Lion makes a sound!

animal2 = Bird("Parrot")
animal2.make_sound() # Parrot makes no sound, but it does not raise an error

animal3 = Dog("Rex")
animal3.make_sound() # Rex makes a sound!
397
python
class EncapsulatedClass:
    def __init__(self):
        self.__private_data = True

    def get_private_data(self):
        """Public method to access the private data"""
        return self.__private_data

    def set_private_data(self, value):
        """Public method to update the private data (encapsulation)"""
        if isinstance(value, bool):
            self.__private_data = value
        else:
            print("Error: The new value must be a boolean")

my_class = EncapsulatedClass()
print(my_class.get_private_data())  # prints: True
my_class.set_private_data(False)
print(my_class.get_private_data())  # prints: False
398
python
# Simple Calculator Function (Abstraction)
def add(x, y):
    """This function takes two arguments and returns their sum"""
    return x + y

def subtract(x, y):
    """This function takes two arguments and returns the difference between them"""
    return x - y

# Main Program
if __name__ == "__main__":
    num1 = 5
    num2 = 3

    print("The sum is: ", add(num1, num2))
    print("The difference is: ", subtract(num1, num2))

    # Using True as a condition in an if statement
    if (add(num1, num2) > 5):
        print("The sum of {} and {} is greater than 5".format(num1, num2))
    else:
        print("The sum of {} and {} is less than or equal to 5".format(num1, num2))
399
python
# Recursive function to find factorial of a given number
def recursive_function(n):
    # Base case: if n is 0, return 1 (factorial of 0 is 1)
    if n == 0:
        return True  # In this specific case, we could also return 1, but for the sake of the example, we'll use 'True' instead.
    
    # Recursive call: multiply 'n' with the result of recursively calling the function with 'n-1' as an argument
    else:
        return recursive_function(n - 1) * n

# Testing the recursive function with some inputs
number = 5
result = recursive_function(number)
print(f"The factorial of {number} is {result}")
400
python
# This program checks if a given number is positive, zero or negative
# and prints out a message accordingly
def check_number(n):
    """
    :param n: an integer number
    :return: None
    """
    if n > 0:
        print("The number", n, "is positive.")
    elif n == 0:
        print("The number", n, "is zero.")
    else:
        print("The number", n, "is negative.")

# The main part of the program
number = 5
check_number(number)  # This will print: "The number 5 is positive."

numbers = [-3, -1, 0, 2, 6]
for num in numbers:
    if num > 0:
        print("The number", num, "is positive.")
    elif num == 0:
        print("The number", num, "is zero.")
    else:
        print("The number", num, "is negative.")
        break  # exit the loop as soon as we find a negative number
else:
    print("All numbers in the list are non-negative.")
401
python
# Define a function that checks if a number is positive
def is_positive(num):
    """
    This function checks if a given number is positive.
    :param num: The number to check.
    :return: `True` if the number is positive, `False` otherwise.
    """
    return num > 0

# Use the function with some numbers
num1 = 5
num2 = -3
num3 = 0

print(f"{num1} is positive? {is_positive(num1)}") # True
print(f"{num2} is positive? {is_positive(num2)}") # False
print(f"{num3} is positive? {is_positive(num3)}") # False

# Use the `True` boolean value directly
boolean_value = True
print(type(boolean_value)) # <class 'bool'>
print(boolean_value) # True
402
python
class MyClass:
    def __init__(self):
        self.my_attribute = 42

    @property
    def my_property(self):
        return self.my_attribute * 2

if __name__ == "__main__":
    obj = MyClass()

# Check if 'MyClass' has an attribute named 'my_attribute' using hasattr
print("Has attribute 'my_attribute':", hasattr(MyClass, "my_attribute"))

# Create an instance of 'MyClass' and check for presence of methods and attributes
print("\nInstance 'obj' has method 'my_property':", hasattr(obj, "my_property"))
print("Instance 'obj' has attribute 'my_attribute':", hasattr(obj, "my_attribute"))

# Check if the method 'my_property' of 'MyClass' is a method using ismethod
print("\n'MyClass.my_property' is a method:", ismethod(getattr(MyClass, "my_property")))
403
python
# Define a variable 'age' with an initial value of 18
age = 18

# A Boolean expression checking if age is greater than or equal to 18
is_adult = (age >= 18)

print("Is the person an adult?")
print(f"Answer: {is_adult}")

if is_adult:
    print("Access granted! You can vote and drive.")
else:
    print("Sorry, you're not old enough for those privileges yet.")

# Now we change the value of age to 21
age = 21
is_adult = (age >= 18)

print("\nIs the person an adult now?")
print(f"Answer: {is_adult}")
404
python
# Assigning boolean values to variables
is_raining = False
is_sunny = True

print("Is it raining?", is_raining)
print("Is it sunny?", is_sunny)

# Using boolean values in conditional statements
if not is_raining:
    print("It's a great day to go out!")
else:
    print("Bring an umbrella today.")

# Comparing two boolean expressions with 'and' and 'or' operators
condition1 = True
condition2 = False

print(condition1 and condition2)  # Output: False
print(condition1 or condition2)   # Output: True
405
python
# A function for addition operation
def add(num1, num2, is_sum=True):
    """
    This function takes two numbers as arguments and performs their addition based on given boolean flag 'is_sum'
    :param num1: first number
    :param num2: second number
    :param is_sum: a boolean value to indicate if we want to perform the sum or not (default: True)
    :return: the result of addition
    """
    if is_sum:
        result = num1 + num2
        print(f"The sum of {num1} and {num2} is {result}")
    else:
        print("Performing an operation other than sum")

# Testing the function with different scenarios
add(5, 3)                       # Performs addition
add(7, 8, False)                # Does not perform addition and prints a message instead
406
python
# Define a function that checks if a given number is positive or not
def is_positive(num):
  # Use a conditional statement to check if the number is greater than zero
  # If it is, return the True boolean value
  # Otherwise, return False and an error message
  if num > 0:
    return True
  else:
    print("Error: The given number is not positive.")
    return False

# Test the function with some numbers
num1 = 5
num2 = -3
num3 = 0

# Use the is_positive function and assignment operator to assign the result (True or False) to a variable
result1 = is_positive(num1)
result2 = is_positive(num2)
result3 = is_positive(num3)

# Print out the results for each number
print("The number {0} is positive: {1}" .format(num1, result1))
print("The number {0} is positive: {1}" .format(num2, result2))
print("The number {0} is positive: {1}" .format(num3, result3))
407
python
def is_positive(num):
    """
    This function checks if given number is positive, returns True if it is, otherwise False
    """
    if num > 0:
        return True
    else:
        return False

# Testing the function
num = int(input("Enter a number: "))
result = is_positive(num)
print(f"The number {num} is {'positive' if result else 'non-positive'}.")
408
python
# Define some variables
num = 10
is_positive = True

# Use if statement with a single condition
if num > 0:
    print("The number is positive")

# Use if-else statement with a single condition
if is_positive:
    print("The variable is set to True")
else:
    print("The variable is set to False or another falsy value")

# Use if-elif-else statement with multiple conditions
if num > 0:
    print("The number is positive")
elif num == 0:
    print("The number is zero")
else:
    print("The number is negative")
409
python
# Initialize a variable with a value less than 10
num = 5

# Use while loop to count numbers from 0 to 9 (including current number)
while num <= 9:
    print(num)
    num += 1

# Print a message when the condition is no longer met
print("The counting has reached 10.")

# Set a boolean variable to True and use while loop to demonstrate its usage
is_even = True
number = 0

while is_even:
    print(number)
    number += 2
    if number > 10:
        is_even = False
410
python
x = 10
if x > 5:
    print("x is greater than 5")
else:
    print("x is less than or equal to 5")

# Output: x is greater than 5
411
python
# Define some variables
num1 = 10
num2 = 20
is_even = num1 % 2 == 0

print("Num1 is even?: ", is_even)

# Using True in if statements
if True:
    print("This block will always execute")

# Boolean expressions
print("Num1 is greater than Num2: ", (num1 > num2))
print("Absolut value of Num1 is greater than 10 and Num2 is less than 5: ", ((abs(num1) > 10) and (num2 < 5)))
print("Num1 is even or Num2 is odd: ", ((num1 % 2 == 0) or (num2 % 2 != 0)))
412
python
# This is a single-line comment

# Assigning True to a variable
is_sun_out = True

if is_sun_out:
    print("The sun is out today!")
else:
    print("It's not sunny outside.")

# Using True in an if statement condition
if 5 > 3 or True:
    print("Condition is met, printing message.")
413
python
# This is a comment - anything after the '#' symbol is ignored by the interpreter

def is_positive(number):
    # The function checks if the given number is positive
    if number > 0:
        return True
    else:
        return False

number = 5
if is_positive(number):
    print("The number is positive.")
else:
    print("The number is not positive.")

# Notice how the indentation of the print statements aligns with 'if' and 'else' keywords
414
python
# This is a simple Python program that uses the math module

# Define a function to calculate the square of a number
def square(number):
    # Check if the input number is non-negative
    if number >= 0:
        result = number * number
        print("The square of {} is {}.".format(number, result))
        return True
    else:
        print("Invalid input! Please enter a non-negative number.")
        return False

# Import the math module for using its sqrt function
import math

# Take user input and check if it's a valid square number
num = int(input("Enter a number: "))
square_root = math.sqrt(num)
if square(num):
    # If the number is non-negative, calculate and print its square
    print("The square of {} is {}.".format(num, num * num))
else:
    print("Invalid input!")

# Calculate and print the square root of given number
print("The square root of {} is {}.".format(num, square_root))
415
python
import math

# Using the sqrt() function from math package
num = 16.0
square_root = math.sqrt(num)

print("The square root of {} is {}".format(num, square_root))

true_value = True
another_boolean = False

# Comparing two boolean values using and, or and not operators
print("True and True is: ", (true_value and true_value))
print("True and False is: ", (true_value and another_boolean))
print("False and False is: ", (another_boolean and another_boolean))
print("Not of True is: ", not(true_value))
print("Not of False is: ", not(another_boolean))
416
python
# Boolean values
false_value = False
true_value = True

# Comparisons that result in boolean values
x = 5
y = 10
z = 3

# Comparison using '==' (equal to) operator
is_x_less_than_y = x < y
print(f"Is {x} less than {y}? -> Answer: {is_x_less_than_y}")

# Comparison using '<' (less than) operator
is_z_positive = z > 0
print(f"Is {z} positive? -> Answer: {is_z_positive}")

# Logical operations (AND, OR, NOT) that result in boolean values
logical_and = True and False
logical_or = True or False
logical_not = not True

print(f"Logical AND: {logical_and}")
print(f"Logical OR: {logical_or}")
print(f"Logical NOT: {logical_not}")
417
python
# Boolean value: True
bool_value = True
print("Is the boolean value true? ", bool_value)

# Namespace: Function with local variables
def square(number):
    # Local variable: result
    result = number ** 2
    return result

print("Enter a number to calculate its square:")
input_number = int(input())
square_result = square(input_number)
print("The square of", input_number, "is:", square_result)
418
python
# Assigning a boolean variable with the value True
is_sunny = True

if is_sunny:
    print("It's sunny today!")
else:
    print("It's not sunny today.")

# Using Python interpreter to execute the script from command line or IDLE
# Save this code in a file named 'example.py' and run it with the command `python example.py`
419
python
# This is a Python program that uses the True boolean value

def main():
    # Assigning True to a variable
    my_variable = True

    # Using an if statement with a condition that always evaluates to True
    if my_variable:
        print("The condition is True")

    # Another example using logical operators
    another_variable = 5 > 3
    if another_variable and my_variable:
        print("Both conditions are True")

if __name__ == "__main__":
    main()
420
python
# Using True and False values
boolean_value_1 = True
boolean_value_2 = False

print(f"boolean_value_1 is {boolean_value_1}")
print(f"boolean_value_2 is {boolean_value_2}")

# Using boolean operators: AND (&& in some other languages)
bool_expression_1 = boolean_value_1 and boolean_value_2
print(f"bool_expression_1 is {bool_expression_1}")

# The following expression will be False because at least one of the conditions is False
bool_expression_2 = boolean_value_1 or boolean_value_2
print(f"bool_expression_2 is {bool_expression_2}")

# Using NOT operator (~ in some other languages)
negated_boolean_value = not boolean_value_1
print(f"negated_boolean_value is {negated_boolean_value}")
421
python
# Assigning Boolean values to variables
bool_var_1 = True
bool_var_2 = False

print("bool_var_1 is:", bool_var_1)
print("bool_var_2 is:", bool_var_2)

# Using Boolean values in conditional statements
if 5 > 3:
    print("Five is greater than three")
elif bool_var_1:
    print("Some condition is true")
else:
    print("Both five is not greater than three and some condition is false")

# Using Boolean values in logical operations
bool_var_3 = (5 > 3) and (2 + 2 == 4)
print("( Five is greater than three ) and ( Two plus two is equal to four ) is:", bool_var_3)

# Using Boolean values as input to functions
def print_message(is_positive):
    if is_positive:
        print("The number is positive")
    else:
        print("The number is negative or zero")

print_message(-1)  # Output: The number is negative
print_message(3)   # Output: The number is positive
422
python
# Define a function to add two numbers
def add_numbers(num1, num2):
    # Intentionally add the second number to the first one twice
    result = num1 + num2 + num2
    return result

# Get user input for the first and second numbers
num1 = int(input("Enter the first number: "))
num2 = int(input("Enter the second number: "))

# Call the add_numbers function with the provided numbers
try:
    sum = add_numbers(num1, num2)
except Exception as e:
    print("An error occurred:", e)
else:
    print("The sum of", num1, "and", num2, "is:", sum)

# Debugging: Check if the result is what we expect
if sum != (num1 + num2):
    print("Whoops! There seems to be an error in our add_numbers function.")
423
python
# Define a function that returns True if a number is even, False otherwise
def is_even(number):
    return number % 2 == 0

# Test some values
print("Is 2 even? ", is_even(2))   # True
print("Is 3 even? ", is_even(3))   # False
print("Is 4 even? ", is_even(4))   # True
print("Is 5 even? ", is_even(5))   # False

# Another example: testing if a string starts with 'Py'
def startswith_py(string):
    return string.startswith('Py')

# Test some values
print("Does \"Python\" start with 'Py'? ", startswith_py("Python"))  # True
print("Does \"JavaScript\" start with 'Py'? ", startswith_py("JavaScript"))  # False
424
python
# Example using True in Python

def is_positive(num):
  return num > 0

number = -5
if is_positive(number):
  print("The number is positive")
else:
  print("The number is not positive")

# Output: The number is not positive
425
python
# Inside app.py:
import config

def hello():
    if config.IS_PRODUCTION:
        return "Hello, World!"
    else:
        return "Hello and welcome to development mode!"

if __name__ == "__main__":
    print(hello())
426
python
def divide(x, y):
    try:
        result = x / y
    except ZeroDivisionError:
        print("Error: Division by zero is not allowed.")
        result = None
    else:
        print(f"The result of {x} divided by {y} is: {result}")

if __name__ == "__main__":
    num1 = 10
    num2 = 5
    divide(num1, num2)

    num1 = 10
    num2 = 0
    divide(num1, num2)
427
python
def divide(dividend, divisor):
    """This function divides two numbers."""

    try:
        result = dividend / divisor
        print(f"Result: {result}")
    except ZeroDivisionError as e:
        print(e)
        raise ValueError("Error: Division by zero is not allowed.")

# Input values
num1 = 10
num2 = 5

# Calling the function
divide(num1, num2)

# Calling the function with an error condition
try:
    divide(num1, 0)
except Exception as e:
    print("Error:", e)
428
python
def divide(x, y):
    try:
        result = x / y
        return result
    except ZeroDivisionError:
        print("Error: Division by zero is not allowed.")
        return False

# Test cases
print(divide(5, 2))  # Output: 2.5
print(divide(10, 3))  # Output: 3.3333333333333335
print(divide(5, 0))  # Output: Error: Division by zero is not allowed.

# Another example using True value
def check_even(num):
    try:
        return num % 2 == 0
    except TypeError:
        print("Error: The input must be an integer.")
        return False

print(check_even(6))  # Output: True
print(check_even('six'))  # Output: Error: The input must be an integer.
429
python
import logging

# Configure logging
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
console_handler = logging.StreamHandler()
console_handler.setFormatter(formatter)
logger.addHandler(console_ handler)

# Use True boolean value
is_even = lambda n: True if n % 2 == 0 else False
num = 4
if is_even(num):
    logger.info("The given number {} is even".format(num))
else:
    logger.warning("The given number {} is odd".format(num))

# Use logging to record some events
logger.debug("Debug message")
logger.info("Info message")
logger.warning("Warning message")
logger.error("Error message")
logger.critical("Critical message")
430
python
# Define a function that calculates the square of a number
def calculate_square(number):
    return number ** 2

# Test the calculation with some values
value1 = 5
result1 = calculate_square(value1)
print(f"The square of {value1} is {result1}")

value2 = -3
result2 = calculate_square(value2)
print(f"The square of {value2} is {result2}")

# Use assert statement to test a condition
assert value1 > 0, "Value must be positive"
print("Assertion with positive value passed")

try:
    # This condition will fail and raise an AssertionError
    assert value2 < 0, "Value must be negative"
except AssertionError as error:
    print(f"Assertion with negative value failed: {error}")
431
python
def check_age(age):
 if age >= 18:
 return True
 else:
 return False

print(check_age(20))
print(check_age(15))
432
python
# Define a function that returns True if the given number is even, otherwise False
def is_even(number):
    return number % 2 == 0

# Test some numbers
print(is_even(4))   # prints: True
print(is_even(3))   # prints: False
433
python
# Define a function that returns True if given number is odd
def is_odd(number):
    return number % 2 != 0

# List of numbers for testing
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]

# Filter out odd numbers from the list
odds = list(filter(is_odd, numbers))

# Print the result
print("Odd numbers: ", odds)
434
python
import time
import cProfile

def fibonacci(n):
"""Compute the nth Fibonacci number."""
if n <= 1:
return n
else:
return fibonacci(n-1) + fibonacci(n-2)

if __name__ == "__main__":
n = 40
start_time = time.time()
result = fibonacci(n)
elapsed_time = time.time() - start_time
print(f"The {n}th Fibonacci number is: {result}")
print(f"Computation took {elapsed_time:.6f} seconds.")

cProfile.run('fibonacci(40)')
435
python
# Define some variables and evaluate expressions
is_sunny = False
is_raining = True
has_umbrella = is_raining

if not is_sunny and has_umbrella:
    print("Go outside, it's raining!")
else:
    print("It's a beautiful day!")
436
python
# Using True as a boolean value in Python

def my_function():
    some_condition = False

    # If some condition is met, the following code will be executed
    if some_condition:
        print("This condition is true.")
        some_other_variable = True
        print("The variable 'some_other_variable' now has the value:", some_other_variable)
    else:
        print("This condition is false.")

my_function()
437
python
# Define some variables
number = 10
is_even = number % 2 == 0

# Use conditional statements with `True` and `False` (booleans)
if is_even:
    print("The number is even.")
else:
    print("The number is odd.")

# Demonstrate that the result of a comparison is a boolean value
print(type(is_even))  # Output: <class 'bool'>
438
python
# This is a simple Python script that checks if a user is old enough to install packages using pip

age = int(input("Enter your age: "))
is_old_enough = age >= 18

if is_old_enough:
    print("You're old enough to install packages using pip!")
    # Install Flask package as an example
    import subprocess
    try:
        subprocess.check_call(["pip", "install", "-u", "Flask"])
        print("Flask has been installed successfully.")
    except subprocess.CalledProcessError as e:
        print(f"Failed to install Flask, error message: {e}")
else:
    print("You're not old enough to install packages using pip.")
439
python
import subprocess

# Using True as a boolean value
is_admin = True
if not is_admin:
    print("You don't have administrative privileges!")

# Running pip command using subprocess
def run_pip_command(command):
    process = subprocess.Popen(["pip", command], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    output, error = process.communicate()

    if error:
        print("Error occurred while running pip command!")
        print(error)
    else:
        print("pip command executed successfully.")
        print(output.decode())

# Install numpy package using pip
run_pip_command("install numpy")
440
python
# Example of using True in Python

x = 10
y = 20
z = "Apple"

if x > y:
    print("x is greater than y")
elif x < y:
    print("x is less than y")
else:
    print("x is equal to y")
    
# Here's a boolean expression using True and not
bool_expression = (x > y) or (not(z == "Banana"))
if bool_expression:
    print("The condition is true")
else:
    print("The condition is false")
441
python
import os
import sys

def create_project(project_name):
    # Create a new directory for the project and change to it
    project_path = os.path.abspath(os.path.join(os.getcwd(), project_name))
    os.makedirs(project_path, exist_ok=True)
    os.chdir(project_path)

    # Create a new virtual environment
    venv_path = os.path.join(project_path, '.venv')
    if not os.path.exists(venv_path):
        print("Creating virtual environment...")
        os.system("virtualenv .venv")

    # Activate the virtual environment
    activate_this = sys.executable + ' ' + os.path.join('.' ,'venv','bin','activate')
    with open(os.devnull, 'wb') as devnull:
        os.system(f"{activate_this} < {devnull}")

    # Install a package (for example requests) within the environment
    print("Installing packages...")
    os.system("pip install requests")

    print(f"Project created successfully in '{project_path}'.")
    os.chdir('..')

create_project('my_new_project')
442
python
# This script shows how to create a new Python virtual environment using venv,
# and then run a simple Python program within that environment.

import os
import sys

# Create a new virtual environment
print("Creating new virtual environment...")
venv_path = "my_project_env"
if not os.path.exists(venv_path):
    venv.create(sys.argv[0], venv_path, with_pip=True)
os.chdir(venv_path)

# Activate the virtual environment
print("Activating virtual environment...")
if sys.version_info >= (3, 3):
    import site

    site.activate(venv_path)
else:
    activate = os.path.join(venv_path, "bin", "activate")
    os.system(f"{activate} 'bash'")
    
# Now we can install and use packages within this environment
print("Installing requests package...")
try:
    import pip
    pip.main(["install", "requests"])
except Exception as e:
    print(f"Error installing requests: {e}")

# Demonstrate using True value
x = 10
y = 20
z = x + y
print("x = {}".format(x))
print("y = {}".format(y))
print("z = {}".format(z))
print("Is z greater than 15? {}".format(True if z > 15 else False))

# Deactivate the virtual environment
print("Deactivating virtual environment...")
deactivate = os.path.join(venv_path, "bin", "deactivate")
os.system(f"{deactivate}")
443
python
# app.py
from flask import Flask

app = Flask(__name__)

@app.route('/')
def home():
    return 'Hello World!'

if __name__ == '__main__':
    app.run(debug=True)
444
python
# A simple Python program using True

x = 10
y = 20
z = x + y

if z > 20:
    print("The sum is greater than 20.")
else:
    print("The sum is less than or equal to 20.")

# The output will be "The sum is greater than 20." because 10 + 20 = 30.
445
python
def main():
    is_valid_age = True
    if not is_valid_age:
        print("You are not old enough.")
    else:
        print("Welcome!")
        # Add other code here as needed.

if __name__ == "__main__":
    main()
446
python
import os

# Define the name of the environment variable to check
env_variable_name = "MYVAR"

if os.environ.get(env_variable_name, False):
    # If the environment variable is defined, print a message
    value = os.environ[env_variable_name]
    print(f"Environment variable '{env_variable_name}' is set to '{value}'")
else:
    # If the environment variable is not defined or empty, print a different message
    print(f"Environment variable '{env_variable_name}' is not set")

# Print a message showing that 'True' is equivalent to any non-empty value
print("True if any non-empty string:")
if os.environ.get(env_variable_name, True):
    print(f"'{os.environ.get(env_variable_name, '')}' is truthy")
else:
    print("'None' or an empty string is falsy")
447
python
import subprocess

# Define a function that checks if a file exists and returns True or False
def file_exists(file_path):
    return subprocess.call([sys.executable, '-c', '"import os, print(os.path.isfile(%r))"' % file_path], shell=True) == 0

# Check if a file exists and print a message accordingly
if file_exists("/path/to/your/file.txt"):
    print("File exists!")
else:
    print("File does not exist.")

# Use shell to run a command and store the output in a variable
result = subprocess.run(["ls", "-l"], capture_output=True, text=True, shell=True)
print(f"Output of 'ls -l' command: {result.stdout}")
448
python
# Assigning boolean values to variables
is_sunny = False
is_raining = True

print("Is it sunny? ", is_sunny)
print("Is it raining? ", is_raining)

# Using boolean values in expressions and conditions
if not is_sunny:
    print("Take an umbrella, it's raining!")
else:
    print("Enjoy the sunny day!")

# Boolean operators
print(2 > 1 and 3 > 2)  # And operator (both conditions must be true)
print(2 < 1 or 3 > 2)   # Or operator (at least one condition must be true)
print(not(2 > 1))       # Not operator (negates a boolean value)
0
python
# Assigning Boolean values to variables
is_rainy = False
has_key = True

# Using Boolean values in conditional statements
if has_key:
    print("You have a key!")
else:
    print("You don't have a key.")

# Using Boolean values in logical operations
result1 = True and False
print(f"Result 1: {result1}") # Output: False
result2 = True or False
print(f"Result 2: {result2}") # Output: True
result3 = not True
print(f"Result 3: {result3}") # Output: False
1
python
# This program checks if a given number is even or odd.
def is_even(number):
    return number % 2 == 0

number = 5
result = is_even(number)
print(f"{number} is {\"even\" if result else \"odd\"}")
2
python
import subprocess

# Boolean variable definition
is_run = True

if is_run:
    # Using subprocess to run batch file
    subprocess.call('path_to_your_batchfile.bat')
else:
    print("Batch file not executed")
3
python
import threading
import time

def func(id):
    print("Function {} starting".format(id))
    time.sleep(5)
    print("Function {} ended".format(id))

if __name__ == "__main__":
    threads = []

    for i in range(3):
        t = threading.Thread(target=func, args=(i,))
        threads.append(t)
        t.start()

    for t in threads:
        t.join()
4
python
import threading
import time

def task(name):
    print(f"{name} task started")
    time.sleep(3)
    print(f"{name} task completed")

if __name__ == "__main__":
    # Create two threads for two tasks
    thread1 = threading.Thread(target=task, args=("Task 1",))
    thread2 = threading.Thread(target=task, args=("Task 2",))

    # Start both threads
    thread1.start()
    thread2.start()

    # Wait for both threads to complete before exiting the program
    thread1.join()
    thread2.join()

    print("All tasks completed")
5
python
import threading

def print_numbers():
    """Print numbers from 1 to 5"""
    for i in range(1, 6):
        print("Thread-1: ", i)

def print_letters():
    """Print letters a to e"""
    for letter in "abcde":
        print("Thread-2: ", letter)

if __name__ == "__main__":
    # Create threads
    thread1 = threading.Thread(target=print_numbers)
    thread2 = threading.Thread(target=print_letters)

    # Start threads
    thread1.start()
    thread2.start()

    # Wait for threads to finish before exiting the program
    thread1.join()
    thread2.join()

# It's important to note that Python GIL (Global Interpreter Lock) doesn't allow multiple native threads to execute Python code at once,
# so in this example, it might not look like true multithreading as the tasks are being executed serially with some short time gaps between them.
6
python
# Define some variables
x = 10
y = 20
z = "apple"

# Boolean expressions using comparison operators
is_x_greater_than_y = x > y
is_z_equal_to_string_'orange'_instead_of_'apple'_ = z == "orange"

# Print the results
print("x is greater than y: ", is_x_greater_than_y)
print("z is equal to 'orange': ", is_z_equal_to_string_'orange'_instead_of_'apple'_")

# Boolean logic using AND, OR and NOT operators
is_x_even = x % 2 == 0
is_y_odd = y % 2 != 0
are_x_and_y_different_numbers = is_x_even and not (is_y_even)

# Print the results
print("x is even: ", is_x_even)
print("y is odd: ", is_y_odd)
print("x and y are different numbers: ", are_x_and_y_different_numbers)
7
python
import threading

# Shared variable to be accessed by multiple threads
counter = 0

def increment_counter(name):
    global counter
    
    for i in range(1000):
        # Simulate some work here before the actual increment
        # e.g., some heavy computation or I/O operation
        
        # Try to increment the counter
        try:
            current_value = counter
            counter = current_value + 1
            print(f"Thread {name} incremented counter from {current_value} to {counter}")
        except Exception as e:
            print(f"Thread {name}: Error while incrementing counter - {e}")
            
# Create and start two threads
thread_one = threading.Thread(target=increment_counter, args=(1,))
thread_two = threading.Thread(target=increment_counter, args=(2,))

# Start both threads
thread_one.start()
thread_two.start()

# Wait for both threads to finish their execution
thread_one.join()
thread_two.join()

print("Final counter value: ", counter)
8
python
x = 5
y = 10

if x > y:
    print("x is greater than y")
else:
    print("x is less than or equal to y")

# Output: x is less than or equal to y
9
python
import os
import contextlib

# Function to open a file with specific mode and handle exceptions
def open_file(filename, mode):
    try:
        file = open(filename, mode)
        yield file
    finally:
        file.close()

# Decorator @contextmanager to create a context manager
@contextlib.contextmanager
def resource(value):
    try:
        yield value
    finally:
        if isinstance(value, (os.BufferedReader, os.TextIO)):
            value.close()

# Function to read lines from file
def read_lines(filename):
    with resource(open_file(filename, "r")) as file:
        for line in file:
            print(line)

if __name__ == "__main__":
    filename = "example.txt"
    if os.path.exists(filename):
        read_lines(filename)
    else:
        print(f"File '{filename}' does not exist.")
10
python
import threading
import time

# Create a boolean variable and a lock
shared_data = True
lock = threading.Lock()

def worker(num):
    """Function to be executed by each worker thread."""

    # Acquire the lock before accessing shared data
    with lock:
        if not shared_data:
            print(f"Thread {num}: Data is already processed.")
            return
        shared_data = False

    print(f"Thread {num}: Processing data...")
    time.sleep(2)
    print(f"Thread {num}: Data processing completed.")

if __name__ == "__main__":
    threads = [threading.Thread(target=worker, args=(i,)) for i in range(5)]

    # Start all worker threads
    for thread in threads:
        thread.start()

    # Wait for all threads to complete
    for thread in threads:
        thread.join()
11
python
import threading
import time

# Initialize a lock and a condition variable
lock = threading.Lock()
cond_var = threading.Condition()

# Define a shared variable (for demonstration purposes)
data = 0

def producer(num):
    """ Producer function that sets the shared data """

    # Wait if the lock is not free, then acquire it
    while not lock.acquire():
        print(f"Producer {threading.current_thread().name} waiting for lock.")
        time.sleep(0.1)

    # Produce data and print the message
    print(f"Producer {threading.current_thread().name}: Setting shared data to {num}")
    global data
    data = num

    # Notify all waiting consumers that data is available
    cond_var.notify()

    # Release the lock
    lock.release()

def consumer(num):
    """ Consumer function that reads the shared data """

    while True:
        # Wait for the lock and condition to be available
        lock.acquire()
        cond_var.wait()

        if data is not None:
            print(f"Consumer {threading.current_thread().name}: Consumed data = {data}")
            global data
            data = None

        # Release the lock and condition
        lock.release()

if __name__ == "__main__":
    producer_thread = threading.Thread(target=producer, args=(1,))
    consumer_thread = threading.Thread(target=consumer)

    producer_thread.start()
    consumer_thread.start()

    # Join threads to the main program execution
    producer_thread.join()
    consumer_thread.join()
12
python
# An example using True as a condition in a for loop
n = 10
for i in range(n):
    if i % 2 == 0:  # If the current number is even, print it
        print(i)
13
python
import contextlib
import sys

# A simple context manager that prints messages when entered and exited
@contextlib.contextmanager
def print_context_manager(msg):
    print(f'Entering context manager: {msg}')
    try:
        yield
    finally:
        print(f'Exiting context manager: {msg}')

if __name__ == "__main__":
    with print_context_manager('Example'):
        if True:  # This condition is always true
            print('This statement is always executed inside the context manager')

        raise Exception('An error occurred')  # This will be caught and handled by the with statement
14
python
import sys
import gc
import time

# Function to get current memory usage
def get_memory_usage():
    process = sys.argv[-1]
    py_stats = gc.get_stats()
    rss = sum(stat['heap_used_in_bytes'] for stat in py_stats if 'heap' in stat)
    return rss, process

# Create a large list of True values
def create_large_list():
    return [True] * 1000000

if __name__ == "__main__":
    # Initialize the large list
    large_list = create_large_list()
    
    print("List created. Current memory usage:")
    current_memory, current_process = get_memory_usage()
    print(f"Process '{current_process}': {current_memory/1024/1024} MB")

    # Let the garbage collector run
    gc.collect()

    print("\nGarbage collection finished. Current memory usage:")
    after_memory, _ = get_memory_usage()
    print(f"Process '{current_process}': {after_memory/1024/1024} MB")
15
python
# Using True
boolean_variable = True
if boolean_variable:
    print("This statement will be executed.")

# Memory Management in Python
# Python automatically manages memory through a process called Garbage Collection.
# When an object is no longer being referenced by any variable, it becomes eligible for garbage collection.
# The Python interpreter periodically checks the memory and frees up any memory occupied by objects that are no longer in use.

# Here's an example showing Python's memory management:
class MyClass:
    def __init__(self):
        self.data = [i for i in range(10000)]
        
my_object = MyClass()  # This creates a new instance of MyClass and allocates memory for the list.
del my_object             # Once we're done with 'my_object', we delete it and make the memory it occupied eligible for garbage collection.
# The Python interpreter will eventually free up the memory used by 'my_object'.
17
python
# Define some variables with boolean values
boolean_variable_1 = True
boolean_variable_2 = False

# Use boolean values in if conditions
if boolean_variable_1:
    print("Boolean variable 1 is True")
else:
    print("Boolean variable 1 is False")

if not boolean_variable_2:
    print("Boolean variable 2 is False and its negation is True")
else:
    print("Boolean variable 2 is True and its negation is False")

# Use the * operator for multiplication and repetition
number = 5
result_1 = number * 3
print(f"{number} multiplied by 3 equals {result_1}")

string = "Python"
repeated_string = "*" * len(string)
print(f"String '{string}' repeated {len(string)} times equals '{repeated_string}'")
18
python
# Define some variables
num1 = 10
num2 = 3

# Check if a condition is true using the Boolean value True
if num1 > num2:
    greater_number = "num1"
    print(f"{greater_number} is greater.")
else:
    greater_number = "num2"
    print(f"{greater_number} is greater.")

# Perform integer division using the / operator
result = num1 / num2

print("Integer Division Result:")
print(result)

# Check if the result is greater than 3 using the Boolean value True
if result > 3:
    print("The result is greater than 3.")
else:
    print("The result is not greater than 3.")
19
python
# Define two numbers
dividend = 17
divisor = 3

# Perform floor division using // operator
quotient = dividend // divisor

# Print the boolean value of the condition: if quotient is not equal to zero
print("Is the quotient zero? ", bool(quotient == 0))

# Print the result of floor division and the calculated quotient
print(f"The result of floor division is {dividend} // {divisor} = {dividend // divisor}")
print(f"The quotient is {quotient}")
20
python
# Define a function to check if a number is even or odd
def is_even(number):
    # If the number is divisible by 2 with no remainder, it's an even number
    return number % 2 == 0

# Test some numbers and print the results
numbers = [1, 2, 3, 4, 5]
for number in numbers:
    if is_even(number):
        result = "even"
    else:
        result = "odd"
        
    print(f"{number} is {result}")
21
python
# Define a function to calculate base raised to the power of exponent
def power(base, exponent):
    result = base ** exponent
    return result

# Base and exponent values for demonstration
base = 2
exponent = 3

# Calculate the base raised to the power of the exponent using the power function
raised_to_power = power(base, exponent)

# Print the result
print("{} raised to the power of {} is:".format(base, exponent), raised_to_power)

# Use True in a simple conditional statement
if True:
    print("This statement will always be true and therefore execute.")

# Define a number and check if it's positive
number = 5

if number > 0:
    print("{} is a positive number".format(number))
else:
    print("{} is a non-positive number".format(number))
22
python
# Assigning Boolean values to variables
boolean_variable_1 = True
boolean_variable_2 = False

print("boolean_variable_1 is:", boolean_variable_1)
print("boolean_variable_2 is:", boolean_variable_2)

# Comparison using equals (==) operator and checking equality of variables
comparison_result = boolean_variable_1 == boolean_variable_2

print("boolean_variable_1 is equal to boolean_variable_2:", comparison_result)

# Swapping values of two variables using assignment operator
if comparison_result:
    boolean_variable_1, boolean_variable_2 = boolean_variable_2, boolean_variable_1
else:
    pass  # No need for swapping if they are already equal

print("Swapped boolean_variable_1 is now:", boolean_variable_1)
print("Swapped boolean_variable_2 is now:", boolean_variable_2)
23
python
# Assigning variables
x = 10
y = 20
z = True

# Comparison using == (equality) operator
if x == y:
    print("x and y are equal")
else:
    print("x and y are not equal")

# Comparison using '=' (assignment) operator will always be False in this context
if x = y:
    print("This line will never be executed as '=' is used for assignment, not comparison.")

# Comparison using True value
if True:
    print("The boolean expression is true")
else:
    print("The boolean expression is false")

# Comparison between variables and True using == operator
if x == True:
    print(f"x equals the boolean value True.")
else:
    print(f"x does not equal the boolean value True.")

# Comparison between variables and True using and operator
if x or True:
    print("Either x is true or True is true, so this expression is true")
else:
    print("Both x and True are false, so this expression is false")
24
python
# Define some variables
number1 = 10
number2 = 20

# Check if number1 is not equal to number2 using the not-equal operator !=
if number1 != number2:
    print("Number 1 and Number 2 are not equal.")
else:
    print("Number 1 is equal to Number 2.")

# Use Boolean value True in a conditional statement
if True:
    print("This condition is always true.")

# Combine both concepts in a more complex condition
if number1 != 5 and number2 > 10:
    print("Number 1 is not equal to 5 and Number 2 is greater than 10.")
25
python
# Define two variables with integer values
num1 = 5
num2 = 7

# Check if num1 is less than num2 using the '<' operator
if num1 < num2:
    print(f"{num1} is less than {num2}")
else:
    print(f"{num1} is not less than {num2}.")

# Use Boolean value True in a conditional statement
is_positive = True
if is_positive:
    print("The given boolean value is TRUE")
else:
    print("The given boolean value is FALSE")
26
python
# Set two variables with numbers
num1 = 10
num2 = 5

# Use the greater than (>) operator to compare num1 and num2
is_greater = num1 > num2

# Print the result using string formatting
print("{} is greater than {}?: {}".format(num1, num2, is_greater))

# Use True directly in a statement
if num1 > num2:
    print("{0} is greater than {1}.".format(num1, num2))
else:
    print("{0} is not greater than {1}.".format(num1, num2))
27
python
# Define some variables
x = 5
y = 10
z = 3

# Use the less-than-or-equal-to operator
if x <= y:
    print(f"The value of x ({x}) is less than or equal to the value of y ({y}).")
else:
    print(f"The value of x ({x}) is greater than the value of y ({y}).")

# Use the boolean value True in an if statement
if z <= 0 or True:
    print("The value of z is less than or equal to zero, or the boolean value True is true.")
else:
    print("The value of z is greater than zero, and the boolean value True is false in this context.")
28
python
def isunique(str):
    # Initialize an empty set to store encountered characters
    char_set = set()

    # Iterate through each character in the given string and check if it exists in the set already
    for char in str:
        # If the character exists in the set, it's a duplicate, return False
        if char in char_set:
            return False
        # Add the character to the set
        char_set.add(char)

    # Once all characters have been checked and no duplicates found, return True as the string contains all unique characters
    return True
31
python
# Initialize variable 'num' with value 0
num = 0

# Loop while num is less than 10
while num < 10:
    # Multiply num by 2 using *= and check if the result is still less than 10
    num *= 2
    
    # Check if the new value of num is still less than 10 using Boolean value True
    if num >= 10:
        print("Number exceeded limit, loop will terminate.")
        break
    
# Print the final value of 'num'
print(f"The number is now {num}.")
32
python
# Assigning values to variables
dividend = 10
divisor = 5
quotient = 0

# Perform division
try:
    quotient = dividend / divisor
except ZeroDivisionError:
    print("Error: Division by zero is not allowed.")
    
# Check if divisor was zero and assign True or False to a variable
is_divisor_zero = divisor == 0

# Print the result and the status of divisor being zero
if is_divisor_zero:
    print(f"The divisor was zero. Division result is meaningless: {quotient}.")
else:
    print(f"Quotient: {quotient}")

# Assign the result of quotient != 0 to a variable using /= operator
quotient /= 0  # This line has no effect since quotient was already initialized with a value.
print("quoitent after /=".format(quotient))

# Now assign a zero value to divisor and check its effect on quotient using /= operator
divisor = 0
quotient /= 1  # This line does not change quotient since it is already initialized with a value.
print("quoitent after divisor assignment and /=".format(quotient))
divisor /= 0   # This line sets divisor to 1 since divisor was initially assigned 0.
print("quoitent after divisor reset and /=".format(quotient))
33
python
# This is a simple Python script for demonstrating the usage of True and //=

# Define some variables
num1 = 25
num2 = 7
quotient = 0
remainder = 0
is_valid_input = True

# Check if the input is valid (both numbers should be integers)
if type(num1) != int or type(num2) != int:
    print("Error: Both num1 and num2 must be integers.")
    is_valid_input = False
else:
    # Perform division and get the quotient
    quotient = num1 // num2
    
    # Display the quotient
    print(f"The quotient of {num1} and {num2} is {quotient}")

    # Perform floor division assignment
    num1 //= num2

    # Display the updated value of num1
    print(f"After performing num1 //= num2, num1 becomes: {num1}")
34
python
def modify_number(num):
    # Calculate remainder of num % 2
    remainder = num % 2

    # Set is_even to True if num is even (remainder is 0)
    is_even = True if remainder == 0 else False

    print("Number: {num} | Remainder: {remainder} | Is Even: {is_even}")

# Test the function with some numbers
modify_number(4)
modify_number(5)
modify_number(12)
35
python
# Initialize a variable with some value
num = 2

# Check if a number is raised to the power of 3 is greater than 12, and assign the result to a boolean variable called is_greater
is_greater = (num ** 3) > 12

# Print the value of the boolean variable is_greater
print(is_greater)

# Assign the result of number raised to the power of 2 to the same variable num using the power assignment operator
num **= 2

# Print the updated value of the variable num
print(num)
36
python
# Define two boolean variables
variable1 = False
variable2 = True

print("Variable 1: ", variable1)
print("Variable 2: ", variable2)

# Using the logical NOT operator ~ to inverse the value of a variable
inverse_of_variable1 = ~variable1
print("Inverse of Variable 1: ", inverse_variable1)

# Logical AND operation (and) between two variables or a constant and a variable
result_of_operation1 = variable1 and variable2
print("Variable 1 and Variable 2 (and): ", result_of_operation1)

result_of_operation2 = variable1 and True
print("Variable 1 and True (and): ", result_of_operation2)
37
python
# Define two Boolean variables with the value True
boolean_variable_1 = True
boolean_variable_2 = True

print("boolean_variable_1: ", boolean_variable_1)
print("boolean_variable_2: ", boolean_variable_2)

# Use bitwise OR operator | to combine two Boolean variables
combined_variable = boolean_variable_1 | boolean_variable_2

print("\nboolean_variable_1 | boolean_variable_2: ")
print(combined_variable)

# The result of the bitwise OR operation will be True if either (or both) of the variables are True.
print("Note: In Python, the bitwise OR operator also works for Boolean values and behaves like a logical OR.")
38
python
# Definition of two binary numbers as decimal integers
num1 = 60  # binary: 111110
num2 = 13  # binary: 0010011

# Using bitwise XOR (^) to find the difference of num1 and num2
result = num1 ^ num2

print(f"The XOR of {num1} and {num2} is:")
print(result)
print(bin(num1)[2:])  # print binary representation of num1 for comparison
print(bin(num2)[2:])  # print binary representation of num2 for comparison
print(bin(result)[2:])  # print binary representation of the XOR result
39
python
# Define a binary number
binary_number = 0b1111_0010

# Print the original binary number
print("Original Binary Number: ", bin(binary_number)[2:])

# Use True to convert the binary number to its decimal equivalent
decimal_number = bool(binary_number) if isinstance(binary_number, int) else int(binary_number, 2)
print("Decimal Equivalent of Binary Number: ", decimal_number)

# Use bitwise NOT (represented by the tilde `~`) to invert all the bits of the binary number
inverted_number = ~binary_number

# Print the binary representation of the inverted number
print("Binary Representation of Inverted Number: ", bin(int.from_bytes(bytearray([binary_number.to_bytes(1, 'little')[0]]), 'little'))[2:])

# Use True to check if the inverted number is non-zero (i.e., if it has at least one bit set)
is_inverted_nonzero = bool(inverted_number)
print("Is Inverted Number Non-Zero? : ", is_inverted_nonzero)
40
python
# Setting some binary values as integers
binary_value1 = 1
binary_value2 = 1 << 3

print("Binary Value 1 (Decimal): ", binary_value1)
print("Binary Value 2 (Decimal): ", binary_value2)

# Displaying the binary representations
print(f"Binary representation of Binary Value 1: {bin(binary_value1)}")
print(f"Binary representation of Binary Value 2: {bin(binary_value2)}")

# Using True and bitwise left shift together
some_boolean = True
number = binary_value1
number <<= some_boolean

print("Number before assignment with boolean:", number)
print("Boolean value:", some_boolean)

if some_boolean:
    number <<= 1
else:
    number >>= 1

print("Number after assignment with conditional statement:", number)

# Displaying the binary representations of the final numbers
print(f"Binary representation of final Number: {bin(number)}")
41
python
# Using True
number = 10
if number > 5:
    print("Number is greater than 5")
else:
    print("Number is less than or equal to 5")

# Using bitwise right shift operator (>>)
binary_number = 0b1111_0101 # binary representation of decimal number 9 (decimal 0b means it's in binary form)
shifted_number = binary_number >> 2
print(bin(shifted_number)) # prints "0b0011_1100" which is the binary representation of decimal number 3
print(decimal(shifted_number)) # prints 3, the decimal equivalent of the shifted binary number
42
python
# Define two boolean variables
var1 = True
var2 = True

# Use the 'and' operator to create a new boolean variable 'result'
result = var1 and var2

# Print out the values of the variables
print("Variable 1: ", var1)
print("Variable 2: ", var2)
print("Result (var1 and var2): ", result)
43
python
# Define some variables
a = 10
b = 20
c = False

# Using True directly
if True:
    print("True is always true. Printing: True is always true.")

# Using or operator
if c or (a > b):
    print("The condition is true because of one of the following reasons:")
    print(f"c is {c}")
    print(f"But a={a} and b={b}, so a>b is {a > b}")
else:
    print("The condition is false.")
0
python
# Boolean values: True or False
is_raining = False
is_sunny = True
has_money = True

print("Is it raining?", is_raining)
print("Is it sunny?", is_sunny)
print("Do we have money?", has_money)

# If statement
if not is_raining and is_sunny and has_money:
    print("Let's go to the park!")
else:
    print("Let's stay home today.")
1
python
import time
import schedule

def job():
    print("Job is running...")
    time.sleep(5) # This job will run for 5 seconds

def main():
    schedule.every(1).minutes.do(job) # Schedule the job to run every minute
    
    while True:
        schedule.run_pending() # Run any scheduled jobs
        time.sleep(60) # Sleep for a minute before checking again

if __name__ == "__main__":
    main()
2
python
# Define a boolean variable with true value
is_rainy = True

# Define a boolean variable with false value
is_sunny = False

print("Is it rainy? ", is_rainy)
print("Is it sunny? ", is_sunny)

# Perform some logical operations on boolean variables
print("Rainy OR Sunny: ", is_rainy or is_sunny)  # OR operation
print("Rainy AND Sunny: ", is_rainy and is_sunny)  # AND operation
print("Not Rainy: ", not is_rainy)  # NOT operation
3
python
# This program demonstrates the usage of True as a Boolean value.

# Assigning True and False to variables
is_sun_shining = True
is_rainy = False

print("Is it sunny outside? ", is_sun_shining)
print("Is it raining outside? ", is_rainy)

# Using True in conditional statements
if True:
    print("This statement is always true.")

if not False:
    print("This statement is also always true.")

# Using True and False to compare values
number = 10
is_number_greater_than_five = number > 5

print("Is the number greater than 5? ", is_number_greater_than_five)
4
python
import threading
import time

def worker_function(name):
    print(f"{name}: Started")
    irepeat = 0
    while True:
        if should_stop:
            print(f"{name}: Stopping...")
            break
        irerepeat += 1
        print(f"{name}: Repeating {irepeat}")
        time.sleep(2)

should_stop = False
thread1 = threading.Thread(target=worker_function, args=("Thread 1",))
thread2 = threading.Thread(target=worker_function, args=("Thread 2",))

# Start the threads
thread1.start()
thread2.start()

# Wait for some time to let the threads run for a while
time.sleep(10)

# Stop both threads
should_stop = True
thread1.join()
thread2.join()
print("All threads stopped.")
5
python
import threading
import time

def worker(name):
    """ A simple worker function to demonstrate multithreading """
    print(f"Thread {name} started")
    time.sleep(3)
    print(f"Thread {name} finished")

if __name__ == "__main__":
    thread1 = threading.Thread(target=worker, args=("Thread1",))
    thread2 = threading.Thread(target=worker, args=("Thread2",))

    # Start the threads
    thread1.start()
    thread2.start()

    # Wait for both threads to finish their execution
    thread1.join()
    thread2.join()

    print("Main thread finished")
6
python
# This variable will hold an integer user input
number = None

# Ask for user input until valid integer is provided
while not type(number) == int:
    try:
        number = int(input("Please enter an integer: "))
    except ValueError:
        print("Invalid input! Please enter an integer.")

# Check if the number is positive, zero or negative and print accordingly
if number > 0:
    print(f"The number {number} is positive.")
elif number == 0:
    print(f"The number {number} is zero.")
else:
    print(f"The number {number} is negative.")
    
# Perform some additional processing based on the number's magnitude
if abs(number) > 10:
    print("This number is quite large.")
elif abs(number) < 5:
    print("This number is quite small.")
else:
    print("This number has a moderate magnitude.")
7
python
def is_true():
    return True
8
python
import threading
import time

# Define two resources with their respective locks
resource1_lock = threading.Lock()
resource2_lock = threading.Lock()

def function1():
    """Function 1 acquires resource 1, then attempts to acquire resource 2."""
    print("Function 1: Acquiring resource 1...")
    resource1_lock.acquire()
    time.sleep(0.5)
    print("Function 1: Trying to acquire resource 2...")
    resource2_lock.acquire()
    print("Function 1: Both resources acquired!")

def function2():
    """Function 2 acquires resource 2, then attempts to acquire resource 1."""
    print("Function 2: Acquiring resource 2...")
    resource2_lock.acquire()
    time.sleep(0.5)
    print("Function 2: Trying to acquire resource 1...")
    resource1_lock.acquire()
    print("Function 2: Both resources acquired!")

# Create and start threads
thread1 = threading.Thread(target=function1)
thread2 = threading.Thread(target=function2)

thread1.start()
thread2.start()

# Wait for threads to finish
thread1.join()
thread2.join()

print("All threads completed.")
9
python
import contextlib
import os

# Using True as a boolean value
if True:
    print("This is a true statement, it will be executed")

# Using resource module with contextlib.contextmanager decorator
@contextlib.contextmanager
def my_context_manager(file_path):
    try:
        file = open(file_path, 'r')
        yield file
    finally:
        file.close()

with my_context_manager('example.txt') as f:
    data = f.read()
    print("Data from the file:", data)
10
python
def function_that_needs_permission(condition):
    """Function that can only be executed if 'condition' is True."""
    if condition:
        print("Executing function...")
        # Your code goes here
    else:
        print("Condition is False. Function not executed.")

# Allow the function to be executed
function_that_needs_permission(True)

# Deny the function from being executed
function_that_needs_permission(False)
11
python
import threading
import time

# Define a shared resource that requires mutual exclusion
resource = 0
lock = threading.Lock()

# Define a function to be executed in threads
def worker(thread_id):
    global resource

    # Demonstrate the use of Boolean flags
    flag = not thread_id % 2

    print(f"Thread {thread_id} is waiting for its turn to access the shared resource...")
    
    while flag:
        if lock.acquire(blocking=True):
            # Critical section: Access the shared resource
            if resource > 0:
                print(f"Thread {thread_id} found a non-zero value in the shared resource.")
                resource += 1
                print(f"Thread {thread_id} updated the shared resource to {resource}")
            else:
                print(f"Thread {thread_id} did not find anything in the shared resource.")

            lock.release()
        else:
            print("Thread", thread_id, "is waiting for the lock to be released...")
            time.sleep(0.1)
    
# Create and start threads
threads = [threading.Thread(target=worker, args=(i,)) for i in range(4)]
for t in threads:
    t.start()

# Wait for all threads to finish
for t in threads:
    t.join()
12
python
import threading
import time

def worker(semaphore, condition):
    semaphore.acquire()

    print("Thread {} started".format(threading.current_thread().name))

    # Simulating some work by sleeping for a random period of time
    time.sleep(1 + 2 * (threading.randint(0, 1) % 2))

    condition.set()  # Signal that the thread has finished its job
    semaphore.release()

    print("Thread {} finished".format(threading.current_thread().name))
13
python
# Open file using context manager
def read_file(filename):
    # Open file with 'r' mode
    with open(filename, 'r') as file:
        # Read entire file content
        data = file.read()
        print("File contents:\n{}\n".format(data))

# Use the function
if __name__ == "__main__":
    filename = "example.txt"  # Replace with your file path
    read_file(filename)
14
python
importgc  # This line is only for Python 3.4 and below. For newer versions, remove it.
import sys

class MyClass:
    def __init__(self):
        print("Created an instance of MyClass")

# Create an object of MyClass
obj = MyClass()

print("Assigned obj to None")
obj = None

print("Checking GC. Is there any unreachable object in memory? (Python 3.4 and below)")
sys.gc()
if gc.collect() is not None:
    print("Garbage Collector did some work!")
else:
    print("No garbage collection occurred.")

print("For Python versions greater than 3.4, use 'gc' module instead of 'importgc'. ")
# In newer versions, replace the gc check with:
# if sys.getrecursionlimit() * 2 > sys.stdin.buffersize:
#     print('Garbage collector did some work!')
# else:
#     print('No garbage collection occurred.')
15
python
# Demonstrating the use of True
boolean_value = True
if boolean_value:
    print("This statement will be executed")
else:
    print("This statement will not be executed")

# Creating objects and demonstrating memory management
class MyClass:
    def __init__(self, value):
        self.value = value

objects = []
for i in range(100000):
    obj = MyClass(i)
    objects.append(obj)

# Manually releasing memory (not necessary in Python)
# for obj in objects:
#     del obj

# GC will free up the memory used by the objects when they are no longer needed
print("Objects created:", len(objects))
17
python
# Define some variables
number_1 = 5
number_2 = 10
is_even = True

# Perform some calculations
result_1 = number_1 * is_even
print("Multiplication of number and boolean (number * boolean): ", result_1)

result_2 = number_1 * number_2
print("Multiplication of two numbers: ", result_2)
18
python
# Python Program for Demonstrating True and Division Operator (/)

def main():
    # Taking input numbers from the user
    num1 = float(input("Enter first number: "))
    num2 = float(input("Enter second number: "))

    # Performing division operation
    result = num1 / num2

    # Checking if the result is greater than zero using Boolean value True
    if result > 0:
        print(f"The result {result} is positive.")
        print("Therefore, the following statement will be true:")
        print(True)
    else:
        print(f"The result {result} is non-positive.")
        print("Therefore, the following statement will be false:")
        print(False)

if __name__ == "__main__":
    main()
19
python
# Integer division
print("Integer Division:")
num1 = 10
num2 = 3
quotient_int = num1 / num2
print(f"Quotient using integer division: {quotient_int}")
print(f"First number: {num1}, Second number: {num2}, Quotient: {quotient_int}")

# Floor Division
print("Floor Division:")
quotient_floor = num1 // num2
print(f"Quotient using floor division: {quotient_floor}")
print(f"First number: {num1}, Second number: {num2}, Quotient: {quotient_floor}")
20
python
# Function to check if a number is even or odd
def is_even(number):
    if number % 2 == 0:
        return True
    else:
        return False

# Testing the function
numbers = [1, 2, 3, 4, 5, 6]
for num in numbers:
    result = is_even(num)
    print("{} is {}".format(num, "even" if result else "odd"))
21
python
# Define a power function using exponentiation operator **
def power(base, exponent):
    # Base case: if exponent is 0, return 1
    if exponent == 0:
        return 1
    else:
        # Recursive call: base * base raised to the power of (exponent - 1)
        return base ** (exponent - 1) * base

# Test cases
print(power(2, 3))                     # Expected output: 8
print(power(5, 2))                     # Expected output: 25
print(power(0, 0))                     # Expected output: 1
print(power(1, -1))                    # Expected output: 1 (since 1 raised to any negative power is 1)
print(power(-3, 2))                    # Expected output: 9 (-3 * -3)
print(power(2, 0))                     # Expected output: 1
print(power(True, 2))                  # Raises a TypeError since you can't raise a Boolean value to a power
22
python
# Define two variables with initial values
x = 5
y = 10

# Check if 'x' is less than 'y' using a Boolean expression
is_x_less_than_y = x < y

# Print the result of the comparison (Boolean value)
print(f"Is {x} less than {y}? -> {is_x_less_than_y}")

# Assign new values to 'x' and 'y' based on a condition
if is_x_less_than_y:
    x, y = y, x

# Print the updated values of 'x' and 'y'
print(f"Now x = {x} and y = {y}")
23
python
# This program defines two variables with boolean values using True and False, respectively,
# and also compares two integers using the equal to operator (==)

# Define boolean variables using True and False
boolean_variable_1 = True
boolean_variable_2 = False

print("boolean_variable_1 is:", boolean_variable_1)
print("boolean_variable_2 is:", boolean_variable_2)

# Use the equal to operator (==) to compare two integers
integer_variable_1 = 10
integer_variable_2 = 10

comparison_result = integer_variable_1 == integer_variable_2

print("integer_variable_1 is equal to integer_variable_2: ", comparison_result)

# Verify that boolean_variable_1 is not equal to boolean_variable_2
another_comparison_result = boolean_variable_1 != boolean_variable_2

print("boolean_variable_1 is not equal to boolean_variable_2: ", another_comparison_result)
24
python
# Define some variables
num1 = 5
num2 = 10

# Check if num1 is not equal to num2 using the != operator
if num1 != num2:
    print("num1 and num2 are not equal")
else:
    print("num1 and num2 are equal")

# Use the True value in a conditional statement
boolean_value = True

if boolean_value:
    print("The boolean value is True")
else:
    print("The boolean value is False")
25
python
# Define two integer variables
num1 = 5
num2 = 7

# Use the less than operator to compare num1 and num2
is_num1_smaller = num1 < num2

# Print the result of comparison using the boolean value True
if is_num1_smaller:
    print(f"{num1} is smaller than {num2}")
else:
    print(f"{num1} is not smaller than {num2}")
    
# Demonstrate that True can be used as a boolean value
boolean_value = True
print("The boolean value is: ", boolean_value)
26
python
# Set two variables with numbers
num1 = 10
num2 = 5

# Use the '>' comparison operator to check if num1 is greater than num2
result = num1 > num2

# Print out the result using the Boolean value True or False
if result:
    print(f"{num1} is greater than {num2}. Result: True")
else:
    print(f"{num1} is not greater than {num2}. Result: False")
27
python
# Define some variables
number = 5
limit = 10

# Check if number is less than or equal to limit
if number <= limit:
    print("Number is less than or equal to limit")
    # Perform some actions if the condition is true
else:
    print("Number is greater than limit")
    
# Continue with other parts of your program
28
python
# Define some variables
num1 = 5
num2 = 3

# Use if statement with >= comparison
if num1 >= num2:
    print(f"{num1} is greater than or equal to {num2}")
else:
    print(f"{num1} is less than {num2}")

# Perform the comparison
print("Performing comparison: {} >= {}".format(num1, num2))

# Output:
# Performing comparison: 5 >= 3
# 5 is greater than or equal to 3
29
python
# Initialize an integer variable x with value 0
x = 0

# Use a for loop to count from 1 to 5
for i in range(1, 6):
    # Check if x is less than or equal to 5
    if x <= 5:
        # Set x to be the sum of its current value and 1
        x += 1
        # Print out the current value of x
        print("x =", x)
31
python
# Initialize a variable num with zero
num = 0

# Check if a condition is met (in this case, the condition is just an if statement that checks if num is less than 10)
if num < 10:
    # If the condition is true, set num to 10 times its current value using *= operator
    num *= 10

# Print the final value of num
print(num)
32
python
# Initial values of num1 and num2
num1 = 10
num2 = 5

# Perform division operation and assign the result to num1
num1 /= num2

# Print the updated value of num1
print("num1 after division by num2: ", num1)

# Assign True to a variable flag if num1 is greater than num2, otherwise False
flag = num1 > num2

# Perform another division operation and update num1 with the result using /= operator
num1 /= 2

# Print the updated value of num1 and the value of flag
print("num1 after second division: ", num1)
print("Is num1 greater than num2?: ", flag)
33
python
# Initialize some variables
num1 = 10
num2 = 4
quota_remainder = True

# Perform floor division and assign the quotient and remainder to num1 and num2 respectively
num1, num2 = divmod(num1, num2)

# Check if there is any remainder
if num2 != 0:
    quota_remainder = False

# Demonstrate the use of floor division assignment (//=) on num1
num1 //= 2

print("Quotient: {}".format(num1))
print("Remainder: {}".format(num2))
print("Quota remainder: {}".format(quota_remainder))
34
python
# Initialize the counter variable with a value of 0
counter = 0

# Use an infinite loop and include a condition to break the loop using 'True' and 'while'
while True:
    # Check if the counter is greater than 9 using the modulus operator '%'
    if counter > 9:
        # If the condition is true, then break out of the loop using 'break' statement
        break

    # Print the current value of the counter and its square
    print("Counter: {0} \nSquare: {1}")
    print(counter * counter)

    # Increment the counter using modulus operator '%=' to ensure that it stays within the range of 0 to 9
    counter += 1
    counter %= 10
35
python
def power(base, exponent):
    """Raises base to the power of exponent."""
    if exponent == 0:
        return 1
    elif exponent > 0:
        result = base
        # Use compound assignment operator **= for exponentional growth
        result **= power(base, exponent - 1)
        return result
    else:
        raise ValueError("Exponent must be non-negative.")

# Test the function with some examples
if __name__ == "__main__":
    base = 2
    exponent = 3

    print(f"Base raised to power {exponent} is:")
    print(power(base, exponent))

    # Demonstrate compound assignment operator usage with True as a flag
    flag = False
    while not flag:
        user_input = input("Enter a non-negative exponent (or 'q' to quit): ")
        
        if user_input == "q":
            flag = True
        else:
            try:
                exponent = int(user_input)
                if exponent >= 0:
                    print(f"Base raised to power {exponent} is:")
                    print(power(base, exponent))
                else:
                    print("Invalid input. Enter a non-negative number.")
            except ValueError:
                print("Invalid input. Please enter an integer.")
36
python
# Define two Boolean variables
bool_var1 = True
bool_var2 = False

print("Boolean variable 1: ", bool_var1)
print("Boolean variable 2: ", bool_var2)

# Perform the bitwise AND operation
result = bool_var1 & bool_var2

print("\nResult of the bitwise AND operation: ", result)

# Interpret the result
if result:
    print("The result is True")
else:
    print("The result is False")
37
python
# Define some boolean variables
variable1 = False
variable2 = True

print("Variable 1 is:", variable1)
print("Variable 2 is:", variable2)

# Perform bitwise OR operation on two boolean values using the '|' operator
result = variable1 | variable2

print("\nThe result of (variable1 | variable2) is:")
print(result)

# Interpreting the result with the help of truth table
print("\nTruth Table:\n"
      "|------|-------|--------------|\n"
      "|  A   |  B   |   A | B    | A | B | A OR B |\n"
      "|------|-------|--------------|-------|-----|----|------------------|\n"
      "| False| False |False       | False | 0  | 0  |     False        |\n"
      "| False|  True |False       |  True | 0  | 1  |       True        |\n"
      "|  True| False |False       | False |1  | 0  |       True        |\n"
      "|  True|  True |True       |  True |1  | 1  |       True        |\n")
38
python
# Define two binary numbers as decimal values
num1 = 60 # 0011 1110
num2 = 13 # 0000 1101

# Compare num1 and num2 using the boolean value True or False
if num1 > num2:
    greater = "First number ({}) is greater than the second number ({}).".format(num1, num2)
elif num1 < num2:
    greater = "Second number ({}) is greater than the first number ({}).".format(num2, num1)
else:
    greater = "Both numbers are equal."
print(greater)

# Perform bitwise XOR operation using ^ operator
xor_result = num1 ^ num2
print("Bitwise XOR of {} and {} is: {} (binary: {:08b})".format(num1, num2, xor_result, format(xor_result, '08b')))
39
python
# Define a binary number as an integer
binary_number = 60  # equates to 0011 1110 in binary

print("Original Binary Number: ", bin(binary_number)[2:])

# Using True boolean value
boolean_value = True
result = binary_number if boolean_value else 0
print("\nResult with True boolean value: ", result, bin(result)[2:])

# Using bitwise NOT (~) operator
result = ~binary_number
print("\nResult with bitwise NOT operator: ", result, bin(result)[2:])
40
python
# Example using True
def is_even(number):
    return number % 2 == 0

num = 10
print("Number is even?: ", is_even(num)) # Number is even?:  True

# Example using bitwise left shift operator (<<)
def power_of_two(base, exponent):
    result = 1
    for _ in range(exponent):
        result <<= 1
        result *= base
    return result

print("2 raised to the power of 5: ", power_of_two(2, 5)) # 2 raised to the power of 5:  32
41
python
# Demonstration of True and Boolean Operators in Python

# Using True
x = 10 > 5
print(f"10 is greater than 5: {x}")

# Shift operators (bitwise)
a = 10 # Binary: 1010
b = 5  # Binary: 0101

# Right shift operator (>>)
print("Right shift:")
print(f"{bin(a)} >> 2 equals {bin(a >> 2)}")

# Left shift operator (<<)
print("Left shift:")
print(f"{bin(b)} << 3 equals {bin(b << 3)}")
42
python
# Define some variables
num1 = 10
num2 = 20

# Use True directly in a conditional statement
if True:
    print("True is always true")

# Use True as a condition in combination with and
if num1 > 5 and num2 > 5:
    print("Both numbers are greater than 5")
else:
    print("At least one number is not greater than 5")
43
python
# Define some variables
variable1 = True
variable2 = False

# Use or (logical OR) to check if variable1 is True or variable2 is True
result = variable1 or variable2

print("Variable 1 is:", variable1)
print("Variable 2 is:", variable2)
print("Result of or operation: ", result)

# Let's see the behavior when both variables are False
variable1 = False
variable2 = False
result = variable1 or variable2
print("Result of or operation with both variables as False: ", result)

# And let's see when one variable is True and another is False
variable1 = True
variable2 = False
result = variable1 or variable2
print("Result of or operation with one True and another False: ", result)
44
python
# Define a boolean variable 'is_student'
is_student = True

if not is_student:
    print("I am not a student.")
else:
    print("I am a student.")

# Change the value of 'is_student' and observe the output
is_student = False

if not is_student:
    print("I am not a student.")
else:
    print("I am a student.")
45
python
# Define a list of numbers
numbers = [1, 2, 3, 4, 5]

# Set a variable with a boolean value
is_even = True

# Check if an element is present in the list and its value is even
if is_even and 0 in (numbers[i] % 2 for i in range(len(numbers))):
    print("An even number is present in the list")
else:
    print("No even number is present or 'is_even' is False")
46
python
# Assign two integers to variables
num1 = 5
num2 = 5

# Use 'is' for comparing two objects for identity
# (check if they are the same object in memory)
if num1 is num2:
    print("Both variables hold the same object")
else:
    print("Variables hold different objects")

# Use 'True' as a boolean value
# (it represents true condition or state)
bool_value = True
if bool_value:
    print("This is a true statement or condition")
else:
    print("This is a false statement or condition")
47
python
# Boolean expression using True
if (x > 0) is True:   # If x is greater than zero, this condition evaluates to True
    print("x is positive")

# Indentation block using :
if x > 0:             # If x is greater than zero
    print("x is positive")
    print("Do something else")
48
python
# A boolean variable using True
is_sunny = True
print(is_sunny) # Output: True

# A list with two elements: temperature and is_sunny
weather = [15.2, True]
print(weather) # Output: [15.2, True]

# Accessing the second element of the weather list using a dot
is_sunny = weather[1]
print("Is it sunny? ", is_sunny) # Output: Is it sunny?  True
49
python
# A boolean expression is any expression that evaluates to True or False
# We can assign these values to variables, or compare values using relational operators

# Assigning Boolean values to variables
boolean_value_1 = True
boolean_value_2 = False

print("Boolean value 1:", boolean_value_1)
print("Boolean value 2:", boolean_value_2)

# Comparison using relational operators
number_1 = 10
number_2 = 5

greater_than = (number_1 > number_2)
equal = (number_1 == number_2)

print("Number 1 is greater than Number 2:", greater_than)
print("Number 1 is equal to Number 2:", equal)
50
python
# Boolean values: True and False
bool_value_1 = True
bool_value_2 = False

print("Boolean value 1 is:", bool_value_1)
print("Boolean value 2 is:", bool_value_2)

# Boolean operators: AND (and), OR (or), and NOT (not)
def boolean_expression():
    condition_1 = True
    condition_2 = False

    # AND operator: Both conditions must be true
    result_and = condition_1 and condition_2
    print("Result of 'condition_1 and condition_2':", result_and)

    # OR operator: At least one condition must be true
    result_or = condition_1 or condition_2
    print("Result of 'condition_1 or condition_2':", result_or)

    # NOT operator: Negates the given boolean value
    result_not = not bool_value_1
    print("Result of 'not bool_value_1' is:", result_not)

boolean_expression()
51
python
# Initialize a boolean variable 'is_student_eligible' with value True
is_student_eligible = True

# Create an empty list 'student_list'
student_list = []

print("Is student eligible initially: ", is_student_eligible)

# Add some students to the list and check eligibility
if len(student_list) > 0:
    print("Students are present. Student eligibility: ", is_student_eligible)
    student_list.append("John")
    student_list.append("Mike")
    print("Students after adding two students: ", student_list)
    if len(student_list) > 2:
        print("With more than 2 students, student eligibility becomes False: ")
        is_student_eligible = False
else:
    print("No students present. Student eligibility remains as:", is_student_eligible)

# Remove some students and check eligibility
if len(student_list) > 0:
    student_list.pop()
    student_list.pop()
    print("Students after removing two students: ", student_list)
    if len(student_list) == 0:
        print("No more students present. Student eligibility remains as:", is_student_eligible)
    else:
        print("With fewer students, student eligibility might change based on the criteria.")
else:
    print("No students present. Student eligibility remains as:", is_student_eligible)
52
python
# Defining a boolean variable named 'is_student' and assigning it the value True
is_student = True

# Printing the value of the boolean variable using the print() function
print("Is student: ", is_student)

# Creating an empty dictionary named 'my_dict'
my_dict = {}

# Adding key-value pairs to the dictionary using the {'key': value} syntax
my_dict = {
    "name": "John Doe",
    "age": 25,
    "city": "New York"
}

# Printing the entire dictionary using the print() function
print("My Dictionary: ", my_dict)

# Checking if a key exists in the dictionary and printing the result using the 'in' keyword
key_exists = "name" in my_dict
print("Key 'name' exists: ", key_exists)
53
python
# Define a variable with a number value
number = 5

# Use the if : statement to check the condition
if number > 0:
    print("The number is positive.")
elif number == 0:
    print("The number is zero.")
else:
    print("The number is negative.")

# Demonstrate the usage of True
boolean_value = True
print("Boolean value is:", boolean_value)
54
python
# Boolean value 'True'
x = 10
y = 20
z = x > y
print("Is x greater than y? ", z)

# Semicolon (;) for multiple statements in one line
a = 5
b = 10
c = a + 1; d = b - 1
print("Value of c: ", c)
print("Value of d: ", d)
55
python
# Boolean AND operation using 'and'
def check_age(person):
    return person.age > 18 and person.age < 65

class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

person1 = Person("John Doe", 20)
person2 = Person("Jane Doe", 35)

print(check_age(person1))  # False
print(check_age(person2))  # True

# Using 'as' for alias in Python
def download_file(url, save_path):
    response = requests.get(url)
    with open(save_path, "wb") as file:
        file.write(response.content)

download_file("https://example.com/test.txt", "test.txt")
56
python
# A simple function to check if a number is within a given range
def is_in_range(number, start, end):
    # Check if the number is greater than or equal to the start and less than or equal to the end
    return start <= number <= end

# Function to perform some calculations and check conditions using and operator and assert statement
def calculate_and_check():
    a = 5
    b = 3
    c = a + b
    result = c * 2

    # Check if the condition is true, i.e., a and b are positive numbers and c is even
    if a > 0 and b > 0 and c % 2 == 0:
        assert result > 10, f"Error: The result ({result}) should be greater than 10"
        print("All conditions met!")
        print(f"The result is: {result}")
    else:
        print("One or more conditions are not met.")

# Test the function
calculate_and_check()
57
python
import asyncio
import aiohttp

async def fetch(url):
    """Asynchronously fetches a web page."""
    async with aiohttp.Client() as client:
        async with client.get(url) as response:
            if response.status in range(200, 300):
                return await response.text()
            else:
                print(f'Error fetching {url}: {response.status}')
                return None

async def main():
    urls = ['https://www.google.com', 'https://www.example.com', 'https://non-existent-url.com']

    tasks = [fetch(url) for url in urls]
    results = await asyncio.gather(*tasks)

    # Check all fetches were successful and print results
    if all(result is not None for result in results):
        print('All fetch operations completed successfully!')
        print('Results:')
        for i, url in enumerate(urls):
            print(f'{i + 1}. {url}: {results[i]}')
    else:
        print('Error: Some fetch operations failed.')

if __name__ == '__main__':
    asyncio.run(main())
58
python
import asyncio

async def task_1():
    print("Task 1 started")
    await asyncio.sleep(1)
    print("Task 1 completed")
    return "Result from task 1"

async def task_2():
    print("Task 2 started")
    await asyncio.sleep(2)
    print("Task 2 completed")
    return "Result from task 2"

async def main():
    result_task_1 = await task_1()
    result_task_2 = await task_2()

    if result_task_1 == "Expected result from task 1" and result_task_2 == "Expected result from task 2":
        print("Both tasks completed successfully")
    else:
        print("An error occurred, as one or both of the tasks did not complete successfully")

if __name__ == "__main__":
    asyncio.run(main())
59
python
# A simple program to find the first occurrence of an even number in a given list using 'and' operator and 'break' statement

def find_even_number(numbers):
    for i, num in enumerate(numbers):
        if num % 2 == 0:  # check if number is even
            print("First even number found at index:", i)
            break
        if i + 1 == len(numbers):
            print("No even numbers were found.")
            return

if __name__ == "__main__":
    numbers = [1, 3, 5, 6, 8]
    find_even_number(numbers)
60
python
# Example 1 - Using and logical operator
def is_valid_password(password):
    if len(password) >= 8 and password.isalnum():
        return True
    else:
        return False

print(is_valid_password("Password123!")) # Output: True
print(is_valid_password("abcd1234"))     # Output: True
print(is_valid_password("p@ssw0rd"))    # Output: True
print(is_valid_password("shortpass"))   # Output: False
61
python
# This is a simple Python program that uses 'and' operator and 'continue' statement

# Function to check if a number is even or prime
def check_even_or_prime(num):
    # Check if number is even using 'and' operator
    if num % 2 == 0 and num > 1:
        print(f"{num} is an even number.")
        return
    
    # Start checking for prime number from 2 up to the square root of the number
    for i in range(2, int(num ** 0.5) + 1):
        if num % i == 0:
            print(f"{num} is not a prime number.")
            continue
    
    # If number passes all the checks, then it is an odd prime number
    if num > 1:
        print(f"{num} is an odd prime number.")

# Testing the function with some numbers
check_even_or_prime(5)  # Output: 5 is an odd prime number.
check_even_or_prime(6)  # Output: 6 is an even number.
check_even_or_prime(13) # Output: 13 is an odd prime number.
62
python
# Example using 'and'
def is_even(n):
    """Check if number is even."""
    return n % 2 == 0

def greater_than_ten(n):
    """Check if number is greater than ten."""
    return n > 10

number = int(input("Enter a number: "))

if is_even(number) and greater_than_ten(number):
    print("The number is even and greater than ten.")
else:
    print("The number is either not even or not greater than ten.")
63
python
# Define a dictionary with some keys and values
my_dict = {1: "one", 2: "two", 3: "three", 4: "four"}

# Print the initial state of the dictionary
print("Initial dictionary:", my_dict)

# Use 'and' operator to combine two conditions in a loop
for key in my_dict:
    if key % 2 == 0 and my_dict[key].isdigit():
        print(f"The key {key} has even index and value is digit.")

# Use 'del' keyword to delete an item from the dictionary by key
my_dict = {1: "one", 2: "two", 3: "three", 4: "four"}
key_to_delete = 3
if key_to_delete in my_dict:
    del my_dict[key_to_delete]

# Print the updated state of the dictionary
print("Updated dictionary:", my_dict)
64
python
# Define variables
age = 18
is_student = True

# Decision making using 'and' and 'elif'
if age >= 18 and is_student:
    print("This person is an adult student.")
elif age >= 18:
    print("This person is an adult.")
else:
    print("This person is a minor.")
65
python
# Define some variables
num1 = 5
num2 = 0

# Use 'and' to check if both conditions are true, followed by an 'else' block for when they aren't
if num1 > 0 and num2 > 0:
    print("Both numbers are positive.")
else:
    if num1 > 0:
        print("First number is positive, but second one isn't.")
    else:
        print("Both numbers are non-positive.")
66
python
try:
    num1 = int(input("Enter first number: "))
    num2 = int(input("Enter second number: "))

    # Perform division, checking for zero as denominator with 'and'
    result = num1 / num2
    if num2 != 0:  # Alternatively, this condition can be put inside try block
        print(f"Result: {result}")
    else:
        print("Error! Division by zero is not allowed.")

except ValueError as ve:
    print(f"Error occurred: {ve}")
67
python
def divide(num1, num2):
    try:
        result = num1 / num2
        print("Result: {0}".format(result))

        # Check if number is even
        if num1 % 2 == 0:
            print("Number 1 is even.")
        else:
            print("Number 1 is odd.")
    except ZeroDivisionError:
        print("Error! Division by zero is not allowed.")
    finally:
        print("Executing finally block.")

if __name__ == "__main__":
    num1 = 6
    num2 = 3
    divide(num1, num2)

    num1 = 5
    num2 = 0
    try:
        divide(num1, num2)
    except Exception as e:
        print("Caught an exception! Message: {0}".format(e))
68
python
def is_even(number):
    """ Returns True if given number is even, False otherwise """
    return number % 2 == 0

def print_even_numbers(start, end):
    """ Prints all even numbers between start and end (inclusive)"""
    for i in range(start, end + 1):
        if is_even(i) and i > 0: # Filter out negative numbers and zero
            print(i)

if __name__ == "__main__":
    lower_limit = int(input("Enter starting number: "))
    upper_limit = int(input("Enter ending number: "))
    
    if upper_limit < lower_limit: # Check if the ending number is greater than the starting number
        print("Invalid input! Please provide a valid range.")
    else:
        print_even_numbers(lower_limit, upper_limit)
69
python
# Example 1: Checking two conditions using 'and'
age = 18
is_student = True

if age >= 18 and is_student:
    print("This person can vote and is a student.")
else:
    print("This person cannot vote or is not a student.")
70
python
# Function with a local variable
def check_numbers(a, b):
    # Initialize local variable 'is_both_positive' to False
    is_both_positive = False
    
    # Check if both numbers are positive using 'and' keyword
    if a > 0 and b > 0:
        is_both_positive = True
    
    return is_both_positive

# Global variable
x = -5
y = 3

# Function to update global variable
def increment_global():
    global x, y
    x += 1
    y += 1

# Check if numbers are positive
if check_numbers(x, y):
    print("Both numbers are positive")
else:
    print("At least one number is not positive")

# Update global variable
increment_global()
increment_global()

print("Updated values of x and y:", x, y)
71
python
# Define two variables with boolean values
num1 = 10
num2 = 20
is_even_num1 = num1 % 2 == 0
is_even_num2 = num2 % 2 == 0

# Use 'and' to check if both conditions are true
if (is_even_num1 and num1 < 20) or (is_even_num2 and num2 > 30):
    print("One of the numbers is even and within certain range")
else:
    print("Neither number is even or not in the given range")
72
python
# This is a simple Python script that demonstrates the usage of 'and' operator and 'import' statement

# Importing the math module for mathematical operations
import math

# Define a function 'is_positive_number' that checks if given number is positive
def is_positive_number(n):
    return n > 0

# Define another function 'is_even_number' that checks if given number is even
def is_even_number(n):
    return n % 2 == 0

# Function to get user input and process the conditions
def main():
    try:
        num = int(input("Enter a number: "))

        # Using 'and' operator for multiple conditions in if statement
        if is_positive_number(num) and is_even_number(num):
            print(f"The number {num} is positive and even.")
            
        elif is_positive_number(num):
            print(f"The number {num} is positive.")
            
        else:
            print("Invalid input. Please enter a valid positive or negative integer.")

    except ValueError as ve:
        print(f"Error: {ve}")

if __name__ == "__main__":
    main()
73
python
# Define some variables
num1 = 5
num2 = 3

# Use the 'and' operator to check if two conditions are both true
if (num1 > 0) and (num2 > 0):
    print("Both numbers are positive")
else:
    print("One or both numbers are non-positive")
74
python
# Define some variables
x = 5
y = 10
z = x

# Use the 'and' operator
if x > 0 and y < 20:
    print("x is positive and y is less than 20")

# Use the 'is' operator to compare objects (not values!) for identity
if z is x:
    print("x and z refer to the same object")
else:
    print("x and z do not refer to the same object")
75
python
# Sample data
numbers = [1, 2, 3, 4, 5]

# Lambda function to check if a number is even
is_even = lambda num: num % 2 == 0

# Filter the list using and with the lambda function
filtered_list = list(filter(lambda num: is_even(num) and num > 2, numbers))

print("Numbers greater than 2 and even:")
for num in filtered_list:
    print(num)
76
python
def outer_function(x):
    def inner_function():
        if x > 0 and x < 10: # Both conditions must be true for the print statement to execute
            print("x is in the range of 1-9.")
        
    inner_function()

outer_function(5) # Output: x is in the range of 1-9.
77
python
# Define some variables
a = True
b = False

# Use the and operator
result1 = a and b
print("a and b:", result1)

# Interpretation: When both conditions (a and b) are true, then the and expression returns true; otherwise, it returns false.

# Use the not operator
result2 = not a
print("not a:", result2)

# Interpretation: The not operator negates (inverts) the given boolean value. So, if a is True, then not a is False; and vice versa.

# Combine and, not, and multiple conditions using parentheses for clarity
result3 = (not a) and b or a
print("(not a) and b or a:", result3)

# Interpretation: This expression evaluates to True only when a is False and b is true. Otherwise it evaluates to False.
78
python
# Define some variables
num1 = 5
num2 = 10
is_even_num1 = num1 % 2 == 0
is_even_num2 = num2 % 2 == 0

# Use and operator to check if both numbers are even
if is_even_num1 and is_even_num2:
    print(f"Both {num1} and {num2} are even numbers.")

# Use or operator to check if at least one of the numbers is even
elif is_even_num1 or is_even_num2:
    print(f"Either {num1} or {num2}, or both, are even numbers.")

# Check if neither number is even
else:
    print(f"Both {num1} and {num2} are odd numbers.")
79
python
# Function with no implementation using pass keyword
def function_with_no_implementation():
    pass

# Function with condition using and keyword
def check_age(age):
    can_vote = age >= 18
    can_drive = age >= 16
    return can_vote and can_drive

# Main program
if __name__ == "__main__":
    age = int(input("Enter your age: "))
    if check_age(age):
        print("You can both vote and drive.")
    else:
        print("You can't vote or drive, or you can only vote.")

# Calling the function with no implementation
function_with_no_implementation()
80
python
def divide(x, y):
    """Divide two numbers"""
    if y == 0:
        # Raise ZeroDivisionError exception
        raise ValueError("Cannot divide by zero")
    result = x / y
    return result

def main():
    num1 = int(input("Enter the first number: "))
    num2 = int(input("Enter the second number: "))

    # Check if both numbers are positive
    if num1 > 0 and num2 > 0:
        try:
            quotient = divide(num1, num2)
            print(f"The quotient of {num1} and {num2} is: {quotient}")
        except Exception as e:
            # Print the error message if an exception occurs
            print(e)
    else:
        print("Both numbers should be positive")

if __name__ == "__main__":
    main()
81
python
def check_age(age):
 """
 This function checks if a given age is valid (above 18)
 """

 # First, we check if the input 'age' is an integer
 if isinstance(age, int):
 # Then, we use the logical AND operator 'and' to check if the age is above 18
 if age > 18:
 return True
 else:
 return False
 else:
 print("Error: The input must be an integer.")
 return None
82
python
def divide(x, y):
    """Divides x by y"""
    try:
        result = x / y
    except ZeroDivisionError:
        print("Cannot divide by zero")
        return None
    else:
        return result

def main():
    num1 = int(input("Enter the first number: "))
    num2 = int(input("Enter the second number: "))

    if num2 != 0:
        print(f"{num1} divided by {num2} is equal to {divide(num1, num2)}")
    else:
        print("Error: Division by zero")

if __name__ == "__main__":
    main()
83
python
# Variables definition
num = 0
limit = 10

# Checking if a number is greater than zero and less than a limit using 'and'
print("Using 'and':")

while num != limit:
    if num > 0 and num < limit:
        print(f"Number: {num}, It should be increased.")
        num += 1
    else:
        print(f"Number: {num}, It's either greater than or equal to the limit.")
        break

print(f"\nThe number is now: {num} and it's equal to the limit.")

# Using 'and' in a while condition
print("Using 'and' in a while condition:")

num = 0

while num != limit and num >= 0:
    print(f"Number: {num}")
    if num == limit:
        break
    num += 1
84
python
numbers = [1, 2, 3, 4, 5, 6]

# Using 'and' for logical operations
found_element = False
for num in numbers:
    if num < 0 and num % 2 == 0: # condition1 (less than zero) and condition2 (even number)
        found_element = True
        print(f"Found an element {num} which is less than 0 and even.")
        break
if not found_element:
    print("No such element exists in the list.")
85
python
def filter_even_numbers(numbers):
    """Generator function to filter out even numbers between 2 and 5"""
    for num in numbers:
        if num > 1 and num % 2 == 0:  # Filter condition using 'and' operator
            yield num

# Test the generator function
numbers = [1, 2, 3, 4, 5, 6, 7, 8]
filtered_numbers = filter_even_numbers(numbers)

print("Filtered even numbers:")
for num in filtered_numbers:
    print(num)
86
python
# Define a function that takes an integer as an argument and returns its absolute value using abs() function
def get_absolute_value(num):
    return abs(num)

# Define a function that checks if a number is positive or zero, using and keyword
def is_positive(num):
    return (num > 0) and (num is not None)

# Take user input as a number
number = int(input("Enter a number: "))

# Check if the number is positive using is_positive function and print the result
if is_positive(number):
    print(f"The given number {number} is positive.")
else:
    # If the number is not positive, get its absolute value using get_absolute_value function and print the result
    print(f"The given number {number} is not positive. Its absolute value is:")
    print(get_absolute_value(number))
87
python
# A list of boolean values
boolean_values = [True, False, True, False, True]

# Using 'and' to check multiple conditions
if condition1 and condition2:
    print("Both condition1 and condition2 are True")

# Applying 'and' for all elements in a list
if all(value is True for value in boolean_values):
    print("All boolean values in the list are True")
else:
    print("There is at least one False value in the list")
88
python
# A list of some boolean values
boolean_values = [True, False, True, False, True]

# Using 'and' operator
print("Using 'and' operator")
if True and False:
    print("This block will not be executed as both conditions are not true.")
else:
    print("Both conditions were checked, but the result is false.")

# Checking all elements in a list are True using 'any' operator
print("\nUsing 'any' operator")
if any(condition for condition in boolean_values if not condition):
    print("At least one condition was False.")
else:
    print("All conditions were true.")

# Checking all elements in a list are True using 'and' operator
print("\nUsing 'and' operator (for checking all elements)")
if all(condition for condition in boolean_values):
    print("All conditions were true.")
else:
    print("At least one condition was False.")
89
python
# Boolean AND operation
x = True
y = False
z = x and y
print("x =", x)
print("y =", y)
print("x and y =", z)

# Printing ASCII value of characters
char1 = 'A'
char2 = 'a'
ascii_val1 = ord(char1)
ascii_val2 = ord(char2)
print("ASCII value of character {} is: {}".format(char1, ascii_val1))
print("ASCII value of character {} is: {}".format(char2, ascii_val2))
90
python
def count_bits(num):
    """Return the number of bits set to 1 in the given integer."""
    return sum([int(bit) for bit in bin(abs(num))[2:].zfill(8)[::-1]])

def has_three_bits_set(x, y):
    """Check if two numbers have exactly three bits set to 1."""
    return count_bits(x) == 3 and count_bits(y) == 3 and x != y

if __name__ == "__main__":
    num1 = int(input("Enter the first number: "))
    num2 = int(input("Enter the second number: "))

    if has_three_bits_set(num1, num2):
        print(f"Both numbers have exactly three bits set to 1.")
        print(f"Binary representation of {num1}: {bin(num1)[2:]}")
        print(f"Binary representation of {num2}: {bin(num2)[2:]}")
    else:
        print("The numbers do not meet the criteria.")
91
python
# Define some variables
x = 10
y = 20
z = False

# Using and operator to check if two conditions are true
if x > 5 and y < 30:
    print("Condition 1 is true")

# Using bool function to check if a condition is true or false
if bool(x > 5) and bool(y < 30):
    print("Both conditions are true")

# Or check if at least one of the conditions is true
if bool(x > 5) or bool(z):
    print("At least one condition is true")
92
python
# Define a binary string
binary_string = b'1101011110110101'

# Create a bytearray from the binary string
byte_array = bytearray(binary_string)

# Manipulate the bytearray using bitwise 'and' operator with another bytearray
mask = bytearray([0x55, 0xAA])  # Define a mask for demonstration purposes
result = byte_array & mask

# Print out the original bytearray, mask and result for comparison
print("Original Bytearray : {0}".format(byte_array))
print("Mask               : {0}".format(mask))
print("Result             : {0}".format(result))
93
python
# Define two bytes variables
byte_var1 = b'Hello'  # This is a string of bytes, equivalent to byte array [72, 101, 108, 108, 111]
byte_var2 = b'World'   # This is another string of bytes, equivalent to byte array [87, 111, 114, 108, 100]

# Define a boolean variable using and operator
boolean_var = (byte_var1 == b'Hello') and (byte_var2 == b'World')

print("Byte variable 1: ", byte_var1)
print("Byte variable 2: ", byte_var2)
print("Boolean variable: ", boolean_var)

# Comparing bytes using '==' operator
if byte_var1 == byte_var2:
    print("Both variables have the same content.")
else:
    print("Variables have different content.")

# Bitwise and operation between two bytes
byte_and = byte_var1 & byte_var2
print("Bitwise AND of both bytes: ", byte_and)
94
python
# Define some functions
def function1(x):
    return x > 0

def function2(x):
    return x % 2 == 0

def composite_function(x):
    return x > 0 and x % 2 == 0

# Check if a function is callable
print("Is function1 callable? ", callable(function1)) # True
print("Is composite_function callable? ", callable(composite_function)) # True

# Use and operator to combine the conditions
def check_even_positive(x):
    return x > 0 and x % 2 == 0

if check_even_positive(10):
    print("10 is even and positive")

if check_even_positive(-5):
    print("-5 is even and positive")
95
python
# Define some variables
num = 10
is_even = num % 2 == 0
is_positive = num > 0

print("Number is even:", is_even)
print("Number is positive:", is_positive)

# Use and operator to check if number is even and positive
if is_even and is_positive:
    print(f"The number {num} is even and positive")
else:
    print(f"The number {num} is not even or not positive")

# Use chr() function to print character at index 0 of ASCII string
character = chr(65)
print("Character represented by ASCII code 65:", character)
96
python
class ComplexNumber:
    def __init__(self, real=0.0, imaginary=0.0):
        self.real = real
        self.imaginary = imaginary

    @classmethod
    def from_polar_coordinates(cls, r, theta):
        return cls(r * math.cos(theta), r * math.sin(theta))

    def __add__(self, other):
        result = ComplexNumber(
            self.real + other.real,
            self.imaginary + other.imaginary
        )
        return result

    def conjugate(self):
        return ComplexNumber(self.real, -self.imaginary)

if __name__ == "__main__":
    num1 = ComplexNumber(1.0, 2.0)
    num2 = ComplexNumber(3.0, 4.0)

    print("num1: ", num1)
    print("num2: ", num2)

    print("sum: ", num1 + num2)
    print("difference: ", num1 - num2)

    num3 = ComplexNumber.from_polar_coordinates(5.0, math.pi/4)
    print("num3 from polar: ", num3)
    print("conjugate of num1: ", num1.conjugate())
97
python
# Function that checks if a number is even and positive
def is_even_positive(num):
    return num > 0 and num % 2 == 0

# Test some numbers
numbers = [1, -3, 4, 7]
for num in numbers:
    print(f"Number {num} is even and positive: {'True' if is_even_positive(num) else 'False'}")
98
python
# Demonstrating the usage of 'and' operator
def is_positive(num):
    return num > 0

def is_even(num):
    return num % 2 == 0

number = int(input("Enter a number: "))
if is_positive(number) and is_even(number):
    print(f"The number {number} is positive and even.")
else:
    print(f"The number {number} is not positive and/or not even.")

# Demonstrating the usage of 'complex' data type
import cmath

real_part = 3.0
imaginary_part = 2.0
complex_num = complex(real_part, imaginary_part)

print("Real part:", real_part)
print("Imaginary part:", imaginary_part)
print("Complex number:", complex_num)
print("Conjugate of the complex number:", complex_num.conjugate())
print("Modulus (magnitude) of the complex number:", abs(complex_num))
print("Phase angle of the complex number:", cmath.phase(complex_num))
99
python
class MyClass:
    def __init__(self, a, b):
        self.a = a
        self.b = b
        self.c = 0

    def enable_c(self):
        self.c = 1

    def disable_c(self):
        delattr(self, 'c')

if __name__ == "__main__":
    obj = MyClass(1, 2)
    print("Initial state: a={}, b={}, c={}".format(obj.a, obj.b, hasattr(obj, 'c')))

    obj.enable_c()
    print("After enabling c: a={}, b={}, c={}".format(obj.a, obj.b, hasattr(obj, 'c')))

    obj.disable_c()
    print("After disabling c: a={}, b={}, c={}".format(obj.a, obj.b, hasattr(obj, 'c')))

# Output:
# Initial state: a=1, b=2, c=False
# After enabling c: a=1, b=2, c=True
# After disabling c: a=1, b=2, c=False
100
python
# Create a dictionary with some key-value pairs
my_dict = {
    "name": "John Doe",
    "age": 30,
    "is_student": False
}

# Use and operator to check if 'name' is 'John Doe' and 'age' is greater than 25
if my_dict["name"] == "John Doe" and my_dict["age"] > 25:
    print("Condition met!")
else:
    print("Condition not met.")

# Now let's check if the name is 'John Doe' and age is greater than or equal to 30 (or we can use 'is_student' as a condition)
if my_dict["name"] == "John Doe" and (my_dict["age"] >= 30 or not my_dict["is_student"]):
    print("Condition met!")
else:
    print("Condition not met.")
101
python
# Define a dictionary with some keys and values
my_dict = {
    'name': 'John Doe',
    'age': 30,
    'city': 'New York'
}

# Use an if statement with the 'and' keyword to check if a condition is met
if my_dict and 'name' in my_dict:
    print("The name is:", my_dict['name'])
else:
    print("Dictionary is empty or 'name' key is not present.")

# Use the dir() function to list all attributes and methods of an object or built-in functions
print("\nListing all attributes and methods of the dictionary object using dir():")
print(dir(my_dict))
102
python
# Define two variables
num1 = 10
num2 = 3

# Use the and operator to check if num1 is greater than 5 and num2 is even
if num1 > 5 and num2 % 2 == 0:
    print(f"{num1} is greater than 5 and {num2} is even")
else:
    print("Either num1 is less than or equal to 5 or num2 is odd")

# Use the divmod() function to find quotient and remainder of division of num1 by num2
quotient, remainder = divmod(num1, num2)

print(f"The quotient of {num1} divided by {num2} is {quotient} and the remainder is {remainder}")
103
python
# List of tuples representing student data
students_data = [("John Doe", 20, True), ("Jane Smith", 18, False), ("Mike Johnson", 22, True)]

# Function to check eligibility (age > 18 and is_student_active)
def check_eligibility(student):
    name, age, is_student_active = student
    return age > 18 and is_student_active

# Filter students based on given condition using filter and map along with enumerate
filtered_students = list(filter(check_eligibility, enumerate(students_data, 1)))

# print the name and index of eligible students
for index, student in enumerate(filtered_students):
    name, _ = student
    print(f"Student {index} is named {name}")
104
python
# This program checks if two numbers are within a certain range using and operator
def is_within_range(num, start, end):
 """
 :param num: The number to check.
 :param start: The minimum allowed value.
 :param end: The maximum allowed value.
 :return: True if the number is within the given range, False otherwise.
 """
 return start <= num <= end

# This program evaluates a simple arithmetic expression using eval() function
def calculate(expression):
 """
 :param expression: A string representing an arithmetic expression.
 :return: The result of the evaluation.
 """
 result = eval(expression)
 print(f"Result: {result}")
 return result

if __name__ == "__main__":
 # Check if a number is within the range (10, 20) using and operator
 num = int(input("Enter a number: "))
 if is_within_range(num, 10, 20):
 print("The number is within the range.")
 else:
 print("The number is not within the range.")

 # Evaluate an arithmetic expression using eval() function
 expression = input("Enter an arithmetic expression: ")
 calculate(expression)
105
python
# This program checks if both a number is even and greater than 5
number = 10
is_even = number % 2 == 0
is_greater = number > 5

if is_even and is_greater:
    print("The number is even and greater than 5.")
else:
    print("The number is not even or not greater than 5.")
106
python
# Define the list of numbers with their flags (odd or even)
numbers = [(2, True), (3, False), (5, True), (1, False), (6, True)]

# Filter out the numbers that are odd and have an even flag
filtered_numbers = filter(lambda x: x[0] % 2 == 0 and x[1], numbers)

# Convert the result to a list since filter returns an iterator
filtered_numbers = list(filtered_numbers)

print("Filtered Numbers:")
for number in filtered_numbers:
    print(number[0])

# And operator demonstration without using filter
even_odd, is_even = 7, True
if even_odd % 2 == 0 and is_even:
    print("7 is an even number")
else:
    print("7 is an odd number")
107
python
# Example 1: Using 'and' operator for Boolean expressions
def is_valid(age, height):
    # Check if age is greater than 18 and height is less than 5.5 (in meters)
    return age > 18 and height < 0.5

age = 25
height = 1.65
if is_valid(age, height):
    print("Valid")
else:
    print("Invalid")

# Example 2: Using 'and' operator with floating-point numbers
def is_number_close_to(num, target, tolerance=0.01):
    return abs(num - target) < tolerance

num = 3.14159
target = 3.14
if is_number_close_to(num, target):
    print("Number is close to the target")
else:
    print("Number is not close to the target")
108
python
# Define some variables
num1 = 5
num2 = 10
is_even_num1 = num1 % 2 == 0
is_even_num2 = num2 % 2 == 0

# Use and for conditional expressions
if is_even_num1 and is_even_num2:
    print("Both numbers are even.")
else:
    print("One or both numbers are odd.")

# Use format for string formatting
name = "John Doe"
age = 30
print("Name: {0} \nAge: {1}".format(name, age))
109
python
# Define two sets
set1 = {1, 2, 3, 4, 5}
set2 = {3, 4, 5, 6, 7}

# Perform set operations using 'and' keyword
# The '&' operator is equivalent to using 'and' for sets in Python
result1 = set1 & set2
print("Set intersection using 'and': ", result1)

# Create a frozenset from one of the sets
frozen_set = frozenset(set1)

# Compare the original set and the frozen set using 'and' keyword
result2 = frozen_set & set2
print("Set intersection using 'and' on frozen set: ", result2)

# Check if two sets are identical (using '==') and print result
if set1 == set2:
    print("Both sets are identical.")
else:
    print("Both sets are different.")
110
python
class MyClass:
    def __init__(self, a, b):
        self.a = a
        self.b = b
        self.c = None

    def method_1(self):
        return self.a + self.b

    def method_2(self):
        self.c = 42

def main():
    obj = MyClass(3, 5)
    
    # Check if 'obj' has both 'method_1' and 'method_2' attributes using getattr()
    if not (hasattr(obj, 'method_1') and hasattr(obj, 'method_2')):
        print("Error: Object does not have method_1 and method_2.")
        return
    
    # Call methods using getattr()
    print("Result of method_1():", getattr(obj, 'method_1')())
    getattr(obj, 'method_2')()
    print("Value of c after method_2() call:", obj.c)

if __name__ == "__main__":
    main()
111
python
# Define some global variables
x = 0
y = 0

def my_function():
    global x, y  # Declare x and y as global variables in this function
    x = 10
    y = 20

if x < 5 and y > 10:  # Logical AND operation between two conditions
    print("Condition is met")
else:
    print("Condition is not met")

my_function()  # Change the values of global variables x and y

if x < 5 and y > 10:  # Check conditions after changing the global variables
    print("New condition is met")
else:
    print("New condition is not met")

print("Global variables' values: x =", x, "and y =", y)
112
python
# Define a simple class MyClass
class MyClass:
    def __init__(self, value):
        self.value = value

# Create an instance of MyClass
my_instance = MyClass(5)

# Check if the instance has an attribute 'other' and its value is greater than 10
# using 'and' and 'hasattr' combination
if not hasattr(my_instance, 'other') or my_instance.other > 10:
    print("Condition met")
else:
    print("Condition not met")

# Set a new attribute 'other' on the instance with a value less than 10
my_instance.other = 5

# Check if the instance has an attribute 'other' and its value is greater than 10
# using 'and' and 'hasattr' combination (this time, the condition should not be met)
if not hasattr(my_instance, 'other') or my_instance.other > 10:
    print("Condition met")  # This will never print since we set other to 5 previously
else:
    print("Condition not met")
113
python
# Using 'and' operator to combine conditions
def is_even(num):
    return num % 2 == 0

def is_positive(num):
    return num > 0

if is_even(5) and is_positive(5):
    print("Number is even and positive")
else:
    print("Number is not even or not positive")
# Output: Number is even and positive

# Using 'hash' function to generate hash values
def my_hash(key):
    h = 5381
    for char in str(key):
        h = (h * 33) ^ ord(char)
    return h

key = "Python"
hash_value = my_hash(key)
print(f"Hash value of '{key}' is: {hash_value}")
# Output: Hash value of 'Python' is: 2146530822
114
python
# Define a function with some conditions
def my_function(a, b):
    if (a > 0) and (b > 0): # Using 'and' operator to check both conditions
        return "Both a and b are positive"
    else:
        return "Either a or b is not positive"

# Using help() function to get documentation of built-in functions
print(help(print)) # Prints the documentation for print() function
print(help(abs))  # Prints the documentation for abs() function
115
python
# Define two binary numbers as decimal integers
num1 = 0b1110  # binary number: 1110 = 14 in decimal
num2 = 0b1101  # binary number: 1101 = 13 in decimal

# Perform bitwise AND operation using the 'and' operator
result_bitwise = num1 & num2

# Print binary numbers and their bitwise AND result
print(f"Binary number 1: {bin(num1)[2:]} (decimal: {num1})")
print(f"Binary number 2: {bin(num2)[2:]} (decimal: {num2})")
print(f"Bitwise AND result: {bin(result_bitwise)[2:]} (decimal: {result_bitwise})")

# Convert decimal result to hexadecimal using the 'hex()' function
result_hex = hex(result_bitwise)

# Print hexadecimal representation of the bitwise AND result
print(f"Hexadecimal representation: 0x{result_hex}")
116
python
# Define two variables
num1 = 10
num2 = 20

# Use and operator for logical AND operation
print("num1 is greater than 5 and num2 is greater than 10:")
if (num1 > 5) and (num2 > 10):
    print(True)
else:
    print(False)

# Use id() to check the memory address of variables
print("\nMemory addresses of num1 and num2:")
print("Address of num1:", hex(id(num1)))
print("Address of num2:", hex(id(num2)))
117
python
# Get user input for two numbers
num1 = float(input("Enter first number: "))
num2 = float(input("Enter second number: "))

# Check if both numbers are positive using the and operator
if num1 > 0 and num2 > 0:
    print("Both numbers are positive.")
else:
    print("One or both of the numbers is not positive.")

# Perform an operation on the numbers if they are both positive
if num1 > 0 and num2 > 0:
    result = num1 + num2
    print(f"The sum of {num1} and {num2} is {result}.")
118
python
# This example checks if a number is positive and even
def is_positive_even(number):
    """
    This function checks if a given number is positive and even.
    :param number: An integer number.
    :return: True if the number is positive and even, False otherwise.
    """
    return number > 0 and number % 2 == 0

if __name__ == "__main__":
    num = int(input("Enter an integer: "))

    if is_positive_even(num):
        print(f"{num} is a positive even number.")
    else:
        if num > 0:
            print(f"{num} is a positive odd number or a negative number.")
        else:
            print(f"{num} is a negative even number.")
119
python
# Defining some functions and classes for this example
def is_positive(num):
    """ checks if a number is positive """
    return num > 0

class MyNumber:
    def __init__(self, value):
        self.value = value

    def is_positive(self):
        """ checks if an instance of MyNumber is positive """
        return self.value > 0

# Testing the usage of and and isinstance()
num1 = 5
num2 = -3
num3 = MyNumber(7)

# Using 'and' to combine conditions
if is_positive(num1) and (isinstance(num2, int) or isinstance(num2, float)):
    print("Both conditions are met")
else:
    print("At least one condition is not met")

if num3.is_positive() and isinstance(num3, MyNumber):
    print("Both conditions for 'MyNumber' instance are met")
120
python
# Defining some base classes
class BaseClass1:
    def __init__(self, value):
        self.value = value

class BaseClass2:
    pass

class DerivedClass(BaseClass1, BaseClass2):
    pass

# Function demonstrating the usage of and and issubclass
def check_inheritance(base1, base2, derived):
 if (isinstance(derived, base1) and issubclass(derived, base2)):
 print(f"Derived class '{derived.__name__}' is both an instance of {base1.__name__} and a subclass of {base2.__name__}")
 else:
 print(f"Derived class '{derived.__name__}' is not an instance of {base1.__name__} or a subclass of {base2.__name__}")

# Instantiating base classes and derived class
base1_instance = BaseClass1("Base1 value")
base2_instance = BaseClass2()
derived_instance = DerivedClass("Derived value")

# Calling check_inheritance function
check_inheritance(BaseClass1, BaseClass2, BaseClass1) # This should print: BaseClass1 is both an instance of BaseClass1 and a subclass of BaseClass2 (False due to type mismatch)
check_inheritance(BaseClass1, BaseClass2, DerivedClass) # This should print: Derived class 'DerivedClass' is both an instance of BaseClass1 and a subclass of BaseClass2
check_inheritance(BaseClass1, BaseClass2, BaseClass1) # This should print: BaseClass1 is both an instance of BaseClass1 and a subclass of BaseClass2 (False due to type mismatch)
121
python
import itertools

# Function to check if two numbers are even and positive
def is_even_and_positive(num1, num2):
 return (num1 > 0) and (num2 % 2 == 0)

# Generate all pairs of even and positive numbers from the given range
nums = list(range(1, 10))
evens = [x for x in nums if x % 2 == 0]
positives = [x for x in nums if x > 0]

# Use itertools.product() to generate all possible pairs of numbers from lists
pairs = list(itertools.product(evens, positives))

# Filter out the invalid pairs using the is_even_and_positive function
valid_pairs = [pair for pair in pairs if is_even_and_positive(*pair)]

print("Valid Pairs:")
for pair in valid_pairs:
 print(f"({pair[0]}, {pair[1]})")
122
python
# List of strings
my_list = ['apple', 'banana', '', 'orange']

# Condition with and and len()
if not (len(my_list) < 2 and my_list[-1] == ''):
    print("The list has more than one item and the last item is not empty.")
else:
    print("The list has less than two items or the last item is empty.")

# Output: The list has less than two items or the last item is empty.
123
python
# Define a list
numbers = [1, 2, 3, 4, 5]

# Set a condition with 'and'
condition = (len(numbers) > 0) and (numbers[0] > 3)

if condition:
    print("The first number is greater than 3 and the list has elements.")
else:
    print("Either the list is empty or the first number is less than or equal to 3.")

# Checking another condition with 'and' using two lists
list1 = [1, 2, 3]
list2 = [4, 5, 6]
condition = (len(list1) > 0) and (len(list2) > 0)

if condition:
    print("Both lists have elements.")
else:
    print("At least one of the lists is empty.")
124
python
def my_function(x, y):
    """
    This function checks if two numbers are equal and greater than 10.
    """
    if x > 10 and y > 10:
        print("Both x and y are greater than 10.")
        result = x + y
    else:
        print("Either x or y is not greater than 10.")
        result = None

    # Use locals() to print all local variables in the current scope.
    print("Local variables:")
    for key, value in locals().items():
        if key != "self":
            print(f"{key}: {value}")

    return result

if __name__ == "__main__":
    my_function(15, 20)
125
python
# Define a list of tuples with two integer elements
numbers = [(2, 3), (5, 7), (1, 9), (8, 2)]

# Function to check if first number is greater than 1 and second number is odd
def condition(num):
    first, second = num
    return first > 1 and second % 2 != 0

# Use map to apply the function on each tuple in the list
result = list(map(condition, numbers))

print("Numbers which satisfy the condition:")
print(result)
126
python
# Define some numbers
num1 = 5
num2 = 10
num3 = 15

# Use and to combine two conditions
if num1 > 2 and num2 > 4:
    print("Both num1 and num2 are greater than 2 and 4 respectively.")

# Use max to find the greatest number among three numbers
largest_number = max(num1, num2, num3)
print("The largest number among", num1, ",", num2, "and", num3, "is:", largest_number)
127
python
import numpy as np
128
python
# Define some variables
num1 = 5
num2 = 10
num3 = -3

# Use and operator to check if two conditions are true
if (num1 > 0) and (num2 > 0):
    print("Both num1 and num2 are positive")

# Use min function to find the minimum of three numbers
min_num = min(num1, num2, num3)
print("The minimum number is:", min_num)
129
python
# List of numbers
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]

# Filter function that checks if number is even
def is_even(number):
    return number % 2 == 0

# Iterator from filter function and list
iter_filtered = filter(is_even, numbers)

# Using 'and' to check conditions
print("Even numbers using 'and':")
try:
    even_number = next(iter_filtered)
    print(next(iter_filtered) if even_number and even_number > 0 else None)
except StopIteration:
    print("No even number greater than zero.")

# Using 'and' to combine conditions in a for loop
print("\nEven numbers using 'and' in for loop:")
for number in filter(lambda x: x % 2 == 0 and x > 0, numbers):
    print(number)
130
python
class MyClassA:
    def __init__(self, value_a):
        self.value_a = value_a

class MyClassB:
    def __init__(self, value_b):
        self.value_b = value_b

def main():
    obj_a = MyClassA(10)
    obj_b = MyClassB(20)

    # Using and operator with two boolean expressions
    result = (obj_a.value_a > 5) and (obj_b.value_b > 15)

    if result:
        print("Both conditions are true")
    else:
        print("At least one condition is false")

if __name__ == "__main__":
    main()
131
python
# Definition of binary numbers as decimal values
binary_number_1 = 0b1111  # equal to decimal number 15
binary_number_2 = 0b1010  # equal to decimal number 10

# Bitwise AND operation between two binary numbers
result_bitwise_and = binary_number_1 & binary_number_2
print("Result of bitwise AND: {0} (binary) = {1} (decimal)".format(bin(result_bitwise_and)[2:], result_bitwise_and))

# Converting an octal number to decimal
octal_number = 0o37  # equal to decimal number 23 + 7 = 30
decimal_number = int(oct(octal_number))
print("Decimal equivalent of {0} (octal) is: {1}".format(octal_number, decimal_number))
132
python
# Set file path and access conditions
file_path = "example.txt"
readable = True
writable = False

# Check if the file exists and is readable
if os.path.exists(file_path) and os.access(file_path, os.R_OK):
    # Open the file in read-only mode
    with open(file_path, 'r') as file:
        content = file.read()
        print("File contents:", content)
else:
    print("Error: File does not exist or is not readable")

# If the file is writable, you can also write to it
if writable and os.access(file_path, os.W_OK):
    with open(file_path, 'w') as file:
        new_content = "This is new content."
        file.write(new_content)
        print("File has been updated with new content.")
133
python
# This program checks if a character is an uppercase letter and alphabet, using and and ord()

def is_alpha_upper(character):
 """
 This function checks if given character is an uppercase alphabet.
 """
 return (ord(character) >= 65 and ord(character) <= 90) or (ord(character) >= 65 and ord(character) <= 90)

# Testing the function
for char in "ABCDEFGHIJKLMNOPQRSTUVWXYZ":
 print(f"The character {char} is an uppercase alphabet: {is_alpha_upper(char)}")

for char in "abcdefghijklmnopqrstuvwxyz1234567890!@#":
 print(f"The character {char} is an uppercase alphabet: {is_alpha_upper(char)}")
134
python
# Simple usage of 'and' keyword in if statement
num1 = 5
num2 = 10

if num1 > 0 and num2 > 0:
    print("Both numbers are positive.")
else:
    print("One or both numbers are not positive.")

# Usage of 'and' keyword with variables and constants
boolean_expression = (num1 > 0) and (num2 % 2 == 0)
if boolean_expression:
    print("Num1 is positive and Num2 is even.")
else:
    print("Condition is false.")

# Usage of 'pow' function to raise a number to an exponent
base = 2
exponent = 3
result = pow(base, exponent)
print(f"Result of {base} raised to the power of {exponent} is: {result}")
135
python
# Set some variables
num1 = 5
num2 = 10

# Use the 'and' operator to check if two conditions are true
if (num1 > 0) and (num2 > 0):
    print("Both numbers are positive.")

# Use the 'print()' function to display a message
print("The first number is: ", num1)
print("The second number is: ", num2)
136
python
class MyClass:
    def __init__(self, value1, value2):
        self.value1 = value1
        self.value2 = value2

    def __truthvalue__(self):
        if self.value1 and self.value2:
            return True
        else:
            return False

a = MyClass(True, True)
print(bool(a))  # Output: True

b = MyClass(False, True)
print(bool(b))  # Output: False

c = MyClass(False, False)
print(bool(c))  # Output: False
137
python
# Define a list of numbers
numbers = [1, 2, 3, 4, 5]

# Use range function to generate sequence of numbers
sequence = range(len(numbers))

# Iterate through the sequence and check conditions
for index in sequence:
    # Check if the current number is even and greater than 2
    if (numbers[index] % 2 == 0) and (numbers[index] > 2):
        print(f"The number {numbers[index]} satisfies the condition.")
138
python
# Define a list with some values
numbers = [1, 2, 3, 4, 5]

# Use the 'and' operator to check if a condition is true for all given expressions
print("Numbers greater than 3:")
for num in numbers:
    if num > 3:
        print(repr(num), end=" ")
        continue
    print(f"{num} is less than or equal to 3")
    break

# Use 'and' operator to combine two conditions
print("\nBoth conditions are true:")
x = 5
y = 10
if x > 3 and x < y:
    print("x is between 3 and y")
else:
    print("One or both conditions are false")

# Use 'repr()' function to print the string representation of an object
print("\nString representation using repr():")
my_string = "Hello, World!"
print(repr(my_string))
139
python
# Define a list of integers
numbers = [1, 2, 3, 4, 5]

# Use and operator to check if an element is even and greater than 3
print("Numbers in the list that are even and greater than 3:")
for num in numbers:
    if num > 3 and num % 2 == 0:
        print(num)

# Use reversed function to iterate through a list in reverse order
print("\nElements in the list 'numbers' in reverse order:")
for num in reversed(numbers):
    print(num)
140
python
# Define variables
num1 = 5.6234
num2 = 2
limit = 3

# Check if condition is true using and keyword
if num1 > 5 and num2 < 3:
    print("Condition 1 is true")
else:
    print("Condition 1 is false")

# Round a number using round() function
result = round(num1, 2)
print(f"Rounded value of num1 to 2 decimal places: {result}")

# Check if condition is true with rounding using and keyword
if round(num1, 2) > limit and num2 < 3:
    print("Condition 2 is true")
else:
    print("Condition 2 is false")
141
python
# Define two sets
set1 = {1, 2, 3, 4, 5}
set2 = {4, 5, 6, 7, 8}

# Use the and keyword to check if two elements are in both sets
if 4 in set1 and 5 in set2:
    print("Four and Five are in both sets")

# Create a new set that is the intersection of set1 and set2 using the & operator
intersection = set1 & set2
print("Intersection of set1 and set2:", intersection)

# Use the and keyword to check if an element is in both sets and also greater than 3
if 5 in set1 and 5 in set2 and 5 > 3:
    print("Five is in both sets and is greater than 3")

# Use the sets for membership testing with the in keyword
if 6 in set1 or 7 in set2:
    print("Either six or seven is in one of the sets")
142
python
# Define a class with some initial attributes
class MyClass:
    def __init__(self, name, age):
        self.name = name
        self.age = age

# Create an instance of the class
obj = MyClass("John Doe", 30)

# Use and to check multiple conditions
if obj.age > 25 and obj.age < 40:
    print("The person is in the desired age range.")

# Use setattr to dynamically set attributes
new_attribute = "greeting"
value = "Hello, I'm {}!".format(obj.name)
setattr(obj, new_attribute, value)

# Access the new attribute using getattr
print(getattr(obj, new_attribute))
143
python
# Define a list
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]

# Use and keyword for condition check
if (len(numbers) > 5) and (numbers[0] % 2 == 0):
    print("The list has more than 5 elements and the first element is even")
else:
    print("The conditions are not met")

# Use slicing to extract a subset of the list
start_index = 3
end_index = len(numbers)
sublist = numbers[start_index: end_index]
print("Sublist: ", sublist)
144
python
# List of numbers to be sorted
numbers = [5, 2, 8, 1, 6, 3]

# Using the 'and' keyword for condition checks
even_numbers = []
for number in numbers:
    if number % 2 == 0 and number > 1:
        even_numbers.append(number)

print("Even numbers greater than 1 are:", even_numbers)

# Using the 'sorted' keyword to sort a list
sorted_numbers = sorted(numbers)
print("Sorted list of numbers is:", sorted_numbers)
145
python
class MyClass:
    @staticmethod
    def static_method(a, b):
        """This method demonstrates the usage of @staticmethod"""
        return a > b and a > 0 and b > 0

    def __init__(self, num1, num2):
        self.num1 = num1
        self.num2 = num2

if __name__ == "__main__":
    # Calling static method on the class using class name
    print(MyClass.static_method(3, 5))

    # Creating an instance of MyClass and calling the same method on it
    my_instance = MyClass(10, -2)
    print(my_instance.static_method(10, -2))
    print(my_instance.static_method(10, 5))
    print(my_instance.static_method(5, 10))
146
python
def main():
    # Define some variables
    num1 = 5
    num2 = 10
    str1 = "Hello"
    str2 = "World"

    # Boolean expressions using and operator
    print("Expression 1: ", (num1 > 3) and (num2 < 20))
    print("Expression 2: ", ("Python" in str1) and ("Framework" not in str2))

    # Concatenating strings using + or the multiplication operator (*)
    print("Concatenated string using +: ", str1 + " " + str2)
    print("Concatenated string using *: ", str1 * 2 + str2 * 3)

if __name__ == "__main__":
    main()
147
python
# Define a list of numbers
numbers = [1, 2, 3, 4, 5]

# Use logical 'and' operation to check if a number is even and greater than 3
evens_greater_than_three = list(filter(lambda x: x % 2 == 0 and x > 3, numbers))
print("Even numbers greater than 3: ", evens_greater_than_three)

# Use mathematical 'sum' function to find the sum of all elements in a list
total = sum(numbers)
print("Sum of all numbers: ", total)
148
python
# Base class with a method
class Animal:
    def __init__(self, name, color):
        self.name = name
        self.color = color

    def make_sound(self):
        print("The animal makes a sound")

# Derived class 1 that overrides the method from the base class
class Dog(Animal):
    def __init__(self, name, color, breed):
        super().__init__(name, color)
        self.breed = breed

    def make_sound(self):
        print("The dog says: Woof!")

# Derived class 2 that also overrides the method from the base class
class Cat(Animal):
    def __init__(self, name, color, breed=None):
        super().__init__(name, color)
        self.breed = breed if breed else "unknown"

    def make_sound(self):
        print("The cat says: Meow!")

# Instantiating derived classes and calling methods
dog = Dog("Rex", "brown", "Labrador")
cat = Cat("Whiskers", "gray")

# Using and to combine conditions
print(dog.color == "brown" and dog.breed != None)  # This will print: True
print(cat.color == "gray" and cat.breed is not None)  # This will print: True

# Calling make_sound method on instances
dog.make_sound()
cat.make_sound()
149
python
# Define a tuple
numbers = (1, 2, 3, 4, 5)

# Use 'and' to check if multiple conditions are true
# In this case, we'll check if an number is in the tuple and if it's even
def is_even_in_tuple(number, given_numbers):
    return number in given_numbers and number % 2 == 0

# Test some numbers
print(is_even_in_tuple(2, numbers))  # True
print(is_even_in_tuple(1, numbers))  # False
print(is_even_in_tuple(3, numbers))  # False
print(is_even_in_tuple(4, numbers))  # True
150
python
# Define some variables
num1 = 5
num2 = 0
is_positive = True

# Use 'and' keyword to check if num1 is positive number and num2 is not zero
if (num1 > 0) and (num2 != 0):
    print("Numbers can be processed further.")
else:
    print("Error: Cannot process numbers with this condition.")

# Use 'type()' function to check types of variables
print("Type of num1 is:", type(num1))
print("Type of num2 is:", type(num2))
print("Type of is_positive is:", type(is_positive))
151
python
# Let's define some variables
var1 = 5
var2 = 10
var3 = 15

# A dictionary to store variable names as keys and their values as values
vars_dict = {
    'var1': var1,
    'var2': var2,
    'var3': var3
}

# Now let's write a function that checks if two variables have the same value using AND operator
def check_same_value(variable1, variable2):
    return variable1 == variable2

# Let's use items() to iterate through variables and their values in the dictionary
for var_name, var_value in vars_dict.items():
    next_var = vars_dict.get(var_name + '_next', None) # Get the next variable, if exists

    if check_same_value(var_value, next_var):
        print(f"{var_name} and {var_name+'_next'} have the same value.")
152
python
# Let's assume we have two lists:
list1 = [1, 2, 3, 4]
list2 = [5, 6, 7, 8]

# First, let's see how to use the 'and' keyword in Python:
# The 'and' keyword returns True only if both expressions are true.
print("List elements are equal using 'and':")
for i in range(len(list1)):
    if list1[i] == list2[i] and list1[i] > 3:
        print(f"Index {i}: List1[{i}] = {list1[i]} is equal to List2[{i}] = {list2[i]} and greater than 3.")

# Now, let's see how to use the 'zip' function:
print("\nList elements paired using 'zip':")
paired_elements = zip(list1, list2)
for pair in paired_elements:
    element1, element2 = pair
    print(f"Index 0: List1[{list1.index(element1)}] = {element1} and List2[{list2.index(element2)}] = {element2}")
153
python
import os

# Check if a file exists and is a regular file (not a directory)
file_path = "/path/to/your/file.txt"
if os.path.isfile(file_path) and os.path.isdir(file_path) is False:
    print("File exists and is a regular file.")
else:
    print("File does not exist or is a directory.")

# Use 'and' as a logical operator in a different context (comparing two conditions)
if 5 > 3 and "apple" in ["apple", "banana"]:
    print("Condition 1 is True and Condition 2 is True.")
else:
    print("At least one of the conditions is False.")
154
python
import sys

# Function to check if a number is positive
def is_positive(number):
    return number > 0

# Function to get command line arguments
def main():
    print("This program checks if all command line arguments are positive numbers.")

    try:
        for arg in sys.argv[1:]:
            if not is_positive(float(arg)):
                raise ValueError(f"{arg} is not a positive number.")
        print("All command line arguments are positive numbers.")
    except (ValueError, IndexError) as e:
        print(e)

if __name__ == "__main__":
    main()
155
python
import math

# Define some variables
num1 = 5
num2 = 3
boolean_expr1 = num1 > 0
boolean_expr2 = num2 > 0

# Perform some arithmetic operations using math module
addition = num1 + num2
subtraction = num1 - num2
multiplication = num1 * num2
division = num1 / num2
remainder = num1 % num2
square_num1 = math.pow(num1, 2)
square_root_num1 = math.sqrt(num1)

# Use and operator to check if both numbers are positive
if boolean_expr1 and boolean_expr2:
    print("Both numbers are positive.")
else:
    print("At least one number is not positive.")

print(f"Addition: {addition}")
print(f"Subtraction: {subtraction}")
print(f"Multiplication: {multiplication}")
print(f"Division: {division}")
print(f"Remainder: {remainder}")
print(f"Square of {num1}: {square_num1}")
print(f"Square root of {num1}: {square_root_num1}")
156
python
import random

# Define a function that returns a random number between two given numbers
def get_random_number(min, max):
    return random.randint(min, max)

# Generate two random numbers between 0 and 10
num1 = get_random_number(0, 10)
num2 = get_random_number(0, 10)

print("Random number 1: ", num1)
print("Random number 2: ", num2)

# Use the 'and' operator to check if both numbers are even
if (num1 % 2 == 0 and num2 % 2 == 0):
    print(f"Both numbers {num1} and {num2} are even")
else:
    print("At least one of the numbers is odd")
157
python
import datetime

# Define some variables
day = 3
month = 12
year = 2021
is_weekend = False

# Check if today is a weekend using datetime module
now = datetime.date.today()
today_is_weekend = (now.weekday() >= 5) # 5 and 6 corresponds to Saturday and Sunday in Python

# Combine conditions using 'and' keyword
if day == 1 and month in [11, 12] and year > 2020 and (is_weekend or not today_is_weekend):
    print("It's Thanksgiving Day!")
else:
    print("It's not Thanksgiving Day.")
158
python
import time

def is_even(number):
    """
    Check if a given number is even.
    :param number: An integer number
    :return: True if number is even, False otherwise
    """
    return number % 2 == 0

if __name__ == "__main__":
    start_time = time.time()

    number = int(input("Enter an integer number: "))

    if number > 0 and is_even(number):
        print(f"{number} is a positive even number.")
    elif number < 0 and is_even(abs(number)):
        print(f"{-number} is a negative even number.")
    else:
        print("Number is not even or not positive.")

    end_time = time.time()

    execution_time = end_time - start_time
    print(f"\nExecution Time: {execution_time:.10f} seconds")
159
python
import json

# Sample JSON data
data = '''
{
  "users": [
    { "name": "John", "age": 30, "is_active": true },
    { "name": "Jane", "age": 25, "is_active": false },
    { "name": "Doe", "age": 45, "is_active": true }
  ]
}
'''

# Parse JSON data
parsed_data = json.loads(data)

# Filter users based on condition
filtered_users = [user for user in parsed_data["users"] if user["age"] > 30 and user["is_active"] is True]

print("Users who are older than 30 and active:")
for user in filtered_users:
    print(f"Name: {user['name']}, Age: {user['age']}")
160
python
import csv

# Function to validate if a given number is even
def is_even(number):
 if number % 2 == 0:
 return True
 else:
 return False

# Function to validate if a given string is empty or not
def is_empty_string(string):
 if len(string) > 0:
 return False
 else:
 return True

# Function to read data from CSV file
def read_csv(file_path):
 try:
 with open(file_path, newline='') as csvfile:
 reader = csv.DictReader(csvfile)
 data = [row for row in reader]
 return data
 except FileNotFoundError:
 print("File not found")
 return []

# Function to write data into CSV file
def write_csv(data, file_path):
 fieldnames = ['id', 'name', 'age']
 try:
 with open(file_path, mode='w', newline='') as csvfile:
 writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
 writer.writeheader()
 writer.writerows(data)
 print("CSV file has been written successfully.")
 except IOError:
 print("An error occurred while writing CSV file.")

# Sample data to write into CSV file
sample_data = [{'id': 1, 'name': 'John', 'age': 20}, {'id': 2, 'name': 'Jane', 'age': 30}]

# Write sample data into CSV file
write_csv(sample_data, "output.csv")

# Read data from CSV file and perform validation
data = read_csv("output.csv")

valid_records = []
for record in data:
 if not is_empty_string(record['name']) and is_even(int(record['age'])):
 valid_records.append(record)

# Print valid records
print(valid_records)
161
python
# Import the sqlite3 library
import sqlite3

# Create a new database or connect to an existing one
def create_connection():
    conn = None
    try:
        conn = sqlite3.connect('mydatabase.db')
    except sqlite3.Error as e:
        print(e)

    return conn

# Create a table in the database if it doesn't exist
def create_table(conn):
    cursor = conn.cursor()
    query = """CREATE TABLE IF NOT EXISTS mytable (
                 id INTEGER PRIMARY KEY,
                 name TEXT NOT NULL,
                 age INTEGER,
                 city TEXT);"""

    cursor.execute(query)

# Insert some data into the table
def insert_data(conn):
    cursor = conn.cursor()

    data = [('John Doe', 30, 'New York'),
            ('Jane Doe', 25, 'Los Angeles'),
            ('Mike Brown', 45, 'Chicago')]

    query = '''INSERT INTO mytable VALUES (?, ?, ?, ?)'''
    for row in data:
        cursor.execute(query, row)

# Commit the transaction and close the connection
conn = create_connection()
create_table(conn)
insert_data(conn)
conn.commit()
conn.close()

# Query the database using SQL statements with logical AND operators
def query_data(conn):
    query = '''SELECT * FROM mytable WHERE age > 30 AND city = 'New York';'''

    conn = create_connection()
    cursor = conn.cursor()
    cursor.execute(query)

    rows = cursor.fetchall()

    for row in rows:
        print(row)

    conn.close()

# Run the query
query_data()
162
python
import re

def is_valid_email(email):
    # Regular expression pattern for valid email address
    regex = r"[^@]+@[^@]+\.[^@]+$"
    
    if re.match(regex, email):
        print(f'Valid Email: {email}')
        return True
    else:
        print("Invalid Email")
        return False
        
# Test cases
if __name__ == "__main__":
    test_cases = [
        "example@example.com",
        "username@subdomain.domain.co.uk",
        "invalid_email@example.com",
        "user+tag@example.com"
    ]
    
    for email in test_cases:
        is_valid_email(email)
163
python
import requests

# Example URL to check
url = "https://www.example.com"

# Using if statement with 'and' operator
if requests.get(url).status_code == 200 and "200 OK" in requests.get(url).reason:
    print(f"The website '{url}' is accessible and returns status code: 200")
else:
    print(f"Error accessing the website '{url}'. Check status code: {requests.get(url).status_code}")

# Using one-liner with 'and' operator
if (requests.get(url).status_code == 200) and ("200 OK" in requests.get(url).reason):
    print(f"The website '{url}' is accessible and returns status code: 200")
else:
    print(f"Error accessing the website '{url}'. Check status code: {requests.get(url).status_code}")
164
python
import urllib.request

# Define the URL you want to fetch
url = "https://example.com"

# Send the GET request using urllib and store the response in a variable
response = urllib.request.urlopen(url)

# Check if the status code is HTTP_OK (200), using 'and' operator
if response.getcode() == 200:
    print("Success! The URL {} returned HTTP status code: {}".format(url, response.getcode()))
else:
    print("Error! The URL {} returned HTTP status code: {}".format(url, response.getcode()))
    
# Always close the connection
response.close()
165
python
import pickle

# Define some data
data = {
    "name": "John Doe",
    "age": 30,
    "is_student": True
}

# Define a function that checks if person is student and above 18
def check_eligibility(person):
    return person["is_student"] and person["age"] > 18

# Check eligibility of data
if check_eligibility(data):
    print("The person is eligible.")
else:
    print("The person is not eligible.")

# Pickle the data
with open("data.pickle", "wb") as f:
    pickle.dump(data, f)

# Load pickled data
with open("data.pickle", "rb") as f:
    loaded_data = pickle.load(f)

# Check eligibility of loaded data
if check_eligibility(loaded_data):
    print("The loaded person is eligible.")
else:
    print("The loaded person is not eligible.")
166
python
import os
import subprocess

# Define the directory path
directory_path = "/path/to/your/directory"

# Check if directory exists
if os.path.isdir(directory_path):
    print(f"Directory '{directory_path}' exists.")
else:
    print(f"Directory '{directory_path}' does not exist.")
    
# If directory exists, execute a command using subprocess
if os.path.isdir(directory_path):
    # Define the command to run (in this example, we will execute 'ls' command)
    command = "ls"

    # Execute the command in the directory using subprocess
    process = subprocess.Popen(command, shell=True, cwd=directory_path)

    # Get the output of the command and print it
    output, error = process.communicate()
    if error is not None:
        print("Error occurred while executing command:", error.decode())
    else:
        print("Output of command 'ls' in directory '{directory_path}':")
        print(output.decode())
else:
    print("Directory does not exist, so no command execution.")
167
python
import argparse

# Create the argument parser
parser = argparse.ArgumentParser(description="Logical Conditions using argparse")

# Add arguments
parser.add_argument("arg1", help="First argument")
parser.add_argument("arg2", type=int, help="Second argument (must be an integer)")
parser.add_argument "--operation", "-o", type=str, required=True, help="Operation (+ or -)")

# Parse the arguments
args = parser.parse_args()

x = int(args.arg1)
y = args.arg2
operation = args.operation

if operation == "+":
    result = x + y
else:
    # only perform subtraction if the second argument is greater than the first one
    if x > y:
        result = y - x
    else:
        print("Error: Second argument must be greater than the first one")
        exit()

print(f"Result: {result}")
168
python
import logging

# Configure logging settings
logger = logging.getLogger(__name__)
formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
file_handler = logging.FileHandler("example.log")
file_handler.setFormatter(formatter)
stream_handler = logging.StreamHandler()
stream_handler.setFormatter(formatter)
logger.addHandler(file_handler)
logger.addHandler(stream_handler)
logger.setLevel(logging.INFO)

# Define a function to demonstrate the use of 'and' operator
def check_condition(num1, num2):
    if (num1 > 0 and num2 > 0):  # Check if both conditions are true
        result = num1 + num2
        logger.info("Both numbers are positive: Addition of {} and {} is {}".format(num1, num2, result))
    else:
        logger.warning("One or both numbers are non-positive")

# Test the function with some input values
check_condition(3, 4)
check_condition(-1, 2)
169
python
from flask import Flask, render_template, request, flash

app = Flask(__name__)

@app.route('/', methods=['GET', 'POST'])
def index():
    if request.method == 'POST':
        num1 = float(request.form.get('num1'))
        num2 = float(request.form.get('num2'))

        if num1 > 0 and num2 > 0:
            result = num1 + num2
            return render_template('index.html', result=result)
        else:
            flash('Both numbers must be positive!')

    return render_template('index.html')

if __name__ == '__main__':
    app.run(debug=True)
170
python
INSTALLED_APPS = [
    # ...
    'users',
]
171
python
import numpy as np

# Create two arrays with boolean values
arr1 = np.array([1, 0, 1, 0, 1])
arr2 = np.array([1, 1, 0, 1, 0])

# Use NumPy's where() function to get the elements that are in arr1 and arr2
mask = np.where(np.logical_and(arr1, arr2), arr1, arr1)

print("Array 1:")
print(arr1)
print("Array 2:")
print(arr2)
print("Mask (elements in both arrays):")
print(mask)

# Use Python's 'and' keyword for boolean logic with scalar values
x = 5
y = 10
z = x > 4 and y < 7

if z:
    print(f"{x} is greater than 4 and {y} is less than 7")
else:
    print("Either x is not greater than 4 or y is not less than 7")
172
python
import numpy as np

# Create two NumPy arrays
np_array1 = np.array([1, 2, 3, 4, 5])
np_array2 = np.array([6, 7, 8, 9, 10])

print("np_array1:")
print(np_array1)
print("\nnp_array2:")
print(np_array2)
173
python
import numpy as np
import matplotlib.pyplot as plt

# Define some data
x = np.linspace(-10, 10, 400)
y_sin = np.sin(x)
y_cos = np.cos(x)

# Create figures and subplots
fig, axs = plt.subplots(ncols=2, figsize=(12, 6))

# Plot sine function
axs[0].plot(x, y_sin, label='Sine')
axs[0].set_title('Sine Function')
axs[0].legend()
axs[0].grid()

# Plot cosine function
axs[1].plot(x, y_cos, label='Cosine')
axs[1].set_title('Cosine Function')
axs[1].legend()
axs[1].grid()

# Show the figures
plt.show()
174
python
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

# Generate random data using NumPy
np.random.seed(42)  # for reproducibility
data = np.random.randn(100, 2)

# Create a simple line plot using Seaborn
sns.set()
fig, ax = plt.subplots(figsize=(8, 6))
sns.lineplot(x=data[:, 0], y=data[:, 1], ax=ax)
sns.kdeplot(data[:, 0], data[:, 1], shade=True, color="grey", label="Density")
ax.set_title("Scatter plot with KDE Density Estimation")
ax.set_xlabel("X")
ax.set_ylabel("Y")
plt.legend()
plt.show()

# Create a joint-histogram using Seaborn
fig, ax = plt.subplots(figsize=(8, 6))
sns.jointplot(data[:, 0], data[:, 1], color="grey", kde=True)
ax.set_title("Joint Histogram with KDE Density Estimation")
ax.set_xlabel("X")
ax.set_ylabel("Y")
plt.show()
175
python
import numpy as np
import tensorflow as tf

# Logical operation using NumPy
np_arr1 = np.array([1, 0, 1, 1], dtype=np.float32)
np_arr2 = np.array([1, 1, 0, 1], dtype=np.float32)
and_np = np.logical_and(np_arr1, np_arr2)
print("Logical AND using NumPy:")
print(np_arr1)
print(np_arr2)
print(and_np)

# Building a simple neural network using TensorFlow
input_shape = (1, 4)
x = tf.keras.Input(shape=input_shape, name='input')
x = tf.keras.layers.Dense(32, activation='relu')(x)
y = tf.keras.layers.Dense(1, activation='sigmoid')(x)
model = tf.keras.Model(inputs=x, outputs=y)

# Logical operation using TensorFlow
@tf.function
def logical_and(arr1, arr2):
    return tf.logical_and(arr1, arr2)

np_arr1_tensor = tf.convert_numpy_to_tensor(np_arr1)
np_arr2_tensor = tf.convert_numpy_to_tensor(np_arr2)
result_tf = logical_and(np_arr1_tensor, np_arr2_tensor)
print("\nLogical AND using TensorFlow:")
print("np_arr1_tensor:", np_arr1_tensor.numpy())
print("np_arr2_tensor:", np_arr2_tensor.numpy())
print("result_tf:", result_tf.numpy())

# Compile and train the neural network
model.compile(optimizer='adam', loss='binary_crossent')
model.fit(np.expand_dims(np_arr1, axis=0), np.expand_dims(np_arr2, axis=0), epochs=50)
176
python
# Importing required libraries
import numpy as np
from keras.models import Sequential
from keras.layers import Dense

# Creating a simple dataset (you can replace it with your own)
x = np.random.rand(100, 2)
y = np.random.randint(2, size=(100,))

# Preprocessing the input data using one-hot encoding for target variable 'y'
y_onehot = np.eye(3)[np.reshape(y, (-1,1))]

# Building a neural network model
model = Sequential()
model.add(Dense(12, activation='relu', input_shape=(x.shape[1],)))
model.add(Dense(8, activation='relu'))
model.add(Dense(3, activation='softmax'))

# Compiling the model
model.compile(loss='categorical_crossent', optimizer='adam', metrics=['accuracy'])

# Training the model for 10 epochs
history = model.fit(x, y_onehot, epochs=10)

# Printing the final evaluation results
scores = model.evaluate(x, y_onehot)
print("%s: %.2f%%" % (model.metrics_names[1], scores[1]*100))
177
python
# Importing necessary libraries
import numpy as np
from sklearn import datasets, model_selection

# Generating a random dataset as an example
X = np.random.rand(100, 4)
y = np.random.randint(2, size=100)

# Creating a mask for demonstrating the logical 'and' operator
mask = (X[:, 0] > 0.5) and (X[:, 1] < 0.3)
print("Mask:")
print(mask)

# Applying this mask to X and y for filtering the data
X_filtered = X[np.where(mask)]
y_filtered = y[np.where(mask)]
print("Filtered Data:")
print(np.concatenate((X_filtered, np.ones((len(X_filtered), 1)) * y_filtered), axis=1))

# Applying Scikit-Learn for logical data processing and machine learning
# Splitting the dataset into training and testing sets
X_train, X_test, y_train, y_test = model_selection.train_test_split(X, y, test_size=0.3, random_state=42)

# Creating a custom boolean feature for demonstration
X_train['feature_boolean'] = (X_train[:, 1] > 0.4) & (X_train[:, 2] < 0.6)
X_test['feature_boolean'] = (X_test[:, 1] > 0.4) & (X_test[:, 2] < 0.6)

# Creating a decision tree classifier using the custom boolean feature
clf = model_selection.DecisionTreeClassifier()
clf.fit(X_train[['feature_boolean']], y_train)

# Predicting on test data using the trained classifier
y_pred = clf.predict(X_test[['feature_boolean']])
print("Predictions:")
print(np.concatenate((X_test[['feature_boolean']], np.ones((len(X_test), 1)) * y_pred), axis=1))
178
python
# First, you need to install the beautifulsoup4 library if not already installed
# You can install it using pip: `pip install beautifulsoup4 lxml` or BS4 for short

from bs4 import BeautifulSoup, Tag, UnicodeMarkup
import re

# Sample HTML file (save as 'sample.html' in the same directory)
#
179
python
from selenium import webdriver

# Set up the web driver
browser = webdriver.Chrome()

# Navigate to Google
url = "https://www.google.com"
browser.get(url)

# Search for a specific term
search_term = "Python Programming"
search_box = browser.find_element_by_name("q")
search_box.send_keys(search_term)
search_button = browser.find_element_by_name("btnK")
search_button.click()

# Check if the search result title contains the expected text using 'and' logic
title = browser.title
expected_text = "Python Programming"
if "Python Programming" in title and "Google Search" in title:
    print("Search result title matches expected text.")
else:
    print("Search result title does not match expected text.")

# Close the browser window
browser.quit()
180
python
import numpy as np
import torch

# Create NumPy arrays
np_arr1 = np.array([[1, 0, 1], [1, 1, 1]], dtype=bool)
np_arr2 = np.ones((2, 3), dtype=bool)

print("NumPy Array 1:")
print(np_arr1)
print("\nNumPy Array 2:")
print(np_arr2)

# Perform NumPy logical AND operation
np_and = np.logical_and(np_arr1, np_arr2)
print("\nNumPy Logical AND:\n")
print(np_and)

# Create PyTorch tensors from NumPy arrays
torch_arr1 = torch.from_numpy(np_arr1).float()
torch_arr2 = torch.from_numpy(np_arr2).float()

print("\nPyTorch Tensors:")
print("Tensor 1:")
print(torch_arr1)
print("Tensor 2:")
print(torch_arr2)

# Perform PyTorch element-wise AND operation
torch_and = torch.logical_and(torch_arr1, torch_arr2)
print("\nPyTorch Logical AND:\n")
print(torch_and)
181
python
from sqlalchemy import create_engine, Column, Integer, String, ForeignKey, and_, desc
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, relationship

Base = declarative_base()

class User(Base):
    __tablename__ = 'users'
    id = Column(Integer, primary_key=True)
    name = Column(String)
    age = Column(Integer)
    posts = relationship("Post", backref="author")

class Post(Base):
    __tablename__ = 'posts'
    id = Column(Integer, primary_key=True)
    title = Column(String)
    content = Column(String)
    user_id = Column(Integer, ForeignKey("users.id"))
    author = relationship("User")

def main():
    engine = create_engine('sqlite:///test.db', echo=True)

    Base.metadata.create_all(engine)

    Session = sessionmaker(bind=engine)
    session = Session()

    # Create operation
    new_user = User(name='John Doe', age=30)
    session.add(new_user)
    session.commit()

    print("New user created:")
    print(session.query(User).filter(User.id == new_user.id).first())

    # Read operation
    users = session.query(User).order_by(desc(User.age)).limit(2).all()
    for user in users:
        print(f"{user.name} ({user.age}): {[p.title for p in user.posts]}")

    # Update operation
    user = session.query(User).filter(User.name == 'John Doe').first()
    if user:
        user.age += 1
        session.commit()

    # Delete operation
    post = session.query(Post).filter(Post.title == "Old Post").first()
    if post:
        author = post.author
        session.delete(post)
        session.commit()
        print(f"Deleted post with title '{post.title}'")

if __name__ == '__main__':
    main()
