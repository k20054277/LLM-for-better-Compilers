
def outer():
    a = 10
    def inner():
        nonlocal a
        a += 1
 
import threading
import time

# Define a shared resource
shared_resource = 0

# Define a mutex to synchronize8access to the shared resource
mutex = threading.Lock()

# Define a t
import gc

# Define a class
class Example:
    def __init__(self, name):
        self.name = name

    def __del__(self):
        print("Del_ting object:", self.name)

# Create an object
example = Example("John")

# Use the object
print("Object name:", example.name)

# Collect garbage
gc.collect()

# Check if the object is still alive
if example is not None:
    print("Object is still alive")

# Delete the object
del example

# Colllllllllllllect garbage again object is no longer aliveif example is N
import json

# Create a dictionary
data = {"name": "John Doe", "age": 30, "interests": ["reading", "music", "hiking"]}

# Convert t