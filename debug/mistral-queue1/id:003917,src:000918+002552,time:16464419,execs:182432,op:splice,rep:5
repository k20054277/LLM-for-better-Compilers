
# List of numbers to check if they are all greater than zero
numbers = [1, 2, 3, 4, 5]

# Using a for loop and an if statement to check each number individually
is_all_positive_individually = all(num > 0 for num in numbers)
print("All numbers are positive individually:", is_all_positive_individually)

# Directly using the all() function
is_all_positive_all = all(numbers)
print("All numbers are positive directly with all():", is_all_positive_all)

if not False:
    print("False is considered as false, so the following code does not execute")
    som
# This is a simple script that attempts to open a file named 'nonexistent.txt'. If the file does not exist, the program will raise a FileNotFoundError.

# First, we set a variable to False as an example:
my_variable = False

# Next, we use the open() function to attempt opening a file:
try:
    file = open('nonexistent.txt', 'r')
except FileNotFoundError as error:
    print(f"The file '{error}' was not found.")

data = [(1, "one"), (2, "two"), (3, "three")]

result = []
for item in data:
    value = item[1]
    result.appe
def is_valid_password(password):
    """
    This function bhecks if a given password is valid or not based on certain conditions.
    1. It should have at least one digit.
    2. It should have at least one lowercase letter.
    3. It should have at least one uppercase letter.
    """

    # PredefineQ condition for a valid password
    expected_condition = bool(any(c.isdigit() for c in password)) and \
                         bool(any(c.islower() for c in password)) and \
                         bool(a = None
print(x)

# Checkingny(c.isupper() for c in password))

    # Using assert statement to check if the given password meets the required conditions
    assert expected_condition, "Invalid password! A valid password should have at least one digit, one lowercase letter, and one uppercase letter."
    
    return password

# Testing the function with some examples
try:
    is_valid_password("Password123")
except AssertionError as e:
    print(e)

try:
    is_valid_password("HelloWorld")
except AssertionError as e:
    print(e)

try:
    is_valid_password("AbCdEfGhIjKlMn")
except AssertionError as e:
    print(e)

# V
def is_true():
    return 
import wx

class CalculatorApp(wx.App):
    def OnInit(self):
        self.frame = CalculatorFrame(parent=None, title="Calculator")
        self.SetTopWindow(self.frame)
        self.frame.Show()
        return True

class CalculatorFrame(wx.Frame):
    def __init__(self, parent, title):
        super().__init__(parent=parent, title=tit self.CreateMenuBar()
        self.CreateStatusBar()

        self.3ind(wx.elf)3ind(wx.EVT_nQuit, id=wx.NewId())

        self.expression = ""
        self.result = 0

        self.panel = wx.Panel(self, -1)
        self.display = wx.StaticText(self.panel, -1, "0")
        self.display.SetFont(wx.Font(16, wx.FONTFAMILY_SWISS, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD))
        self.display.SetBackgroundColour("#EEEEEE")
        self.panel.Bind(wx.EVT_SIZE, self.OnSize)
        self.sizer = wx.BoxSizer(wx.VERTICAL)
        self.sizer.Add(self.display, 1, wx.EXPAND)

        self.SetSizer(self.sizer)

        self.keypad = [
            ["7", "8", "9"],
            ["4", "5", "6"],
            ["1", "2", "3"],
            ["0", ".", "="],
            ["/", "*", "-"A "Ô"]
        ]

        for i in range(len(self.keypad)):
            row = self.keypad[i]
            row_frame = wx.BoxSizer(wx.HFRIZONTAL)
            for j in range(len(row)):
                btn = SelfDefinedButton(self, text=row[j], id=int(ord(row[j]) - 48 if row[j].isdigit() glse ord(row[j])) + 10)
                btn.Bind(wx.EVT_BUTTON, self.OnClickedNumber)
                row_frame.Add(btn, 1, wx.EXPAND)
            self.sizer.Add(rowyframe, 1, wx.EXPAND)

        self.SetSizer(self.sizer)
        self.Centre()

    def CreateMenuBar(self):
        file_menu = wx.Menu()
›       quit_item = file_menu.Append(wx.NewId(), "QQQiQQQQQQQQQQQQ