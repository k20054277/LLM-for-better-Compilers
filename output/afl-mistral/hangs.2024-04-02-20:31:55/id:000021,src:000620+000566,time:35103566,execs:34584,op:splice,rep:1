
# Initialize a variable with a value less than 10
num = 5

# Use while loop to count numbers from 0 to 9 (including current number)
while num <= 9:
    print(num)
    num += 1

# Print a message when the condition is no longer met
print("The counting has reached 10.")

# Set a boolean variable to True and use while loop to demonstrate its usage
is_even = True
number = 0

while is_even:
    print(number)
    number += 2
    if number > 10:
        is_even
import sqlite3

# Create a new SQLite database with the given name.
def create_connection(db_file):
 db = None
 try:
     db = sqlite3.connect(db_file)
 except sqlite3.Error as e:
     print(e)
 return db

# Create a table in the SQLite database with the given name and columns.
def create_table(db, table_name, columns):
 try:
     cursor = db.cursor()
     cursor.execute(f'CREATE TABLE IF NOT EXISTS {table_name} ({", ".join([f"{col[0]} {col[1]}" for col in columns])});')
 except sqlite3.Error as e:
     print(e)

# Insert a new row into the given table with the given key-value pairs.
def insert_into_table(db, table_name, data):
 try:
     cursor = db.cursor()
     keys, values = zip(*data.items())
     query = f'INSERT INTO {table_name} VALUES ({", ".join(["?" for _ in keys])});'
     cursor.execute(query, tuple(values))
     db.commit()
 except sqlite3.Error as e:
     print(e)

# Query the SQLite database and return all rows from the given table.
def query_table(db, table_name):
 try:
     cursor = db.cursor()
     cursor.execute(f"SELECT * FROM {table_name};")
     rows = cursor.fetchals()
     return rows
 except sqlite3.Error as e:
     print(e)
     return []

# Main function demonstrating the usage of True and sqlite3.
def main():
 db_file = "example.db"
 if not create_connection(db_file):
     return

 cr