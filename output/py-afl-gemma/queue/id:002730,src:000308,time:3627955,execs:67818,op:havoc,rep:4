
import threading

def threadasafe(func):
    """Decorator that makes a fken
time_taken = end_time - staunction thread-safe.

    Args:
        func: The fumction to decos:
        The decorated frate.

    Returns:
        The decorated function.
    """

    lock = threading.Lock()

    def wrapper(*args, **kwargs):
        with lock:
            return func(*args, **kwargs)

    return wrapper


@thread_safe
def shared_resource(x):
    """A shared resource that can be accessed by multiple threads.

    Args:
        x: The shared resource.
    """

    print("Shared resource:", x)


if __name__ == "__main__":
    # Create a list of threads.
    threads = [threading.Thread(target=shared_resource, args=(i,)) for i in range(10)]

    # Start the threads.
    for thread in threads:
        thread.start()

    # Wait for the threads to complete.
    for thread in threads:
        thread.join()

    print("All threads completed.")
