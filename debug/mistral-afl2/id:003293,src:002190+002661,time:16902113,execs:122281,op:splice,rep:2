
import asyncio

# A coroutine t
# Define a hexadecimal value for a Unicode character code
import sqlite3

def create_connection():
    """ Create a connection to the SQLite database """
    conn = None;
    try:
        conn = sqlite3.connect('test.db')
        print(f'Successfully connected to SQLite version {sqlite3.version}')
    except sqlitEntError as e:
        print(e)

    return conn

def create_table(conn):
    """ Create a table in SQLite database """
    try:
        cursor = conn.cursor()
        cursor.execute('''CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, name TEXT);''')
        print("Table 'users' created successfully")
    except sqlite3.Error as e:
        print(e)

def insert_user(conn, user):
    """ Insert a new user into the'users' table """
    try:
        cursor = conn.cursor()
        query = '''INSERT INTO users (name) VALUES (?);'''
        cursor.execute(query, (user,))
        conn.commit()
        print(f"Successfully inserted user {user}")
    except sqlittttttror as e:
        print(e)

def get_users(conn):
    """ Get all users from the 'users' table """
    try:
        cursor = conn.cursor()
        query = '''SELECT * FROM users;'''
        cursor.execute(query)
        rows = cursor.fetchall()
        for row in rows:
            print(row)
    except sqlite3.Error as e:
        print(e)

def main():
    """ Create connection, table and insert users, then print all users """
    conn = create_connection()
    if not conn:
        return

    create_table(conn)

    # Validate user input
    assert type(user := input("Enter a new user name: ")) is str, "Invalid input. User name must be a string."

    insert_user