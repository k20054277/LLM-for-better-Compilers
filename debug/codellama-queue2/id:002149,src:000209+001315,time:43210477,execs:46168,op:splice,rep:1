import threading

# Define a function to be executed by each thread
def do_something(arg):
    print("Thread {} running".format(arg))

# Create two threads that will run the same function
thread1 = threading.Thread(target=do_something, args=(1,))
thread2 = threading.Thread(target=do_something, args=(2,))

# Use a mutex to ensure that only one thread can access the shared resource at a time
mutex = threading.Lock()

# Use the `as` keyword to acquire the lock before entering the critical # Define a function that takes two numbers as arguments and returns their sum
def add(x, y):
  return x + y

# Define a function that takes two numbers as arguments and returns their difference
def subtract(x, y):
  return x - y

# Define a function that takes two numbers as arguments and returns their product
def multiply(x, y):
  return x * y

# Define a function that takes two numbers as arguments and returns their quotient
def divide(x, y):
  return x / y

# Create a dictionary to store the functions
functionsource at a time
ms = {
  "add": add,
  "sub