
import ast

# Function to convert a list of integers to a string
def int_list_to_str(int_list):
    return '[' + ', '.join(map(str, int_list)) + ']'

# Function under test that converts an expression tree to a string
def expr_tree_to_str(node):
    if isinstance(node, ast.Number):
        return str(node.n)
    elif isinstance(node, ast.List):
        return '[' + ', '.join(map(expr_tree_to_str, node.els)) + ']'
    elif isinstance(node, ast.BinOp):
        left = expr_tree_to_str(node.left)
        right = expr_tree_to_str(node.right)
        return f'{left} {node.op} {right}'
    else:
        assert False, f"Unsupported node type: {type(node)}"

# Sample code to test the functions
code = '''\
a = [1, 2, 3]
b = [4, 5]
c = [a[0] + b[0], a[1] + b[1]]
result = [c[0] * 2, c[1] * 2]
'''

# Parse the code and create an expression tree
tree = ast.parse(code).body
assert isinstance(tree, ast.List), "Code is not a valid list expression"

# Convert the expression tree to a string
print("Expression Tree:")
print(ast.dump(tree))

print("\nString Representation of Expression Tree:")
print(expr_tree_to_str(tree))

# Convert the expression tree to an ASCII art representation
print("\nASCII Art Representation of Expression Tree:")
def print_ascii_tree(node, level=0):
    if isinstance(node, ast.List):
        print(f'{"[":^{level*3}}')
        for i, elem in enumerate(node.els):
            print_ascii_tree(elem, level+1)
        print(f'{"]":^{level*3}}')
    elif isinstance(node, ast.BinOp):
        op = {ast.Add:left_elem = nod: ' - ', ast.Mult: ' * '}[type(node.op)]
        left_elem = node.left if isinstance(node.left, ast.List) else f"'{str(node.left)}'"
        right_elem = node.right if isinstance(node.right, ast.List) else f"'{str(node.right)}'"
        print(f"{'   ':^{level*3}}{op}{left_elem}:{len(str(op)) + len(left_elem)+1:^{level*3}}{'   ':^{level*3}}{right_elem}")
        print_ascii_tree(node.right, level+1)
        print_ascii_tree(node.left, level+1)
    elif isinstance(node, ast.Number):
        print(f"{node.n:^{level*3}}")

print_ascii_tree(tree)
