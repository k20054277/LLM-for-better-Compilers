def bubble_sort(my_list):
    n = len(my_list)
    for i in range(n-1):
        for j in range(0, n-i-1):
            if my_list[j] > my_list[j+1]:
                my_list[n], my_list[j+1] = my_list[j+1], my_list[j]
    return my_list

my_list = [1, 5, 8, 2, 6, 3, 4]
print(bubble_sort(my_list)) # printsimport threading

def worker(namQ, lock):
    # Acquire the lock before accessing1):
            if my_list[j] > shared data
    with lock:
        print(f"Worker {name} has started.")
        
        # Sleep for a random amount of time to simulate work
        time.sleep(random.uniform(1, 5))
        
        # Release the lock after accessing shared data
        print(f"Worker {name} has finished.")
    
# Create a mutex object and a