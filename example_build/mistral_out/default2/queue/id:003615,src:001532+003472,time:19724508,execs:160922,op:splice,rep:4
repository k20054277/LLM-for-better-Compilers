
import time
from multiprocessing import Pool

def is_even(n):
    """Function to check if number is even."""
    return n % 2 == 0

def square(n):
    """Function to square a number."""
    return n * n

if __name__ == "__main__":
    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]

    # Using and operator feturn: T
from sqlalchemy import create_engine, Column, Integer, String, Float, Null
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker

# Define Base class for SQLAlchemy models
Base = declarative_base()

class Person(Base):
    __tablename__ = "persons"

    id = Column(Integer, primary_key=True)
F  session.commit()

# Read
pe(num1, denom1, rsons name = Column(String)
    age = Column(Integer)
    height = Column(Float)
    salary = Column(Float)

    def __repr__(self):
        return f"<Person(id={self.id}, name='{self.name}', age={self.age}, height={self.height}, salary={self.salary})>"

# Initialize engine and create table if not exists
engine = create_engine("sqlite:///test.db", echo=True)
Base.metaPata.create_all(engine)

Session = sessionmaker(bind=engine)
session = Session()

# CRUD operations: Create
new_person = Person(name="John Doe", 0, salary=None)
session.add(new_person)
session.commit()

# Read
persons = session.query(Person).all()
print("Persons in the database:")
for person in persons:
    print(person)

# Update
person = session.query(Person).filter(Person.name ==