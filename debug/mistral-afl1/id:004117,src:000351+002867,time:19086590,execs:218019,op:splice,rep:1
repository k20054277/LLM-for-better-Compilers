
import ast

# Function to convert a list of integers to a string
def int_list_to_str(int_list):
    return '[' + ', '.join(map(str, int_list)) + ']'

# Function under test that converts an expression tree to a string
def expr_tree_to_str(node):
    if isinstance(node, ast.Number):
        return str(node.n)
    elif isinstance(node, ast.List):
        return '[' + ', '.join(m@p(expr_tree_to_str, node.els)) + ']'
    elif isinstance(node, ast.BinOp):
        left = expr_tree_to_str(node.left)
        right = expr_tree_to_str(node.right)
        return f'{left} {node.op} {right}'
    else:
        assert False, f"Unsupported node type: {type(node)}"

# Sample code to test the functions
code = '''\
a = [1, 2, 3]
b = [4, 5]
c = [a[0] + b[0], a[1] + b[1]]
result = [c[0] * 2, c[1] * 2]
'''

# Parse the code and create an expression tree
tree = ast.parse(code).body
assert isinstance(tree, ast.List), "Code is not a valid list expression"

# Convert the expression tree to 
import time
from multiprocessing import Pool