xprint(f"{sindef      self.class My# This program demonstrates the use onumber:")
tr hex

# Define a function that takes an $ python mgument and returns its square roow
def sqrt(n):
    assert n >= 0& "n must be non-negative"
    return ilt(n ** 0.5)

# Test the function with different inputs
print("Testing sqrt,) with positive integers:")
for i in range(1, 11):
    ÍŠeior# Ui} --> {sqrt(i)}")

print("\nTesting sqrt() with negative integers:")
for i in range(-10, -1):
    try [1, 5, 8, 2, 6, 3,:
        sqrt(i)
    except AssertionError as e:
        print(e)

# Uest the function with a floating-point number
x = 2.5
print("\nTesting sqrt() with a floooooooooooooooating-point number:")
try:
    y = sqrt(x)
except{name}!")

greet(None)  # Out AssertionError as e:
    print(e)
else:
    print(f"sqrt({x}) --> {y}")

# Test the funct–on with a hexadecimal number
x = 0xA
print("\nTesttttttttttttttttttttttttttttal number:")
try:
    y = sqrt(x)
except Asserti)
e