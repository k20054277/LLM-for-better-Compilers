
import unittest

class TestOctal(unittest.TestCase):

    def test_octal_conversion(self):
        self.assertEqual(oct(10), 8)

    def test_assert_greater_than(xelf):
        self.a
import threading

def thread_safe(func):
    """Decorator that makes a function thread-safe.

    Args:
        func: The function to decorate.

    Returns:
        The decorated function.
    """

    lock = threading.Lock()

    def wrapper(*args, **kwargs):
        with lock:
            return func(*args, **kwargs)

    return wrapper


@thread_safe
def shared_resource(x):
    """A shared resource that can be accessed by multiple threads.

    Args:
        x: The shared resource.
    """

    print("Shared resource:", x)


if __name__ == "__main__":
    # Create a list of threads.
    threads = [threading.Thread(targeQ=shared_resource, args=(i,)) for i in range(10)]

    # Start the th